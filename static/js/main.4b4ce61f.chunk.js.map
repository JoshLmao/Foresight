{"version":3,"sources":["serviceWorker.js","enums/attributes.js","utility/dataHelperHero.js","reducers/initialState.js","utils.js","reducers/hero.js","constants/actionTypes.js","enums/languages.js","reducers/language.js","store/index.js","reducers/enemy.js","components/LanguageSelect/LanguageSelect.jsx","components/LanguageSelect/index.js","components/Navigation/Navigation.jsx","components/Navigation/index.js","components/FourOhFour/index.js","components/FourOhFour/FourOhFour.jsx","utility/data-helpers/language.js","enums/abilities.js","utility/dataHelperAbilities.js","utility/dataHelperItems.js","utility/dataHelperTalents.js","utility/calculate.js","components/Abilities/DamageOutput.jsx","components/Abilities/Cooldown.jsx","components/Abilities/ManaCost.jsx","components/Abilities/AbilityDetails.jsx","components/Abilities/Abilities.jsx","components/Abilities/index.js","utility/spriteHelper.js","components/ItemsBar/ItemSelector.jsx","enums/items.js","components/ItemsBar/ItemInfoTooltip.jsx","components/ItemsBar/Item.jsx","components/Neutral/NeutralItemSelector.jsx","components/Neutral/index.js","components/Neutral/Neutral.jsx","components/ItemsBar/ItemsBar.jsx","components/ItemsBar/index.js","components/Attributes/Attributes.jsx","components/Attributes/index.js","components/Statistics/Statistics.jsx","components/Statistics/index.js","components/ChangeHeroBtn/HeroSelector.jsx","components/ChangeHeroBtn/index.js","components/ChangeHeroBtn/ChangeHeroBtn.jsx","components/TalentTree/TalentRow.jsx","components/TalentTree/index.js","components/TalentTree/TalentTree.jsx","components/HealthManaBar/index.js","components/HealthManaBar/HealthManaBar.jsx","components/LevelSelector/LevelSelector.jsx","components/LevelSelector/index.js","components/Calculator/Calculator.jsx","components/EnemyHero/EnemyHero.jsx","components/Calculator/index.js","components/Home/index.js","components/Home/Home.jsx","components/App/index.js","components/App/App.jsx","index.js"],"names":["Boolean","window","location","hostname","match","EAttributes","getSpecificAttributeStats","specificAttribute","heroInfo","basePrimary","primaryPerLevel","parseInt","AttributeBaseStrength","parseFloat","AttributeStrengthGain","AttributeBaseAgility","AttributeAgilityGain","AttributeBaseIntelligence","AttributeIntelligenceGain","console","error","base","perLevel","getHeroTalents","keys","Object","talents","i","length","includes","ability","push","mappedTalents","lvlRow","lvl","rightTalent","leftTalent","sort","a","b","getAllHeroAbilities","abilities","getPrimaryAttribute","hero","AttributePrimary","initialState","selectedHero","DOTAHeroes","npc_dota_hero_zuus","selectedHeroName","heroAbilities","heroTalents","selectedTalents","heroLevel","items","slot","item","backpack","neutralItem","lang","stringsAbilities","EngAbilStrings","stringsDota","EngDotaStrings","selectedEnemyHero","npc_dota_hero_target_dummy","selectedEnemyHeroName","modelString","dashSplit","split","parseNameFromModel","Model","enemyHeroTalents","enemyHeroAbilities","selectedEnemyTalents","enemyHeroItems","replaceUpdatedItem","itemArray","newItem","newArray","filter","val","extra","getNewTalentArray","talentArray","newTalent","map","value","removeTalent","unselectedTalent","talent","reducer","state","action","type","log","ELanguages","SCHINESE","ENGLISH","getAbilityStrings","langCode","SChineseAbilStrings","getGeneralStrings","SChineseDotaStrings","allReducers","combineReducers","language","enemy","store","createStore","LanguageSelect","props","onLanguageChanged","bind","event","newLanguage","target","this","dispatch","Form","Control","as","onChange","defaultValue","values","key","Component","connect","pkg","require","Navigation","Navbar","Container","Brand","to","Link","Nav","className","style","fontSize","eventKey","disabled","version","dotaVersion","Toggle","aria-controls","Collapse","id","href","Button","variant","icon","faGithub","FourOhFour","getLocalizedString","localeStrings","string","Tokens","replaceStringValue","replace","EDamageType","EAbilityBehaviour","ESpellImmunityType","getAbilityInfoFromName","abilityName","DOTAAbilities","tryGetAbilitySpecialAbilityValue","specialValueKey","abilityLevel","abilityInfo","specialValue","getAbilitySpecialAbilityValue","specialAbilityKey","AbilitySpecial","matchingKey","find","element","specialAbilityInfo","dataValue","var_type","parseAbilityValueByLevel","level","abilValue","splitValues","isCooldownTalent","isTalent","isDamageTalent","isCastRangeTalent","lowerCasePhrase","abilityString","DOTAEngAbilityStrings","toLowerCase","tryParseAbilitySpecialValue","abilSpecialinfo","getItemInfoFromName","itemName","DOTAItems","getItemSpecialAbilityValue","itemInfo","specialAbilityValueKey","tryGetItemSpecialValue","tryGetNeutralSpecialValue","neutral","foundNeutralInfo","primaryAttributeToItemBonusKey","primaryAttr","itemsContainsScepter","allItems","tryGetItemInfoValue","itemInfoKey","infoValue","convertItemDescToHtml","itemDescString","dataString","replaceRegex","phrase","infoKey","join","specialAbilityValue","replaceStringWithDataValues","engSplitString","localizedSplit","totalHtmlSections","section","position","right","AbilityManaCost","AbilityCooldown","faClock","dangerouslySetInnerHTML","__html","ItemQuality","tryGetTalentSpecialAbilityValue","talentInfo","calculateHealth","baseStrength","strengthGain","baseHealth","npc_dota_hero_base","StatusHealth","totalHealth","bonusHealth","bonusStr","bonusAllStats","toFixed","calculateMana","baseInt","intGain","baseMana","StatusMana","totalMana","bonusMana","bonusInt","calculateHealthRegen","totalHpRegen","StatusHealthRegen","regenAmt","bonusHealthRegen","bonusRegen","calculateManaRegen","totalManaRegen","StatusManaRegen","totalManaRegenPercentAmp","bonusManaRegen","bonusIntellect","regenPerCharge","charges","manaRegenAmp","manaRegen","calculateTotalSpellAmp","totalSpellAmp","ampTalent","name","spellAmpInfo","foundNeutral","spellAmpAmount","ampPerCharge","calculateStatusResist","totalStatusResist","statusResistAmount","calculateMagicResist","resistanceBonuses","MagicalResistance","baseResist","magicResistAmount","edited","total","calculateEvasion","totalEvasion","bonusEvasion","evasionAmount","calculateRightClickDamage","heroMainAttribute","atkMin","AttackDamageMin","atkMax","AttackDamageMax","primaryAttributeStats","totalPrimaryAttribute","totalAdditional","allAttrKeys","bonusPrimaryAttr","bonusPrimaryStat","bonusDmg","allStats","min","max","Math","floor","additional","calculateAttackTime","totalAttackSpeed","BaseAttackSpeed","agiStats","totalAgi","bonusAttackSpeed","bonusAgility","attacksPerSec","atkSpeed","attackTime","attacksPerSecond","attackSpeed","calculateSpellDamage","abilityDamageInfo","abilityDmg","damage","isPercent","AbilityDamage","dmgValue","specialAbilityElement","lowerKey","getAbilityOutputDamage","totalSpellAmpPercent","talentBonus","spellAmp","bonusSpellAmp","chargeCount","neutralInfo","special","bonus_spell_amp","spell_amp","ampTalentValue","linkedAbility","spellDamage","totalAbilDmg","abilityDamage","calculateAbilityCooldown","cooldown","fixedAmtReductionSeconds","AbilityCharges","AbilityChargeRestoreTime","includePhrase","getIncludesAbilitySpecialAbilityValue","allReductions","bonusCooldown","amount","source","reduction","totalCooldown","sourceOfReductions","decimal","calculateMoveSpeed","baseSpeed","MovementSpeed","flatBonus","moveSpeed","bonusMovement","moveSpeedPercentBonus","bonusMoveSpeed","bonusSpeed","calculateAttackRange","isHeroRanged","AttackCapabilities","totalAttackRange","AttackRange","baseRange","rangeBonus","bonusAttackRange","calculateAttribute","attribute","attributeStats","strengthPerLevel","totalAttribute","additionalAttribute","bonusAgi","calculateAbilityCastRange","baseCastRange","AbilityCastRange","foundRange","RequiresScepter","getAbilitySpecialCastRangeValue","totalBonusRange","getAbilityNameFromStrings","strings","languageStrings","stringKey","matchingKeys","tryGetLocalizedString","DamageOutput","levelInfo","abilityStrings","dotaStrings","prevProps","setState","abilityKey","abilInfo","abilLvl","parseDamage","Cooldown","abilityCooldown","updateCooldown","currentCooldownInfo","title","faCircle","ManaCost","updateMana","manaCost","totalManaCostReducePercent","manaCostReduceAmount","costReductionAmount","reduceAmount","calculateManaCost","height","width","backgroundColor","TypeValueUI","AbilityDetails","abilityBehaviours","castRange","castRangeAmt","valuesInformation","abilitySpecials","specialInfo","abilitySpecialKeys","translationKey","getAbilitySpecialExtraValues","behaviours","AbilityBehavior","targeting","splitBehaviours","AbilityUnitDamageType","dmgTypeVal","splitDmgTypes","SpellImmunityType","pierceValue","getAbilityBehaviours","index","toUpperCase","getLevelInfo","abil","Abilities","abils","filterAbilities","abilLevels","heroName","abilityLevels","displayDamage","onLevelChanged","e","tagName","parentElement","levelIndex","dataset","lvlindex","targetLevel","btnindex","Row","abilVal","IsGrantedByScepter","Col","ID","maxWidth","maxHeight","src","alt","md","abilityIndex","maxLvl","AbilityType","MaxLevel","html","onClick","data-lvlindex","data-btnindex","getAbilityLevel","getItemIcon","scale","shift","filterItemName","data-item","transform","transformOrigin","display","getItemsByQuality","itemsArray","matchArray","quality","ItemIcon","keyName","TabHeading","text","ItemSelector","selectableItems","ItemIsNeutralDrop","IsObsolete","basicItems","upgradesItems","queryItems","onSelectedItem","onSearchChanged","onSearchItemSelected","onShopItemSelected","onRemoveItemSelected","query","filteredItems","localizedName","indexOf","placeholder","faMinus","ListGroup","Item","Tabs","defaultActiveKey","transition","Tab","EDisassembleRule","EItemQuality","ItemInfoTooltip","itemStats","statistics","getItemStatistics","loreString","descString","descFiltered","ItemCost","faCampground","faHome","splitCompare","localized","toString","localizeString","splice","replaceItemStatLocalizeString","cost","calculateItemSellCost","eDisassembleRule","ItemDisassembleRule","isDissassembleRule","isBackpack","onItemChanged","onItemExtraChanged","itemExtra","onBloodstoneChargesChanged","setCharges","ItemInitialCharges","open","newVal","newChargeAmt","trigger","isOpen","zIndex","faInfo","hoverOpen","on","contentStyle","overflowY","padding","border","ItemRequiresCharges","itemRequiresCharges","top","left","size","textAlign","background","color","NeutralItemSelector","allNeutrals","selectableNeutrals","itemKey","getAllNeutrals","queryNeutrals","iconScale","onNewNeutralSelected","onNeutralSelected","filteredNeutrals","data-neutral","Neutral","ItemsBar","onNeutralChanged","onItemExtraChnaged","onItem","Attribute","isPrimaryAttribute","perLevelString","per","Attributes","strengthStats","agilityStats","intStats","StatArray","stats","formatAttackMinMax","standardAtkDmg","dmgString","formatAttackTime","attackInfo","Statistics","updateStatistics","totalArmor","armor","ArmorPhysical","bonusArmor","calculateMainArmor","physResist","abs","attackRange","physicalResist","magicResist","statusResist","evasion","neutrak","healthRegen","HeroSelector","selectableHeroes","workshop_guide_name","displayName","alias","NameAliases","getAllPlayableHeroes","filteredHeroes","allHeroes","onSelectedHero","heroes","searchTerm","localizedHeroName","faSearch","data-heroname","data-hero","ChangeHeroBtn","onSelectHero","onToggleHeroSelect","faPencilAlt","isTalentSelected","TalentRow","onTalentSelected","onTalentUnselected","onSelectTalent","getTalentDisplayName","selectedTalent","getTalentInfoFromName","data-talent","TalentTree","findSelectedTalent","matchTalent","HealthManaBar","maxHealth","maxMana","updateBar","ModifyBtn","LevelSelector","onHeroLevelChanged","onIncrementHeroLevel","onDecrementHeroLevel","onLvlInputChanged","newLevel","Calculator","buildName","buildCreator","openBuildShare","loadedFromParams","onHeroSelected","onItemSelected","onShareBuild","onBuildNameChanged","onBuildCreatorChanged","search","buildData","URLSearchParams","get","decoded","Base64","decode","buildObject","JSON","parse","creator","build","str","stringify","encoded","encode","copy","fluid","faChevronUp","faChevronDown","plaintext","readonly","faShare","Home","redirect","onGoToCalc","App","exact","path","component","app","StrictMode","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.4b4ce61f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// Enum of all attributes contained within npc_heroes\r\nexport const EAttributes = {\r\n    ATTR_STRENGTH: \"DOTA_ATTRIBUTE_STRENGTH\",\r\n    ATTR_AGILITY: \"DOTA_ATTRIBUTE_AGILITY\",\r\n    ATTR_INTELLIGENCE: \"DOTA_ATTRIBUTE_INTELLECT\"\r\n};","// * Helper and utility functions to provide for retrieving data from \"npc_heroes.json\"\r\n// * \r\n\r\nimport { EAttributes } from \"../enums/attributes\";\r\n\r\nimport { DOTAHeroes } from \"../data/dota2/json/npc_heroes.json\";\r\n\r\n/// Get the base and per level stats of a heroes primary attribute\r\nexport function getPrimaryAttributeStats(heroInfo) {\r\n    if (heroInfo && heroInfo.AttributePrimary) {\r\n        return getSpecificAttributeStats(heroInfo.AttributePrimary, heroInfo);\r\n    } else{\r\n        return null;\r\n    }\r\n}\r\n\r\n/// Get the base and per level stats of a specific attribute\r\nexport function getSpecificAttributeStats(specificAttribute, heroInfo) {\r\n    var basePrimary = 0;\r\n    var primaryPerLevel = 0;\r\n\r\n    switch(specificAttribute) {\r\n        case EAttributes.ATTR_STRENGTH:\r\n            {\r\n                basePrimary = parseInt(heroInfo.AttributeBaseStrength);\r\n                primaryPerLevel = parseFloat(heroInfo.AttributeStrengthGain);\r\n                break;\r\n            }\r\n        case EAttributes.ATTR_AGILITY:\r\n            {\r\n                basePrimary = parseInt(heroInfo.AttributeBaseAgility);\r\n                primaryPerLevel = parseFloat(heroInfo.AttributeAgilityGain);\r\n                break;\r\n            }\r\n        case EAttributes.ATTR_INTELLIGENCE:\r\n            {\r\n                basePrimary = parseInt(heroInfo.AttributeBaseIntelligence);\r\n                primaryPerLevel = parseFloat(heroInfo.AttributeIntelligenceGain);\r\n                break;\r\n            }\r\n        default:\r\n            console.error(`Unable to get attribute stats because of unknown specific attribute '${specificAttribute}'`);\r\n    }\r\n    \r\n    return {\r\n        base: basePrimary,\r\n        perLevel: primaryPerLevel,\r\n    };\r\n}\r\n\r\n/// Gets all hero talents from a hero info\r\nexport function getHeroTalents (heroInfo) {\r\n    // Get simple array of all talents from npc_heroes.json\r\n    // All abilities are stored in npc_heroes.json as \"Ability?\", where ? is a number. \r\n    // Not always in numberical order like 1, 2, 3\r\n\r\n    var keys = Object.keys(heroInfo);\r\n    var talents = [];\r\n    for(var i = 0; i < keys.length; i++) {\r\n        if (keys[i].includes(\"Ability\") && !keys[i].includes(\"AbilityDraft\")) {\r\n            var ability = heroInfo[keys[i]];\r\n            if (ability && typeof ability === \"string\") {\r\n                if (ability !== \"generic_hidden\" && ability.includes(\"special_bonus\")) {\r\n                    talents.push(ability);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // sort into nice list\r\n    var mappedTalents = [];\r\n    var lvlRow = 0;\r\n    for (i = 0 ; i < talents.length; i += 2) {\r\n        mappedTalents.push({\r\n            lvl: 10 + (5 * lvlRow),\r\n            rightTalent: talents[i],\r\n            leftTalent: talents[i + 1]\r\n        });\r\n\r\n        lvlRow++;\r\n    }\r\n\r\n    // Sort by lvl 25 talents first\r\n    mappedTalents.sort((a, b) => a.lvl < b.lvl ? 1 : -1);\r\n\r\n    return mappedTalents;\r\n}\r\n\r\n/// Gets all hero abilities from a hero info\r\nexport function getAllHeroAbilities (heroInfo) {\r\n    var keys = Object.keys(heroInfo);\r\n    var abilities = [];\r\n    for(var i = 0; i < keys.length; i++) {\r\n        if (keys[i].includes(\"Ability\") && !keys[i].includes(\"AbilityDraft\")) {\r\n            var ability = heroInfo[keys[i]];\r\n            if (ability && typeof ability === \"string\") {\r\n                if (ability !== \"generic_hidden\" && !ability.includes(\"special_bonus\")) {\r\n                    abilities.push(ability);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return abilities;\r\n}\r\n\r\n/// Returns the base hero information that all heroes are based on\r\nexport function getDotaBaseHero () {\r\n    return DOTAHeroes?.npc_dota_hero_base;\r\n}\r\n\r\n/// Gets the hero's primary attribute as the EAttribute enum\r\nexport function getPrimaryAttribute (hero) {\r\n    switch(hero.AttributePrimary) {\r\n        case EAttributes.ATTR_STRENGTH:\r\n            return EAttributes.ATTR_STRENGTH;\r\n        case EAttributes.ATTR_AGILITY:\r\n            return EAttributes.ATTR_AGILITY;\r\n        case EAttributes.ATTR_INTELLIGENCE:\r\n            return EAttributes.ATTR_INTELLIGENCE;\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\nexport function getAllPlayableHeroes() {\r\n    // Filter and remove any unwanted heroes\r\n    let selectableHeroes = Object.keys(DOTAHeroes).filter((value) => {\r\n        var key = value.toLowerCase();\r\n        if (key !== \"version\" && key !== \"npc_dota_hero_base\" && key !== \"npc_dota_hero_target_dummy\") {\r\n            return true;\r\n        }\r\n        return false;\r\n    })\r\n    // Map only necessary data\r\n    selectableHeroes = selectableHeroes.map((key) => {\r\n        if (DOTAHeroes[key].workshop_guide_name) {\r\n            return {\r\n                displayName: DOTAHeroes[key].workshop_guide_name,\r\n                name: key,\r\n                alias: DOTAHeroes[key].NameAliases ? DOTAHeroes[key].NameAliases.split(',') : null,\r\n            };\r\n        }\r\n    });\r\n    // sort by name property\r\n    selectableHeroes.sort((a, b) => (a.name > b.name) ? 1 : -1);\r\n    return selectableHeroes;\r\n}","import { DOTAHeroes } from \"../data/dota2/json/npc_heroes.json\";\r\nimport { lang as EngAbilStrings } from \"../data/dota2/languages/abilities_english.json\";\r\nimport { lang as EngDotaStrings } from \"../data/dota2/languages/dota_english.json\";\r\n\r\nimport {\r\n    parseNameFromModel,\r\n} from \"../utils\";\r\nimport {\r\n    getAllHeroAbilities,\r\n    getHeroTalents,\r\n} from \"../utility/dataHelperHero\";\r\n\r\nconst initialState = {\r\n    /// Current selected hero info by the user\r\n    selectedHero: DOTAHeroes.npc_dota_hero_zuus,\r\n    /// Internal string name of the hero\r\n    selectedHeroName: \"npc_dota_hero_zuus\",\r\n    /// Array of abilities of the selectedHero\r\n    heroAbilities: getAllHeroAbilities(DOTAHeroes.npc_dota_hero_zuus),\r\n    /// Array of talents of the selectedHero\r\n    heroTalents: getHeroTalents(DOTAHeroes.npc_dota_hero_zuus),\r\n    /// Array of talents selected by the user\r\n    selectedTalents: [ ],\r\n    /// Current level of the hero set by the user\r\n    heroLevel: 1,\r\n\r\n    /// Current items that have been selected\r\n    items: [\r\n        { slot: 0, item: \"item_mjollnir\" },\r\n        { slot: 1, item: \"\" },\r\n        { slot: 2, item: \"\" },\r\n        { slot: 3, item: \"\" },\r\n        { slot: 4, item: \"\" },\r\n        { slot: 5, item: \"\" },\r\n    ],\r\n    /// Current backpack selected by user\r\n    backpack: [\r\n        { slot: 0, item: \"\" },\r\n        { slot: 1, item: \"\" },\r\n        { slot: 2, item: \"\" },\r\n    ],\r\n    /// Current neutral item selected by user\r\n    neutralItem: { item: \"item_spell_prism\" },\r\n\r\n    // Current code of the selected UI language\r\n    lang: \"en\",\r\n    stringsAbilities: EngAbilStrings,\r\n    stringsDota: EngDotaStrings,\r\n\r\n    /// Selected enemy hero \r\n    selectedEnemyHero: DOTAHeroes.npc_dota_hero_target_dummy,\r\n    selectedEnemyHeroName: parseNameFromModel(DOTAHeroes.npc_dota_hero_target_dummy.Model[1]),\r\n    enemyHeroTalents: getHeroTalents(DOTAHeroes.npc_dota_hero_target_dummy),\r\n    enemyHeroAbilities: getAllHeroAbilities(DOTAHeroes.npc_dota_hero_target_dummy),\r\n    selectedEnemyTalents: [ ],\r\n    enemyHeroItems: [\r\n        { slot: 0, item: \"ultimate_scepter\" },\r\n        { slot: 1, item: \"\" },\r\n        { slot: 2, item: \"\" },\r\n        { slot: 3, item: \"\" },\r\n        { slot: 4, item: \"\" },\r\n        { slot: 5, item: \"\" },\r\n    ],\r\n};\r\n\r\nexport default initialState;","/// Parses a display name from a hero info Model string\r\nexport function parseNameFromModel (modelString) {\r\n    var dashSplit = modelString.split('.')[0].split('/');\r\n    return dashSplit[dashSplit.length - 1];\r\n};","import initialState from \"./initialState\";\r\n\r\nimport {\r\n    SELECTED_HERO,\r\n    SELECTED_ITEM,\r\n    SELECTED_BACKPACK_ITEM,\r\n    SELECTED_NEUTRAL,\r\n    SELECTED_TALENT,\r\n    UNSELECTED_TALENT,\r\n    NEW_HERO_LEVEL,\r\n} from \"../constants/actionTypes\";\r\n\r\nimport {\r\n    parseNameFromModel,\r\n} from \"../utils\";\r\n\r\nimport {\r\n    getAllHeroAbilities,\r\n    getHeroTalents,\r\n} from \"../utility/dataHelperHero\";\r\n\r\n/* DotA 2 Import Data */\r\nimport { DOTAHeroes } from \"../data/dota2/json/npc_heroes.json\";\r\n\r\n/// Takes the existing itemArray and removes the current slot item and\r\n/// replaces with the newItem\r\nfunction replaceUpdatedItem(itemArray, newItem) {\r\n    /// Remove old slot insert new and sort by Slot\r\n    let newArray = itemArray.filter((val) => {\r\n        if (val.slot !== newItem.slot) {\r\n            return val;\r\n        }\r\n    })\r\n    newArray.push({ \r\n        slot: newItem.slot,\r\n        item: newItem.item,\r\n        extra: newItem.extra,\r\n    });\r\n    /// Sort by slot order 0 - 5\r\n    newArray.sort((a, b) => (a.slot > b.slot) ? 1 : -1);\r\n    return newArray;\r\n}\r\n\r\nfunction getNewTalentArray(talentArray, newTalent) {\r\n    let newArray = talentArray.map((value => { return value }));\r\n    newArray.push(newTalent);\r\n    return newArray;\r\n}\r\n\r\nfunction removeTalent (talentArray, unselectedTalent) {\r\n    /// Filter to get all but the unselectedTalent\r\n    var array = talentArray.filter((talent) => {\r\n        if (talent && talent !== unselectedTalent) {\r\n            return talent;\r\n        }\r\n    });\r\n    return array;\r\n}\r\n\r\nfunction reducer(state = initialState, action) {\r\n    switch(action.type)\r\n    {\r\n        case SELECTED_HERO:\r\n            console.log(action);\r\n            let heroInfo = DOTAHeroes[action.value];\r\n            return {\r\n                ...state,\r\n                selectedHero: heroInfo,\r\n                selectedHeroName: action.value,\r\n                heroAbilities: getAllHeroAbilities(heroInfo),\r\n                heroTalents: getHeroTalents(heroInfo),\r\n                \r\n                // reset selected talents when new hero selected\r\n                selectedTalents: [ ],\r\n            };\r\n        case SELECTED_ITEM:\r\n            return {\r\n                ...state,\r\n                items: replaceUpdatedItem(state.items, action.value),\r\n            };\r\n        case SELECTED_BACKPACK_ITEM:\r\n            return {\r\n                ...state,\r\n                backpack: replaceUpdatedItem(state.backpack, action.value),\r\n            }\r\n        case SELECTED_NEUTRAL:\r\n            return {\r\n                ...state,\r\n                neutralItem: action.value,\r\n            };\r\n        case SELECTED_TALENT:\r\n            return {\r\n                ...state,\r\n               selectedTalents: getNewTalentArray(state.selectedTalents, action.value),\r\n            }\r\n            case UNSELECTED_TALENT:\r\n                return {\r\n                    ...state,\r\n                    selectedTalents: removeTalent(state.selectedTalents, action.value),\r\n                }\r\n        case NEW_HERO_LEVEL:\r\n            return {\r\n                ...state,\r\n                heroLevel: action.value,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","export const SELECTED_HERO = \"SELECT_HERO\";\r\nexport const SELECTED_NEUTRAL = \"SELECTED_NEUTRAL\";\r\nexport const SELECTED_ITEM = \"SELECTED_ITEM\";\r\nexport const SELECTED_BACKPACK_ITEM = \"SELECTED_BACKPACK_ITEM\";\r\nexport const SELECTED_TALENT = \"SELECTED_TALENT\";\r\nexport const UNSELECTED_TALENT = \"UNSELECTED_TALENT\";\r\nexport const NEW_HERO_LEVEL = \"NEW_HERO_LEVEL\";\r\nexport const C = \"ITEM_EXTRAS_CHANGED\";\r\n\r\nexport const LANGUAGE_CHANGED = \"LANGUAGE_CHANGED\";\r\n\r\nexport const ENEMY_SELECTED = \"ENEMY_SELECTED\";\r\nexport const ENEMY_SELECTED_TALENT = \"ENEMY_SELECTED_TALENT\";\r\n","/// Enum of all supported languages\r\nexport const ELanguages = {\r\n    SCHINESE: \"szh\",\r\n    ENGLISH: \"en\",\r\n    //RUSSIAN: \"ru\",\r\n};","import {\r\n    LANGUAGE_CHANGED\r\n} from \"../constants/actionTypes\";\r\nimport { ELanguages } from \"../enums/languages\";\r\nimport initialState from \"./initialState\";\r\n\r\nimport { lang as EngAbilStrings } from \"../data/dota2/languages/abilities_english.json\";\r\nimport { lang as EngDotaStrings } from \"../data/dota2/languages/dota_english.json\";\r\n\r\nimport { lang as SChineseAbilStrings } from \"../data/dota2/languages/abilities_schinese.json\";\r\nimport { lang as SChineseDotaStrings } from \"../data/dota2/languages/dota_schinese.json\";\r\n\r\nfunction getAbilityStrings(langCode) {\r\n    switch(langCode) {\r\n        case ELanguages.ENGLISH:\r\n            return EngAbilStrings;\r\n        case ELanguages.SCHINESE:\r\n            return SChineseAbilStrings;\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\nfunction getGeneralStrings(langCode) {\r\n    switch(langCode) {\r\n        case ELanguages.ENGLISH:\r\n            return EngDotaStrings;\r\n        case ELanguages.SCHINESE:\r\n            return SChineseDotaStrings;\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\nexport default (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case LANGUAGE_CHANGED:\r\n            console.log(`${LANGUAGE_CHANGED}: ${action.value}`);\r\n            return {\r\n                ...state,\r\n                lang: action.value,\r\n\r\n                stringsAbilities: getAbilityStrings(action.value),\r\n                stringsDota: getGeneralStrings(action.value),\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import { createStore, combineReducers } from \"redux\";\r\nimport hero from \"../reducers/hero\";\r\nimport language from \"../reducers/language\";\r\nimport enemy from \"../reducers/enemy\";\r\n\r\nconst allReducers = combineReducers({\r\n    language,\r\n    hero,\r\n    enemy,\r\n});\r\n\r\nconst store = createStore(allReducers);\r\n\r\nexport default store;","import initialState from \"./initialState\";\r\n\r\nimport {\r\n    ENEMY_SELECTED,\r\n    ENEMY_SELECTED_TALENT\r\n} from \"../constants/actionTypes\";\r\n\r\nexport default (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case ENEMY_SELECTED:\r\n            return {\r\n                ...state,\r\n\r\n                enemy: action.value,\r\n            };\r\n        case ENEMY_SELECTED_TALENT:\r\n            return {\r\n                ...state,\r\n\r\n                selectedEnemyTalents: [ ],\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Form } from 'react-bootstrap';\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { LANGUAGE_CHANGED } from \"../../constants/actionTypes\";\r\nimport { ELanguages } from \"../../enums/languages\";\r\n\r\nfunction getSupportedLanguages() {\r\n    var langs = Object.values(ELanguages);\r\n    return langs.map((value) => {\r\n        return (\r\n            <option value={value} key={value}>{value}</option>\r\n        )\r\n    });\r\n}\r\n\r\nclass LanguageSelect extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.onLanguageChanged = this.onLanguageChanged.bind(this);\r\n    }\r\n\r\n    onLanguageChanged(event) {\r\n        let newLanguage = event.target.value;\r\n        this.props.dispatch({ type: LANGUAGE_CHANGED, value: newLanguage });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Form.Control as=\"select\" onChange={this.onLanguageChanged} defaultValue={this.props.lang}>\r\n                    { getSupportedLanguages() }\r\n                </Form.Control>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    lang: state.language.lang,\r\n});\r\n\r\nexport default connect(mapStateToProps)(LanguageSelect);","import LanguageSelect from \"./LanguageSelect\";\r\n\r\nexport default LanguageSelect;","import React, { Component } from 'react';\r\nimport { \r\n    Nav,\r\n    Navbar,\r\n    Container,\r\n    Button,\r\n}from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\r\n\r\nimport LanguageSelect from '../LanguageSelect';\r\n\r\nlet pkg = require('../../../package.json');\r\n\r\nclass Navigation extends Component {\r\n    render() {\r\n        return (\r\n            <Navbar>\r\n                <Container>\r\n                    <Navbar.Brand to=\"/\" as={Link}>foresight</Navbar.Brand>\r\n                    <Nav.Link \r\n                        className=\"px-1 align-bottom mr-2\"\r\n                        style={{ fontSize: \"0.85rem\" }}\r\n                        eventKey=\"disabled\" \r\n                        disabled>\r\n                            {\r\n                                pkg ? \"v\" + pkg.version : \"v0.0.0\"\r\n                            }\r\n                    </Nav.Link>\r\n                    <Nav.Link\r\n                        className=\"px-1 align-bottom mr-2\"\r\n                        style={{ fontSize: \"0.85rem\" }}\r\n                        eventKey=\"disabled\"\r\n                        disabled>\r\n                        {\r\n                            pkg ? pkg.dotaVersion : \"Unknown\"\r\n                        }\r\n                    </Nav.Link>\r\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                        <Nav className=\"mr-auto\">\r\n                            <Nav.Link to=\"/\" as={Link}>home</Nav.Link>\r\n                            <Nav.Link to=\"/app\" as={Link}>calculator</Nav.Link>\r\n                        </Nav>\r\n                        <div className=\"mr-2\">\r\n                            <LanguageSelect/>\r\n                        </div>\r\n                        <a href=\"https://github.com/JoshLmao/foresight\">\r\n                            <Button variant=\"outline-secondary\">\r\n                                <FontAwesomeIcon icon={faGithub} />\r\n                            </Button>\r\n                        </a>\r\n                    </Navbar.Collapse>\r\n                </Container>\r\n            </Navbar>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Navigation;","import Navigation from \"./Navigation\";\r\n\r\nexport default Navigation;","import FourOhFour from \"./FourOhFour\";\r\n\r\nexport default FourOhFour;","import React, { Component } from 'react';\r\n\r\nclass FourOhFour extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                404 page\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FourOhFour;","import { lang as DOTAEngAbilityStrings } from \"../../data/dota2/languages/abilities_english.json\";\r\n\r\n/// Searches the passed strings file for the related string\r\n/// Very resource intensive\r\nexport function tryGetLocalizedString(languageStrings, stringKey) {\r\n    if (!languageStrings || !stringKey) {\r\n        return null;\r\n    }\r\n\r\n    let languageKeys = Object.keys(languageStrings.Tokens);\r\n    let matchingKeys = languageKeys.filter((key) => {\r\n        if (key.toLowerCase() === stringKey.toLowerCase()) {\r\n            return key;\r\n        } else {\r\n            return null;\r\n        }\r\n    });\r\n\r\n    if (matchingKeys && matchingKeys.length > 0) {\r\n        let displayName = languageStrings.Tokens[matchingKeys[0]];\r\n        return displayName;\r\n    } else {\r\n        return \"?\";\r\n    }\r\n}\r\n\r\nexport function tryGetTalentLocalizedString(languageStrings, stringKey) {\r\n    if (!languageStrings || !stringKey) {\r\n        return null;\r\n    }\r\n\r\n    let languageKeys = Object.keys(languageStrings.Tokens);\r\n    let matchingKeys = languageKeys.filter((key) => {\r\n        if (key.includes(stringKey)) {\r\n            return key;\r\n        } else {\r\n            return null;\r\n        }\r\n    });\r\n\r\n    if (matchingKeys && matchingKeys.length > 0) {\r\n        let displayName = languageStrings.Tokens[matchingKeys[0]];\r\n        return displayName;\r\n    } else {\r\n        return \"?\";\r\n    }\r\n}\r\n\r\n/// Quick method for retrieving localized string\r\n/// Main fast method to retrieve an exact key from strings\r\nexport function getLocalizedString(localeStrings, key) {\r\n    let string = localeStrings.Tokens[key];\r\n    return string ?? null;\r\n}\r\n\r\n/// Check if the localeStrings contains the key\r\nexport function containsLocalizedString (localeStrings, key) {\r\n    let containsVal = localeStrings.Tokens[key];\r\n    return containsVal != null;\r\n}\r\n\r\n/// Gets a string from the dota strings that contain the prefix \"DOTA_Toolip_\"\r\n/// Useful for getting general tooltip UI strings\r\nexport function getTooltipString(dotaStrings, tooltipKey) {\r\n    if (!dotaStrings || !tooltipKey) {\r\n        return null;\r\n    }\r\n\r\n    if (!tooltipKey.includes(\"DOTA_ToolTip_\")) {\r\n        tooltipKey = \"DOTA_ToolTip_\" + tooltipKey;\r\n    }\r\n    var match = dotaStrings.Tokens[tooltipKey];\r\n    return match;\r\n}\r\n\r\n/// Gets a string from the abilities strings that contain the prefix \"DOTA_Tooltip_ability\"\r\n/// Useful for retrieving localized strings of ability names\r\nexport function getTooltipAbilityString(abilityStrings, abilityKey) {\r\n    if (!abilityStrings || !abilityKey) {\r\n        return null;\r\n    }\r\n    if (!abilityKey.includes(\"DOTA_Tooltip_ability\")) {\r\n        abilityKey = \"DOTA_Tooltip_ability_\" + abilityKey;\r\n    }\r\n    var match = abilityStrings.Tokens[abilityKey];\r\n    return match;\r\n}\r\n\r\n/// Places a value in a translation string that contains a \"{s:value}\" inside\r\nexport function replaceStringValue(string, value) {\r\n    if (!string || !value) {\r\n        return \"?\";\r\n    }\r\n\r\n    string = string.replace(/{.*}/, value);\r\n    return string;\r\n}\r\n\r\n/// Gets the english localized ability string\r\nexport function getEngAnilityLocalizedString (key) {\r\n    return getLocalizedString(DOTAEngAbilityStrings, key);\r\n}","export const EDamageType = {\r\n    MAGICAL: \"DAMAGE_TYPE_MAGICAL\",\r\n    PURE: \"DAMAGE_TYPE_PURE\",\r\n    PHYSICAL: \"DAMAGE_TYPE_PHYSICAL\",\r\n};\r\n\r\n/// All Ability Behaviour types\r\nexport const EAbilityBehaviour = {\r\n    UNIT_TARGET: \"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET\",\r\n    POINT: \"DOTA_ABILITY_BEHAVIOR_POINT\",\r\n    AOE: \"DOTA_ABILITY_BEHAVIOR_AOE\",\r\n    HIDDEN: \"DOTA_ABILITY_BEHAVIOR_HIDDEN\",\r\n    PASSIVE: \"DOTA_ABILITY_BEHAVIOR_PASSIVE\",\r\n    NO_TARGET: \"DOTA_ABILITY_BEHAVIOR_NO_TARGET\",\r\n    IMMEDIATE: \"DOTA_ABILITY_BEHAVIOR_IMMEDIATE\",\r\n    IGNORE_CHANNEL: \"DOTA_ABILITY_BEHAVIOR_IGNORE_CHANNEL\",\r\n    SHOW_IN_GUIDES: \"DOTA_ABILITY_BEHAVIOR_SHOW_IN_GUIDES\",\r\n    AURA: \"DOTA_ABILITY_BEHAVIOR_AURA\",\r\n}\r\n\r\n/// Enum of all spell immune types, if the ability pierces spell immunity\r\nexport const ESpellImmunityType = {\r\n    YES: \"SPELL_IMMUNITY_ENEMIES_YES\",\r\n    NO: \"SPELL_IMMUNITY_ENEMIES_NO\",\r\n}","// * Helper and utility functions to provide for retrieving data from \"npc_abilities.json\"\r\n// * \r\n\r\nimport { DOTAAbilities } from \"../data/dota2/json/npc_abilities.json\";\r\nimport { \r\n    EAbilityBehaviour, \r\n    EDamageType, \r\n    ESpellImmunityType \r\n} from \"../enums/abilities\";\r\n\r\nimport {\r\n    lang as DOTAEngAbilityStrings\r\n} from \"../data/dota2/languages/abilities_english.json\";\r\nimport { containsLocalizedString } from \"./data-helpers/language\";\r\n\r\nexport function getAbilityInfoFromName(abilityName) {\r\n    if (abilityName) {\r\n        return DOTAAbilities[abilityName];\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport function tryGetAbilitySpecialAbilityValue (ability, specialValueKey, abilityLevel = 1) {\r\n    let abilityInfo = getAbilityInfoFromName(ability);\r\n    if (abilityInfo) {\r\n        let specialValue = getAbilitySpecialAbilityValue(abilityInfo, specialValueKey, abilityLevel);\r\n        if (specialValue) {\r\n            return specialValue;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nexport function getAbilitySpecialAbilityValue(abilityInfo, specialAbilityKey, abilityLevel = 1) {\r\n    if (abilityInfo && abilityInfo.AbilitySpecial) {\r\n        for(let i = 0; i < abilityInfo.AbilitySpecial.length; i++) {\r\n            let keys = Object.keys(abilityInfo.AbilitySpecial[i]);\r\n            let matchingKey = keys.find(element => {\r\n                return element === specialAbilityKey;\r\n            });\r\n\r\n            if (matchingKey) {\r\n                let specialAbilityInfo = abilityInfo.AbilitySpecial[i];\r\n\r\n                // If value contains a space, it can be levelled up needs to be split up\r\n                let dataValue = specialAbilityInfo[matchingKey];\r\n                if (typeof dataValue === \"string\" && dataValue.includes(' ')) {\r\n                    let split = specialAbilityInfo[matchingKey].split(' ');\r\n                    dataValue = split[abilityLevel - 1];\r\n                }\r\n\r\n                /// If wanting it for it's value, correctly convert and return\r\n                if (matchingKey.includes(\"value\") && specialAbilityInfo.var_type) {\r\n                    if (specialAbilityInfo.var_type === \"FIELD_INTEGER\") {\r\n                        return parseInt(dataValue);\r\n                    } \r\n                    else if(specialAbilityInfo.var_type === \"FIELD_FLOAT\") {\r\n                        return parseFloat(dataValue);\r\n                    }\r\n                } \r\n                /// else return whatever the value is\r\n                else {\r\n                    return dataValue;\r\n                }\r\n                \r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/// Gets \r\nexport function getAbilitySpecialCastRangeValue (abilityInfo, includePhrase, abilityLevel = 1) {\r\n    if (abilityInfo && abilityInfo.AbilitySpecial) {\r\n        for(let i = 0; i < abilityInfo.AbilitySpecial.length; i++) {\r\n            let keys = Object.keys(abilityInfo.AbilitySpecial[i]);\r\n            let matchingKey = keys.find(element => {\r\n                return element.includes(includePhrase) && !element.includes(\"scepter\");\r\n            });\r\n\r\n            if (matchingKey) {\r\n                let specialAbilityInfo = abilityInfo.AbilitySpecial[i];\r\n\r\n                /// ignore if scepter \r\n                if (specialAbilityInfo.RequiresScepter) {\r\n                    return null;\r\n                }\r\n\r\n                // If value contains a space, it can be levelled up needs to be split up\r\n                let dataValue = specialAbilityInfo[matchingKey];\r\n                \r\n                /// Return dataValue in format\r\n                return tryParseAbilitySpecialValue(specialAbilityInfo, dataValue, abilityLevel)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/// Searches an AbilityInfo's AbilitySpecial array for a property that includes the the \"includePhrase\"\r\n/// in it's key. For example includePhrase = \"charges\" would return value of voice spirit's \"max_charges\"\r\nexport function getIncludesAbilitySpecialAbilityValue(abilityInfo, includePhrase, abilityLevel) {\r\n    if (abilityInfo && abilityInfo.AbilitySpecial) {\r\n        for(let i = 0; i < abilityInfo.AbilitySpecial.length; i++) {\r\n            let keys = Object.keys(abilityInfo.AbilitySpecial[i]);\r\n            let matchingKey = keys.find(element => {\r\n                return element.includes(includePhrase);\r\n            });\r\n\r\n            if (matchingKey) {\r\n                let specialAbilityInfo = abilityInfo.AbilitySpecial[i];\r\n                let dataValue = specialAbilityInfo[matchingKey];\r\n\r\n                /// Return dataValue in format\r\n                return tryParseAbilitySpecialValue(specialAbilityInfo, dataValue, abilityLevel);\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/// Gets the standard output damage of an ability from its level\r\nexport function getAbilityOutputDamage(abilityInfo, abilityLevel) {\r\n    let abilityDmg = {\r\n        min: null,\r\n        max: null,\r\n        damage: null,\r\n        isPercent: null,\r\n    };\r\n\r\n    if (abilityInfo && abilityLevel) {\r\n        if (abilityInfo.AbilityDamage) {\r\n            let dmgValue = abilityInfo.AbilityDamage.split(' ')[abilityLevel - 1];\r\n            abilityDmg = {\r\n                ...abilityDmg,\r\n                damage: parseFloat(dmgValue),\r\n            };\r\n        }\r\n        else if (abilityInfo.AbilitySpecial) \r\n        {\r\n            for (let i = 0; i < abilityInfo.AbilitySpecial.length; i++) {\r\n                let specialAbilityElement = abilityInfo.AbilitySpecial[i];\r\n                \r\n                let abilSpecKeys = Object.keys(specialAbilityElement);\r\n                for(let key of abilSpecKeys) {\r\n                    // AbilitySpecial contains damage under a property\r\n                    let lowerKey = key.toLowerCase();\r\n                    \r\n                    // Includes dmg & not scepter\r\n                    if (lowerKey.includes(\"damage\") && !lowerKey.includes(\"scepter\")) \r\n                    {\r\n                        let value = parseAbilityValueByLevel(specialAbilityElement[key], abilityLevel);\r\n                        let dmgValue = parseFloat(value);\r\n\r\n                        if (lowerKey.includes(\"min\")) {\r\n                            //min_damage\r\n                            abilityDmg.min =  dmgValue;\r\n                        }\r\n                        if (lowerKey.includes(\"max\")) {\r\n                            abilityDmg.max = dmgValue;\r\n                        } \r\n                        if (lowerKey.includes(\"pct\")) {\r\n                            abilityDmg.isPercent = true;\r\n                        }\r\n\r\n                        if (!abilityDmg.min && !abilityDmg.max) {\r\n                            abilityDmg.damage = dmgValue;\r\n                        }\r\n                    }\r\n\r\n                    // Stop iterate if have min&max or dmg\r\n                    if (abilityDmg.min && abilityDmg.max || abilityDmg.damage) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return abilityDmg;\r\n}\r\n\r\n/// Gets all behaviour options of an ability such as if it goes through BKB, damage type, etc\r\nexport function getAbilityBehaviours(abilityInfo) {\r\n    if (!abilityInfo) {\r\n        return null;\r\n    }\r\n\r\n    let behaviours = [];\r\n\r\n    if (abilityInfo.AbilityBehavior) {\r\n        let targeting = [];\r\n        let splitBehaviours = abilityInfo.AbilityBehavior.split(' | ');\r\n        for(let b of splitBehaviours) {\r\n            switch(b) {\r\n                case EAbilityBehaviour.UNIT_TARGET:\r\n                    targeting.push(\"DOTA_ToolTip_Ability_Target\");\r\n                    break;\r\n                case EAbilityBehaviour.POINT:\r\n                    targeting.push(\"DOTA_ToolTip_Ability_Point\");\r\n                    break;\r\n                case EAbilityBehaviour.PASSIVE:\r\n                    targeting.push(\"DOTA_ToolTip_Ability_Passive\");\r\n                    break;\r\n                case EAbilityBehaviour.NO_TARGET:\r\n                    targeting.push(\"DOTA_ToolTip_Ability_NoTarget\");\r\n                    break;\r\n            }\r\n        }\r\n    \r\n        behaviours.push({\r\n            key: \"DOTA_ToolTip_Ability\",\r\n            value: targeting,\r\n        });\r\n    }\r\n\r\n    if (abilityInfo.AbilityUnitDamageType) {\r\n        let dmgTypeVal = \"\";\r\n        let splitDmgTypes = abilityInfo.AbilityUnitDamageType.split(\" | \");\r\n        for(let type of splitDmgTypes) {\r\n            switch(type) {\r\n                case EDamageType.MAGICAL:\r\n                    dmgTypeVal = \"DOTA_Plus_Death_Screen_MagicalDamage\";\r\n                    break;\r\n                case EDamageType.PURE:\r\n                    dmgTypeVal = \"DOTA_Plus_Death_Screen_PureDamage\";\r\n                    break;\r\n                case EDamageType.PHYSICAL:\r\n                    dmgTypeVal = \"DOTA_Plus_Death_Screen_PhysicalDamage\";\r\n                    break;\r\n                default:\r\n                    dmgTypeVal = \"Not Implemented\";\r\n                    break;\r\n            }\r\n        }\r\n\r\n        behaviours.push({\r\n            key: \"DOTA_ToolTip_Damage\",\r\n            value: dmgTypeVal,\r\n        });\r\n    }\r\n\r\n    if (abilityInfo.SpellImmunityType) {\r\n        let pierceValue = \"\";\r\n        switch(abilityInfo.SpellImmunityType) {\r\n            case ESpellImmunityType.YES:\r\n                pierceValue = \"DOTA_ToolTip_PiercesSpellImmunity_Yes\";\r\n                break;\r\n            case ESpellImmunityType.NO:\r\n                pierceValue = \"DOTA_ToolTip_PiercesSpellImmunity_No\";\r\n                break;\r\n            default:\r\n                pierceValue = \"Unknown\";\r\n                break;\r\n        }\r\n\r\n        behaviours.push({\r\n            key: \"DOTA_ToolTip_PiercesSpellImmunity\",\r\n            value: pierceValue,\r\n        });\r\n    }\r\n\r\n    return behaviours;\r\n}\r\n\r\n/// Parses an AbilitySpecial\r\nexport function parseAbilitySpecialValueByLevel (abilitySpecials, key, level = 1) {\r\n    let valuesSplit = abilitySpecials[key].split(' ');\r\n    if (valuesSplit.length > 1) {\r\n        return valuesSplit[level - 1];\r\n    } else {\r\n        return abilitySpecials[key];\r\n    }\r\n}\r\n\r\n/// Parses a value in an abilityInfo that could be alone or have multiple values per level\r\nexport function parseAbilityValueByLevel (value, level = 1) {\r\n    if (level < 1) {\r\n        return null;\r\n    }\r\n    \r\n    let abilValue = 0;\r\n    if (typeof value === \"string\") {\r\n        let splitValues = value.split(\" \");\r\n        if (splitValues.length > 1) {\r\n            abilValue = splitValues[level - 1];\r\n        } else {\r\n            abilValue = value;\r\n        }\r\n\r\n        abilValue = parseFloat(abilValue);\r\n    } else {\r\n        abilValue = value;\r\n    }\r\n\r\n    return abilValue;\r\n}\r\n\r\nexport function isCooldownTalent (talent) {\r\n    return isTalent(talent, \"cooldown\");\r\n}\r\n\r\nexport function isDamageTalent (talent) {\r\n    return isTalent(talent, \"damage\");\r\n}\r\n\r\nexport function isCastRangeTalent (talent) {\r\n    return isTalent(talent, \"cast range\");\r\n}\r\n\r\nexport function isTalent (talent, lowerCasePhrase) {\r\n    let abilityString = DOTAEngAbilityStrings.Tokens[\"DOTA_Tooltip_ability_\" + talent];\r\n    return abilityString && abilityString.toLowerCase().includes(lowerCasePhrase);\r\n}\r\n\r\n/// Checks the AbilityBehavior string on an AbilityInfo to\r\n/// see if it contains all EBehaviours in array\r\nexport function isAbilityBehaviour (abilityBehaviour, ebehaviours) {\r\n    if (abilityBehaviour) {\r\n        let splitBehaviours = abilityBehaviour.split(' | ');\r\n        \r\n        let contains = splitBehaviours.some((b) => ebehaviours.includes(b));\r\n        return contains;\r\n    }\r\n    return false;\r\n}\r\n\r\n/// Gets all AbilitySpecial extra information values with it's translation key \r\nexport function getAbilitySpecialExtraValues (abilityName, abilityInfo, abilityLevel, selectedTalents) {\r\n    let abilitySpecials = [];\r\n\r\n    for (let specialInfo of abilityInfo.AbilitySpecial) {\r\n        let abilitySpecialKeys = Object.keys(specialInfo);\r\n        for (let key of abilitySpecialKeys) {\r\n\r\n            if (key.includes(\"LinkedSpecialBonus\") || key.includes(\"var_type\") || key.includes(\"damage\")) {\r\n                continue;\r\n            }\r\n\r\n            let translationKey = `DOTA_Tooltip_ability_${abilityName}_${key}`;\r\n            abilitySpecials.push({\r\n                key: translationKey,\r\n                value: tryParseAbilitySpecialValue(specialInfo, specialInfo[key], abilityLevel),\r\n            });\r\n        }\r\n    }\r\n\r\n    return abilitySpecials;\r\n}\r\n\r\nexport function tryParseAbilitySpecialValue (abilSpecialinfo, value, abilityLevel = 1) {\r\n    if (typeof value === \"string\" && value.includes(' ')) {\r\n        let split = value.split(' ');\r\n        value = split[abilityLevel - 1];\r\n    }\r\n\r\n    if (abilSpecialinfo) {\r\n        if (abilSpecialinfo.var_type === \"FIELD_INTEGER\") {\r\n            return parseInt(value);\r\n        } \r\n        else if(abilSpecialinfo.var_type === \"FIELD_FLOAT\") {\r\n            return parseFloat(value);\r\n        }\r\n    }\r\n    return value;\r\n}","\r\n// * Helper and utility functions to provide for retrieving data from \"npc_items.json\"\r\n// * \r\nimport { DOTAAbilities as DOTAItems } from \"../data/dota2/json/items.json\";\r\nimport { EAttributes } from \"../enums/attributes\";\r\nimport React from \"react\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faClock } from '@fortawesome/free-solid-svg-icons';\r\nimport { tryParseAbilitySpecialValue } from \"./dataHelperAbilities\";\r\nimport { \r\n    getLocalizedString, \r\n    getEngAnilityLocalizedString \r\n} from \"./data-helpers/language\";\r\n\r\nexport function getItemInfoFromName (itemName) {\r\n    if (itemName)\r\n        return DOTAItems[itemName];\r\n    else\r\n        return null;\r\n}\r\n\r\n/// Gets the value of an item's AbilitySpecial array\r\nexport function getItemSpecialAbilityValue (itemInfo, specialAbilityValueKey) {\r\n    if (itemInfo && itemInfo.AbilitySpecial) {\r\n        for(let i = 0; i < itemInfo.AbilitySpecial.length; i++) {\r\n            let keys = Object.keys(itemInfo.AbilitySpecial[i]);\r\n            let matchingKey = keys.find(element => {\r\n                return element === specialAbilityValueKey;\r\n            });\r\n\r\n            if (matchingKey) {\r\n                let specialAbilityInfo = itemInfo.AbilitySpecial[i];\r\n                return tryParseAbilitySpecialValue(specialAbilityInfo, specialAbilityInfo[matchingKey], 1);\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/// Try Gets a item info and sepcial value from it's item's Ability Special array\r\nexport function tryGetItemSpecialValue (item, specialAbilityValueKey) {\r\n    let itemInfo = getItemInfoFromName(item.item);\r\n    if (itemInfo) {\r\n        var specialValue = getItemSpecialAbilityValue(itemInfo, specialAbilityValueKey);\r\n        if (specialValue) {\r\n            return specialValue;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/// Try Gets a neutral item info and special value from it's items' AbilitySpecial array\r\nexport function tryGetNeutralSpecialValue (neutral, specialValueKey) {\r\n    let foundNeutralInfo = getItemInfoFromName(neutral.item);\r\n    if (foundNeutralInfo) {\r\n        var specialValue = getItemSpecialAbilityValue(foundNeutralInfo, specialValueKey);\r\n        if (specialValue) {\r\n            return specialValue;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/// Returns all neutral items\r\nexport function getAllNeutrals() {\r\n     /// Filter out unused or unnecessary keys in items.json\r\n     let selectableNeutrals = Object.keys(DOTAItems).filter((value) => {\r\n        let key = value.toLowerCase();\r\n        let ability = DOTAItems[value];\r\n        if (key !== \"version\" && !ability.IsObsolete) {\r\n            if (ability.ItemIsNeutralDrop === \"1\") {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    });\r\n    selectableNeutrals.sort();\r\n\r\n    // Map to an object\r\n    selectableNeutrals = selectableNeutrals.map((key) => {\r\n        let itemKey = key;\r\n        if (itemKey.includes(\"recipe\")) {\r\n            // remove recipe and retrieve item version\r\n            itemKey = itemKey.replace(\"_recipe\", \"\");\r\n        }\r\n\r\n        let itemInfo = DOTAItems[itemKey];\r\n        if (itemInfo.ItemIsNeutralDrop === \"1\") {\r\n            return {\r\n                item: itemKey,\r\n                itemInfo: itemInfo,\r\n            };\r\n        }\r\n    });\r\n\r\n    return selectableNeutrals;\r\n}\r\n\r\n/// Gets the correct key inside items.json for the hero's primary attribute\r\nexport function primaryAttributeToItemBonusKey(primaryAttr) {\r\n    switch(primaryAttr) {\r\n        case EAttributes.ATTR_STRENGTH:\r\n            return [ \"bonus_strength\" ];\r\n        case EAttributes.ATTR_AGILITY:\r\n            return [ \"bonus_agility\" ];\r\n        case EAttributes.ATTR_INTELLIGENCE:\r\n            return [ \"bonus_intellect\", \"bonus_intelligence\" ];\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\n/// Checks if the items array contains an aghanims scepter\r\nexport function itemsContainsScepter (allItems) {\r\n    for (let item of allItems) {\r\n        if (item.item && item.item.includes(\"ultimate_scepter\")) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n/// Replaces a localized string with it's data values found inside AbilitySpecial \r\n/// or on ItemInfo object\r\nexport function replaceStringWithDataValues (string, itemInfo) {\r\n    if (!string) {\r\n        return null;\r\n    }\r\n\r\n    let replaceRegex = /(%.*?%)/;\r\n    \r\n    while (string.match(replaceRegex)?.length > 0) {\r\n        let phrase = string.match(replaceRegex)[0];\r\n        if (phrase) {\r\n            let infoKey = phrase.split(\"%\").join(\"\");\r\n            let specialAbilityValue = \"?\";\r\n            // no characters inbetween, needs to be a normal percentage sign\r\n            if (infoKey === \"\") {\r\n                /// use ~ for now, replace later\r\n                specialAbilityValue = \"~\";\r\n            }\r\n            // if is an AbilitySpecial key as all contain a '_' \r\n            else if (infoKey.includes(\"_\")) {\r\n                specialAbilityValue = getItemSpecialAbilityValue(itemInfo, infoKey);\r\n            }\r\n            // is a key on the main ItemInfo object \r\n            else {\r\n                specialAbilityValue = tryGetItemInfoValue(itemInfo, infoKey);\r\n            }\r\n            \r\n            string = string.replace(phrase, specialAbilityValue);\r\n        }\r\n    }\r\n\r\n    /// replace ! with actual percentage sign\r\n    string = string.replace(/[~]/g, \"%\");\r\n    \r\n    return string;\r\n}\r\n\r\n/// Try Get's a ItemInfo value on the original object from a key\r\nexport function tryGetItemInfoValue (itemInfo, itemInfoKey) {\r\n    if (itemInfo) {\r\n        let keys = Object.keys(itemInfo);\r\n        let matchingKey = keys.find(element => {\r\n            return element.toLowerCase() === itemInfoKey.toLowerCase();\r\n        });\r\n\r\n        if (matchingKey) {\r\n            let infoValue = itemInfo[matchingKey];\r\n            if (infoValue.includes(\".\")) {\r\n                return parseFloat(infoValue);\r\n            } else {\r\n                return parseInt(infoValue);\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/// Converts a item description localized string into the correct displayable HTML\r\nexport function convertItemDescToHtml(itemDescString, itemName, itemInfo) {\r\n    let dataString = replaceStringWithDataValues(itemDescString, itemInfo);\r\n    if (!dataString) {\r\n        return null;\r\n    }\r\n\r\n    /// Get english string to be able to check for \"Active:\" phrase\r\n    let engDataString = getEngAnilityLocalizedString(`DOTA_Tooltip_ability_${itemName}_Description`);\r\n    let engSplitString = engDataString.split(\"\\\\n\");\r\n\r\n    /// Also split localized string to iterate over\r\n    let localizedSplit = dataString.split(\"\\\\n\");\r\n\r\n    let totalHtmlSections = [];\r\n    for(let i = 0; i < localizedSplit.length; i++) {\r\n        let section = localizedSplit[i];\r\n        let isActive = engSplitString[i].includes(\"Active:\");\r\n        if (isActive) {\r\n            totalHtmlSections.push(\r\n                <div className=\"my-3 item-active\">\r\n                    <div\r\n                        className=\"d-flex justify-content-between align-items-center\" \r\n                        style={{ position: \"absolute\", right: \"1rem\" }}>\r\n                        {\r\n                            itemInfo && itemInfo.AbilityManaCost &&\r\n                            <div className=\"d-flex\">\r\n                                <div className=\"mx-1 my-1 mana-cost-box-icon\" />\r\n                                <div>\r\n                                    { parseInt(itemInfo.AbilityManaCost) }\r\n                                </div>\r\n                            </div>\r\n                        }\r\n                        <div className=\"px-1\" />\r\n                        {\r\n                            itemInfo && itemInfo.AbilityCooldown &&\r\n                            <div className=\"d-flex\">\r\n                                <FontAwesomeIcon \r\n                                    className=\"mx-1 my-1\" \r\n                                    icon={faClock} />\r\n                                <div>\r\n                                    { parseFloat(itemInfo.AbilityCooldown)  }\r\n                                </div>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                    <div dangerouslySetInnerHTML={{ __html: section }}>\r\n                    </div>\r\n                </div>\r\n            )\r\n        } else {\r\n            totalHtmlSections.push(\r\n                <div className={`my-3 ${itemInfo.ItemQuality === \"consumable\" ? \"item-consumable\" : \"item-passive\"}`} dangerouslySetInnerHTML={{ __html: section }}>\r\n\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    return totalHtmlSections;\r\n}\r\n\r\n/// Gets all bonuses the item provides, returning a key value list\r\nexport function getItemStatistics (itemInfo) {\r\n    if (!itemInfo) {\r\n        return null;\r\n    }\r\n\r\n    let statistics = [];\r\n\r\n    for (let i = 0; i < itemInfo.AbilitySpecial.length; i++) {\r\n        let keys = Object.keys(itemInfo.AbilitySpecial[i]);\r\n        for(let key of keys) {\r\n            if (key.includes(\"bonus\") || \r\n                key.includes(\"spell\") || \r\n                key.includes(\"multiplier\") || \r\n                key.includes(\"regen\") || \r\n                key.includes(\"resistance\") ) {\r\n                let val = tryParseAbilitySpecialValue(itemInfo.AbilitySpecial[i], itemInfo.AbilitySpecial[i][key]);\r\n                statistics.push({\r\n                    key: key,\r\n                    value: val,\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    return statistics;\r\n}\r\n\r\n/// Checks an ItemInfo Disassemble rule if it matches the given rule\r\nexport function isDissassembleRule(itemInfo, eDisassembleRule) {\r\n    if (itemInfo && itemInfo.ItemDisassembleRule) {\r\n        let split = itemInfo.ItemDisassembleRule.split(\" | \");\r\n        for(let rule of split) {\r\n            if (rule === eDisassembleRule) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n/// Checks if an item requires charges to function\r\nexport function itemRequiresCharges (itemName) {\r\n    let itemInfo = getItemInfoFromName(itemName);\r\n    if (itemInfo) {\r\n        return itemInfo.ItemRequiresCharges === \"1\";\r\n    }\r\n    return false;\r\n}","import { DOTAAbilities } from \"../data/dota2/json/npc_abilities.json\";\r\nimport {\r\n    getAbilityInfoFromName,\r\n    getAbilitySpecialAbilityValue\r\n} from \"./dataHelperAbilities\";\r\n\r\n/// Gets info and formattable display name of a talent\r\n/// Returns both display name of talent and it's info in an object\r\nexport function getTalentInfoFromName(talent) {\r\n    if (talent) {\r\n        var talentInfo = DOTAAbilities[talent];\r\n        return talentInfo;    \r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport function tryGetTalentSpecialAbilityValue (talent, specialValueKey) {\r\n    let talentInfo = getAbilityInfoFromName(talent);\r\n    if(talentInfo) {\r\n        let specialValue = getAbilitySpecialAbilityValue(talentInfo, specialValueKey);\r\n        if (specialValue) {\r\n            return specialValue;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n","import { \r\n    getItemInfoFromName,\r\n    getItemSpecialAbilityValue,\r\n    tryGetItemSpecialValue,\r\n    tryGetNeutralSpecialValue,\r\n    primaryAttributeToItemBonusKey,\r\n    itemsContainsScepter\r\n} from \"./dataHelperItems\";\r\n\r\nimport {\r\n    getAbilityInfoFromName,\r\n    getAbilitySpecialAbilityValue,\r\n    getAbilityOutputDamage,\r\n    tryGetAbilitySpecialAbilityValue,\r\n    parseAbilityValueByLevel,\r\n    isCooldownTalent,\r\n    isDamageTalent,\r\n    isCastRangeTalent,\r\n    getAbilitySpecialCastRangeValue,\r\n    getIncludesAbilitySpecialAbilityValue,\r\n    isAbilityBehaviour\r\n} from \"./dataHelperAbilities\";\r\n\r\nimport {\r\n    getTalentInfoFromName,\r\n    tryGetTalentSpecialAbilityValue,\r\n} from \"./dataHelperTalents\";\r\n\r\nimport {\r\n    getDotaBaseHero,\r\n    getSpecificAttributeStats,\r\n    getPrimaryAttributeStats,\r\n    getPrimaryAttribute\r\n} from \"./dataHelperHero\";\r\n\r\nimport { EAttributes } from \"../enums/attributes\";\r\n\r\nimport { DOTAHeroes } from \"../data/dota2/json/npc_heroes.json\";\r\nimport { DOTAAbilities } from \"../data/dota2/json/npc_abilities.json\";\r\nimport { EAbilityBehaviour } from \"../enums/abilities\";\r\n\r\n/// Calculates the health of a hero\r\n/// https://dota2.gamepedia.com/Health\r\nexport function calculateHealth(hero, heroLevel, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }\r\n    \r\n    let HEALTH_PER_STRENGTH_POINT = 20;\r\n    let baseStrength = parseInt(hero.AttributeBaseStrength)\r\n    let strengthGain = parseFloat(hero.AttributeStrengthGain);\r\n\r\n    let baseHealth = 0;\r\n    if (DOTAHeroes && DOTAHeroes.npc_dota_hero_base && DOTAHeroes.npc_dota_hero_base.StatusHealth) {\r\n        baseHealth = parseInt(DOTAHeroes.npc_dota_hero_base.StatusHealth);\r\n    } else {\r\n        console.error(\"Can't add baseHealth to heroes health pool\");\r\n    }\r\n\r\n    let totalStr = baseStrength + (strengthGain * (heroLevel - 1));\r\n    let totalHealth = baseHealth + (totalStr * HEALTH_PER_STRENGTH_POINT);\r\n\r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            let bonusHealth = tryGetItemSpecialValue(item, \"bonus_health\");\r\n            if (bonusHealth) {\r\n                totalHealth += bonusHealth;\r\n            }\r\n\r\n            let bonusStr = tryGetItemSpecialValue(item, \"bonus_strength\");\r\n            if (bonusStr) {\r\n                totalHealth += bonusStr * HEALTH_PER_STRENGTH_POINT;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalHealth += bonusAllStats * HEALTH_PER_STRENGTH_POINT;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let bonusHealth = tryGetNeutralSpecialValue(neutral, \"bonus_health\");\r\n        if (bonusHealth) {\r\n            totalHealth += bonusHealth;\r\n        }\r\n\r\n        let bonusStr = tryGetNeutralSpecialValue(neutral, \"bonus_strength\");\r\n        if (bonusStr) {\r\n            totalHealth += bonusStr * HEALTH_PER_STRENGTH_POINT;\r\n        }\r\n\r\n        let bonusAllStats = tryGetNeutralSpecialValue(neutral, \"bonus_all_stats\");\r\n        if (bonusAllStats) {\r\n            totalHealth += bonusAllStats * HEALTH_PER_STRENGTH_POINT;\r\n        }\r\n    }\r\n\r\n    if (abilities && abilities.length > 0) {\r\n        \r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            if (talent.includes(\"bonus_hp\")) {\r\n                let bonusHealth = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusHealth) {\r\n                    totalHealth += bonusHealth;\r\n                }\r\n            } else if (talent.includes(\"bonus_strength\")) {\r\n                let bonusStr = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusStr) {\r\n                    totalHealth += bonusStr * HEALTH_PER_STRENGTH_POINT;\r\n                }\r\n            } else if (talent.includes(\"bonus_all_stats\")) {\r\n                let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAllStats) {\r\n                    totalHealth += bonusAllStats * HEALTH_PER_STRENGTH_POINT;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return totalHealth.toFixed(0);\r\n}\r\n\r\n/// Calculates the mana pool of a hero\r\n/// https://dota2.gamepedia.com/Mana\r\nexport function calculateMana(hero, heroLevel, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }    \r\n\r\n    let MANA_PER_INT_POINT = 12;\r\n    let baseInt = parseInt(hero.AttributeBaseIntelligence);\r\n    let intGain = parseFloat(hero.AttributeIntelligenceGain);\r\n\r\n    let baseMana = 0;\r\n    if (DOTAHeroes && DOTAHeroes.npc_dota_hero_base && DOTAHeroes.npc_dota_hero_base.StatusMana) {\r\n        baseMana = parseInt(DOTAHeroes.npc_dota_hero_base.StatusMana);\r\n    } else {\r\n        console.error(\"Can't add baseMana to heroes mana pool\");\r\n    }\r\n\r\n    let totalInt = baseInt + (intGain * (heroLevel - 1));\r\n    let totalMana = baseMana + (totalInt * MANA_PER_INT_POINT);\r\n\r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            let bonusMana = tryGetItemSpecialValue(item, \"bonus_mana\");\r\n            if (bonusMana) {\r\n                totalMana += bonusMana;\r\n            }\r\n\r\n            let bonusInt = tryGetItemSpecialValue(item, \"bonus_intellect\");\r\n            if (bonusInt) {\r\n                totalMana += bonusInt * MANA_PER_INT_POINT;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalMana += bonusAllStats * MANA_PER_INT_POINT;\r\n            }\r\n        }\r\n    }\r\n    \r\n    if (neutral) {\r\n        let bonusMana = tryGetNeutralSpecialValue(neutral, \"bonus_mana\");\r\n        if (bonusMana) {\r\n            totalMana += bonusMana;\r\n        }\r\n\r\n        let bonusInt = tryGetNeutralSpecialValue(neutral, \"bonus_intellect\");\r\n        if (bonusInt) {\r\n            totalMana += bonusInt * MANA_PER_INT_POINT;\r\n        }\r\n\r\n        let bonusAllStats = tryGetNeutralSpecialValue(neutral, \"bonus_all_stats\");\r\n        if (bonusAllStats) {\r\n            totalMana += bonusAllStats * MANA_PER_INT_POINT;\r\n        }\r\n    }\r\n\r\n    if (abilities && abilities.length > 0) {\r\n        for(let ability of abilities) {\r\n            let bonusMana = tryGetAbilitySpecialAbilityValue(ability, \"bonus_mana\");\r\n            if (bonusMana) {\r\n                totalMana += bonusMana;\r\n            }\r\n\r\n            let bonusInt = tryGetAbilitySpecialAbilityValue(ability, \"bonus_intellect\");\r\n            if (bonusInt) {\r\n                totalMana += bonusInt * MANA_PER_INT_POINT;\r\n            }\r\n\r\n            let bonusAllStats = tryGetAbilitySpecialAbilityValue(ability, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalMana += bonusAllStats * MANA_PER_INT_POINT;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            if (talent.includes(\"bonus_mp\")) {\r\n                let bonusMana = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusMana) {\r\n                    totalMana += bonusMana;\r\n                }\r\n            } else if (talent.includes(\"bonus_intelligence\")) {\r\n                let bonusInt = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusInt) {\r\n                    totalMana += bonusInt * MANA_PER_INT_POINT;\r\n                }\r\n            } else if (talent.includes(\"bonus_all_stats\")) {\r\n                let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAllStats) {\r\n                    totalMana += bonusAllStats * MANA_PER_INT_POINT;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return totalMana.toFixed(0);\r\n}\r\n\r\n/* Hero gains +0.1 regen per each point of strength\r\n* https://dota2.gamepedia.com/Health_regeneration */\r\nexport function calculateHealthRegen(hero, heroLevel, items, neutral, abilities, talents) {\r\n    if(!hero) {\r\n        return \"?\";\r\n    }\r\n\r\n    let HP_REGEN_PER_STRENGTH = 0.1;\r\n    let baseStr = parseInt(hero.AttributeBaseStrength);\r\n    let strPerLvl = parseFloat(hero.AttributeStrengthGain);\r\n\r\n    let totalHpRegen = (baseStr + (strPerLvl * (heroLevel - 1))) * HP_REGEN_PER_STRENGTH;\r\n    if (hero.StatusHealthRegen) {\r\n        totalHpRegen += parseFloat(hero.StatusHealthRegen);\r\n    }\r\n\r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            let regenAmt = tryGetItemSpecialValue(item, \"bonus_health_regen\");\r\n            if (regenAmt) {\r\n                totalHpRegen += regenAmt;\r\n            }\r\n\r\n            let bonusStr = tryGetItemSpecialValue(item, \"bonus_strength\");\r\n            if(bonusStr) {\r\n                totalHpRegen += bonusStr * HP_REGEN_PER_STRENGTH;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalHpRegen += bonusAllStats * HP_REGEN_PER_STRENGTH;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let bonusHealthRegen = tryGetNeutralSpecialValue(neutral, \"bonus_health_regen\");\r\n        if (bonusHealthRegen) {\r\n            totalHpRegen += bonusHealthRegen;\r\n        }\r\n\r\n        let bonusStr = tryGetNeutralSpecialValue(neutral, \"bonus_strength\");\r\n        if (bonusStr) {\r\n            totalHpRegen += bonusStr * HP_REGEN_PER_STRENGTH;\r\n        }\r\n        \r\n        let bonusAllStats = tryGetNeutralSpecialValue(neutral, \"bonus_all_stats\");\r\n        if (bonusAllStats) {\r\n            totalHpRegen += bonusAllStats * HP_REGEN_PER_STRENGTH;\r\n        }\r\n    } \r\n\r\n    // if (abilities && abilities.length > 0) {\r\n    //     for (let ability of abilities) {\r\n    //         let bonusRegen = tryGetAbilitySpecialAbilityValue(ability, \"bonus_health_regen\", 1);\r\n    //         if (bonusRegen) {\r\n    //             totalHpRegen += bonusRegen;\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for (let talent of talents) {\r\n            // Only get bonus_hp_regen talents\r\n            if (talent.includes(\"bonus_hp_regen\")) {\r\n                let bonusRegen = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusRegen) {\r\n                    totalHpRegen += bonusRegen;\r\n                }\r\n            } else if(talent.includes(\"bonus_strength\")) {\r\n                let bonusStr = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusStr) {\r\n                    totalHpRegen += bonusStr * HP_REGEN_PER_STRENGTH;\r\n                }\r\n            } else if (talent.includes(\"bonus_all_stats\")) {\r\n                let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAllStats) {\r\n                    totalHpRegen += bonusAllStats * HP_REGEN_PER_STRENGTH;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return totalHpRegen.toFixed(1);\r\n}\r\n\r\n/* Each point of intelligence increases the hero's mana regeneration by 0.05.\r\n * https://dota2.gamepedia.com/Mana_regeneration */\r\nexport function calculateManaRegen(hero, heroLevel, items, neutral, abilities, talents) {\r\n    if(!hero) {\r\n        return \"?\";\r\n    }\r\n    let MANA_REGEN_PER_INT = 0.05;\r\n    let baseInt = parseInt(hero.AttributeBaseIntelligence);\r\n    let intGain = parseFloat(hero.AttributeIntelligenceGain);\r\n\r\n    let totalManaRegen = (baseInt + (intGain * (heroLevel - 1))) * MANA_REGEN_PER_INT;\r\n    if (hero.StatusManaRegen) {\r\n        totalManaRegen += parseFloat(hero.StatusManaRegen);\r\n    }\r\n\r\n    let totalManaRegenPercentAmp = 100;\r\n\r\n    if(items && items.length > 0) {\r\n        for(let item of items) {\r\n            let bonusManaRegen = tryGetItemSpecialValue(item, \"bonus_mana_regen\");\r\n            if (bonusManaRegen) {\r\n                totalManaRegen += bonusManaRegen;\r\n            }\r\n\r\n            let bonusInt = tryGetItemSpecialValue(item, \"bonus_intelligence\");\r\n            if(bonusInt) {\r\n                let regen = bonusInt * MANA_REGEN_PER_INT; \r\n                totalManaRegen += regen;\r\n            }\r\n\r\n            let bonusIntellect = tryGetItemSpecialValue(item, \"bonus_intellect\");\r\n            if (bonusIntellect) {\r\n                let regen = bonusIntellect * MANA_REGEN_PER_INT; \r\n                totalManaRegen += regen;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalManaRegen += bonusAllStats * MANA_REGEN_PER_INT;\r\n            }\r\n\r\n            // If bloodstone mp regen per charge\r\n            let regenPerCharge = tryGetItemSpecialValue(item, \"regen_per_charge\");\r\n            if (item.extra?.charges && regenPerCharge) {\r\n                let bloodstoneCharges = item.extra.charges;\r\n                totalManaRegen += regenPerCharge * bloodstoneCharges;\r\n            }\r\n\r\n            /// any mana regen percentage multiplier\r\n            let manaRegenAmp = tryGetItemSpecialValue(item, \"mana_regen_multiplier\");\r\n            if (manaRegenAmp) {\r\n                totalManaRegenPercentAmp += manaRegenAmp;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let bonusInt = tryGetNeutralSpecialValue(neutral, \"bonus_intelligence\");\r\n        if (bonusInt) {\r\n            let manaRegen = bonusInt * MANA_REGEN_PER_INT;\r\n            totalManaRegen += manaRegen;\r\n        }\r\n\r\n        let bonusIntellect = tryGetNeutralSpecialValue(neutral, \"bonus_intellect\");\r\n        if (bonusIntellect) {\r\n            let regen = bonusIntellect * MANA_REGEN_PER_INT; \r\n            totalManaRegen += regen;\r\n        }\r\n\r\n        let bonusAllStats = tryGetNeutralSpecialValue(neutral, \"bonus_all_stats\");\r\n        if (bonusAllStats) {\r\n            totalManaRegen += bonusAllStats * MANA_REGEN_PER_INT;\r\n        }\r\n    }\r\n\r\n    if(abilities && abilities.length > 0) {\r\n        for (let ability of abilities) {\r\n            let manaRegen = tryGetAbilitySpecialAbilityValue(ability, \"mana_regen\", 1);\r\n            if (manaRegen) {\r\n                totalManaRegen += manaRegen;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            // Only includes bonus mana point regen talents\r\n            if(talent.includes(\"bonus_mp_regen\")) {\r\n                let value = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (value) {\r\n                    totalManaRegen += parseFloat(value);\r\n                }\r\n            } else if (talent.includes(\"bonus_intelligence\")) {\r\n                let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAllStats) {\r\n                    totalManaRegen += bonusAllStats * MANA_REGEN_PER_INT;\r\n                }\r\n            } else if (talent.includes(\"bonus_all_stats\")) {\r\n                let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAllStats) {\r\n                    totalManaRegen += bonusAllStats * MANA_REGEN_PER_INT;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    let totalMP = totalManaRegen * (totalManaRegenPercentAmp / 100);\r\n    return totalMP.toFixed(1);\r\n}\r\n\r\n// Calculates the main armor of the hero\r\n// Each point of agility increases a hero's armor by 0.167 (1/6) https://dota2.gamepedia.com/Armor\r\nexport function calculateMainArmor(hero, level, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }\r\n\r\n    let ARMOR_PER_AGI = 0.167;\r\n    let baseArmor = parseInt(hero.ArmorPhysical);\r\n    let baseAgility = parseInt(hero.AttributeBaseAgility);\r\n    let agiPerLevel = parseFloat(hero.AttributeAgilityGain);\r\n\r\n    // Determine bonus agility from perLevel. Then work out main armor\r\n    let agiPer = (agiPerLevel * (level - 1));\r\n    let totalArmor = baseArmor + ((baseAgility + agiPer) * ARMOR_PER_AGI);\r\n    \r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            let bonusArmor = tryGetItemSpecialValue(item, \"bonus_armor\");\r\n            if (bonusArmor) {\r\n                totalArmor += bonusArmor;\r\n            }\r\n\r\n            let bonusAgility = tryGetItemSpecialValue(item, \"bonus_agility\");\r\n            if (bonusAgility) {\r\n                let armor = bonusAgility * ARMOR_PER_AGI;\r\n                totalArmor += armor;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                let armor = bonusAllStats * ARMOR_PER_AGI;\r\n                totalArmor += armor;\r\n            }\r\n        }\r\n    }\r\n    \r\n    if(neutral) {\r\n        let bonusArmor = tryGetNeutralSpecialValue(neutral, \"bonus_armor\");\r\n        if (bonusArmor) {\r\n            totalArmor += bonusArmor;\r\n        }\r\n\r\n        let bonusAgi = tryGetNeutralSpecialValue(neutral, \"bonus_agility\");\r\n        if (bonusAgi) {\r\n            totalArmor += bonusAgi * ARMOR_PER_AGI;\r\n        }\r\n\r\n        let bonusAllStats = tryGetNeutralSpecialValue(neutral, \"bonus_all_stats\");\r\n        if (bonusAllStats) {\r\n            let armor = bonusAllStats * ARMOR_PER_AGI;\r\n            totalArmor += armor;\r\n        }\r\n    }\r\n\r\n    /// ToDo: If abilities active, add active ability armor\r\n    /// or if ability is passive, apply bonus\r\n    // if (abilities && abilities.length > 0) {\r\n    //     for(let ability of abilities) {\r\n    //         /// if a passive, add armor depending on ability level\r\n    //         let abilInfo = getAbilityInfoFromName(ability);\r\n    //         if (isAbilityBehaviour(abilInfo.AbilityBehavior, [ EAbilityBehaviour.PASSIVE ])) {\r\n    //             let bonusArmor = tryGetAbilitySpecialAbilityValue(ability, \"bonus_armor\");\r\n    //             if (bonusArmor) {\r\n    //                 totalArmor += bonusArmor;\r\n    //             }\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    if(talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            if (talent.includes(\"bonus_armor\")) {\r\n                let bonusArmor = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusArmor) {\r\n                    totalArmor += bonusArmor;\r\n                }\r\n            } else if (talent.includes(\"bonus_agility\")) {\r\n                let bonusAgility = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAgility) {\r\n                    totalArmor += bonusAgility * ARMOR_PER_AGI;\r\n                }\r\n            } else if (talent.includes(\"bonus_all_stats\")) {\r\n                let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAllStats) {\r\n                    totalArmor += bonusAllStats * ARMOR_PER_AGI;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Round to one decimal place\r\n    return totalArmor.toFixed(1);\r\n}\r\n\r\n/// Returns the total amount of spell amplification as a percentage applied to the hero\r\nexport function calculateTotalSpellAmp (talents, items, neutral) {\r\n    let totalSpellAmp = 0;\r\n    \r\n    // Determine if any talents provide spell amp\r\n    if (talents && talents.length > 0) {\r\n        let ampTalent = talents.find(element => element.includes(\"spell_amplify\"));\r\n        if (ampTalent) {\r\n            let talentInfo = DOTAAbilities[ampTalent.name];\r\n            if (talentInfo) {\r\n                let spellAmpInfo = talentInfo.AbilitySpecial.find(element => element.value);\r\n                if (spellAmpInfo) {\r\n                    let spellAmpAmt = parseInt(spellAmpInfo.value);\r\n                    totalSpellAmp += spellAmpAmt;\r\n\r\n                    //console.log(`Talent ${ampTalent.name} provides ${spellAmpAmt}% spell amp`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Determine if current neutral item provides any spell amplification\r\n    if (neutral) {\r\n        let foundNeutral = getItemInfoFromName(neutral.item);\r\n        if (foundNeutral) {\r\n            let spellAmpAmount = getItemSpecialAbilityValue(foundNeutral, \"spell_amp\");\r\n            if (spellAmpAmount) {\r\n                totalSpellAmp += spellAmpAmount;\r\n                //console.log(`Neutral ${neutral.item} provides ${spellAmpAmount}% spell amp`);\r\n            }\r\n        }\r\n    }\r\n\r\n    /// Determine if any items provide spell amp\r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            let spellAmpAmount = tryGetItemSpecialValue(item, \"spell_amp\");\r\n            if (spellAmpAmount) {\r\n                totalSpellAmp += spellAmpAmount;\r\n                //console.log(`Item ${items[i].item} provides ${spellAmpAmt}% spell amp`);\r\n            }\r\n\r\n            let ampPerCharge = tryGetItemSpecialValue(item, \"amp_per_charge\");\r\n            if (item.extra?.charges && ampPerCharge) {\r\n                let bloodstoneCharges = item.extra.charges;\r\n                totalSpellAmp += ampPerCharge * bloodstoneCharges;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    return totalSpellAmp.toFixed(1);\r\n}\r\n\r\nexport function calculateStatusResist(items, neutral) {\r\n    let totalStatusResist = 0.0;\r\n\r\n    if (items && items.length > 0) {\r\n        for(let i = 0; i < items.length; i++) {\r\n            if (items[i].item) {\r\n                let itemInfo = getItemInfoFromName(items[i].item);\r\n                if (itemInfo) {\r\n                    let statusResistAmount = getItemSpecialAbilityValue(itemInfo, \"status_resistance\");\r\n                    if (statusResistAmount) {\r\n                        totalStatusResist += statusResistAmount;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let statusResistAmount = tryGetNeutralSpecialValue(neutral, \"status_resistance\");\r\n        if (statusResistAmount) {\r\n            totalStatusResist += statusResistAmount;\r\n        }\r\n    }\r\n\r\n    return totalStatusResist;\r\n}\r\n\r\nexport function calculateMagicResist (items, neutral, abilities) {\r\n    // Formula from Wiki\r\n    // Total magic resistance = 1 − ((1 − natural resistance) × (1 − first resistance bonus) × (1 − second resistance bonus) × (1 + first resistance reduction) × (1 + second resistance reduction))\r\n    \r\n    // Array of magic resistance values\r\n    let resistanceBonuses = [ ];\r\n    \r\n    if (DOTAHeroes && DOTAHeroes?.npc_dota_hero_base?.MagicalResistance) {\r\n        let baseResist = parseInt(DOTAHeroes.npc_dota_hero_base.MagicalResistance);\r\n        resistanceBonuses.push(baseResist);\r\n    }\r\n\r\n    if (items && items.length > 0) {\r\n        for(let i = 0; i < items.length; i++) {\r\n            let itemInfo = getItemInfoFromName(items[i].item);\r\n            if (itemInfo) {\r\n                let magicResistAmount = getItemSpecialAbilityValue(itemInfo, \"bonus_magic_resistance\");\r\n                if (magicResistAmount) {\r\n                    resistanceBonuses.push(magicResistAmount);\r\n                }\r\n\r\n                magicResistAmount = getItemSpecialAbilityValue(itemInfo, \"magic_resistance\");\r\n                if (magicResistAmount) {\r\n                    resistanceBonuses.push(magicResistAmount);\r\n                }\r\n\r\n                magicResistAmount = getItemSpecialAbilityValue(itemInfo, \"bonus_magical_armor\");\r\n                if (magicResistAmount) {\r\n                    resistanceBonuses.push(magicResistAmount);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let magicResistAmount = tryGetNeutralSpecialValue(neutral, \"magic_resistance\");\r\n        if (magicResistAmount) {\r\n            resistanceBonuses.push(magicResistAmount);\r\n        }\r\n    }\r\n\r\n    if (abilities && abilities.length > 0) { \r\n        for(let ability of abilities) {\r\n            // let magicResistAmount = tryGetAbilitySpecialAbilityValue(ability, \"magic_resistance\");\r\n            // if (magicResistAmount) {\r\n            //     resistanceBonuses.push(magicResistAmount);\r\n            // }\r\n            \r\n            let magicResistAmount = tryGetAbilitySpecialAbilityValue(ability, \"bonus_magic_resistance\");\r\n            if (magicResistAmount) {\r\n                resistanceBonuses.push(magicResistAmount);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Divide original value into 0.x and minus from 1 to get the reverse\r\n    let edited = []\r\n    for(let i = 0; i < resistanceBonuses.length; i++) {\r\n        edited.push(1 - (resistanceBonuses[i] / 100));\r\n    }\r\n\r\n    // multiply them all together \r\n    let total = edited[0];\r\n    for(let i = 1; i < edited.length; i++) {\r\n        total *= edited[i];\r\n    }\r\n\r\n    // then minus from 1, and multiply by 100 to get value as a percentage\r\n    let percent = (1 - total) * 100;\r\n    return percent.toFixed(2);\r\n}\r\n\r\n/// Calculates the total magic resistance of the hero\r\n/// https://dota2.gamepedia.com/Magic_resistance\r\nexport function calculatePhysicalResist (totalArmor) {\r\n    // Formula from https://www.dotabuff.com/blog/2018-11-30-understanding-720-armor-changes\r\n    //( 0.052 * armor ) ÷ ( 0.9 + 0.048 * |armor|)\r\n    let physResist = (0.052 * totalArmor) / (0.9 + 0.048 * Math.abs(totalArmor));\r\n    let percent = physResist * 100;\r\n    return percent.toFixed(0);\r\n}\r\n\r\n/// Calculates evasion\r\nexport function calculateEvasion(items, neutral, abilities, talents) {\r\n    let totalEvasion = 0.0;\r\n\r\n    if (abilities && abilities.length > 0) {\r\n        for(let ability of abilities) {\r\n            let bonusEvasion = tryGetAbilitySpecialAbilityValue(ability, \"bonus_evasion\");\r\n            if (bonusEvasion) {\r\n                totalEvasion += bonusEvasion;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            if (talent.includes(\"bonus_evasion\")) {\r\n                let bonusEvasion = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusEvasion) {\r\n                    totalEvasion += bonusEvasion;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (items && items.length > 0) {\r\n        for(let i = 0; i < items.length; i++) {\r\n            if (items[i].item) {\r\n                let itemInfo = getItemInfoFromName(items[i].item);\r\n                if (itemInfo) {\r\n                    let evasionAmount = getItemSpecialAbilityValue(itemInfo, \"bonus_evasion\");\r\n                    if (evasionAmount) {\r\n                        totalEvasion += evasionAmount;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return totalEvasion;\r\n}\r\n\r\n/// Returns the minimum and maximum right click damage of a hero\r\n// atkMin, atkMax, primaryAttributeStats, heroLevel = 1\r\nexport function calculateRightClickDamage(hero, level, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }\r\n    \r\n    let heroMainAttribute = getPrimaryAttribute(hero);\r\n    let atkMin = parseInt(hero.AttackDamageMin);\r\n    let atkMax = parseInt(hero.AttackDamageMax);\r\n    let primaryAttributeStats = getPrimaryAttributeStats(hero);\r\n\r\n    // Work out how much bonus attack hero recieves from their primary attribute\r\n    let totalPrimaryAttribute = primaryAttributeStats.base + (primaryAttributeStats.perLevel * (level - 1));\r\n    // Calc additional damage from sources\r\n    let totalAdditional = 0;\r\n\r\n    /* Iterate over all items, neutral, abilities and talents to\r\n        get all primary attribute and all stat bonuses\r\n        */\r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            let allAttrKeys = primaryAttributeToItemBonusKey(heroMainAttribute);\r\n            for(let key of allAttrKeys) {\r\n                let bonusPrimaryAttr = tryGetItemSpecialValue(item, key);\r\n                if (bonusPrimaryAttr) {\r\n                    totalPrimaryAttribute += bonusPrimaryAttr;\r\n                }\r\n            }\r\n\r\n            let bonusPrimaryStat = tryGetItemSpecialValue(item, \"bonus_primary_stat\");\r\n            if (bonusPrimaryStat) {\r\n                totalPrimaryAttribute += bonusPrimaryStat;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalPrimaryAttribute += bonusAllStats;\r\n            }\r\n\r\n            let bonusDmg = tryGetItemSpecialValue(item, \"bonus_damage\");\r\n            if (bonusDmg) {\r\n                totalAdditional += bonusDmg;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let allAttrKeys = primaryAttributeToItemBonusKey(heroMainAttribute);\r\n        for(let key of allAttrKeys) {\r\n            let bonusPrimaryAttr = tryGetNeutralSpecialValue(neutral, key);\r\n            if (bonusPrimaryAttr) {\r\n                totalPrimaryAttribute += bonusPrimaryAttr;\r\n            }\r\n        }\r\n\r\n        let bonusPrimaryStat = tryGetNeutralSpecialValue(neutral, \"primary_stat\");\r\n        if (bonusPrimaryStat) {\r\n            totalPrimaryAttribute += bonusPrimaryStat;\r\n        }\r\n\r\n        let bonusDmg = tryGetNeutralSpecialValue(neutral, \"bonus_damage\");\r\n        if (bonusDmg) {\r\n            totalAdditional += bonusDmg;\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            let allAttrKeys = primaryAttributeToItemBonusKey(heroMainAttribute);\r\n            for(let key of allAttrKeys) {\r\n                if (talent.includes(key)) {\r\n                    let bonusPrimaryAttr = tryGetNeutralSpecialValue(talent, \"value\");\r\n                    if (bonusPrimaryAttr) {\r\n                        totalPrimaryAttribute += bonusPrimaryAttr;\r\n                    }\r\n                }\r\n            }\r\n            \r\n            if (talent.includes(\"bonus_all_stats\")) {\r\n                let allStats = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (allStats) {\r\n                    totalPrimaryAttribute += allStats;\r\n                }\r\n            } else if (talent.includes(\"bonus_attack_damage\")) {\r\n                let bonusDmg = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusDmg) {\r\n                    totalAdditional += bonusDmg;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /// Damage from primary attribute counts as part of the Min-Max\r\n    /// whereas bonus damage (+5 damage) from sources count as additional\r\n\r\n    let min = atkMin + totalPrimaryAttribute;\r\n    let max = atkMax + totalPrimaryAttribute;\r\n\r\n    return {\r\n        /// minimum attack damage of the hero\r\n        min: Math.floor(min).toFixed(0),\r\n        /// maximum attack damage of the hero\r\n        max: Math.floor(max).toFixed(0),\r\n        additional: totalAdditional,\r\n    };\r\n}\r\n\r\n/// Returns info on the attack time of the hero\r\nexport function calculateAttackTime(hero, level, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }\r\n    \r\n    let MAX_ATTACK_SPEED = 700;\r\n\r\n    // Check if hero has different attack rate or attack speed than base hero\r\n    let totalAttackSpeed = parseInt(getDotaBaseHero()?.BaseAttackSpeed);\r\n\r\n    /// Get base agi stats\r\n    let agiStats = getSpecificAttributeStats(EAttributes.ATTR_AGILITY, hero);\r\n    let baseAgi = agiStats.base;\r\n    let agiPerLevel = agiStats.perLevel;\r\n\r\n    let totalAgi = baseAgi + (agiPerLevel * (level - 1));\r\n\r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            let bonusAttackSpeed = tryGetItemSpecialValue(item, \"bonus_attack_speed\");\r\n            if (bonusAttackSpeed) {\r\n                totalAttackSpeed += bonusAttackSpeed;\r\n            }\r\n\r\n            let bonusAgility = tryGetItemSpecialValue(item, \"bonus_agility\");\r\n            if (bonusAgility) {\r\n                totalAgi += bonusAgility;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalAgi += bonusAllStats;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let bonusAttackSpeed = tryGetNeutralSpecialValue(neutral, \"bonus_attack_speed\");\r\n        if (bonusAttackSpeed) {\r\n            totalAttackSpeed += bonusAttackSpeed;\r\n        }\r\n    }\r\n\r\n    // Only actives that gives attack speed bonuses\r\n    // if (abilities && abilities.length > 0) {\r\n    // }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            let bonusAttackSpeed = tryGetTalentSpecialAbilityValue(talent, \"bonus_attack_speed\");\r\n            if (bonusAttackSpeed) {\r\n                totalAttackSpeed += bonusAttackSpeed;\r\n            }\r\n\r\n            let bonusAgility = tryGetTalentSpecialAbilityValue(talent, \"bonus_agility\");\r\n            if (bonusAgility) {\r\n                totalAgi += bonusAgility;\r\n            }\r\n\r\n            let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalAgi += bonusAllStats;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// Check that max atk speed hasn't been reached\r\n    if ((totalAttackSpeed + totalAgi) > MAX_ATTACK_SPEED) {\r\n        // Use totalAttackSpeed at max if so, reset agi since 1 agi = 1 atk speed\r\n        totalAttackSpeed = MAX_ATTACK_SPEED;\r\n        totalAgi = 0;\r\n    }\r\n\r\n    let attacksPerSec = ((totalAttackSpeed + totalAgi) * 0.01) / 1.7;\r\n    let attackTime = 1.7 / ((totalAttackSpeed + totalAgi) * 0.01);\r\n    attackTime = 1 / attacksPerSec;\r\n\r\n    let atkSpeed = totalAttackSpeed + totalAgi;\r\n\r\n    return {\r\n        /// Amount of seconds inbetween attacks\r\n        attackTime: attackTime.toFixed(2),\r\n        /// Amount of attacks per second\r\n        attacksPerSecond: attacksPerSec.toFixed(2),\r\n        /// Attack speed value shown in UI of dota\r\n        attackSpeed: atkSpeed.toFixed(0),\r\n    };\r\n}\r\n\r\n/// Calculates how much output damage an ability will do to an enemy, factoring in any items\r\nexport function calculateSpellDamage(abilityName, abilityInfo, abilityLevel, items, neutral, talents) {\r\n    if (!abilityLevel || !abilityInfo) {\r\n        return -1;\r\n    }\r\n\r\n    // Get normal dmg output of ability\r\n    let abilityDamageInfo = getAbilityOutputDamage(abilityInfo, abilityLevel);\r\n    \r\n    // Add up spellAmp from all bonuses to calculate at end\r\n    let totalSpellAmpPercent = 0;\r\n\r\n    /// Value bonus from talent\r\n    let talentBonus = 0;\r\n\r\n    if (items) {\r\n        // Add item spell damage increase\r\n        for(let item of items) {\r\n            let spellAmp = tryGetItemSpecialValue(item, \"spell_amp\");\r\n            if (spellAmp) {\r\n                totalSpellAmpPercent += spellAmp;\r\n            }\r\n\r\n            let bonusSpellAmp = tryGetItemSpecialValue(item, \"bonus_spell_amp\");\r\n            if (bonusSpellAmp) {\r\n                totalSpellAmpPercent += bonusSpellAmp;\r\n            }\r\n\r\n            // get current bloodstone charges and amp correctly\r\n            let chargeCount = item.extra?.charges;\r\n            let ampPerCharge = tryGetItemSpecialValue(item, \"amp_per_charge\");\r\n            if (ampPerCharge && chargeCount) {\r\n                totalSpellAmpPercent += (ampPerCharge * chargeCount);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        //Add neutral item spell dmg\r\n        let neutralInfo = getItemInfoFromName(neutral.item);\r\n        if (neutralInfo && neutralInfo.AbilitySpecial) {\r\n            for (let i = 0; i < neutralInfo.AbilitySpecial.length; i++) {\r\n                let special = neutralInfo.AbilitySpecial[i];\r\n                // Spell amp\r\n                if (special.bonus_spell_amp) {\r\n                    let bonusSpellAmp = parseInt(special.bonus_spell_amp);\r\n                    totalSpellAmpPercent += bonusSpellAmp; \r\n                }\r\n\r\n                if (special.spell_amp) {\r\n                    let bonusSpellAmp = parseInt(special.spell_amp);\r\n                    totalSpellAmpPercent += bonusSpellAmp;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        // Add spell amplify from any selected talents\r\n        for(let talent of talents) {\r\n            if (talent.includes(\"spell_amplify\")) {\r\n                let ampTalentValue = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (ampTalentValue) {\r\n                    totalSpellAmpPercent += ampTalentValue;\r\n                }\r\n            } \r\n            /// if a unique talent specific to a hero ability\r\n            else if (talent.includes(\"special_bonus_unique\")) {\r\n                /// Search Abilities_English.json for string of talent to \r\n                /// check if it is a damage talent modifier and apply\r\n                if (isDamageTalent(talent)) {\r\n                    let linkedAbility = tryGetTalentSpecialAbilityValue(talent, \"ad_linked_ability\");\r\n\r\n                    // if linked ability is equal to current one\r\n                    if (linkedAbility && linkedAbility === abilityName) {\r\n                        let value = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                        if (value) {\r\n                            talentBonus = value;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    let totalAbilDmg = abilityDamageInfo.damage + talentBonus;\r\n    let abilityDamage = calculateSpellAmp(totalAbilDmg, totalSpellAmpPercent);\r\n\r\n    return {\r\n        damage: abilityDamage === 0 ? null : abilityDamage,\r\n        isPercent: abilityDamageInfo.isPercent,\r\n    };\r\n}\r\n\r\n/// Calculates and applies spell amp to the spell damage and returns the result\r\nexport function calculateSpellAmp (spellDamage, spellAmpPercent) {\r\n    return spellDamage + ((spellDamage / 100) * spellAmpPercent);\r\n}\r\n\r\n/// Calculates ability mana cost with items, neutrals and talents that contain reductions\r\nexport function calculateManaCost(abilityInfo, abilityLevel, items, neutral, talents) {\r\n    if (abilityLevel <= 0) {\r\n        return null;\r\n    }\r\n    \r\n    let manaCost = null;\r\n\r\n    // Get inital mana cost amount\r\n    if (abilityInfo && abilityInfo.AbilityManaCost) {\r\n        manaCost = parseAbilityValueByLevel(abilityInfo.AbilityManaCost, abilityLevel);\r\n    }\r\n\r\n    // Determine mana reductions from items, neutral, talents\r\n    // Take all percentages and calculate at end\r\n    let totalManaCostReducePercent = 0;\r\n\r\n    if (items) {\r\n        for(let item of items) {\r\n            let itemInfo = getItemInfoFromName(item.item);\r\n            if(itemInfo) {\r\n                let manaCostReduceAmount = getItemSpecialAbilityValue(itemInfo, \"manacost_reduction\");\r\n                if(manaCostReduceAmount) {\r\n                    totalManaCostReducePercent += manaCostReduceAmount;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let neutralInfo = getItemInfoFromName(neutral.item);\r\n        if (neutralInfo) {\r\n            let costReductionAmount = getItemSpecialAbilityValue(neutralInfo, \"manacost_reduction\");\r\n            if (costReductionAmount) {\r\n                totalManaCostReducePercent += costReductionAmount;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (talents) {\r\n        for(let talent of talents) {\r\n            // Only apply mana reducing talents\r\n            if (talent.includes(\"mana_reduction\")) {\r\n                let reduceAmount = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (reduceAmount) {\r\n                    totalManaCostReducePercent += reduceAmount;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // If ability has a mana value and has mana reductions\r\n    if (manaCost && totalManaCostReducePercent > 0) {\r\n        let removeManaAmt = (manaCost / 100) * totalManaCostReducePercent;\r\n        manaCost -= removeManaAmt;\r\n    }\r\n\r\n    return manaCost;\r\n}\r\n\r\n/// Calculates ability cooldown with items, neutrals, talents and abilities\r\n/// https://liquipedia.net/dota2/Cooldown_Reduction\r\nexport function calculateAbilityCooldown(abilityName, abilityInfo, abilityLevel, items, neutral, talents) {\r\n    if (abilityLevel <= 0) {\r\n        return null;\r\n    }\r\n    \r\n    let cooldown = null;\r\n    let charges = null;\r\n    let fixedAmtReductionSeconds = 0;\r\n\r\n    if (abilityInfo && abilityInfo.AbilityCooldown) {\r\n        cooldown = parseAbilityValueByLevel(abilityInfo.AbilityCooldown, abilityLevel);\r\n\r\n        /// if ability uses charges, use charge cooldown\r\n        if (cooldown === 0 && abilityInfo.AbilityCharges && abilityInfo.AbilityChargeRestoreTime) {\r\n            cooldown = parseInt(abilityInfo.AbilityChargeRestoreTime);\r\n            charges = parseInt(abilityInfo.AbilityCharges);\r\n        }\r\n\r\n        // if AbilityInfo has a Scepter upgrade and items contains scepter\r\n        let requiresScepter = getAbilitySpecialAbilityValue(abilityInfo, \"RequiresScepter\") === \"1\";\r\n        if (requiresScepter && itemsContainsScepter(items)) {\r\n            let scepterCharges = getIncludesAbilitySpecialAbilityValue(abilityInfo, \"charges\", abilityLevel);\r\n            charges = scepterCharges;\r\n        }\r\n    }\r\n\r\n    let allReductions = [];\r\n    if (items) {\r\n        for (let item of items) {\r\n            if (item && item.item) {\r\n                let itemInfo = getItemInfoFromName(item.item);\r\n                if (itemInfo) {\r\n                    let bonusCooldown = getItemSpecialAbilityValue(itemInfo, \"bonus_cooldown\");\r\n                    if (bonusCooldown) {\r\n                        allReductions.push({ amount: bonusCooldown, source: item.item });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let neutralInfo = getItemInfoFromName(neutral.item);\r\n        if (neutralInfo) {\r\n            let bonusCooldown = getItemSpecialAbilityValue(neutralInfo, \"bonus_cooldown\");\r\n            if (bonusCooldown) {\r\n                allReductions.push({ amount: bonusCooldown, source: neutral });\r\n            } \r\n        }\r\n    }\r\n\r\n    if (talents) {\r\n        for(let talent of talents) {\r\n            // Ignore talent if it isn't a cd reduction one\r\n            if (talent.includes(\"cooldown_reduction\")) {\r\n                let reduction = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (reduction) {\r\n                    allReductions.push({ amount: reduction, source: talent });\r\n                }\r\n            }\r\n            else if (talent.includes(\"special_bonus_unique\")) {\r\n                if (isCooldownTalent(talent)) {\r\n                    let linkedAbility = tryGetTalentSpecialAbilityValue(talent, \"ad_linked_ability\");\r\n                    if (linkedAbility === abilityName) {\r\n                        let value = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                        if (value) {\r\n                            fixedAmtReductionSeconds += value;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /// Remove any fixed amount cooldown reductions first before\r\n    /// applying any other reductions\r\n    let totalCooldown = cooldown - fixedAmtReductionSeconds;\r\n\r\n    let sourceOfReductions = [];\r\n    for(let reduction of allReductions) {\r\n        let decimal = reduction.amount / 100;\r\n        sourceOfReductions.push((1 - decimal));\r\n    }\r\n\r\n    for(let reduce of sourceOfReductions) {\r\n        totalCooldown *= reduce;\r\n    }\r\n\r\n    return {\r\n        charges: charges,\r\n        cooldown: totalCooldown > 0 ? totalCooldown.toFixed(2) : null,\r\n    };\r\n}\r\n\r\n/// Calculates the movement speed of the hero, factoring in their items, neutral, abilities and talents\r\nexport function calculateMoveSpeed (hero, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }\r\n\r\n    let baseSpeed = parseInt(hero.MovementSpeed);\r\n    let flatBonus = 0;\r\n    let percentageBasedBonuses = 0;\r\n\r\n    if (items && items.length > 0) {\r\n        for (let item of items) {\r\n            let moveSpeed = tryGetItemSpecialValue(item, \"bonus_movement_speed\");\r\n            if (moveSpeed) {\r\n                flatBonus += moveSpeed;\r\n            }\r\n            \r\n            let bonusMovement = tryGetItemSpecialValue(item, \"bonus_movement\");\r\n            if (bonusMovement) {\r\n                flatBonus += bonusMovement;\r\n            }\r\n\r\n            let moveSpeedPercentBonus = tryGetItemSpecialValue(item, \"movement_speed_percent_bonus\");\r\n            if (moveSpeedPercentBonus) {\r\n                percentageBasedBonuses += moveSpeedPercentBonus;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let bonusMoveSpeed = tryGetNeutralSpecialValue(neutral, \"bonus_movement_speed\");\r\n        if (bonusMoveSpeed) {\r\n            flatBonus += bonusMoveSpeed;\r\n        }\r\n\r\n        let moveSpeedPercentBonus = tryGetNeutralSpecialValue(neutral, \"movement_speed_percent_bonus\");\r\n        if (moveSpeedPercentBonus) {\r\n            percentageBasedBonuses += moveSpeedPercentBonus;\r\n        }\r\n    }\r\n\r\n    /// Abilities are actives so dont include since no way in UI to activate an ability yet\r\n    // if (abilities && abilities.length > 0) {\r\n    //     for(let ability of abilities) {\r\n    //         let bonusMoveSpeed = tryGetAbilitySpecialAbilityValue(ability, \"bonus_movespeed\");\r\n    //         if (bonusMoveSpeed) {\r\n    //             flatBonus += bonusMoveSpeed;\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            if (talent.includes(\"bonus_movement_speed\")) {\r\n                let bonusSpeed = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusSpeed) {\r\n                    flatBonus += bonusSpeed;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    let total = baseSpeed + flatBonus;\r\n    return total;\r\n}\r\n\r\nexport function calculateAttackRange (hero, level, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }\r\n\r\n    let isHeroRanged = hero.AttackCapabilities === \"DOTA_UNIT_CAP_RANGED_ATTACK\";\r\n\r\n    let baseRange = parseInt(hero.AttackRange);\r\n    let totalAttackRange = baseRange;\r\n\r\n    // Dont add bonuses if hero isn't ranged\r\n    if (isHeroRanged) {\r\n        if (items && items.length > 0) {\r\n            for(let item of items) {\r\n                let baseRange = tryGetItemSpecialValue(item, \"base_attack_range\");\r\n                if (baseRange) {\r\n                    totalAttackRange += baseRange;\r\n                }\r\n            }\r\n        }\r\n    \r\n        if (neutral) {\r\n            let rangeBonus = tryGetNeutralSpecialValue(neutral, \"attack_range_bonus\");\r\n            if (rangeBonus) {\r\n                totalAttackRange += rangeBonus;\r\n            }\r\n    \r\n            let bonusAttackRange = tryGetNeutralSpecialValue(neutral, \"bonus_attack_range\");\r\n            if (bonusAttackRange) {\r\n                totalAttackRange += bonusAttackRange;\r\n            }\r\n        }\r\n\r\n        if (abilities && abilities.length > 0) {\r\n            for(let ability of abilities) {\r\n                let bonusAttackRange = tryGetAbilitySpecialAbilityValue(ability, \"bonus_attack_range\", 1);\r\n                if (bonusAttackRange) {\r\n                    totalAttackRange += bonusAttackRange;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (talents && talents.length > 0) {\r\n            for(let talent of talents) {\r\n                if (talent.includes(\"bonus_attack_range\")) {\r\n                    let bonusAttackRange = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                    if (bonusAttackRange) {\r\n                        totalAttackRange += bonusAttackRange;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        // Melee units, apply any melee attack range bonuses\r\n        if (neutral) {\r\n            let bonusAttackRange = tryGetNeutralSpecialValue(neutral, \"melee_attack_range\");\r\n            if (bonusAttackRange) {\r\n                totalAttackRange += bonusAttackRange;\r\n            }\r\n        }\r\n    }\r\n\r\n    return totalAttackRange;\r\n}\r\n\r\n/// Calculates the correct attribute stats for a given hero\r\nexport function calculateAttribute(attribute, hero, level, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }\r\n\r\n    let attributeStats = getSpecificAttributeStats(attribute, hero);\r\n    let baseStrength = attributeStats.base;\r\n    let strengthPerLevel = attributeStats.perLevel;\r\n\r\n    let totalAttribute = baseStrength + (strengthPerLevel * (level - 1));\r\n    let additionalAttribute = 0;\r\n\r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            switch(attribute) {\r\n                case EAttributes.ATTR_STRENGTH:\r\n                    {\r\n                        let bonusStr = tryGetItemSpecialValue(item, \"bonus_strength\");\r\n                        if (bonusStr) {\r\n                            additionalAttribute += bonusStr;\r\n                        }\r\n                        break;\r\n                    }\r\n                case EAttributes.ATTR_AGILITY:\r\n                    {\r\n                        let bonusAgi = tryGetItemSpecialValue(item, \"bonus_agility\");\r\n                        if (bonusAgi) {\r\n                            additionalAttribute += bonusAgi;\r\n                        }\r\n                        break;\r\n                    }\r\n                case EAttributes.ATTR_INTELLIGENCE:\r\n                    {\r\n                        let bonusInt = tryGetItemSpecialValue(item, \"bonus_intellect\");\r\n                        if (bonusInt) {\r\n                            additionalAttribute += bonusInt;\r\n                        }\r\n                        break;    \r\n                    }\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        switch(attribute) {\r\n            case EAttributes.ATTR_STRENGTH:\r\n                    {\r\n                        let bonusStr = tryGetNeutralSpecialValue(neutral, \"bonus_strength\");\r\n                        if (bonusStr) {\r\n                            additionalAttribute += bonusStr;\r\n                        }\r\n                        break;\r\n                    }\r\n            case EAttributes.ATTR_AGILITY:\r\n                {\r\n                    let bonusAgi = tryGetNeutralSpecialValue(neutral, \"bonus_agility\");\r\n                    if (bonusAgi) {\r\n                        additionalAttribute += bonusAgi;\r\n                    }\r\n                    break;\r\n                }\r\n            case EAttributes.ATTR_INTELLIGENCE:\r\n                {\r\n                    let bonusInt = tryGetNeutralSpecialValue(neutral, \"bonus_intelligence\");\r\n                    if (bonusInt) {\r\n                        additionalAttribute += bonusInt;\r\n                    }\r\n                    break;    \r\n                }\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            switch(attribute) {\r\n                case EAttributes.ATTR_STRENGTH:\r\n                        {\r\n                            if (talent.includes(\"bonus_strength\")) {\r\n                                let bonusStr = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                                if (bonusStr) {\r\n                                    additionalAttribute += bonusStr;\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                case EAttributes.ATTR_AGILITY:\r\n                    {\r\n                        if (talent.includes(\"bonus_agility\")) {\r\n                            let bonusAgi = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                            if (bonusAgi) {\r\n                                additionalAttribute += bonusAgi;\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                case EAttributes.ATTR_INTELLIGENCE:\r\n                    {\r\n                        if (talent.includes(\"bonus_intelligence\")) {\r\n                            let bonusInt = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                            if (bonusInt) {\r\n                                additionalAttribute += bonusInt;\r\n                            }\r\n                        }\r\n                        break;    \r\n                    }\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    // If primary attribute, round down else us normal rounding\r\n    let isPrimaryAttr = getPrimaryAttribute(hero) === attribute;\r\n    if (isPrimaryAttr) {\r\n        totalAttribute = Math.floor(totalAttribute)\r\n    } else {\r\n        totalAttribute = totalAttribute.toFixed(0);\r\n    }\r\n\r\n    return {\r\n        /// Base attribute amount, includes per level\r\n        attribute: totalAttribute,\r\n        /// Additional attribute amount, from items/neutral/abils/talents\r\n        additionalAttribute: additionalAttribute.toFixed(0),\r\n        /// Amount of strength per level\r\n        perLevel: strengthPerLevel,\r\n    };\r\n}\r\n\r\nexport function calculateAbilityCastRange (abilityName, abilityInfo, abilityLevel, items, neutral, talents) {\r\n    if (!abilityInfo) {\r\n        return \"?\";\r\n    }\r\n\r\n    /// Use CastRange or find range inside AbilitySpecial\r\n    let baseCastRange = parseInt(abilityInfo.AbilityCastRange);\r\n    if (!baseCastRange) {\r\n        let foundRange = getAbilitySpecialCastRangeValue(abilityInfo, \"_range\", abilityLevel.level);\r\n        if (foundRange) {\r\n            baseCastRange = foundRange;\r\n        } else {\r\n            // Cant determine a cast range, none\r\n            return null;\r\n        }\r\n    }\r\n\r\n    let totalBonusRange = 0;\r\n\r\n    if (items && items.length > 0) {\r\n        for (let item of items) {\r\n            let rangeBonus = tryGetItemSpecialValue(item, \"cast_range_bonus\");\r\n            if (rangeBonus) {\r\n                totalBonusRange += rangeBonus;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let rangeBonus = tryGetNeutralSpecialValue(neutral, \"cast_range_bonus\");\r\n        if (rangeBonus) {\r\n            totalBonusRange += rangeBonus;\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for (let talent of talents) {\r\n            if (talent.includes(\"bonus_cast_range\")) {\r\n                let rangeBonus = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (rangeBonus) {\r\n                    totalBonusRange += rangeBonus;\r\n                }\r\n            }\r\n            else if (talent.includes(\"special_bonus_unique\")) {\r\n                if (isCastRangeTalent(talent)) {\r\n                    let linkedAbility = tryGetTalentSpecialAbilityValue(talent, \"ad_linked_ability\");\r\n                    if (linkedAbility === abilityName) {\r\n                        let value = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                        if (value) {\r\n                            totalBonusRange += value;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return baseCastRange + totalBonusRange;\r\n}\r\n\r\n/// Calculates the normal sell price of an item from it's ItemInfo\r\nexport function calculateItemSellCost (itemInfo) {\r\n    if (itemInfo && itemInfo.ItemCost) {\r\n        let cost = parseInt(itemInfo.ItemCost);\r\n        // value rounded down\r\n        return Math.floor(cost / 2);\r\n    }\r\n    return 0;\r\n}","import React, { Component } from 'react';\r\n\r\nimport {\r\n    calculateSpellDamage\r\n} from \"../../utility/calculate\";\r\nimport { \r\n    tryGetLocalizedString, \r\n    getTooltipAbilityString,\r\n} from \"../../utility/data-helpers/language\";\r\n\r\n/// Retrieves ability damage and returns display value\r\nfunction parseDamage(abilityName, abilInfo, abilLvl, items, neutral, talents) {\r\n    let abilityDamage = calculateSpellDamage(abilityName, abilInfo, abilLvl, items, neutral, talents);\r\n    if (abilityDamage && abilityDamage.damage) {\r\n        // force to be to two decimal places\r\n        let damage = abilityDamage.damage.toFixed(2);\r\n        if (abilityDamage.isPercent) {\r\n            damage += \"%\";\r\n        }\r\n        return damage;\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nfunction getAbilityNameFromStrings(strings, key) {\r\n    if (strings && key) {\r\n        return tryGetLocalizedString(strings, key);\r\n    } else {\r\n        return \"?\";\r\n    }\r\n}\r\n\r\nclass DamageOutput extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            ability: props.ability,\r\n            abilityInfo: props.abilityInfo,\r\n            levelInfo: props.levelInfo,\r\n\r\n            items: props.items,\r\n            neutral: props.neutral,\r\n            selectedTalents: props.selectedTalents,\r\n\r\n            abilityStrings: props.abilityStrings,\r\n            dotaStrings: props.dotaStrings,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(prevProps.abilityInfo !== this.props.abilityInfo) {\r\n            this.setState({ abilityInfo: this.props.abilityInfo });\r\n        }\r\n\r\n        if (prevProps.levelInfo !== this.props.levelInfo) {\r\n            this.setState({ levelInfo: this.props.levelInfo });\r\n        }\r\n\r\n        if (prevProps.items !== this.props.items) {\r\n            this.setState({ items: this.props.items });\r\n        }\r\n\r\n        if (prevProps.neutral !== this.props.neutral) {\r\n            this.setState({ neutral: this.props.neutral });\r\n        }\r\n\r\n        if (prevProps.selectedTalents !== this.props.selectedTalents) {\r\n            this.setState({ selectedTalents: this.props.selectedTalents });\r\n        }\r\n\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ abilityStrings: this.props.abilityStrings });\r\n        }\r\n        if (prevProps.dotaStrings !== this.props.dotaStrings) {\r\n            this.setState({ dotaStrings: this.props.dotaStrings });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let abilityDamage = parseDamage(this.state.ability, this.state.abilityInfo, this.state.levelInfo?.level, this.state.items, this.state.neutral, this.state.selectedTalents);\r\n        return (\r\n            <div className=\"w-100 h-100\">\r\n                <h5>{getTooltipAbilityString(this.state.abilityStrings, this.state.ability)}</h5>\r\n                {\r\n                    abilityDamage && \r\n                    <h6>\r\n                        { (getAbilityNameFromStrings(this.state.abilityStrings, \"dota_ability_variable_damage\") + \":\")}\r\n                        {' '}\r\n                        { abilityDamage }\r\n                    </h6>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DamageOutput;","import React, { Component } from 'react';\r\nimport {\r\n    calculateAbilityCooldown\r\n} from \"../../utility/calculate\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faClock, faCircle }from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nclass Cooldown extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            abilityLevel: props.abilityLevel,\r\n            abilityCooldown: props.cooldown,\r\n\r\n            ability: props.ability,\r\n            abilityInfo: props.abilityInfo,\r\n            items: props.items,\r\n            neutral: props.neutral,\r\n            selectedTalents: props.selectedTalents,\r\n\r\n            cooldown: null,\r\n            charges: null,\r\n        };\r\n\r\n        this.updateCooldown = this.updateCooldown.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateCooldown();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                abilityLevel: this.props.abilityLevel,\r\n                abilityCooldown: this.props.cooldown,\r\n\r\n                ability: this.props.ability,\r\n                items: this.props.items,\r\n                neutral: this.props.neutral,\r\n                selectedTalents: this.props.selectedTalents,\r\n            }, () => this.updateCooldown() );\r\n        }\r\n    }\r\n\r\n    updateCooldown() {\r\n        let currentCooldownInfo = calculateAbilityCooldown(this.state.ability, this.state.abilityInfo, this.state.abilityLevel, this.state.items, this.state.neutral, this.state.selectedTalents);\r\n        \r\n        this.setState({\r\n            cooldown: currentCooldownInfo?.cooldown,\r\n            charges: currentCooldownInfo?.charges,\r\n        });\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                {\r\n                    this.state.cooldown &&\r\n                        <div className=\"d-flex\" title=\"cooldown\">\r\n                            <FontAwesomeIcon className=\"my-auto mr-1\" icon={faClock} />\r\n                            <div>\r\n                                { this.state.cooldown }\r\n                            </div>\r\n                        </div>\r\n                }\r\n                {\r\n                    this.state.charges &&\r\n                        <div className=\"d-flex\" title=\"charges\">\r\n                            <FontAwesomeIcon className=\"my-auto mr-1\" icon={faCircle} />\r\n                            <div>\r\n                                { this.state.charges }\r\n                            </div>\r\n                        </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Cooldown;","import React, { Component } from 'react';\r\nimport { \r\n    calculateManaCost \r\n} from '../../utility/calculate';\r\n\r\nclass ManaCost extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            ability: props.ability,\r\n            abilityLevel: props.abilityLevel,\r\n\r\n            items: props.items,\r\n            neutral: props.neutral,\r\n            selectedTalents: props.selectedTalents,\r\n        };\r\n\r\n        this.updateMana = this.updateMana.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                ability: this.props.ability,\r\n                abilityLevel: this.props.abilityLevel,\r\n\r\n                items: this.props.items,\r\n                neutral: this.props.neutral,\r\n                selectedTalents: this.props.selectedTalents,\r\n            });\r\n        }\r\n    }\r\n\r\n    updateMana() {\r\n        let manaCost = -1;\r\n        if (this.state.ability) {\r\n            manaCost = calculateManaCost(this.state.ability, this.state.abilityLevel, this.state.items, this.state.neutral, this.state.selectedTalents);\r\n        }\r\n        \r\n        // this.setState({\r\n        //     abilityManaCost: manaCost,\r\n        // });\r\n        return manaCost;\r\n    }\r\n\r\n    render() {\r\n        let manaCost = this.updateMana();\r\n        return (\r\n            <div>\r\n                { \r\n                    manaCost &&\r\n                        <div className=\"mana-cost d-flex\" title=\"mana cost\">\r\n                            <div className=\"my-auto mr-1\" style={{ \r\n                                height: \"10px\",\r\n                                width: \"10px\",\r\n                                backgroundColor: \"rgb(69, 148, 207)\",\r\n                            }}/>\r\n                            <div>{ manaCost }</div>\r\n                        </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ManaCost;","import React, { Component } from 'react';\r\nimport { \r\n    getAbilityBehaviours,\r\n    getAbilitySpecialExtraValues\r\n\r\n} from \"../../utility/dataHelperAbilities\";\r\nimport { \r\n    getTooltipString,\r\n    getLocalizedString,\r\n    containsLocalizedString\r\n} from \"../../utility/data-helpers/language\";\r\nimport {\r\n    calculateAbilityCastRange\r\n} from \"../../utility/calculate\";\r\n\r\nfunction TypeValueUI (props) {\r\n    return (\r\n        <div className=\"d-flex\" style={{ fontSize: \"0.85rem\"}}>\r\n            <div className=\"mr-2\">{props.type}</div>\r\n            {\r\n                typeof(props.value) === \"string\" && props.value.includes(\"<\") ?    \r\n                <div dangerouslySetInnerHTML={{ __html: props.value.replace(\"\\\\\", \"\") }}></div>\r\n                :\r\n                <div>{props.value}</div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nclass AbilityDetails extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            ability: props.ability,\r\n            abilityInfo: props.abilityInfo,\r\n            levelInfo: props.levelInfo,\r\n\r\n            items: props.items,\r\n            neutral: props.neutral,\r\n            selectedTalents: props.selectedTalents,\r\n\r\n            abilityBehaviours: null,\r\n            castRange: 0,\r\n\r\n            abilityStrings: props.abilityStrings,\r\n            dotaStrings: props.dotaStrings,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(prevProps.abilityInfo !== this.props.abilityInfo) {\r\n            this.setState({ \r\n                abilityInfo: this.props.abilityInfo,\r\n            });\r\n        }\r\n\r\n        if (prevProps.levelInfo !== this.props.levelInfo) {\r\n            this.setState({ \r\n                levelInfo: this.props.levelInfo \r\n            });\r\n        }\r\n\r\n        if (prevProps.items !== this.props.items) {\r\n            this.setState({ \r\n                items: this.props.items \r\n            });\r\n        }\r\n\r\n        if (prevProps.neutral !== this.props.neutral) {\r\n            this.setState({ \r\n                neutral: this.props.neutral \r\n            });\r\n        }\r\n\r\n        if (prevProps.selectedTalents !== this.props.selectedTalents) {\r\n            this.setState({ \r\n                selectedTalents: this.props.selectedTalents \r\n            });\r\n        }\r\n\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ \r\n                abilityStrings: this.props.abilityStrings \r\n            });\r\n        }\r\n        if (prevProps.dotaStrings !== this.props.dotaStrings) {\r\n            this.setState({ \r\n                dotaStrings: this.props.dotaStrings \r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let castRangeAmt = calculateAbilityCastRange(this.state.ability, this.state.abilityInfo, this.state.levelInfo, this.state.items, this.state.neutral, this.state.selectedTalents);\r\n        let valuesInformation = getAbilitySpecialExtraValues(this.state.ability, this.state.abilityInfo, this.state.levelInfo.level, this.state.selectedTalents);\r\n        let abilityBehaviours = getAbilityBehaviours(this.state.abilityInfo);\r\n        return (\r\n            <div className=\"mb-2\">\r\n                {\r\n                    abilityBehaviours && abilityBehaviours.map((value, index) => {\r\n                        return (\r\n                            <TypeValueUI \r\n                                key={index}\r\n                                type={ getLocalizedString(this.state.dotaStrings, value.key) } \r\n                                value={ typeof value.value === \"object\" ? value.value.map((val) => {\r\n                                        return getLocalizedString(this.state.dotaStrings, val)\r\n                                    }).join(', ') : getLocalizedString(this.state.dotaStrings, value.value) \r\n                                } />\r\n                        );\r\n                    })\r\n                }\r\n                <div className=\"py-1\" />\r\n                {\r\n                    castRangeAmt &&\r\n                        <TypeValueUI \r\n                            type={getLocalizedString(this.state.abilityStrings, \"dota_ability_variable_cast_range\").toUpperCase() + \":\"}\r\n                            value={castRangeAmt} />\r\n                }\r\n                <div className=\"py-1\" />\r\n                {\r\n                    valuesInformation && valuesInformation.map((value, index) => {\r\n                        if (containsLocalizedString(this.state.abilityStrings, value.key)) {\r\n                            return (\r\n                                <TypeValueUI \r\n                                    key={ value.value }\r\n                                    type={ getLocalizedString(this.state.abilityStrings, value.key) }\r\n                                    value={ value.value } />\r\n                            );   \r\n                        }\r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AbilityDetails;","import React, { Component } from 'react';\r\nimport {\r\n    Row, \r\n    Col,\r\n    Button\r\n} from \"react-bootstrap\";\r\n\r\nimport { DOTAAbilities } from \"../../data/dota2/json/npc_abilities.json\";\r\n\r\nimport {\r\n    itemsContainsScepter\r\n} from \"../../utility/dataHelperItems\";\r\n\r\nimport DamageOutput from \"./DamageOutput\";\r\nimport Cooldown from \"./Cooldown\";\r\nimport ManaCost from \"./ManaCost\";\r\nimport AbilityDetails from \"./AbilityDetails\";\r\nimport \"./Abilities.css\";\r\n\r\nfunction getAbilityLevel (levelInfo, abilityIndex, abilityInfo, onLevelChanged) {\r\n    if (levelInfo && abilityInfo)\r\n    {\r\n        /// Determine max level of ability\r\n        var maxLvl = abilityInfo.AbilityType === \"DOTA_ABILITY_TYPE_ULTIMATE\" ? 3 : 4;\r\n        if (abilityInfo.MaxLevel)\r\n            maxLvl = parseInt(abilityInfo.MaxLevel);\r\n        \r\n        var html = [];\r\n        for(var i = 0; i < maxLvl; i++) {\r\n            html.push(\r\n                <Button \r\n                    key={i} \r\n                    variant=\"outline-secondary\"\r\n                    onClick={(e) => onLevelChanged(e)}\r\n                    data-lvlindex={abilityIndex}\r\n                    data-btnindex={i}>\r\n                    <div className={ i < levelInfo.level ? \"levelled\" : \"unlevelled\"}></div>\r\n                </Button>\r\n            );\r\n        }\r\n        return html;\r\n    }\r\n    else\r\n    {\r\n        return <div>?</div>\r\n    }\r\n}\r\n\r\nfunction getLevelInfo (abilities) {\r\n    if (abilities) {\r\n        return abilities.map((abil, index) => {\r\n            return { ability: index, level: 1 };\r\n        });\r\n    }\r\n    return [ ];\r\n}\r\n\r\nclass Abilities extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        var abils = this.filterAbilities(props.abilities);\r\n        var abilLevels = getLevelInfo(abils);\r\n\r\n        this.state = {\r\n            heroName: props.heroName,\r\n            abilities: abils,\r\n            abilityLevels: abilLevels,\r\n            items: props.items,\r\n            neutral: props.neutral,\r\n            selectedTalents: props.selectedTalents,\r\n\r\n            abilityStrings: props.abilityStrings,\r\n            dotaStrings: props.dotaStrings,\r\n\r\n            displayDamage: props.displayDamage,\r\n        };\r\n\r\n        this.onLevelChanged = this.onLevelChanged.bind(this);\r\n        this.filterAbilities = this.filterAbilities.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.heroName !== this.props.heroName) {\r\n            this.setState({\r\n                heroName: this.props.heroName,\r\n            });\r\n        }\r\n\r\n        if (prevProps.abilities !== this.props.abilities) {\r\n            var abils = this.filterAbilities(this.props.abilities);\r\n            this.setState({\r\n                abilities: abils,\r\n                abilityLevels: getLevelInfo(abils),\r\n            });\r\n        }\r\n\r\n        if (prevProps.items !== this.props.items) {\r\n            this.setState({ items: this.props.items });\r\n        }\r\n        if (prevProps.neutral !== this.props.neutral) {\r\n            this.setState({ neutral: this.props.neutral });\r\n        }\r\n        if (prevProps.selectedTalents !== this.props.selectedTalents) {\r\n            this.setState({ selectedTalents: this.props.selectedTalents });\r\n        }\r\n\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ abilityStrings: this.props.abilityStrings });\r\n        }\r\n        if (prevProps.dotaStrings !== this.props.dotaStrings) {\r\n            this.setState({ dotaStrings: this.props.dotaStrings });\r\n        }\r\n    }\r\n    \r\n    // Remove any undefined, hidden abilities\r\n    filterAbilities(abils) {\r\n        if (abils) {\r\n            return abils.filter(function (val) {\r\n                return val && val !== \"generic_hidden\";\r\n            });\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    onLevelChanged(e) {\r\n        // If click on inner element\r\n        if (e.target.tagName.toLowerCase() !== \"button\") {\r\n            e.target = e.target.parentElement;\r\n        }\r\n\r\n        var levelIndex = parseInt(e.target.dataset.lvlindex);\r\n        var abilities = this.state.abilityLevels;\r\n        var targetLevel = parseInt(e.target.dataset.btnindex) + 1;\r\n        // Clicked same level, set to 0\r\n        if (abilities[levelIndex].level === targetLevel) {\r\n            abilities[levelIndex].level = 0;\r\n        } else {\r\n            // Set Level's new value to which btn was pressed\r\n            abilities[levelIndex].level = targetLevel;\r\n        }\r\n\r\n        this.setState({\r\n            abilityLevels: abilities,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Row>\r\n                {\r\n                    this.state.abilities && this.state.abilityLevels && this.state.abilities.map((value, index) => {\r\n                        // Info about the ability\r\n                        let ability = DOTAAbilities[value];\r\n                        if (!ability) {\r\n                            console.log(`Unable to find info on ability '${value}'`);\r\n                        }\r\n                        // Current level of the ability\r\n                        let levelInfo = this.state.abilityLevels.find(abilVal => abilVal.ability === index);\r\n                        if (!ability && value) {\r\n                            return <div key={value}>?</div>\r\n                        }\r\n\r\n                        // Dont add any scepter abilities unless hero has scepter\r\n                        if (ability && ability.IsGrantedByScepter && !itemsContainsScepter(this.state.items)) {\r\n                            return;\r\n                        }\r\n                        return (\r\n                            <Col key={ability.ID} className=\"d-flex flex-column justify-content-top\">\r\n                                <img\r\n                                    className=\"h-100 align-self-center\"\r\n                                    style={{ maxWidth: \"90px\", maxHeight: \"90px\" }}\r\n                                    src={`http://cdn.dota2.com/apps/dota2/images/abilities/${value}_hp1.png`} \r\n                                    alt={ability.ID} />\r\n                                <Row className=\"px-4\">\r\n                                    <Col md={6}>\r\n                                        {/* Cooldown */}\r\n                                        <Cooldown \r\n                                            ability={value} \r\n                                            abilityInfo={ability}\r\n                                            abilityLevel={levelInfo.level} \r\n                                            cooldown={ability.AbilityCooldown}\r\n                                            items={this.state.items}\r\n                                            neutral={this.state.neutral}\r\n                                            selectedTalents={this.state.selectedTalents} />\r\n                                    </Col>\r\n                                    <Col md={6}>\r\n                                        {/* Mana Cost */}\r\n                                        <ManaCost \r\n                                            ability={ability}\r\n                                            abilityLevel={levelInfo.level} \r\n                                            items={this.state.items}\r\n                                            neutral={this.state.neutral}\r\n                                            selectedTalents={this.state.selectedTalents} />\r\n                                    </Col>\r\n                                </Row>\r\n                                <div className=\"align-self-center pt-2 d-flex\">\r\n                                    {\r\n                                        this.state.abilityLevels && !ability.IsGrantedByScepter && getAbilityLevel(levelInfo, index, ability, this.onLevelChanged)\r\n                                    }\r\n                                </div>\r\n                                <div className=\"py-1\">\r\n                                    {\r\n                                        this.state.displayDamage && \r\n                                            <DamageOutput \r\n                                                ability={value}\r\n                                                abilityInfo={ability} \r\n                                                levelInfo={levelInfo}\r\n                                                items={this.state.items}\r\n                                                neutral={this.state.neutral} \r\n                                                selectedTalents={this.state.selectedTalents} \r\n                                                abilityStrings={this.state.abilityStrings} \r\n                                                dotaStrings={this.state.dotaStrings} />\r\n                                    }\r\n                                </div>\r\n                                <div className=\"py-1\">\r\n                                    <AbilityDetails \r\n                                        ability={value}\r\n                                        abilityInfo={ability} \r\n                                        levelInfo={levelInfo}\r\n                                        items={this.state.items}\r\n                                        neutral={this.state.neutral} \r\n                                        selectedTalents={this.state.selectedTalents}\r\n                                        abilityStrings={this.state.abilityStrings} \r\n                                        dotaStrings={this.state.dotaStrings} />\r\n                                </div>\r\n                            </Col>\r\n                        );\r\n                    })\r\n                }\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Abilities;","import Abilities from \"./Abilities\";\r\n\r\nexport default Abilities;","import React from \"react\";\r\n\r\nexport function filterItemName (name) {\r\n    if (name) {\r\n        let item = name.split('_');\r\n        item.shift();\r\n        item = item.join('_');\r\n        return item;\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\n/// Gets an item icon from it's name. For exmaple \"item_mango_tree\"\r\nexport function getItemIcon (itemName, width, height, scale) {\r\n    // Remove 'item_' prefix, split by _, remove \"item\" and join again\r\n    let item = filterItemName(itemName);\r\n\r\n    // Width and height of each item in item_stylesheet\r\n    if (item) {\r\n        return <span \r\n                    className={ 'sprite sprite-' + item + '_png '} \r\n                    alt={item} \r\n                    data-item={itemName} \r\n                    style={{ transform: `scale(${scale}, ${scale})`, transformOrigin: \"top left\" }} />\r\n    } else {\r\n        return <span \r\n                style={{ backgroundColor: \"#212121\", width: width, height: height, transform: `scale(${scale}, ${scale})`, display: \"block\", transformOrigin: \"top left\" }} />\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport {\r\n    Tabs,\r\n    Tab,\r\n    Button,\r\n    Form,\r\n    ListGroup\r\n} from \"react-bootstrap\";\r\nimport { getLocalizedString } from '../../utility/data-helpers/language';\r\nimport { DOTAAbilities } from \"../../data/dota2/json/items.json\";\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faMinus } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport {\r\n    getItemIcon\r\n} from \"../../utility/spriteHelper\";\r\n\r\nimport \"./ItemSelector.css\";\r\nimport \"../../css/dota_items.css\";\r\n\r\n\r\nfunction getItemsByQuality(itemsArray, matchArray) {\r\n    return itemsArray.filter((itemInfo) => {\r\n        var quality = itemInfo.item.ItemQuality;\r\n        if (quality) { //(quality === \"consumable\" || quality === \"component\" || quality === \"secret_shop\")) {\r\n            for(var i = 0; i < matchArray.length; i++) {\r\n                if (quality === matchArray[i]) {\r\n                    return itemInfo;\r\n                }\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction ItemIcon(props) {\r\n    return (\r\n            <div \r\n                key={props.keyName} \r\n                title={props.itemName} \r\n                onClick={props.onClick}\r\n                data-item={props.itemName}\r\n                className=\"m-1\" \r\n                style={{ width: `calc(88px * ${props.scale})`, height: `calc(64px * ${props.scale})` }}>\r\n                { \r\n                    getItemIcon(props.itemName, \"88px\", \"64px\", props.scale) \r\n                }\r\n            </div>\r\n    );\r\n}\r\n\r\nfunction TabHeading(props) {\r\n    return (\r\n        <h6 className=\"px-3 mb-0\">{props.text}</h6>\r\n    );\r\n}\r\n\r\nclass ItemSelector extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let selectableItems = Object.keys(DOTAAbilities).filter((value) => {\r\n            let key = value.toLowerCase();\r\n            let ability = DOTAAbilities[value];\r\n            if (key !== \"version\" && !key.includes(\"recipe\") && !ability.ItemIsNeutralDrop && !ability.IsObsolete) {\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n        // Convert keys to item data\r\n        selectableItems = selectableItems.map((key) => {\r\n            return {\r\n                item:  DOTAAbilities[key],\r\n                name: key,\r\n            };\r\n        })\r\n        selectableItems.sort();\r\n\r\n        let basicItems = getItemsByQuality(selectableItems, [\"consumable\", \"component\", \"secret_shop\"]);\r\n        let upgradesItems = getItemsByQuality(selectableItems, [\"common\", \"rare\", \"epic\", \"artifact\"]);\r\n\r\n        this.state = {\r\n            allItems: selectableItems,\r\n            queryItems: null,\r\n\r\n            onSelectedItem: props.onSelectedItem,\r\n            dotaStrings: props.dotaStrings,\r\n            abilityStrings: props.abilityStrings,\r\n\r\n            basicItems: basicItems,\r\n            upgradesItems: upgradesItems,\r\n        };\r\n\r\n        this.onSearchChanged = this.onSearchChanged.bind(this);\r\n        this.onSearchItemSelected = this.onSearchItemSelected.bind(this);\r\n        this.onShopItemSelected = this.onShopItemSelected.bind(this);\r\n        this.onRemoveItemSelected = this.onRemoveItemSelected.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(prevProps !== this.props) {\r\n            this.setState({\r\n                dotaStrings: this.props.dotaStrings,\r\n                abilityStrings: this.props.abilityStrings,\r\n                onSelectedItem: this.props.onSelectedItem,\r\n            });\r\n        }\r\n    }\r\n\r\n    onSearchChanged(e) {\r\n        let query = e.target.value;\r\n        let filteredItems = null;\r\n        if (query) {\r\n            filteredItems = this.state.allItems.filter((item) => {\r\n                let localizedName = getLocalizedString(this.state.abilityStrings, `DOTA_Tooltip_Ability_${item.name}`)?.toLowerCase();\r\n                return localizedName && localizedName.indexOf(query.toLowerCase()) !== -1; \r\n            });\r\n        }\r\n\r\n        this.setState({\r\n            queryItems: filteredItems,\r\n        });\r\n    }\r\n\r\n    onSearchItemSelected(e) {\r\n        let val = e.target.dataset?.item;\r\n        this.state.onSelectedItem(val);\r\n    }\r\n\r\n    onShopItemSelected (e) {\r\n        let item = e.target.dataset?.item;\r\n        this.state.onSelectedItem(item);\r\n    }\r\n\r\n    onRemoveItemSelected(e) {\r\n        let item = null;\r\n        this.state.onSelectedItem(item);\r\n    }\r\n\r\n    render() {\r\n        let scale = 0.5;\r\n        let searchIconScale = 0.45;\r\n        return (\r\n            <div className=\"item-card\">\r\n                <div className=\"item-card header d-flex\">\r\n                    <div>\r\n                        <Form.Control type=\"text\" placeholder=\"Search...\" onChange={this.onSearchChanged}/>\r\n                    </div>\r\n                    <div className=\"ml-auto\">\r\n                        <Button variant=\"outline-danger\" onClick={this.onRemoveItemSelected}>\r\n                            <FontAwesomeIcon icon={faMinus} />\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"item-card content\">\r\n                    <div className=\"\">\r\n                        {\r\n                            this.state.queryItems && \r\n                            <div>\r\n                                <h5>\r\n                                    { getLocalizedString(this.state.dotaStrings, \"DOTA_Shop_Search_Results_Title\") }\r\n                                </h5>\r\n                                <ListGroup>\r\n                                    {\r\n                                        // Query search term\r\n                                        this.state.queryItems.map((item) => {\r\n                                            let localizedName = getLocalizedString(this.state.abilityStrings, `DOTA_Tooltip_Ability_${item.name}`);\r\n                                            return (\r\n                                                <ListGroup.Item \r\n                                                    key={item.name} \r\n                                                    data-item={item.name} \r\n                                                    className=\"py-1 px-3\"\r\n                                                    onClick={this.onSearchItemSelected} \r\n                                                    action>\r\n                                                    <div className=\"d-flex\" data-item={item.name}>\r\n                                                        <ItemIcon \r\n                                                            itemName={item.name}\r\n                                                            onClick={this.onSearchItemSelected} \r\n                                                            scale={searchIconScale}/>\r\n\r\n                                                        <h6 className=\"mx-1 my-auto\" data-item={item.name}>\r\n                                                            { localizedName }\r\n                                                        </h6>\r\n                                                    </div>\r\n                                                </ListGroup.Item>\r\n                                            )\r\n                                        })\r\n                                    }   \r\n                                </ListGroup>\r\n                                {\r\n                                    this.state.queryItems && this.state.queryItems.length <= 0 &&\r\n                                        <h6>\r\n                                            { getLocalizedString(this.state.dotaStrings, \"DOTA_Shop_Search_No_Results\") }\r\n                                        </h6>\r\n                                }\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                    {/* Regular view */}\r\n                    {\r\n                        !this.state.queryItems && \r\n                            <div>\r\n                                <Tabs defaultActiveKey=\"basic\" transition={false} id=\"shop-tabs\">\r\n                                    <Tab eventKey=\"basic\" title={<TabHeading text={getLocalizedString(this.state.dotaStrings, \"DOTA_Shop_Category_Basics\")} />}>\r\n                                        <div className=\"d-flex flex-wrap\">\r\n                                            {\r\n                                                this.state.basicItems && this.state.basicItems.map((item) => {\r\n                                                    return (\r\n                                                        <ItemIcon \r\n                                                            key={item.item.ID}\r\n                                                            itemName={item.name}\r\n                                                            onClick={this.onShopItemSelected} \r\n                                                            scale={scale} />\r\n                                                    )\r\n                                                })\r\n                                            }\r\n                                        </div>\r\n                                    </Tab>\r\n                                    <Tab eventKey=\"upgrades\" title={<TabHeading text={getLocalizedString(this.state.dotaStrings, \"DOTA_Shop_Category_Upgrades\")} />}>\r\n                                        <div className=\"d-flex flex-wrap\">\r\n                                            {\r\n                                                this.state.upgradesItems && this.state.upgradesItems.map((item) => {\r\n                                                    return (\r\n                                                        <ItemIcon \r\n                                                            key={item.item.ID}\r\n                                                            itemName={item.name}\r\n                                                            onClick={this.onShopItemSelected} \r\n                                                            scale={scale} />\r\n                                                    );\r\n                                                })\r\n                                            }\r\n                                        </div>\r\n                                    </Tab>\r\n                                </Tabs>\r\n                            </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ItemSelector;","/// All Disassemble rules of an item\r\nexport const EDisassembleRule = {\r\n    ALWAYS: \"DOTA_ITEM_DISASSEMBLE_ALWAYS\",\r\n    NEVER: \"DOTA_ITEM_DISASSEMBLE_NEVER\",\r\n};\r\n\r\n/// All ItemQuality properties on ItemInfo's\r\nexport const EItemQuality = {\r\n    SECRET_SHOP: \"secret_shop\",\r\n    COMPONENT: \"component\",\r\n};","import React, { Component } from 'react';\r\n\r\nimport {\r\n    getItemInfoFromName, \r\n    convertItemDescToHtml,\r\n    getItemStatistics,\r\n    isDissassembleRule\r\n} from \"../../utility/dataHelperItems\";\r\nimport { \r\n    getLocalizedString\r\n} from '../../utility/data-helpers/language';\r\nimport { calculateItemSellCost } from \"../../utility/calculate\";\r\nimport {\r\n    EDisassembleRule, EItemQuality\r\n} from \"../../enums/items\";\r\n\r\nimport \"./ItemInfoTooltip.css\";\r\nimport { getItemIcon } from '../../utility/spriteHelper';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faHome, faCampground } from '@fortawesome/free-solid-svg-icons';\r\n\r\nfunction replaceItemStatLocalizeString (localizeString, value) {\r\n    // If generic one tha contains $value, split and insert value\r\n    if(localizeString.includes(\"$\")) {\r\n        let split = localizeString.split('$');\r\n        split.splice(1, 0, value);\r\n        return split.join(\" \");\r\n    } \r\n    // If contains %, arrange it correctly\r\n    else if (localizeString.includes(\"%\")) {\r\n        return localizeString.replace(\"%+\", `+ ${value}% `);\r\n    }\r\n    return localizeString;\r\n}\r\n\r\nclass ItemInfoTooltip extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            itemName: props.itemName,\r\n            dotaStrings: props.dotaStrings,\r\n            abilityStrings: props.abilityStrings,\r\n\r\n            itemInfo: getItemInfoFromName(props.itemName),  \r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                itemName: this.props.itemName,\r\n                dotaStrings: this.props.dotaStrings,\r\n                abilityStrings: this.props.abilityStrings,\r\n                itemInfo: getItemInfoFromName(this.props.itemName),  \r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let scale = 0.7;\r\n        let width = \"88px\";\r\n        let height = \"64px\";\r\n        let goldIconSize = 20;\r\n\r\n        let itemStats = getItemStatistics(this.state.itemInfo);\r\n        let loreString = getLocalizedString(this.state.abilityStrings, `DOTA_Tooltip_ability_${this.state.itemName}_Lore`);\r\n        /// Get localized string and filter it to correct html\r\n        let descString = getLocalizedString(this.state.abilityStrings, `DOTA_Tooltip_ability_${this.state.itemName}_Description`);\r\n        let descFiltered = convertItemDescToHtml(descString, this.state.itemName, this.state.itemInfo);\r\n        return (\r\n            <div className=\"item-tooltip\">\r\n                <div className=\"d-flex p-1\">\r\n                    <div className=\"m-2\" style={{ width: `calc(${width} * ${scale})`, height: `calc(${height} * ${scale})` }}>\r\n                        {  \r\n                            getItemIcon(this.state.itemName, width, height, 0.7) \r\n                        }\r\n                    </div>\r\n                    <div>\r\n                        <h4>\r\n                            { getLocalizedString(this.state.abilityStrings, `DOTA_Tooltip_Ability_${this.state.itemName}`) }\r\n                        </h4>\r\n                        {\r\n                            //If has an item cost and is more than 0\r\n                            this.state.itemInfo?.ItemCost && this.state.itemInfo?.ItemCost > 0 &&\r\n                            <div className=\"d-flex\">\r\n                                {\r\n                                    this.state.itemInfo?.ItemQuality &&\r\n                                        <FontAwesomeIcon icon={this.state.itemInfo?.ItemQuality == EItemQuality.SECRET_SHOP ? faCampground : faHome } className=\"align-item-center\" />\r\n                                }\r\n                                <img \r\n                                    className=\"mx-1\"\r\n                                    src={process.env.PUBLIC_URL + \"/images/dota2/gold_icon_ui.png\"} \r\n                                    height={goldIconSize}\r\n                                    width={goldIconSize} />\r\n                                <h6 className=\"gold-amount\">\r\n                                    { parseInt(this.state.itemInfo?.ItemCost) }\r\n                                </h6>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <div className=\"item-content p-2\">\r\n                    {/* item stat info */}\r\n                    {\r\n                        itemStats &&\r\n                            <div className=\"pb-1\">\r\n                                { \r\n                                    itemStats.map((value) => {\r\n                                        /// attempt to get localized string and display\r\n                                        let string = getLocalizedString(this.state.abilityStrings, `DOTA_Tooltip_ability_${this.state.itemName}_${value.key}`);\r\n                                        if (string) {\r\n                                            /// Check if item stat is a generic one that can be applied to most items and replace variable with localized string\r\n                                            let genericKeys = [\r\n                                                \"health\", \"mana\", \"armor\", \"damage\", \"str\", \"int\", \"agi\", \"all\", \"attack\", \"hp_regen\",\r\n                                                \"mana_regen\", \"spell_amp\", \"move_speed\", \"evasion\", \"spell_resist\", \"selected_attrib\",\r\n                                                \"attack_range\", \"attack_range_melee\", \"cast_range\", \"status_resist\"\r\n                                            ];\r\n                                            // split and use variable to compare\r\n                                            let splitCompare = string.split(\"$\")[1];\r\n                                            for (let key of genericKeys) {\r\n                                                if (splitCompare === key) {\r\n                                                    /// get localized generic and replace variable in existing string\r\n                                                    let localized = getLocalizedString(this.state.abilityStrings, `dota_ability_variable_${key}`);\r\n                                                    string = string.replace(key.toString(), localized);\r\n                                                    break;\r\n                                                }\r\n                                            }\r\n                                            \r\n                                            return (\r\n                                                <div>\r\n                                                    { replaceItemStatLocalizeString(string, value.value) }\r\n                                                </div>\r\n                                            );\r\n                                        }\r\n                                    })\r\n                                }\r\n                            </div>\r\n                    }\r\n\r\n                    {/* abilities */}\r\n                    {\r\n                        descString && descString != \"?\" &&\r\n                            <div className=\"p-1\">\r\n                                { descFiltered }\r\n                            </div>\r\n                    }\r\n\r\n                    {/* lore */}\r\n                    {\r\n                        loreString && loreString != \"?\" &&   \r\n                            <div className=\"p-1 m-1 lore\">\r\n                                { loreString }\r\n                            </div>\r\n                    }\r\n\r\n                    {/* sell price */}\r\n                    {\r\n                        this.state.itemInfo?.ItemCost && !this.state.itemInfo?.ItemIsNeutralDrop &&\r\n                            <div className=\"px-1\"> \r\n                                {\r\n                                    getLocalizedString(this.state.dotaStrings, \"DOTA_Item_Tooltip_Sell_Price\")\r\n                                    .replace(\"%s1\", calculateItemSellCost(this.state.itemInfo))\r\n                                }\r\n                            </div>\r\n                    }\r\n\r\n                    {/* dissassemble */}\r\n                    {\r\n                        isDissassembleRule(this.state.itemInfo, EDisassembleRule.ALWAYS) && \r\n                            <div className=\"px-1\">\r\n                                { getLocalizedString(this.state.dotaStrings, \"DOTA_Item_Tooltip_Disassemble\") }\r\n                            </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ItemInfoTooltip;","import React, { Component } from 'react';\r\nimport Popup from 'reactjs-popup';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { \r\n    faInfo, \r\n    faChevronUp,\r\n    faChevronDown\r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport {\r\n    Button,\r\n    Form\r\n} from \"react-bootstrap\";\r\n\r\nimport ItemSelector from \"./ItemSelector\";\r\n\r\nimport \"../../css/dota_hero_icons_big.css\";\r\nimport ItemInfoTooltip from './ItemInfoTooltip';\r\n\r\nimport {\r\n    getItemIcon\r\n} from \"../../utility/spriteHelper\"\r\nimport { \r\n    tryGetItemInfoValue, \r\n    getItemInfoFromName,\r\n    itemRequiresCharges\r\n} from '../../utility/dataHelperItems';\r\n\r\n\r\n/// Single item that contains a popup to change the item\r\nclass Item extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            item: props.item,\r\n            slot: props.slot, \r\n            isBackpack: props.isBackpack,\r\n\r\n            onItemChanged: props.onItemChanged,\r\n            onItemExtraChanged: props.onItemExtraChanged,\r\n\r\n            dotaStrings: props.dotaStrings,\r\n            abilityStrings: props.abilityStrings,\r\n\r\n            itemExtra: { },\r\n        };\r\n\r\n        //console.log(`slot: ${this.state.slot} - item: ${this.state.item}`);\r\n        this.onSelectedItem = this.onSelectedItem.bind(this);\r\n        this.onBloodstoneChargesChanged = this.onBloodstoneChargesChanged.bind(this);\r\n        this.setCharges = this.setCharges.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.state.item === \"item_bloodstone\") {\r\n            /// Set inital charges of bloodstone\r\n            let itemInfo = getItemInfoFromName(this.state.item);\r\n            this.setState({\r\n                itemExtra: {\r\n                    ...this.state.itemExtra,\r\n                    charges: itemInfo?.ItemInitialCharges ?? 0,\r\n                },\r\n            }, () => {\r\n                /// Update state to new init value\r\n                this.setCharges(this.state.itemExtra.charges);\r\n            });\r\n        }\r\n    }\r\n\r\n    onSelectedItem (item) {\r\n        this.setState({\r\n            open: false,\r\n        });\r\n        \r\n        this.state.onItemChanged({ \r\n            slot: this.state.slot, \r\n            item: item,\r\n            extra: this.state.itemExtra,\r\n            isBackpack: this.state.isBackpack ? true : false,\r\n        });\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.item !== this.props.item) {\r\n            this.setState({ item: this.props.item, });\r\n        }\r\n\r\n        if (prevProps.slot !== this.props.slot) {\r\n            this.setState({ slot: this.props.slot });\r\n        }\r\n\r\n        if (prevProps.isBackpack !== this.props.isBackpack) {\r\n            this.setState({ isBackpack: this.props.isBackpack });\r\n        }\r\n\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ abilityStrings: this.props.abilityStrings });\r\n        }\r\n\r\n        if (prevProps.dotaStrings !== this.props.dotaStrings) {\r\n            this.setState({ dotaStrings: this.props.dotaStrings });\r\n        }\r\n    }\r\n\r\n    onBloodstoneChargesChanged (e) {\r\n        let newVal = parseInt(e.target.value);\r\n        this.setCharges(newVal);\r\n    }\r\n\r\n    setCharges(newChargeAmt) {\r\n        // If null or not exist, set to 0\r\n        if (!newChargeAmt) {\r\n            newChargeAmt = 0;\r\n        }\r\n\r\n        // Value must be more than 0 and less than 999\r\n        if (newChargeAmt < 0) {\r\n            newChargeAmt = 0;\r\n        } else if (newChargeAmt > 999) {\r\n            newChargeAmt = 999;\r\n        }\r\n        \r\n        this.setState({\r\n            itemExtra: {\r\n                ...this.state.itemExtra,\r\n                charges: newChargeAmt,\r\n            },\r\n        }, () => {\r\n            this.state.onItemChanged({\r\n                slot: this.state.slot, \r\n                item: this.state.item,\r\n                extra: this.state.itemExtra,\r\n                isBackpack: this.state.isBackpack ? true : false,\r\n            });\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let scale = 0.7;\r\n        let width = \"88px\";\r\n        let height = \"64px\";\r\n        return (\r\n            // Relative to make positioning work on children\r\n            <div style={{ position:\"relative\" }}>\r\n                {\r\n                    this.state.item &&\r\n                        <Popup\r\n                            trigger={isOpen => (\r\n                                // Info icon on item to display tooltip\r\n                                <div\r\n                                    className=\"ml-2 mt-1\" \r\n                                    style={{ position:\"absolute\", zIndex: 1 }}>\r\n                                    <FontAwesomeIcon icon={faInfo} />\r\n                                </div>\r\n                            )}\r\n                            open={this.state.hoverOpen}\r\n                            position=\"right center\"\r\n                            on=\"hover\"\r\n                            contentStyle={{ width: \"350px\", overflowY: \"auto\", padding: 0, border: 0 }}>\r\n                                <ItemInfoTooltip\r\n                                    itemName={this.state.item}\r\n                                    dotaStrings={this.state.dotaStrings}\r\n                                    abilityStrings={this.state.abilityStrings}\r\n                                    />\r\n                        </Popup>\r\n                }\r\n                <Popup\r\n                    trigger={isOpen => (\r\n                        // Item icon\r\n                        <div className=\"m-1\">\r\n                            <div style={{ width: `calc(${width} * ${scale})`, height: `calc(${height} * ${scale})` }}  onClick={() => this.setState({ open: isOpen })}>\r\n                                {  getItemIcon(this.state.item, width, height, 0.7) }\r\n                            </div>\r\n                        </div>\r\n                        \r\n                    )}\r\n                    open={this.state.open}\r\n                    position=\"right center\"\r\n                    contentStyle={{ width: \"350px\", height: \"400px\", overflowY: \"auto\" }}>\r\n                        <ItemSelector \r\n                            onSelectedItem={this.onSelectedItem}\r\n                            dotaStrings={this.state.dotaStrings}\r\n                            abilityStrings={this.state.abilityStrings} />\r\n                </Popup>\r\n                {\r\n                    // Charge counter UI for bloodstone or charge based items\r\n                    (this.state.item === \"item_bloodstone\" || itemRequiresCharges(this.state.item)) &&\r\n                    <div style={{ \r\n                        position: \"absolute\", \r\n                        zIndex: 1, \r\n                        width: `calc(${width} * ${scale})`, \r\n                        height: `calc(${height} * ${scale})`,\r\n                        top: `calc(${height} * ${scale} - 17px)`,\r\n                        left: `calc(${width} * ${scale} - 27px)`, \r\n                    }}>\r\n                        <Form.Control \r\n                            size=\"sm\" \r\n                            value={ this.state.itemExtra?.charges ?? 0 } \r\n                            onChange={this.onBloodstoneChargesChanged} \r\n                            style={{ \r\n                                width: \"30px\",\r\n                                height: \"20px\",\r\n                                padding: 0,\r\n                                textAlign: \"center\",\r\n                                background: \"rgba(0, 0, 0, 0.5)\",\r\n                                border: 0,\r\n                                color: \"white\"\r\n                            }} />\r\n                    </div>\r\n                }\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default Item;","import React, { Component } from 'react';\r\nimport {\r\n    Button,\r\n    Form\r\n} from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faMinus } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport { itemNameToElement } from \"../../utils\";\r\nimport {\r\n    getAllNeutrals\r\n} from \"../../utility/dataHelperItems\";\r\n\r\nimport \"./NeutralItemSelector.css\";\r\nimport { getItemIcon } from '../../utility/spriteHelper';\r\n\r\nclass NeutralItemSelector extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let allNeutrals = getAllNeutrals();\r\n        this.state = {\r\n            allNeutrals: allNeutrals,\r\n            queryNeutrals: allNeutrals,\r\n\r\n            iconScale: 0.5,\r\n            onNewNeutralSelected: props.onNeutralSelected,\r\n        };\r\n\r\n        this.onNeutralSelected = this.onNeutralSelected.bind(this);\r\n        this.onSearchChanged = this.onSearchChanged.bind(this);\r\n    }\r\n\r\n    onNeutralSelected(e) {\r\n        let neutral = e.target.parentElement.dataset.neutral;\r\n        this.state.onNewNeutralSelected({ item: neutral });\r\n    }\r\n\r\n    onSearchChanged (e) {\r\n        let query = e.target.value;\r\n        let filteredNeutrals = null;\r\n        if (query) {\r\n            filteredNeutrals = this.state.allNeutrals.filter((neutral) => {\r\n                return neutral.item.indexOf(query.toLowerCase()) !== -1; \r\n            });\r\n        }\r\n\r\n        /// If no query, show all neutrals\r\n        this.setState({\r\n            queryNeutrals: filteredNeutrals,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"neutral-item-card\" style={{ color: \"black\" }}>\r\n                <div className=\"neutral-item-card header d-flex\">\r\n                    <div>\r\n                        <Form.Control type=\"text\" placeholder=\"Search...\" onChange={this.onSearchChanged}/>\r\n                    </div>\r\n                    <Button className=\"ml-auto\" variant=\"outline-danger\" onClick={this.onNeutralSelected} data-neutral={null}>\r\n                        <FontAwesomeIcon icon={faMinus} data-neutral={null} />\r\n                    </Button>\r\n                </div>\r\n                <div className=\"neutral-item-card content\">\r\n                    <div className=\"d-flex flex-wrap\">\r\n                        {\r\n                            this.state.queryNeutrals && this.state.queryNeutrals.map((itemInfo) => {\r\n                                return ( \r\n                                    <div \r\n                                        className=\"m-2\" \r\n                                        key={itemInfo.item} \r\n                                        onClick={this.onNeutralSelected} \r\n                                        title={itemInfo.item}\r\n                                        data-neutral={itemInfo.item}\r\n                                        style={{ width: `calc(88px * ${this.state.iconScale})`, height: `calc(64px * ${this.state.iconScale})` }}>\r\n                                        { \r\n                                            getItemIcon(itemInfo.item, \"88px\", \"64px\", this.state.iconScale) \r\n                                        }\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n                        {\r\n                            !this.state.queryNeutrals && this.state.allNeutrals.map((itemInfo) => {\r\n                                return ( \r\n                                    <div \r\n                                        className=\"m-2\" \r\n                                        key={itemInfo.item} \r\n                                        onClick={this.onNeutralSelected} \r\n                                        title={itemInfo.item}\r\n                                        data-neutral={itemInfo.item}\r\n                                        style={{ width: `calc(88px * ${this.state.iconScale})`, height: `calc(64px * ${this.state.iconScale})` }}>\r\n                                        { \r\n                                            getItemIcon(itemInfo.item, \"88px\", \"64px\", this.state.iconScale)\r\n                                        }\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NeutralItemSelector;","import Neutral from \"./Neutral\";\r\n\r\nexport default Neutral;","import React, { Component } from 'react';\r\nimport Popup from \"reactjs-popup\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faInfo } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport NeutralItemSelector from \"./NeutralItemSelector\";\r\nimport ItemInfoTooltip from '../ItemsBar/ItemInfoTooltip';\r\n\r\nimport { itemNameToElement } from \"../../utils\";\r\nimport { getItemIcon } from '../../utility/spriteHelper';\r\n\r\nclass Neutral extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            neutralItem: props.neutralItem,\r\n            onNewNeutralSelected: props.onNewNeutralSelected,\r\n            dotaStrings: props.dotaStrings,\r\n            abilityStrings: props.abilityStrings,\r\n\r\n            iconScale: 0.7,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate (prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                neutralItem: this.props.neutralItem,\r\n                dotaStrings: this.props.dotaStrings,\r\n                abilityStrings: this.props.abilityStrings,\r\n                onNewNeutralSelected: this.props.onNewNeutralSelected,\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {\r\n                    this.state.neutralItem && this.state.neutralItem.item &&\r\n                        <Popup\r\n                            trigger={isOpen => (\r\n                                <div\r\n                                    className=\"ml-2 mt-1\" \r\n                                    style={{ position:\"absolute\", zIndex: 1 }}>\r\n                                    <FontAwesomeIcon icon={faInfo} />\r\n                                </div>\r\n                            )}\r\n                            open={this.state.hoverOpen}\r\n                            position=\"right center\"\r\n                            on=\"hover\"\r\n                            contentStyle={{ width: \"350px\", overflowY: \"auto\", padding: 0, border: 0 }}>\r\n                                <ItemInfoTooltip\r\n                                    itemName={this.state.neutralItem.item}\r\n                                    dotaStrings={this.state.dotaStrings}\r\n                                    abilityStrings={this.state.abilityStrings}\r\n                                    />\r\n                        </Popup>\r\n                }\r\n                <Popup\r\n                    trigger={isOpen => {\r\n                        return getItemIcon(this.state.neutralItem.item, \"88px\", \"64px\", this.state.iconScale);\r\n                    }}\r\n                    position=\"right center\"\r\n                    contentStyle={{ width: \"325px\", overflowY: \"auto\" }}>\r\n                    <NeutralItemSelector onNeutralSelected={this.state.onNewNeutralSelected} />\r\n                </Popup>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Neutral;","import React, { Component } from 'react';\r\nimport {\r\n    Row, \r\n    Col\r\n} from \"react-bootstrap\";\r\n\r\nimport Item from \"./Item\";\r\nimport Neutral from \"../Neutral\";\r\nimport { getLocalizedString } from '../../utility/data-helpers/language';\r\n\r\nclass ItemsBar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            items: props.items,\r\n            backpack: props.backpack,\r\n            neutral: props.neutral,\r\n            iconScale: 0.7,\r\n\r\n            onNeutralChanged: props.onNeutralChanged,\r\n            onItemChanged: props.onItemChanged,\r\n\r\n            dotaStrings: props.dotaStrings,\r\n            abilityStrings: props.abilityStrings,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        //Update if previous props have changed\r\n        if (prevProps.items !== this.props.items) {\r\n            this.setState({\r\n                items: this.props.items,\r\n            });\r\n        }\r\n\r\n        if (prevProps.backpack !== this.props.backpack) {\r\n            this.setState({\r\n                backpack: this.props.backpack,\r\n            });\r\n        }\r\n\r\n        if (prevProps.neutral !== this.props.neutral) {\r\n            this.setState({\r\n                neutral: this.props.neutral,\r\n            });\r\n        }\r\n\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ abilityStrings: this.props.abilityStrings });\r\n        }\r\n        if (prevProps.dotaStrings !== this.props.dotaStrings) {\r\n            this.setState({ dotaStrings: this.props.dotaStrings });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        var itemsColWidth = 5;\r\n        var backpackColWidth = 5;\r\n        var neutralColWidth = 2;\r\n        return (\r\n            <div>\r\n                <Row>\r\n                    <Col md={itemsColWidth}>\r\n                        <h6>{ getLocalizedString(this.state.dotaStrings, \"DOTA_SHOP_ITEMS\") }</h6>\r\n                        <div className=\"d-flex flex-wrap\">\r\n                            {\r\n                                this.state.items && this.state.items.map((value) => {\r\n                                    return (\r\n                                        <Item \r\n                                            key={value.slot}\r\n                                            slot={value.slot}\r\n                                            item={value.item} \r\n                                            onItemChanged={this.state.onItemChanged}\r\n                                            onItemExtraChnaged={this.state.onItem}\r\n                                            dotaStrings={this.state.dotaStrings} \r\n                                            abilityStrings={this.state.abilityStrings} />\r\n                                    )\r\n                                })\r\n                            }\r\n                        </div>\r\n                    </Col>\r\n                    <Col md={backpackColWidth}>\r\n                        <h6>{ getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_BackpackHintTitle\").toUpperCase() }</h6>\r\n                        <div className=\"d-flex flex-wrap\">\r\n                            {\r\n                                this.state.backpack && this.state.backpack.map((value) => {\r\n                                    return (\r\n                                        <Item\r\n                                            key={value.slot}\r\n                                            slot={value.slot}\r\n                                            item={value.item}\r\n\r\n                                            isBackpack={true}\r\n                                            onItemChanged={this.state.onItemChanged}\r\n                                            dotaStrings={this.state.dotaStrings}\r\n                                            abilityStrings={this.state.abilityStrings} />\r\n                                    )\r\n                                })\r\n                            }\r\n                        </div>\r\n                    </Col>\r\n                    <Col md={neutralColWidth}>\r\n                        <h6>{ getLocalizedString(this.state.dotaStrings, \"UI_NEUTRALS\") }</h6>\r\n                        {/* Neutral Item */}\r\n                        <div>\r\n                            <Neutral \r\n                                neutralItem={this.state.neutral} \r\n                                onNewNeutralSelected={this.state.onNeutralChanged}\r\n                                dotaStrings={this.state.dotaStrings}\r\n                                abilityStrings={this.state.abilityStrings} />\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ItemsBar;","import ItemsBar from \"./ItemsBar\";\r\n\r\nexport default ItemsBar;","import React, { Component } from 'react';\r\n\r\nimport { EAttributes } from \"../../enums/attributes.js\";\r\n\r\nimport \"./Attributes.css\";\r\nimport { getLocalizedString, replaceStringValue } from '../../utility/data-helpers/language.js';\r\nimport { calculateAttribute } from '../../utility/calculate.js';\r\n\r\nfunction parse(value) {\r\n    return parseFloat(value).toFixed(2);\r\n}\r\n\r\nfunction Attribute(props) {\r\n    return (\r\n        <div className=\"d-flex my-2 align-items-center\">\r\n            <div className={props.isPrimaryAttribute ? \" primary-attribute\" : \"\"}>\r\n                <span className={'attribute ' + props.type} alt=\"attribute\" />\r\n            </div>\r\n            <div className=\"mx-1\">{props.value}</div>\r\n            <div   \r\n                className=\"mx-1\" \r\n                style={{ color: \"green\" }}>{\"+\" + props.additional}</div>\r\n            <div\r\n                style={{ fontSize: \"0.75rem\" }}>\r\n                {\r\n                    replaceStringValue(props.perLevelString, props.per)\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nclass Attributes extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            hero: props.hero,\r\n            level: props.heroLevel,\r\n            items: props.items,\r\n            talents: props.talents,\r\n            neutral: props.neutral,\r\n            abilities: props.abilities,\r\n\r\n            dotaStrings: props.dotaStrings,\r\n            abilityStrings: props.abilityStrings,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                hero: this.props.hero,\r\n                level: this.props.heroLevel,\r\n                items: this.props.items,\r\n                talents: this.props.talents,\r\n                neutral: this.props.neutral,\r\n                abilities: this.props.abilities,\r\n\r\n                dotaStrings: this.props.dotaStrings,\r\n                abilityStrings: this.props.abilityStrings,\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let strengthStats = calculateAttribute(EAttributes.ATTR_STRENGTH, this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents);\r\n        let agilityStats = calculateAttribute(EAttributes.ATTR_AGILITY, this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents);\r\n        let intStats = calculateAttribute(EAttributes.ATTR_INTELLIGENCE, this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents);\r\n        return (\r\n            <div>\r\n                <h5>{getLocalizedString(this.state.dotaStrings, \"DOTA_Tooltip_topbar_stats\")}</h5>\r\n                <h6>{getLocalizedString(this.state.dotaStrings, \"DOTA_Attributes\")}</h6>\r\n                <Attribute \r\n                    type=\"strength\" \r\n                    value={ strengthStats.attribute }\r\n                    additional= { strengthStats.additionalAttribute }\r\n                    per={ strengthStats.perLevel } \r\n                    isPrimaryAttribute={this.state.hero?.AttributePrimary === EAttributes.ATTR_STRENGTH}\r\n                    perLevelString={ getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_StrengthGain\") } />\r\n\r\n                <Attribute \r\n                    type=\"agility\"\r\n                    value={ agilityStats.attribute }\r\n                    additional= { agilityStats.additionalAttribute }\r\n                    per={ agilityStats.perLevel } \r\n                    isPrimaryAttribute={this.state.hero?.AttributePrimary === EAttributes.ATTR_AGILITY} \r\n                    perLevelString={ getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_AgilityGain\") } />\r\n\r\n                <Attribute \r\n                    type=\"intelligence\" \r\n                    value={ intStats.attribute }\r\n                    additional= { intStats.additionalAttribute }\r\n                    per={ intStats.perLevel } \r\n                    isPrimaryAttribute={this.state.hero?.AttributePrimary === EAttributes.ATTR_INTELLIGENCE} \r\n                    perLevelString={ getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_IntelligenceGain\") } />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Attributes;","import Attributes from \"./Attributes\";\r\n\r\nexport default Attributes;","import React, { Component } from 'react';\r\nimport {\r\n    Row, Col\r\n} from \"react-bootstrap\";\r\n\r\nimport {\r\n    calculateHealthRegen,\r\n    calculateManaRegen,\r\n    calculateMainArmor,\r\n    calculateTotalSpellAmp,\r\n    calculateStatusResist,\r\n    calculateMagicResist,\r\n    calculatePhysicalResist,\r\n    calculateEvasion,\r\n    calculateRightClickDamage,\r\n    calculateAttackTime,\r\n    calculateMoveSpeed,\r\n    calculateAttackRange\r\n} from \"../../utility/calculate\";\r\nimport { \r\n    getPrimaryAttributeStats\r\n} from '../../utility/dataHelperHero';\r\nimport {\r\n    getLocalizedString\r\n} from \"../../utility/data-helpers/language\";\r\n\r\nfunction StatArray(props) {\r\n    return (\r\n        <div style={{ backgroundColor: \"#171717\", color: \"white\", fontSize: \"0.8rem\" }} className=\"p-2 h-100\">\r\n            <h6 className=\"ml-auto\">{props.title}</h6>\r\n            {\r\n                props.stats &&\r\n                    props.stats.map((value) => {\r\n                        return (<Row key={value.name}>\r\n                            <Col md={6}>\r\n                                {value.name}\r\n                            </Col>\r\n                            <Col md={6}>\r\n                                {value.value}\r\n                            </Col>\r\n                        </Row>\r\n                        );\r\n                    })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\n/// Gets the attack min/max and formats it for display in UI\r\nfunction formatAttackMinMax(hero, lvl, items, neutral, abilities, talents) {\r\n    let standardAtkDmg = calculateRightClickDamage(hero, lvl, items, neutral, abilities, talents);\r\n    \r\n    let dmgString = `${standardAtkDmg.min} - ${standardAtkDmg.max}`;\r\n    if (standardAtkDmg.additional) {\r\n        dmgString += ` +${standardAtkDmg.additional}`;\r\n    }\r\n    return dmgString;\r\n}\r\n\r\n/// Gets the atk time and formats it to display in UI\r\nfunction formatAttackTime(hero, lvl, items, neutral, abilities, talents) {\r\n    let attackInfo = calculateAttackTime(hero, lvl, items, neutral, abilities, talents);\r\n    return `${attackInfo.attackSpeed} (${attackInfo.attackTime} s)`;\r\n}\r\n\r\nclass Statistics extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            hero: props.hero,\r\n            level: props.heroLevel,\r\n            talents: props.talents,\r\n            items: props.items,\r\n            neutral: props.neutral,\r\n            abilities: props.abilities,\r\n\r\n            dotaStrings: props.dotaStrings,\r\n            abilityStrings: props.abilityStrings,\r\n        };\r\n\r\n        this.updateStatistics = this.updateStatistics.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateStatistics()\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        \r\n        if (prevProps.hero !== this.props.hero) {\r\n            this.setState({ \r\n                hero: this.props.hero \r\n            }, () => {\r\n                this.updateStatistics();\r\n            });\r\n        }\r\n        if (prevProps.items !== this.props.items) {\r\n            this.setState({ \r\n                items: this.props.items \r\n            }, () => {\r\n                this.updateStatistics();\r\n            });\r\n        }\r\n        if (prevProps.neutral !== this.props.neutral) {\r\n            this.setState({ \r\n                neutral: this.props.neutral, \r\n            }, () => {\r\n                this.updateStatistics();\r\n            });\r\n        }\r\n        if (prevProps.talents !== this.props.talents) {\r\n            this.setState({ \r\n                talents: this.props.talents \r\n            }, () => {\r\n                this.updateStatistics();\r\n            });\r\n        }\r\n        if (prevProps.abilities !== this.props.abilities) {\r\n            this.setState({ \r\n                abilities: this.props.abilities \r\n            }, () => {\r\n                this.updateStatistics();\r\n            });\r\n        }\r\n        if (prevProps.heroLevel !== this.props.heroLevel) {\r\n            this.setState({ \r\n                level: this.props.heroLevel \r\n            }, () => {\r\n                this.updateStatistics();\r\n            });\r\n        }\r\n        if (prevProps.dotaStrings !== this.props.dotaStrings) {\r\n            this.setState({ dotaStrings: this.props.dotaStrings });\r\n        }\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ abilityStrings: this.props.abilityStrings });\r\n        }\r\n    }\r\n\r\n    updateStatistics() {\r\n        let armor =  calculateMainArmor(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents);\r\n        let physResist = calculatePhysicalResist(armor);\r\n        this.setState({\r\n            // Attack\r\n            attackSpeed: formatAttackTime(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n            damage: formatAttackMinMax(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n            attackRange: calculateAttackRange(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n            moveSpeed: calculateMoveSpeed(this.state.hero, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n            spellAmp: calculateTotalSpellAmp(this.state.talents, this.state.items, this.state.neutral),\r\n            manaRegen: calculateManaRegen(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n\r\n            // Defence\r\n            armor: armor,\r\n            physicalResist: physResist,\r\n            magicResist: calculateMagicResist(this.state.items, this.state.neutral, this.state.abilities),\r\n            statusResist: calculateStatusResist(this.state.items, this.state.neutral),\r\n            evasion: calculateEvasion(this.state.items, this.state.neutrak, this.state.abilities , this.state.talents),\r\n            healthRegen: calculateHealthRegen(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Row>\r\n                {\r\n                    this.state.hero &&\r\n                    <Col md={6}>\r\n                        <StatArray title={getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_Attack\")} stats={[\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_AttackSpeed\"),\r\n                                value: this.state.attackSpeed\r\n                            },\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_Damage\"), \r\n                                value: this.state.damage \r\n                            },\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_AttackRange\"), \r\n                                value: this.state.attackRange \r\n                            },\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_MoveSpeed\"), \r\n                                value: this.state.moveSpeed \r\n                            },\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_SpellAmp\"), \r\n                                value: this.state.spellAmp + \"%\" \r\n                            },\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_ManaRegenDetail\"), \r\n                                value: this.state.manaRegen \r\n                            },\r\n                        ]} />\r\n                    </Col>\r\n                }   \r\n                {\r\n                    this.state.hero &&\r\n                    <Col md={6}>\r\n                        <StatArray title={getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_Defense\")} stats={[\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_Armor\"), \r\n                                value:  this.state.armor \r\n                            },\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_PhysicalResist\"), \r\n                                value: this.state.physicalResist + \"%\" \r\n                            },\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_MagicResist\"), \r\n                                value: this.state.magicResist + \"%\" \r\n                            },\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_StatusResist\"), \r\n                                value: this.state.statusResist + \"%\" \r\n                            },\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_Evasion\"), \r\n                                value: this.state.evasion + \"%\" \r\n                            },\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_HealthRegenDetail\"), \r\n                                value: this.state.healthRegen \r\n                            },\r\n                        ]}/>\r\n                    </Col>\r\n                }\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Statistics;","import Statistics from \"./Statistics\";\r\n\r\nexport default Statistics;","import React, { Component } from 'react';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport {  faSearch } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { getLocalizedString } from '../../utility/data-helpers/language';\r\nimport { getAllPlayableHeroes } from '../../utility/dataHelperHero';\r\n\r\nclass HeroSelector extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let selectableHeroes = getAllPlayableHeroes();\r\n        this.state = {\r\n            filteredHeroes: selectableHeroes,\r\n            allHeroes: selectableHeroes,\r\n\r\n            onSelectedHero: props.onSelectedHero,\r\n            dotaStrings: props.dotaStrings,\r\n        };\r\n\r\n        this.onSearchChanged = this.onSearchChanged.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                heroes: this.props.heroes,\r\n                filteredHeroes: this.props.heroes,\r\n                onSelectedHero: this.props.onSelectedHero,\r\n                dotaStrings: this.props.dotaStrings,\r\n            });\r\n        }\r\n    }\r\n\r\n    onSearchChanged(e) {\r\n        let searchTerm = e.target.value;\r\n        let filteredHeroes = this.state.allHeroes;\r\n        if (searchTerm) {\r\n            filteredHeroes = this.state.allHeroes.filter((hero) => {\r\n                let localizedHeroName = getLocalizedString(this.state.dotaStrings, hero.name)?.toLowerCase();\r\n                return localizedHeroName && localizedHeroName.indexOf(searchTerm.toLowerCase()) !== -1;\r\n            });\r\n        }\r\n\r\n        this.setState({\r\n            filteredHeroes: filteredHeroes,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let iconScale = 0.5;\r\n        return (\r\n            <div className=\"hero-card\">\r\n                <div className=\"hero-card header d-flex\">\r\n                    <div className=\"d-flex\">\r\n                        <h5 className=\"my-auto ml-2\">{ getLocalizedString(this.state.dotaStrings, \"DOTA_Hero_Selection_Intro_Header\") }</h5>\r\n                        <div className=\"ml-auto p-1\">\r\n                            <Form.Control type=\"text\" placeholder=\"Search...\" onChange={this.onSearchChanged} />\r\n                        </div>\r\n                        <FontAwesomeIcon icon={faSearch} className=\"my-auto mr-2\" />\r\n                    </div>\r\n                </div>\r\n                <div className=\"content\">\r\n                    <div className=\"d-flex flex-wrap\">\r\n                        {\r\n                            this.state.filteredHeroes && this.state.filteredHeroes.map((value) => {\r\n                                return (\r\n                                    <div\r\n                                        key={value.name}  \r\n                                        onClick={this.state.onSelectedHero}\r\n                                        className=\"m-1\"\r\n                                        style={{ \r\n                                            height: `calc(72px * ${iconScale})`, \r\n                                            width: `calc(128px * ${iconScale})` \r\n                                        }}>\r\n                                        <span \r\n                                            className={`hero-icon-big hero-icon-big-${value.name}_png`} \r\n                                            style={{ transformOrigin: \"top left\", transform: `scale(${iconScale}, ${iconScale})` }}\r\n                                            data-heroname={value.displayName}\r\n                                            data-hero={value.name} />\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n                        {\r\n                            this.state.filteredHeroes && this.state.filteredHeroes.length <= 0 &&\r\n                                <h6 className=\"p-1\">\r\n                                    { getLocalizedString(this.state.dotaStrings, \"DOTA_Shop_Search_No_Results\") }\r\n                                </h6>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HeroSelector;","import ChangeHeroBtn from \"./ChangeHeroBtn\";\r\n\r\nexport default ChangeHeroBtn;","import React, { Component } from 'react';\r\nimport {\r\n    Button\r\n} from \"react-bootstrap\";\r\nimport Popup from \"reactjs-popup\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport HeroSelector from \"./HeroSelector\";\r\n\r\nimport \"./ChangeHeroBtn.css\";\r\n\r\nclass ChangeHeroBtn extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            open: false,\r\n\r\n            onSelectHero: props.onSelectHero,\r\n            dotaStrings: props.dotaStrings,\r\n        };\r\n\r\n        this.onToggleHeroSelect = this.onToggleHeroSelect.bind(this);\r\n        this.onSelectHero = this.onSelectHero.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                dotaStrings: this.props.dotaStrings,\r\n                onSelectHero: this.props.onSelectHero,\r\n            });\r\n        }\r\n    }\r\n\r\n    onToggleHeroSelect(e) {\r\n        this.setState({\r\n            open: !this.state.open,\r\n        });\r\n    }\r\n\r\n    onSelectHero (e) {\r\n        this.setState({\r\n            open: !this.state.open,\r\n        });\r\n        \r\n        let hero = e.target.dataset.hero;\r\n        this.state.onSelectHero(hero);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Popup \r\n                    trigger={isOpen => (\r\n                        <Button onClick={this.onToggleHeroSelect}><FontAwesomeIcon icon={faPencilAlt} /></Button>\r\n                    )} \r\n                    position=\"right top\"\r\n                    contentStyle={{ width: \"750px\" }}>\r\n                     <HeroSelector \r\n                        onSelectedHero={this.onSelectHero} \r\n                        dotaStrings={this.state.dotaStrings}\r\n                         />\r\n                </Popup>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChangeHeroBtn;","import React, { Component } from 'react';\r\nimport {\r\n    Row,\r\n    Col\r\n} from \"react-bootstrap\";\r\n\r\nimport {\r\n    getTalentInfoFromName,\r\n} from \"../../utility/dataHelperTalents\";\r\nimport { \r\n    tryGetTalentLocalizedString,\r\n    replaceStringValue,\r\n    getLocalizedString\r\n} from \"../../utility/data-helpers/language\";\r\n\r\nfunction isTalentSelected (selectedTalents, talent) {\r\n    return selectedTalents?.includes(talent);\r\n}\r\n\r\nclass TalentRow extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            leftTalent: props.leftTalent,\r\n            rightTalent: props.rightTalent,\r\n            level: props.lvl,\r\n\r\n            selectedTalents: this.props.selectedTalents,\r\n            onTalentSelected: this.props.onTalentSelected,\r\n            onTalentUnselected: this.props.onTalentUnselected,\r\n\r\n            abilityStrings: this.props.abilityStrings,\r\n        };\r\n\r\n        this.onSelectTalent = this.onSelectTalent.bind(this);\r\n        this.getTalentDisplayName = this.getTalentDisplayName.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.leftTalent !== this.props.leftTalent) {\r\n            this.setState({ leftTalent: this.props.leftTalent });\r\n        }\r\n\r\n        if(prevProps.rightTalent !== this.props.rightTalent) {\r\n            this.setState({ rightTalent: this.props.rightTalent });\r\n        }\r\n\r\n        if (prevProps.lvl !== this.props.lvl) {\r\n            this.setState({ level: this.props.lvl });\r\n        }\r\n\r\n        if (prevProps.selectedTalents !== this.props.selectedTalents) {\r\n            this.setState({ selectedTalents: this.props.selectedTalents });\r\n        }\r\n\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ abilityStrings: this.props.abilityStrings });\r\n        }\r\n    }\r\n\r\n    onSelectTalent(e) {\r\n        var selectedTalent = e.target.dataset.talent;\r\n        // if clicked twice, unselect the talent\r\n        if (isTalentSelected(this.state.selectedTalents, selectedTalent)) {\r\n            this.state.onTalentUnselected(selectedTalent);\r\n        } else {\r\n            this.state.onTalentSelected(selectedTalent);\r\n        }\r\n    }\r\n\r\n    getTalentDisplayName (talent) {\r\n        let talentInfo = getTalentInfoFromName(talent);\r\n        if (!talentInfo) {\r\n            return \"Unknown Talent\";\r\n        }\r\n\r\n        let displayName = getLocalizedString(this.state.abilityStrings, \"DOTA_Tooltip_ability_\" + talent); \r\n        if (displayName && talentInfo && talentInfo.AbilitySpecial) {\r\n            displayName = replaceStringValue(displayName, talentInfo.AbilitySpecial[0].value)\r\n        }\r\n\r\n        return displayName;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Row className=\"my-1 py-2\" style={{ backgroundColor: \"rgb(24, 30, 33)\"}}>\r\n                {/* Left Talent */}\r\n                <Col \r\n                    md={5}\r\n                    className=\"text-center\"\r\n                    style={{ color: isTalentSelected(this.state.selectedTalents, this.state.leftTalent) ? \"#c4a66f\" : \"white\" }}>\r\n                    <div onClick={this.onSelectTalent} data-talent={this.state.leftTalent}>\r\n                        {\r\n                            this.getTalentDisplayName(this.state.leftTalent)\r\n                        }\r\n                    </div>\r\n                </Col>\r\n                {/* Talent Level */}\r\n                <Col md={2}>\r\n                    <h6 \r\n                        className=\"text-center\"\r\n                        style={{ color: \"#e7d291\"}}>\r\n                        {this.state.level}\r\n                    </h6>\r\n                </Col>\r\n                {/* Right Talent */}\r\n                <Col \r\n                    md={5}\r\n                    className=\"text-center\"\r\n                    style={{ color: isTalentSelected(this.state.selectedTalents, this.state.rightTalent) ? \"#c4a66f\" : \"white\" }}>\r\n                    <div onClick={this.onSelectTalent} data-talent={this.state.rightTalent}>\r\n                        {\r\n                            this.getTalentDisplayName(this.state.rightTalent)\r\n                        }\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TalentRow;\r\n","import TalentTree from \"./TalentTree\";\r\n\r\nexport default TalentTree;","import React, { Component } from 'react';\r\n\r\nimport TalentRow from \"./TalentRow\";\r\nimport { getLocalizedString } from '../../utility/data-helpers/language';\r\n\r\nclass TalentTree extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            talents: this.props.talents,\r\n            selectedTalents: this.props.selectedTalents,\r\n\r\n            onTalentSelected: this.props.onTalentSelected,\r\n            onTalentUnselected: this.props.onTalentUnselected,\r\n\r\n            dotaStrings: this.props.dotaStrings,\r\n            abilityStrings: this.props.abilityStrings,\r\n        };\r\n        this.findSelectedTalent = this.findSelectedTalent.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(prevProps.talents !== this.props.talents) {\r\n            this.setState({ talents: this.props.talents });\r\n        }\r\n        if (prevProps.selectedTalents !== this.props.selectedTalents) {\r\n            this.setState({ selectedTalents: this.props.selectedTalents });\r\n        }\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ abilityStrings: this.props.abilityStrings });\r\n        }\r\n        if (prevProps.dotaStrings !== this.props.dotaStrings) {\r\n            this.setState({ dotaStrings: this.props.dotaStrings });\r\n        }\r\n    }\r\n\r\n    findSelectedTalent(leftTalent, rightTalent) {\r\n        if (this.state.selectedTalents && this.state.selectedTalents.length > 0) {\r\n            var matchTalent = this.state.selectedTalents.find((val) => {\r\n                if (val.name === leftTalent) {\r\n                    return leftTalent;\r\n                } else if (val.name === rightTalent) {\r\n                    return rightTalent;\r\n                }\r\n                return null;\r\n            });\r\n            return matchTalent?.name;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h6 className=\"text-center\">{ getLocalizedString(this.state.dotaStrings, \"DOTA_StatBranch_TooltipTitle\") }</h6>\r\n                {/* <img src=\"/images/dota2/talent.jpg\" alt=\"talent tree\" /> */}\r\n                <div \r\n                    className=\"mr-2\"\r\n                    style={{ fontSize: \"0.8rem\" }}>\r\n                        {\r\n                            this.state.talents && this.state.talents.map((talentInfo) => {\r\n                                return <TalentRow \r\n                                                key={talentInfo.lvl}\r\n                                                lvl={talentInfo.lvl}\r\n                                                leftTalent={talentInfo.leftTalent} \r\n                                                rightTalent={talentInfo.rightTalent} \r\n                                                selectedTalents={this.state.selectedTalents}\r\n                                                onTalentSelected={this.state.onTalentSelected}\r\n                                                onTalentUnselected={this.state.onTalentUnselected} \r\n                                                \r\n                                                abilityStrings={this.state.abilityStrings} />\r\n                            })\r\n                        }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TalentTree;","import HealthManaBar from \"./HealthManaBar\";\r\n\r\nexport default HealthManaBar;","import React, { Component } from 'react';\r\n\r\nimport {\r\n    calculateHealth,\r\n    calculateMana,\r\n    calculateHealthRegen,\r\n    calculateManaRegen,\r\n} from \"../../utility/calculate\";\r\nimport { EAttributes } from \"../../enums/attributes\";\r\n\r\nimport \"./style.css\";\r\n\r\nclass HealthManaBar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            hero: props.hero,\r\n            level: props.heroLevel,\r\n            items: props.items,\r\n            talents: props.talents,\r\n            neutral: props.neutral,\r\n            abilities: props.abilities,\r\n\r\n            maxHealth: 0,\r\n            maxMana: 0,\r\n        }\r\n\r\n        this.updateBar = this.updateBar.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateBar();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                hero: this.props.hero,\r\n                level: this.props.heroLevel,\r\n                items: this.props.items,\r\n                talents: this.props.talents,\r\n                neutral: this.props.neutral,\r\n                abilities: this.props.abilities,\r\n\r\n                maxHealth: 0,\r\n                maxMana: 0,\r\n            }, () => this.updateBar());\r\n        }\r\n    }\r\n\r\n    updateBar() {\r\n        this.setState({\r\n            maxHealth: calculateHealth(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n            maxMana: calculateMana(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"bar health d-flex\">\r\n                    <h6 className=\"my-auto mx-auto\">{this.state.maxHealth} / {this.state.maxHealth}</h6>\r\n                    <div className=\"my-auto mr-1\">\r\n                        { \"+\" + calculateHealthRegen(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents) }\r\n                    </div>\r\n                </div>\r\n                <div className=\"bar mana d-flex\">\r\n                    <h6 className=\"my-auto mx-auto\">{this.state.maxMana} / {this.state.maxMana}</h6>\r\n                    <div className=\"my-auto mr-1\">\r\n                        { \"+\" + calculateManaRegen(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents) }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HealthManaBar;","import React, { Component } from 'react';\r\nimport { \r\n    Button, \r\n    Form\r\n} from 'react-bootstrap';\r\nimport { getLocalizedString } from '../../utility/data-helpers/language';\r\n\r\nconst MAX_LEVEL = 30;\r\nconst MIN_LEVEL = 1;\r\n\r\nfunction ModifyBtn (props) {\r\n    return (\r\n        <Button \r\n            className=\"py-1\"\r\n            variant=\"outline-secondary\" \r\n            onClick={props.onClick}>\r\n            { props.text }\r\n        </Button>\r\n    );\r\n}\r\n\r\nclass LevelSelector extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            level: props.heroLevel,\r\n            onHeroLevelChanged: props.onHeroLevelChanged,\r\n            dotaStrings: props.dotaStrings,\r\n        };\r\n\r\n        this.onIncrementHeroLevel = this.onIncrementHeroLevel.bind(this);\r\n        this.onDecrementHeroLevel = this.onDecrementHeroLevel.bind(this);\r\n        this.onLvlInputChanged = this.onLvlInputChanged.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.heroLevel !== this.props.heroLevel) {\r\n            this.setState({\r\n                level: this.props.heroLevel,\r\n            });\r\n        }\r\n        if (prevProps.dotaStrings !== this.props.dotaStrings) {\r\n            this.setState({ dotaStrings: this.props.dotaStrings });\r\n        }\r\n    }\r\n\r\n    onIncrementHeroLevel() {\r\n        let newLevel = this.state.level;\r\n        newLevel += 1;\r\n\r\n        if (newLevel >= MAX_LEVEL) {\r\n            newLevel = MAX_LEVEL;\r\n        }\r\n\r\n        this.state.onHeroLevelChanged(newLevel);\r\n    }\r\n\r\n    onDecrementHeroLevel() {\r\n        let newLevel = this.state.level;\r\n        newLevel -= 1;\r\n\r\n        if (newLevel < MIN_LEVEL) {\r\n            newLevel = MIN_LEVEL;\r\n        }\r\n\r\n        this.state.onHeroLevelChanged(newLevel);\r\n    }\r\n\r\n    onLvlInputChanged(e) {\r\n        let lvl = parseInt(e.target.value);\r\n        if (lvl) {\r\n            if (lvl > MAX_LEVEL) {\r\n                lvl = MAX_LEVEL;\r\n            }\r\n            else if (lvl < MIN_LEVEL) {\r\n                lvl = MIN_LEVEL;\r\n            }\r\n        } else {\r\n            lvl = MIN_LEVEL;\r\n        }\r\n\r\n        this.state.onHeroLevelChanged(lvl);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"mx-5\">\r\n                <h6>{ getLocalizedString(this.state.dotaStrings, \"dota_stat_dropdown_level\") }</h6>\r\n                <div className=\"d-flex\">\r\n                    <ModifyBtn \r\n                        onClick={this.onDecrementHeroLevel} \r\n                        text=\"-\" />\r\n                    <Form.Control\r\n                        className=\"mx-3\" \r\n                        style={{ width: \"75px\" }}\r\n                        placeholder=\"lvl\" \r\n                        type=\"number\" \r\n                        value={this.state.level} \r\n                        onChange={this.onLvlInputChanged} />\r\n                    <ModifyBtn \r\n                        onClick={this.onIncrementHeroLevel} \r\n                        text=\"+\" />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LevelSelector;","import LevelSelector from \"./LevelSelector\";\r\n\r\nexport default LevelSelector;","import React, { Component } from 'react';\r\nimport {\r\n    Container,\r\n    Row,\r\n    Col,\r\n    Button,\r\n    Form,\r\n} from 'react-bootstrap';\r\nimport { connect } from \"react-redux\";\r\nimport copy from \"copy-to-clipboard\";\r\nimport { Base64 } from \"js-base64\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCopy, faFile, faChevronUp, faChevronDown, faShare } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport {\r\n    SELECTED_HERO,\r\n    SELECTED_ITEM,\r\n    SELECTED_NEUTRAL,\r\n    SELECTED_BACKPACK_ITEM,\r\n    SELECTED_TALENT,\r\n    UNSELECTED_TALENT,\r\n    NEW_HERO_LEVEL,\r\n    ENEMY_SELECTED_TALENT\r\n} from \"../../constants/actionTypes\";\r\n\r\nimport { \r\n    getLocalizedString\r\n} from '../../utility/data-helpers/language';\r\n\r\nimport Abilities from \"../Abilities\";\r\nimport ItemsBar from \"../ItemsBar\";\r\nimport Attributes from \"../Attributes\";\r\nimport Statistics from \"../Statistics\";\r\nimport ChangeHeroBtn from \"../ChangeHeroBtn\";\r\nimport TalentTree from \"../TalentTree\";\r\nimport HealthManaBar from \"../HealthManaBar\";\r\nimport LevelSelector from \"../LevelSelector\";\r\nimport EnemyHero from '../EnemyHero';\r\n\r\nimport \"../../css/dota_hero_icons.css\";\r\nimport \"../../css/dota_attributes.css\";\r\nimport \"../../css/dota_items.css\";\r\nimport \"../../css/dota_hero_icons_big.css\";\r\nimport \"./Calculator.css\";\r\nimport { Redirect, Link } from 'react-router-dom';\r\n\r\n\r\nclass Calculator extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            buildName: \"\",\r\n            buildCreator: \"\",\r\n            openBuildShare: false,\r\n            loadedFromParams: false,\r\n        };\r\n\r\n        this.onHeroSelected = this.onHeroSelected.bind(this);\r\n        this.onItemSelected = this.onItemSelected.bind(this);\r\n        this.onNeutralSelected = this.onNeutralSelected.bind(this);\r\n        this.onTalentSelected = this.onTalentSelected.bind(this);\r\n        this.onTalentUnselected = this.onTalentUnselected.bind(this);\r\n        this.onHeroLevelChanged = this.onHeroLevelChanged.bind(this);\r\n\r\n        this.onShareBuild = this.onShareBuild.bind(this);\r\n        this.onBuildNameChanged = this.onBuildNameChanged.bind(this);\r\n        this.onBuildCreatorChanged = this.onBuildCreatorChanged.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        /// Parse build data from url on start and set app state\r\n        if (this.props.location.search) {\r\n            let params = new URLSearchParams(this.props.location.search);\r\n            let buildData = params.get(\"build\");\r\n            if (buildData) {\r\n                let decoded = Base64.decode(buildData);\r\n                let buildObject = null;\r\n                try {\r\n                    buildObject = JSON.parse(decoded);\r\n                } catch(e) {\r\n                    console.error(\"Unable to parse build object\");\r\n                }\r\n\r\n                if (buildObject) {\r\n                    this.setState({\r\n                        buildCreator: buildObject.creator,\r\n                        buildName: buildObject.name,\r\n                        openBuildShare: true,\r\n                        loadedFromParams: true,\r\n                    });\r\n                    \r\n                    let build = buildObject.build;\r\n                    if (build?.selectedHeroName)\r\n                        this.props.dispatch({ type: SELECTED_HERO, value: build.selectedHeroName });\r\n                    if (build?.heroLevel)\r\n                        this.props.dispatch({ type: NEW_HERO_LEVEL, value: build.heroLevel });\r\n                    if (build?.selectedTalents) {\r\n                        for(let talent of  build.selectedTalents) {\r\n                            this.props.dispatch({ type: SELECTED_TALENT, value: talent });\r\n                        }\r\n                    }\r\n                    if (build?.items) {\r\n                        for (let item of build.items) {\r\n                            if (item.item) {\r\n                                this.props.dispatch({ type: SELECTED_ITEM, value: item });\r\n                            }\r\n                        }\r\n                    }\r\n                    if (build?.neutralItem) {\r\n                        this.props.dispatch({ type: SELECTED_NEUTRAL, value: build.neutralItem });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    onShareBuild() {\r\n        let buildObject = {\r\n            name: this.state.buildName ?? \"Unknown\",\r\n            creator: this.state.buildCreator ?? \"Unknown\",\r\n            build: {\r\n                selectedHeroName: this.props.selectedHeroName,\r\n                heroAbilities: this.props.heroAbilities,\r\n                heroTalents: this.props.heroTalents,\r\n                heroLevel: this.props.heroLevel,\r\n\r\n                items: this.props.items,\r\n                backpack: this.props.backpack,\r\n                neutralItem: this.props.neutralItem,\r\n                selectedTalents: this.props.selectedTalents,\r\n            },\r\n        };\r\n        let str = JSON.stringify(buildObject);\r\n        let encoded = Base64.encode(str);\r\n        // set clipboard\r\n        copy(`localhost:3000/#/app?build=${encoded}`);\r\n    }\r\n\r\n    onHeroSelected(heroName) {\r\n        console.log(`${SELECTED_HERO}: ${heroName}`);\r\n        this.props.dispatch({ type: SELECTED_HERO, value: heroName });\r\n    }\r\n\r\n    onItemSelected (item) {\r\n        if (item.isBackpack) \r\n        {\r\n            console.log(`${SELECTED_BACKPACK_ITEM}: Slot: ${item.slot} Item: ${item.item}`);\r\n            this.props.dispatch({ type: SELECTED_BACKPACK_ITEM, value: item });\r\n        }\r\n        else\r\n        {\r\n            console.log(`${SELECTED_ITEM}: Slot: ${item.slot} Item: ${item.item}`);\r\n            this.props.dispatch({ type: SELECTED_ITEM, value: item });\r\n        }\r\n    }\r\n\r\n    onNeutralSelected(neutralItem) {\r\n        console.log(`${SELECTED_NEUTRAL}: ${neutralItem.item}`);\r\n        this.props.dispatch({ type: SELECTED_NEUTRAL, value: neutralItem });\r\n    }\r\n\r\n    onTalentSelected (talent) {\r\n        console.log(`${SELECTED_TALENT}: ${talent}`);\r\n        this.props.dispatch({ type: SELECTED_TALENT, value: talent });\r\n    }\r\n\r\n    onTalentUnselected (talent) {\r\n        console.log(`${UNSELECTED_TALENT}: ${talent}`);\r\n        this.props.dispatch({ type: UNSELECTED_TALENT, value: talent });\r\n    }\r\n\r\n    onEnemyTalentSelected (enemy, talent) {\r\n        console.log(`${ENEMY_SELECTED_TALENT}: ${enemy}, ${talent}`);\r\n        this.props.dispatch({ type: ENEMY_SELECTED_TALENT, value: talent });\r\n    }\r\n\r\n    onHeroLevelChanged(newLevel) {\r\n        //console.log(`${NEW_HERO_LEVEL}: ${newLevel}`);\r\n        this.props.dispatch({ type: NEW_HERO_LEVEL, value: newLevel });\r\n    }\r\n\r\n    onBuildNameChanged(e) {\r\n        this.setState({ buildName: e.target.value });\r\n    }\r\n\r\n    onBuildCreatorChanged(e) {\r\n        this.setState({ buildCreator: e.target.value });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"mt-3\">\r\n                <Container fluid=\"md\">\r\n                    {/* Top row, Inital Hero Information */}\r\n                    <Row>\r\n                        {/* Main Hero Info */}\r\n                        <Col className=\"my-auto\" md={3}>\r\n                            <span \r\n                                className={`hero-icon-big hero-icon-big-${this.props.selectedHeroName}_png mx-3`}\r\n                                height={50}\r\n                                alt=\"hero banner\" />\r\n                            <div className=\"d-flex mt-3\">\r\n                                <h5 className=\"my-auto px-3\">\r\n                                    { getLocalizedString(this.props.dotaStrings, this.props.selectedHeroName) }\r\n                                </h5>\r\n                                <ChangeHeroBtn \r\n                                    onSelectHero={this.onHeroSelected}\r\n                                    dotaStrings={this.props.dotaStrings} />\r\n                            </div>\r\n                        </Col>\r\n                        {/* Small Stats */}\r\n                        <Col md={3}>\r\n                            <Attributes \r\n                                hero={this.props.selectedHero} \r\n                                heroLevel={this.props.heroLevel}\r\n                                talents={this.props.selectedTalents}\r\n                                items={this.props.items}\r\n                                neutral={this.props.neutralItem} \r\n                                abilities={this.props.heroAbilities} \r\n                                abilityStrings={this.props.abilityStrings}\r\n                                dotaStrings={this.props.dotaStrings}/>\r\n                        </Col>\r\n                        {/* Final Attack/Defence Stats */}\r\n                        <Col md={5}>\r\n                            <Statistics \r\n                                hero={this.props.selectedHero} \r\n                                heroLevel={this.props.heroLevel}\r\n                                talents={this.props.selectedTalents}\r\n                                items={this.props.items}\r\n                                neutral={this.props.neutralItem} \r\n                                abilities={this.props.heroAbilities} \r\n                                abilityStrings={this.props.abilityStrings}\r\n                                dotaStrings={this.props.dotaStrings}  />\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    {/* Health/Mana and Hero Lvl  */}\r\n                    <Row className=\"my-2 py-2\">\r\n                        <Col md={8}>\r\n                            <HealthManaBar \r\n                                hero={this.props.selectedHero} \r\n                                heroLevel={this.props.heroLevel}\r\n                                talents={this.props.selectedTalents}\r\n                                items={this.props.items}\r\n                                neutral={this.props.neutralItem} \r\n                                abilities={this.props.heroAbilities} />\r\n                        </Col>\r\n                        <Col md={4}>\r\n                            <LevelSelector \r\n                                heroLevel={ this.props.heroLevel } \r\n                                onHeroLevelChanged={ this.onHeroLevelChanged }\r\n                                dotaStrings={this.props.dotaStrings} />\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    {/* Items/Talent */}\r\n                    <Row className=\"items-row my-4\">\r\n                        <Col md={7}>\r\n                            <ItemsBar\r\n                                items={this.props.items} \r\n                                backpack={this.props.backpack} \r\n                                neutral={this.props.neutralItem} \r\n                                onItemChanged={this.onItemSelected}\r\n                                onNeutralChanged={this.onNeutralSelected} \r\n                                dotaStrings={this.props.dotaStrings}\r\n                                abilityStrings={this.props.abilityStrings} />\r\n                        </Col>\r\n                        <Col md={5}>\r\n                            <TalentTree\r\n                                talents={this.props.heroTalents} \r\n                                selectedTalents={this.props.selectedTalents}\r\n                                onTalentSelected={this.onTalentSelected} \r\n                                onTalentUnselected={this.onTalentUnselected} \r\n                                dotaStrings={this.props.dotaStrings}\r\n                                abilityStrings={this.props.abilityStrings} />\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    {/* Abilities */}\r\n                    <Abilities \r\n                        heroName={this.props.selectedHeroName}\r\n                        abilities={this.props.heroAbilities}\r\n                        items={this.props.items}\r\n                        neutral={this.props.neutralItem} \r\n                        selectedTalents={this.props.selectedTalents} \r\n                        abilityStrings={this.props.abilityStrings}\r\n                        dotaStrings={this.props.dotaStrings} \r\n                        displayDamage={true} />\r\n\r\n                    <div className=\"pb-4\">\r\n                        <Button \r\n                            className=\"d-flex py-2\"\r\n                            onClick={() => this.setState({ openBuildShare: !this.state.openBuildShare })}>\r\n                            <h6 className=\"mx-1 mr-2 mb-0\">Share</h6>\r\n                            <FontAwesomeIcon className=\"my-auto\" icon={this.state.openBuildShare ? faChevronUp : faChevronDown} />\r\n                        </Button>\r\n                        {\r\n                            this.state.openBuildShare &&\r\n                                <Row>\r\n                                    <Col md={4}>\r\n                                        <h4>Build Name</h4>\r\n                                        {\r\n                                            this.state.buildName && this.state.loadedFromParams \r\n                                            ?\r\n                                            <Form.Control \r\n                                                className=\"m-2\"\r\n                                                type=\"text\" \r\n                                                placeholder=\"Build Name\" \r\n                                                value={this.state.buildName} \r\n                                                plaintext\r\n                                                readonly />\r\n                                            :\r\n                                            <Form.Control \r\n                                                className=\"m-2\"\r\n                                                type=\"text\" \r\n                                                placeholder=\"Build Name\" \r\n                                                onChange={this.onBuildNameChanged} />\r\n                                        }\r\n                                    </Col>\r\n                                    <Col md={4}>\r\n                                        <h4>Creator</h4>\r\n                                        {\r\n                                            this.state.buildCreator && this.state.loadedFromParams\r\n                                            ?\r\n                                            <Form.Control \r\n                                                className=\"m-2\"\r\n                                                type=\"text\" \r\n                                                placeholder=\"Creator\" \r\n                                                value={this.state.buildCreator} \r\n                                                plaintext\r\n                                                readonly />\r\n                                            :\r\n                                            <Form.Control \r\n                                                className=\"m-2\"\r\n                                                type=\"text\" \r\n                                                placeholder=\"Creator\" \r\n                                                onChange={this.onBuildCreatorChanged} />\r\n                                        }\r\n                                    </Col>\r\n                                    <Col md={4}>\r\n                                        <div className=\"d-flex my-auto h-100\">\r\n                                            <Button className=\"mr-1 my-auto\" onClick={this.onShareBuild}>\r\n                                                <FontAwesomeIcon icon={faShare} />\r\n                                            </Button>\r\n                                            <div className=\"my-auto\">Share this build!</div>\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                        }\r\n                    </div>\r\n\r\n                    {/* Padding Separator */}\r\n                    {/* <div className=\"py-5\" /> */}\r\n                    \r\n                    {/* Enemy Hero */}\r\n                    {/* <EnemyHero \r\n                        hero={this.props.selectedEnemyHero}\r\n                        heroName={this.props.selectedEnemyHeroName} \r\n                        heroAbilities={this.props.enemyHeroAbilities} \r\n                        heroItems={this.props.enemyHeroItems}\r\n                        heroTalents={this.props.enemyHeroTalents} \r\n                        selectedTalents={this.props.selectedEnemyTalents}\r\n                        neutral={this.props.enemyNeutralItem}\r\n                        abilityStrings={this.props.abilityStrings} \r\n                        dotaStrings={this.props.dotaStrings} /> */}\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    selectedHero: state.hero.selectedHero,\r\n    selectedHeroName: state.hero.selectedHeroName,\r\n    \r\n    heroAbilities: state.hero.heroAbilities,\r\n    heroTalents: state.hero.heroTalents,\r\n    heroLevel: state.hero.heroLevel,\r\n\r\n    items: state.hero.items,\r\n    backpack: state.hero.backpack,\r\n    neutralItem: state.hero.neutralItem,\r\n    selectedTalents: state.hero.selectedTalents,\r\n\r\n    abilityStrings: state.language.stringsAbilities,\r\n    dotaStrings: state.language.stringsDota,\r\n\r\n    selectedEnemyHero: state.enemy.selectedEnemyHero,\r\n    selectedEnemyHeroName: state.enemy.selectedEnemyHeroName,\r\n    enemyHeroTalents: state.enemy.enemyHeroTalents,\r\n    enemyHeroAbilities: state.enemy.enemyHeroAbilities,\r\n    selectedEnemyTalents: state.enemy.selectedEnemyTalents,\r\n    enemyHeroItems: state.enemy.enemyHeroItems,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Calculator);","import React, { Component } from 'react';\r\nimport {\r\n    Row,\r\n    Col,\r\n} from 'react-bootstrap';\r\n\r\nimport TalentTree from \"../TalentTree\";\r\nimport ItemsBar from '../ItemsBar/ItemsBar';\r\nimport Abilities from '../Abilities';\r\nimport HealthManaBar from \"../HealthManaBar\";\r\n\r\nclass EnemyHero extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            enemyHero: this.props.hero,\r\n            enemyHeroName: this.props.heroName,\r\n            heroTalents: this.props.heroTalents,\r\n            heroAbilities: this.props.heroAbilities,\r\n            selectedTalents: this.props.selectedTalents,\r\n            heroItems: this.props.heroItems,\r\n            heroNeutral: this.props.neutral,\r\n\r\n            abilityStrings: this.props.abilityStrings,\r\n            dotaStrings: this.props.dotaStrings,\r\n\r\n            heroLevel: 0,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.hero !== this.props.hero) {\r\n            this.setState({ enemyHero: this.props.hero });\r\n        }\r\n        if (prevProps.heroName !== this.props.heroName) {\r\n            this.setState({ enemyHeroName: this.props.heroName });\r\n        }\r\n        if (prevProps.heroTalents !== this.props.heroTalents) {\r\n            this.setState({ heroTalents: this.props.heroTalents });\r\n        }\r\n        if (prevProps.heroAbilities !== this.props.heroAbilities) {\r\n            this.setState({ heroAbilities: this.props.heroAbilities });\r\n        }\r\n        if (prevProps.selectedTalents !== this.props.selectedTalents) {\r\n            this.setState({ selectedTalents: this.props.selectedTalents });\r\n        }\r\n        if (prevProps.heroItems !== this.props.heroItems) {\r\n            this.setState({ heroItems: this.props.heroItems });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Row>\r\n                    <Col md={4}>\r\n                        {this.state.enemyHeroName}\r\n                    </Col>\r\n                    <Col md={8}>\r\n                        <HealthManaBar \r\n                                baseStrength ={ this.state.enemyHero?.AttributeBaseStrength }\r\n                                strengthGain={ this.state.enemyHero?.AttributeStrengthGain } \r\n                                baseIntelligence={this.state.enemyHero?.AttributeBaseIntelligence }\r\n                                intelligenceGain={ this.state.enemyHero?.AttributeIntelligenceGain }\r\n                                heroLevel={ this.state.heroLevel } \r\n                                primaryAttribute={ this.state.enemyHero?.AttributePrimary }\r\n                                bonusHealthRegen={ this.state.enemyHero?.StatusHealthRegen }\r\n                                bonusManaRegen={ this.state.enemyHero?.StatusManaRegen } />\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"\">\r\n                    {/* Talents */}\r\n                    <Col md={5}>\r\n                        <TalentTree\r\n                            talents={this.state.heroTalents} \r\n                            selectedTalents={this.state.selectedTalents}\r\n                            onTalentSelected={this.onTalentSelected} \r\n                            onTalentUnselected={this.onTalentUnselected} \r\n                            abilityStrings={this.state.abilityStrings} />\r\n                    </Col>\r\n                    {/* Abilities */}\r\n                    \r\n                    {/* Items */}\r\n                    <Col md={5}>\r\n                        <ItemsBar\r\n                            items={this.state.heroItems}  \r\n                            neutral={this.props.neutralItem}\r\n                            onItemChanged={this.onItemSelected}\r\n                            onNeutralChanged={this.onNeutralSelected} />\r\n                    </Col>\r\n                </Row>\r\n                <Abilities \r\n                        abilities={this.state.heroAbilities}\r\n                        items={this.state.heroItems}\r\n                        neutral={this.props.neutralItem} \r\n                        selectedTalents={this.props.selectedTalents} \r\n                        abilityStrings={this.props.abilityStrings}\r\n                        dotaStrings={this.state.dotaStrings} \r\n                        displayDamage={false} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EnemyHero;","import Calculator from \"./Calculator\";\r\n\r\nexport default Calculator;","import Home from \"./Home\";\r\n\r\nexport default Home;","import React, { Component } from 'react';\r\nimport {\r\n    Container,\r\n    Button\r\n} from \"react-bootstrap\";\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nclass Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            redirect: \"\",\r\n        };\r\n\r\n        this.onGoToCalc = this.onGoToCalc.bind(this);\r\n    }\r\n\r\n    onGoToCalc() {\r\n        this.setState({ redirect: \"/app\" });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Container>\r\n                    <div style={{ height: \"300px\" }}>\r\n                        <h1 \r\n                            className=\"text-center my-5 pt-3\">\r\n                                foresight\r\n                        </h1>\r\n                        <div className=\"text-center\">\r\n                            <h6 className=\"py-2\">work in progress</h6>\r\n                            <Button\r\n                                className=\"mx-auto\"\r\n                                onClick={this.onGoToCalc}>\r\n                                to app\r\n                            </Button>\r\n                        </div>\r\n                        \r\n                    </div>\r\n                </Container>\r\n                {\r\n                    this.state.redirect && <Redirect to={this.state.redirect} />\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import App from \"./App\";\r\n\r\nexport default App;","import React, { Component } from 'react';\nimport { \n    HashRouter,\n    Route,\n    Switch\n} from 'react-router-dom';\n\nimport Navigation from \"../Navigation\";\nimport FourOhFour from \"../FourOhFour\";\nimport Calculator from \"../Calculator\";\nimport Home from \"../Home\";\n\nclass App extends Component {\n    render() {\n        return (\n            <HashRouter>\n                <Navigation />\n\n                <Switch>\n                    <Route exact path=\"/\" component={Home} />\n\n                    <Route exact path=\"/app\" component={Calculator} />\n\n                    <Route component={FourOhFour} />\n                </Switch>\n            </HashRouter>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./store\";\n\nimport App from './components/App/';\n\n// Import Bootstrap component styles\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst app = (\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>\n);\n\nReactDOM.render(app, document.getElementById('root') );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}