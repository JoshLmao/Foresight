{"version":3,"sources":["serviceWorker.js","enums/attributes.js","utility/dataHelperHero.js","reducers/initialState.js","utils.js","reducers/hero.js","constants/actionTypes.js","enums/languages.js","reducers/language.js","store/index.js","reducers/enemy.js","components/LanguageSelect/LanguageSelect.jsx","components/LanguageSelect/index.js","components/Navigation/Navigation.jsx","components/Navigation/index.js","components/FourOhFour/index.js","components/FourOhFour/FourOhFour.jsx","enums/abilities.js","utility/dataHelperTalents.js","utility/dataHelperAbilities.js","utility/dataHelperItems.js","utility/data-helpers/language.js","enums/hero.js","utility/calculate.js","components/Abilities/DamageOutput.jsx","components/Abilities/Cooldown.jsx","components/Abilities/ManaCost.jsx","components/Abilities/AbilityDetails.jsx","components/Abilities/Abilities.jsx","components/Abilities/index.js","utility/spriteHelper.js","components/ItemsBar/ItemSelector.jsx","enums/items.js","components/ItemTooltip/ItemTooltip.jsx","components/ItemTooltip/index.js","components/ItemsBar/Item.jsx","components/Neutral/NeutralItemSelector.jsx","components/Neutral/index.js","components/Neutral/Neutral.jsx","components/ItemsBar/ItemsBar.jsx","components/ItemsBar/index.js","components/Attributes/Attributes.jsx","components/Attributes/index.js","components/Statistics/Statistics.jsx","components/Statistics/index.js","components/ChangeHeroBtn/HeroSelector.jsx","components/ChangeHeroBtn/index.js","components/ChangeHeroBtn/ChangeHeroBtn.jsx","components/TalentTree/TalentRow.jsx","components/TalentTree/index.js","components/TalentTree/TalentTree.jsx","components/HealthManaBar/index.js","components/HealthManaBar/HealthManaBar.jsx","components/LevelSelector/LevelSelector.jsx","components/LevelSelector/index.js","components/Calculator/Calculator.jsx","components/EnemyHero/EnemyHero.jsx","components/Calculator/index.js","components/Home/index.js","components/Home/Home.jsx","components/App/index.js","components/App/App.jsx","index.js"],"names":["Boolean","window","location","hostname","match","EAttributes","getSpecificAttributeStats","specificAttribute","heroInfo","basePrimary","primaryPerLevel","parseInt","AttributeBaseStrength","parseFloat","AttributeStrengthGain","AttributeBaseAgility","AttributeAgilityGain","AttributeBaseIntelligence","AttributeIntelligenceGain","console","error","base","perLevel","getHeroTalents","keys","Object","talents","i","length","includes","ability","push","mappedTalents","lvlRow","lvl","rightTalent","leftTalent","sort","a","b","getAllHeroAbilities","abilities","getPrimaryAttribute","hero","AttributePrimary","isHeroAttackCapability","atkCapability","AttackCapabilities","split","initialState","selectedHero","DOTAHeroes","npc_dota_hero_abaddon","selectedHeroName","heroAbilities","heroAbilityLevels","map","val","index","level","heroTalents","selectedTalents","heroLevel","items","slot","item","backpack","neutralItem","lang","stringsAbilities","EngAbilStrings","stringsDota","EngDotaStrings","selectedEnemyHero","npc_dota_hero_target_dummy","selectedEnemyHeroName","modelString","dashSplit","parseNameFromModel","Model","enemyHeroTalents","enemyHeroAbilities","selectedEnemyTalents","enemyHeroItems","replaceUpdatedAbilityLevel","abilityLevelArray","newAbilityLevel","newArray","filter","replaceUpdatedItem","itemArray","newItem","extra","getNewTalentArray","talentArray","newTalent","value","removeTalent","unselectedTalent","talent","reducer","state","action","type","log","allHeroAbilities","abil","ELanguages","SCHINESE","ENGLISH","getAbilityStrings","langCode","SChineseAbilStrings","getGeneralStrings","SChineseDotaStrings","allReducers","combineReducers","language","enemy","store","createStore","LanguageSelect","props","onLanguageChanged","bind","event","newLanguage","target","this","dispatch","Form","Control","className","as","onChange","defaultValue","values","key","Component","connect","pkg","require","Navigation","Navbar","Container","Brand","to","Link","name","Nav","style","fontSize","eventKey","disabled","version","dotaVersion","Toggle","aria-controls","Collapse","id","href","Button","variant","icon","faGithub","FourOhFour","EDamageType","EAbilityBehaviour","ESpellImmunityType","ESpecialBonusOperation","tryGetTalentSpecialAbilityValue","specialValueKey","talentInfo","getAbilityInfoFromName","specialValue","getAbilitySpecialAbilityValue","talentsInclude","targetTalent","abilityName","DOTAAbilities","tryGetAbilitySpecialAbilityValue","abilityLevel","abilityInfo","specialAbilityKey","AbilitySpecial","matchingKey","find","element","specialAbilityInfo","dataValue","var_type","parseAbilityValueByLevel","abilValue","splitValues","isCooldownTalent","isTalent","isDamageTalent","isCastRangeTalent","lowerCasePhrase","abilityString","DOTAEngAbilityStrings","Tokens","toLowerCase","tryParseAbilitySpecialValue","abilSpecialinfo","tryGetAbilityInfoValueFromKey","abilInfoKey","getItemInfoFromName","itemName","DOTAItems","getItemSpecialAbilityValue","itemInfo","specialAbilityValueKey","tryGetItemSpecialValue","tryGetNeutralSpecialValue","neutral","foundNeutralInfo","primaryAttributeToItemBonusKey","primaryAttr","itemsContainsScepter","allItems","tryGetItemInfoValue","itemInfoKey","infoValue","convertItemDescToHtml","itemDescString","dataString","string","replaceRegex","phrase","infoKey","join","specialAbilityValue","replace","regexExp","RegExp","replaceStringWithDataValues","engSplitString","getFuzzyTooltipAbilityString","localizedSplit","totalHtmlSections","section","position","right","AbilityManaCost","AbilityCooldown","faClock","dangerouslySetInnerHTML","__html","ItemQuality","itemAliasIncludes","itemAlias","includePhrase","indexOf","abilityStrings","str","getLocalizedString","localeStrings","replaceStringValue","undefined","EAttackCapabilities","calculateHealth","baseStrength","strengthGain","baseHealth","npc_dota_hero_base","StatusHealth","totalHealth","bonusHealth","bonusStr","bonusAllStats","maxHealth","toFixed","calculateMana","baseInt","intGain","baseMana","StatusMana","totalMana","bonusMana","bonusInt","maxMana","calculateHealthRegen","totalHpRegen","StatusHealthRegen","regenAmt","healthRegen","bonusHealthRegen","bonusRegen","calculateManaRegen","totalManaRegen","StatusManaRegen","totalManaRegenPercentAmp","bonusManaRegen","bonusIntellect","regenPerCharge","charges","manaRegenAmp","manaRegen","calculateTotalSpellAmp","totalSpellAmp","ampTalent","spellAmpInfo","foundNeutral","spellAmpAmount","ampPerCharge","calculateStatusResist","totalStatusResist","statusResistAmount","calculateMagicResist","resistanceBonuses","MagicalResistance","baseResist","magicResistAmount","edited","total","calculateEvasion","totalEvasion","bonusEvasion","evasionAmount","calculateRightClickDamage","heroMainAttribute","atkMin","AttackDamageMin","atkMax","AttackDamageMax","primaryAttributeStats","heroIsMelee","totalPrimaryAttribute","totalAdditional","allAttrKeys","bonusPrimaryAttr","bonusPrimaryStat","bonusDmg","bonusMeleeDmg","bonusRangedDmg","allStats","min","max","Math","floor","additional","calculateAttackTime","totalAttackSpeed","BaseAttackSpeed","agiStats","totalAgi","bonusAttackSpeed","bonusAgility","attackSpeed","attacksPerSec","atkSpeed","attackTime","attacksPerSecond","calculateSpellDamage","abilityDamageInfo","abilityDmg","damage","isPercent","AbilityDamage","dmgValue","specialAbilityElement","lowerKey","getAbilityOutputDamage","totalSpellAmpPercent","talentBonus","spellAmp","bonusSpellAmp","chargeCount","neutralInfo","special","bonus_spell_amp","spell_amp","ampTalentValue","linkedAbility","spellDamage","totalAbilDmg","abilityDamage","calculateAbilityCooldown","cooldown","fixedAmtReductionSeconds","AbilityCharges","AbilityChargeRestoreTime","getIncludesAbilitySpecialAbilityValue","allReductions","bonusCooldown","amount","source","reduction","totalCooldown","sourceOfReductions","decimal","calculateMoveSpeed","baseSpeed","MovementSpeed","flatBonus","moveSpeed","bonusMovement","moveSpeedPercentBonus","bonusMoveSpeed","bonusSpeed","calculateAttackRange","isHeroRanged","totalAttackRange","AttackRange","baseRange","rangeBonus","bonusAttackRange","bonusMeleeAttackRange","calculateAttribute","attribute","attributeStats","baseAttribute","attributePerLevel","totalAttribute","additionalAttribute","bonusAgi","primaryStat","calculateAbilityCastRange","baseCastRange","AbilityCastRange","foundRange","RequiresScepter","getAbilitySpecialCastRangeValue","totalBonusRange","getAbilityNameFromStrings","strings","languageStrings","stringKey","matchingKeys","tryGetLocalizedString","DamageOutput","levelInfo","dotaStrings","prevProps","setState","abilityKey","abilInfo","abilLvl","parseDamage","Cooldown","abilityCooldown","updateCooldown","currentCooldownInfo","title","faCircle","ManaCost","updateMana","manaCost","totalManaCostReducePercent","manaCostReduceAmount","costReductionAmount","reduceAmount","calculateManaCost","height","width","backgroundColor","stringContainsHtml","TypeValueUI","isPercentage","typeStr","valueStr","AbilityDetails","abilityBehaviours","castRange","castRangeAmt","valuesInformation","abilitySpecials","containsScepter","specialInfo","abilitySpecialKeys","currentAbilitySpecialObject","specialBonus","specialBonusOperation","translationKey","abilityValue","containsKey","specialBonusValue","getAbilitySpecialExtraValues","behaviours","AbilityBehavior","targeting","splitBehaviours","AbilityUnitDamageType","dmgTypeVal","splitDmgTypes","SpellImmunityType","pierceValue","getAbilityBehaviours","toUpperCase","Abilities","heroName","displayDamage","abilityLevels","onAbilityLevelChanged","onLevelChanged","e","tagName","parentElement","abilityIndex","dataset","lvlindex","targetLevel","btnindex","Row","md","abilVal","IsGrantedByScepter","Col","ID","maxWidth","maxHeight","src","alt","maxLvl","AbilityType","MaxLevel","html","onClick","data-lvlindex","data-btnindex","getAbilityLevelHtml","getItemIcon","scale","shift","filterItemName","data-item","transform","transformOrigin","display","getItemsByQuality","itemsArray","matchArray","quality","ItemIcon","keyName","TabHeading","text","ItemSelector","selectableItems","ItemIsNeutralDrop","IsObsolete","getAllItems","basicItems","upgradesItems","queryItems","onSelectedItem","onSearchChanged","onSearchItemSelected","onShopItemSelected","onRemoveItemSelected","query","filteredItems","localizedName","ItemAliases","placeholder","faMinus","color","ListGroup","itmName","Item","Tabs","defaultActiveKey","transition","Tab","EDisassembleRule","EItemQuality","replaceItemStatLocalizeString","localizeString","splice","abs","ItemTooltip","itemStats","statistics","itemStatIncludePhrases","getItemStatistics","loreString","descString","descFiltered","ItemCost","faCampground","faHome","splitCompare","localized","toString","cost","calculateItemSellCost","eDisassembleRule","ItemDisassembleRule","isDissassembleRule","isBackpack","onItemChanged","onItemExtraChanged","itemExtra","itemSelectorDisabled","onBloodstoneChargesChanged","setCharges","ItemInitialCharges","newVal","newChargeAmt","trigger","isOpen","zIndex","faInfo","on","contentStyle","closeOnDocumentClick","ItemRequiresCharges","itemRequiresCharges","top","left","size","padding","textAlign","background","border","NeutralTier","tier","time","neutrals","neutralKey","onNeutralSelected","data-neutral","iconScale","NeutralItemSelector","allNeutrals","selectableNeutrals","array","itemKey","getAllNeutrals","neutralTierList","DOTANeutralsTierList","queryNeutrals","onNewNeutralSelected","filteredNeutrals","drop_rates","tierDropAmt","dropAmount","Neutral","neutralSelectorDisabled","ItemsBar","onNeutralChanged","onItemExtraChnaged","onItem","Attribute","isPrimaryAttribute","perLevelString","per","Attributes","strengthStats","agilityStats","intStats","StatArray","stats","formatAttackMinMax","standardAtkDmg","dmgString","formatAttackTime","attackInfo","formatArmor","armorInfo","armor","Statistics","updateStatistics","totalArmor","ArmorPhysical","totalBonusArmor","bonusArmor","armorBonus","calculateMainArmor","physResist","percent","calculatePhysicalResist","attackRange","physicalResist","magicResist","statusResist","evasion","neutrak","HeroSelector","selectableHeroes","getAllPlayableHeroes","filteredHeroes","allHeroes","onSelectedHero","searchTerm","localizedHeroName","NameAliases","faSearch","data-heroname","displayName","data-hero","ChangeHeroBtn","onSelectHero","heroSelectorDisabled","onToggleHeroSelect","faPencilAlt","closeOnEscape","isTalentSelected","TalentRow","onTalentSelected","onTalentUnselected","onSelectTalent","getTalentDisplayName","selectedTalent","getTalentInfoFromName","userSelect","data-talent","TalentTree","findSelectedTalent","matchTalent","HealthManaBar","updateBar","ModifyBtn","LevelSelector","onHeroLevelChanged","onIncrementHeroLevel","onDecrementHeroLevel","onLvlInputChanged","newLevel","Calculator","buildName","buildCreator","openBuildShare","loadedFromParams","onHeroSelected","onItemSelected","onShareBuild","onBuildNameChanged","onBuildCreatorChanged","search","buildData","URLSearchParams","get","decoded","Base64","decode","buildObject","JSON","parse","creator","build","abilLevel","stringify","encoded","encode","copy","abilLvlInfo","fluid","faChevronUp","faChevronDown","plaintext","readonly","faShare","Home","redirect","onGoToApp","paddingTop","paddingBottom","faTwitter","sm","App","exact","path","component","app","StrictMode","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.cf1d0fb1.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// Enum of all attributes contained within npc_heroes\r\nexport const EAttributes = {\r\n    ATTR_STRENGTH: \"DOTA_ATTRIBUTE_STRENGTH\",\r\n    ATTR_AGILITY: \"DOTA_ATTRIBUTE_AGILITY\",\r\n    ATTR_INTELLIGENCE: \"DOTA_ATTRIBUTE_INTELLECT\"\r\n};","// * Helper and utility functions to provide for retrieving data from \"npc_heroes.json\"\r\n// * \r\n\r\nimport { EAttributes } from \"../enums/attributes\";\r\n\r\nimport { DOTAHeroes } from \"../data/dota2/json/npc_heroes.json\";\r\n\r\n/// Get the base and per level stats of a heroes primary attribute\r\nexport function getPrimaryAttributeStats(heroInfo) {\r\n    if (heroInfo && heroInfo.AttributePrimary) {\r\n        return getSpecificAttributeStats(heroInfo.AttributePrimary, heroInfo);\r\n    } else{\r\n        return null;\r\n    }\r\n}\r\n\r\n/// Get the base and per level stats of a specific attribute\r\nexport function getSpecificAttributeStats(specificAttribute, heroInfo) {\r\n    var basePrimary = 0;\r\n    var primaryPerLevel = 0;\r\n\r\n    switch(specificAttribute) {\r\n        case EAttributes.ATTR_STRENGTH:\r\n            {\r\n                basePrimary = parseInt(heroInfo.AttributeBaseStrength);\r\n                primaryPerLevel = parseFloat(heroInfo.AttributeStrengthGain);\r\n                break;\r\n            }\r\n        case EAttributes.ATTR_AGILITY:\r\n            {\r\n                basePrimary = parseInt(heroInfo.AttributeBaseAgility);\r\n                primaryPerLevel = parseFloat(heroInfo.AttributeAgilityGain);\r\n                break;\r\n            }\r\n        case EAttributes.ATTR_INTELLIGENCE:\r\n            {\r\n                basePrimary = parseInt(heroInfo.AttributeBaseIntelligence);\r\n                primaryPerLevel = parseFloat(heroInfo.AttributeIntelligenceGain);\r\n                break;\r\n            }\r\n        default:\r\n            console.error(`Unable to get attribute stats because of unknown specific attribute '${specificAttribute}'`);\r\n    }\r\n    \r\n    return {\r\n        base: basePrimary,\r\n        perLevel: primaryPerLevel,\r\n    };\r\n}\r\n\r\n/// Gets all hero talents from a hero info\r\nexport function getHeroTalents (heroInfo) {\r\n    // Get simple array of all talents from npc_heroes.json\r\n    // All abilities are stored in npc_heroes.json as \"Ability?\", where ? is a number. \r\n    // Not always in numberical order like 1, 2, 3\r\n\r\n    var keys = Object.keys(heroInfo);\r\n    var talents = [];\r\n    for(var i = 0; i < keys.length; i++) {\r\n        if (keys[i].includes(\"Ability\") && !keys[i].includes(\"AbilityDraft\")) {\r\n            var ability = heroInfo[keys[i]];\r\n            if (ability && typeof ability === \"string\") {\r\n                if (ability !== \"generic_hidden\" && ability.includes(\"special_bonus\")) {\r\n                    talents.push(ability);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // sort into nice list\r\n    var mappedTalents = [];\r\n    var lvlRow = 0;\r\n    for (i = 0 ; i < talents.length; i += 2) {\r\n        mappedTalents.push({\r\n            lvl: 10 + (5 * lvlRow),\r\n            rightTalent: talents[i],\r\n            leftTalent: talents[i + 1]\r\n        });\r\n\r\n        lvlRow++;\r\n    }\r\n\r\n    // Sort by lvl 25 talents first\r\n    mappedTalents.sort((a, b) => a.lvl < b.lvl ? 1 : -1);\r\n\r\n    return mappedTalents;\r\n}\r\n\r\n/// Gets all hero abilities from a hero info\r\nexport function getAllHeroAbilities (heroInfo) {\r\n    var keys = Object.keys(heroInfo);\r\n    var abilities = [];\r\n    for(var i = 0; i < keys.length; i++) {\r\n        if (keys[i].includes(\"Ability\") && !keys[i].includes(\"AbilityDraft\")) {\r\n            var ability = heroInfo[keys[i]];\r\n            if (ability && typeof ability === \"string\") {\r\n                if (ability !== \"generic_hidden\" && !ability.includes(\"special_bonus\")) {\r\n                    abilities.push(ability);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return abilities;\r\n}\r\n\r\n/// Returns the base hero information that all heroes are based on\r\nexport function getDotaBaseHero () {\r\n    return DOTAHeroes?.npc_dota_hero_base;\r\n}\r\n\r\n/// Gets the hero's primary attribute as the EAttribute enum\r\nexport function getPrimaryAttribute (hero) {\r\n    switch(hero.AttributePrimary) {\r\n        case EAttributes.ATTR_STRENGTH:\r\n            return EAttributes.ATTR_STRENGTH;\r\n        case EAttributes.ATTR_AGILITY:\r\n            return EAttributes.ATTR_AGILITY;\r\n        case EAttributes.ATTR_INTELLIGENCE:\r\n            return EAttributes.ATTR_INTELLIGENCE;\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\nexport function getAllPlayableHeroes() {\r\n    // Filter and remove any unwanted heroes\r\n    let selectableHeroes = Object.keys(DOTAHeroes).filter((value) => {\r\n        var key = value.toLowerCase();\r\n        if (key !== \"version\" && key !== \"npc_dota_hero_base\" && key !== \"npc_dota_hero_target_dummy\") {\r\n            return true;\r\n        }\r\n        return false;\r\n    })\r\n    // Map only necessary data\r\n    selectableHeroes = selectableHeroes.map((key) => {\r\n        return {\r\n            name: key,\r\n            heroInfo: DOTAHeroes[key],\r\n        };\r\n    });\r\n    // sort by name property\r\n    selectableHeroes.sort((a, b) => (a.name > b.name) ? 1 : -1);\r\n    return selectableHeroes;\r\n}\r\n\r\n/// Checks a hero's attack capability for the specific capability\r\nexport function isHeroAttackCapability (heroInfo, atkCapability) {\r\n    if ( heroInfo && atkCapability) {\r\n        return heroInfo.AttackCapabilities && heroInfo.AttackCapabilities.split(\" | \").includes(atkCapability);\r\n    }\r\n    return false;\r\n}","import { DOTAHeroes } from \"../data/dota2/json/npc_heroes.json\";\r\nimport { lang as EngAbilStrings } from \"../data/dota2/languages/abilities_english.json\";\r\nimport { lang as EngDotaStrings } from \"../data/dota2/languages/dota_english.json\";\r\n\r\nimport {\r\n    parseNameFromModel,\r\n} from \"../utils\";\r\nimport {\r\n    getAllHeroAbilities,\r\n    getHeroTalents,\r\n} from \"../utility/dataHelperHero\";\r\n\r\nconst initialState = {\r\n    /// Current selected hero info by the user\r\n    selectedHero: DOTAHeroes.npc_dota_hero_abaddon,\r\n    /// Internal string name of the hero\r\n    selectedHeroName: \"npc_dota_hero_abaddon\",\r\n    /// Array of abilities of the selectedHero\r\n    heroAbilities: getAllHeroAbilities(DOTAHeroes.npc_dota_hero_abaddon),\r\n    heroAbilityLevels: getAllHeroAbilities(DOTAHeroes.npc_dota_hero_abaddon).map((val, index) => {\r\n        return {\r\n            ability: index,\r\n            level: 1,\r\n        };\r\n    }),\r\n    /// Array of talents of the selectedHero\r\n    heroTalents: getHeroTalents(DOTAHeroes.npc_dota_hero_abaddon),\r\n    /// Array of talents selected by the user\r\n    selectedTalents: [ ],\r\n    /// Current level of the hero set by the user\r\n    heroLevel: 1,\r\n\r\n    /// Current items that have been selected\r\n    items: [\r\n        { slot: 0, item: \"\" },\r\n        { slot: 1, item: \"\" },\r\n        { slot: 2, item: \"\" },\r\n        { slot: 3, item: \"\" },\r\n        { slot: 4, item: \"\" },\r\n        { slot: 5, item: \"\" },\r\n    ],\r\n    /// Current backpack selected by user\r\n    backpack: [\r\n        { slot: 0, item: \"\" },\r\n        { slot: 1, item: \"\" },\r\n        { slot: 2, item: \"\" },\r\n    ],\r\n    /// Current neutral item selected by user\r\n    neutralItem: { item: \"\" },\r\n\r\n    // Current code of the selected UI language\r\n    lang: \"en\",\r\n    stringsAbilities: EngAbilStrings,\r\n    stringsDota: EngDotaStrings,\r\n\r\n    /// Selected enemy hero \r\n    selectedEnemyHero: DOTAHeroes.npc_dota_hero_target_dummy,\r\n    selectedEnemyHeroName: parseNameFromModel(DOTAHeroes.npc_dota_hero_target_dummy.Model[1]),\r\n    enemyHeroTalents: getHeroTalents(DOTAHeroes.npc_dota_hero_target_dummy),\r\n    enemyHeroAbilities: getAllHeroAbilities(DOTAHeroes.npc_dota_hero_target_dummy),\r\n    selectedEnemyTalents: [ ],\r\n    enemyHeroItems: [\r\n        { slot: 0, item: \"ultimate_scepter\" },\r\n        { slot: 1, item: \"\" },\r\n        { slot: 2, item: \"\" },\r\n        { slot: 3, item: \"\" },\r\n        { slot: 4, item: \"\" },\r\n        { slot: 5, item: \"\" },\r\n    ],\r\n};\r\n\r\nexport default initialState;","/// Parses a display name from a hero info Model string\r\nexport function parseNameFromModel (modelString) {\r\n    let dashSplit = modelString.split('.')[0].split('/');\r\n    return dashSplit[dashSplit.length - 1];\r\n};","import initialState from \"./initialState\";\r\n\r\nimport {\r\n    SELECTED_HERO,\r\n    SELECTED_ITEM,\r\n    SELECTED_BACKPACK_ITEM,\r\n    SELECTED_NEUTRAL,\r\n    SELECTED_TALENT,\r\n    UNSELECTED_TALENT,\r\n    NEW_HERO_LEVEL,\r\n    SELECTED_ABILITY_LEVEL\r\n} from \"../constants/actionTypes\";\r\n\r\nimport {\r\n    parseNameFromModel,\r\n} from \"../utils\";\r\n\r\nimport {\r\n    getAllHeroAbilities,\r\n    getHeroAbilityLevels,\r\n    getHeroTalents,\r\n} from \"../utility/dataHelperHero\";\r\n\r\n/* DotA 2 Import Data */\r\nimport { DOTAHeroes } from \"../data/dota2/json/npc_heroes.json\";\r\n\r\nfunction replaceUpdatedAbilityLevel (abilityLevelArray, newAbilityLevel) {\r\n    let newArray = abilityLevelArray.filter((val) => {\r\n        if (val.ability !== newAbilityLevel.ability) {\r\n            return val;\r\n        }\r\n    });\r\n    newArray.push({\r\n        ability: newAbilityLevel.ability,\r\n        level: newAbilityLevel.level,\r\n    });\r\n    newArray.sort((a, b) => (a.ability > b.ability) ? 1 : -1);\r\n    return newArray;\r\n}\r\n\r\n/// Takes the existing itemArray and removes the current slot item and\r\n/// replaces with the newItem\r\nfunction replaceUpdatedItem(itemArray, newItem) {\r\n    /// Remove old slot insert new and sort by Slot\r\n    let newArray = itemArray.filter((val) => {\r\n        if (val.slot !== newItem.slot) {\r\n            return val;\r\n        }\r\n    })\r\n    newArray.push({ \r\n        slot: newItem.slot,\r\n        item: newItem.item,\r\n        extra: newItem.extra,\r\n    });\r\n    /// Sort by slot order 0 - 5\r\n    newArray.sort((a, b) => (a.slot > b.slot) ? 1 : -1);\r\n    return newArray;\r\n}\r\n\r\nfunction getNewTalentArray(talentArray, newTalent) {\r\n    let newArray = talentArray.map((value => { return value }));\r\n    newArray.push(newTalent);\r\n    return newArray;\r\n}\r\n\r\nfunction removeTalent (talentArray, unselectedTalent) {\r\n    /// Filter to get all but the unselectedTalent\r\n    var array = talentArray.filter((talent) => {\r\n        if (talent && talent !== unselectedTalent) {\r\n            return talent;\r\n        }\r\n    });\r\n    return array;\r\n}\r\n\r\nfunction reducer(state = initialState, action) {\r\n    switch(action.type)\r\n    {\r\n        case SELECTED_HERO:\r\n            console.log(action);\r\n            let heroInfo = DOTAHeroes[action.value];\r\n            let allHeroAbilities = getAllHeroAbilities(heroInfo)\r\n            return {\r\n                ...state,\r\n                selectedHero: heroInfo,\r\n                selectedHeroName: action.value,\r\n                heroAbilities: allHeroAbilities,\r\n                heroTalents: getHeroTalents(heroInfo),\r\n                heroAbilityLevels: allHeroAbilities.map((abil, index) => {\r\n                    return {\r\n                        ability: index,\r\n                        level: 1,\r\n                    };\r\n                }),\r\n\r\n                // reset selected talents when new hero selected\r\n                selectedTalents: [ ],\r\n            };\r\n        case SELECTED_ITEM:\r\n            return {\r\n                ...state,\r\n                items: replaceUpdatedItem(state.items, action.value),\r\n            };\r\n        case SELECTED_BACKPACK_ITEM:\r\n            return {\r\n                ...state,\r\n                backpack: replaceUpdatedItem(state.backpack, action.value),\r\n            }\r\n        case SELECTED_NEUTRAL:\r\n            return {\r\n                ...state,\r\n                neutralItem: action.value,\r\n            };\r\n        case SELECTED_TALENT:\r\n            return {\r\n                ...state,\r\n               selectedTalents: getNewTalentArray(state.selectedTalents, action.value),\r\n            }\r\n        case UNSELECTED_TALENT:\r\n            return {\r\n                ...state,\r\n                selectedTalents: removeTalent(state.selectedTalents, action.value),\r\n            }\r\n        case NEW_HERO_LEVEL:\r\n            return {\r\n                ...state,\r\n                heroLevel: action.value,\r\n            };\r\n        case SELECTED_ABILITY_LEVEL:\r\n            return {\r\n                ...state,\r\n                heroAbilityLevels: replaceUpdatedAbilityLevel(state.heroAbilityLevels, action.value),\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","export const SELECTED_HERO = \"SELECT_HERO\";\r\nexport const SELECTED_NEUTRAL = \"SELECTED_NEUTRAL\";\r\nexport const SELECTED_ITEM = \"SELECTED_ITEM\";\r\nexport const SELECTED_BACKPACK_ITEM = \"SELECTED_BACKPACK_ITEM\";\r\nexport const SELECTED_TALENT = \"SELECTED_TALENT\";\r\nexport const UNSELECTED_TALENT = \"UNSELECTED_TALENT\";\r\nexport const NEW_HERO_LEVEL = \"NEW_HERO_LEVEL\";\r\nexport const ITEM_EXTRAS_CHANGED = \"ITEM_EXTRAS_CHANGED\";\r\nexport const SELECTED_ABILITY_LEVEL = \"SELECTED_ABILITY_LEVEL\";\r\n\r\nexport const LANGUAGE_CHANGED = \"LANGUAGE_CHANGED\";\r\n\r\nexport const ENEMY_SELECTED = \"ENEMY_SELECTED\";\r\nexport const ENEMY_SELECTED_TALENT = \"ENEMY_SELECTED_TALENT\";\r\n","/// Enum of all supported languages\r\nexport const ELanguages = {\r\n    SCHINESE: \"szh\",\r\n    ENGLISH: \"en\",\r\n    //RUSSIAN: \"ru\",\r\n};","import {\r\n    LANGUAGE_CHANGED\r\n} from \"../constants/actionTypes\";\r\nimport { ELanguages } from \"../enums/languages\";\r\nimport initialState from \"./initialState\";\r\n\r\nimport { lang as EngAbilStrings } from \"../data/dota2/languages/abilities_english.json\";\r\nimport { lang as EngDotaStrings } from \"../data/dota2/languages/dota_english.json\";\r\n\r\nimport { lang as SChineseAbilStrings } from \"../data/dota2/languages/abilities_schinese.json\";\r\nimport { lang as SChineseDotaStrings } from \"../data/dota2/languages/dota_schinese.json\";\r\n\r\nfunction getAbilityStrings(langCode) {\r\n    switch(langCode) {\r\n        case ELanguages.ENGLISH:\r\n            return EngAbilStrings;\r\n        case ELanguages.SCHINESE:\r\n            return SChineseAbilStrings;\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\nfunction getGeneralStrings(langCode) {\r\n    switch(langCode) {\r\n        case ELanguages.ENGLISH:\r\n            return EngDotaStrings;\r\n        case ELanguages.SCHINESE:\r\n            return SChineseDotaStrings;\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\nexport default (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case LANGUAGE_CHANGED:\r\n            console.log(`${LANGUAGE_CHANGED}: ${action.value}`);\r\n            return {\r\n                ...state,\r\n                lang: action.value,\r\n\r\n                stringsAbilities: getAbilityStrings(action.value),\r\n                stringsDota: getGeneralStrings(action.value),\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import { createStore, combineReducers } from \"redux\";\r\nimport hero from \"../reducers/hero\";\r\nimport language from \"../reducers/language\";\r\nimport enemy from \"../reducers/enemy\";\r\n\r\nconst allReducers = combineReducers({\r\n    language,\r\n    hero,\r\n    enemy,\r\n});\r\n\r\nconst store = createStore(allReducers);\r\n\r\nexport default store;","import initialState from \"./initialState\";\r\n\r\nimport {\r\n    ENEMY_SELECTED,\r\n    ENEMY_SELECTED_TALENT\r\n} from \"../constants/actionTypes\";\r\n\r\nexport default (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case ENEMY_SELECTED:\r\n            return {\r\n                ...state,\r\n\r\n                enemy: action.value,\r\n            };\r\n        case ENEMY_SELECTED_TALENT:\r\n            return {\r\n                ...state,\r\n\r\n                selectedEnemyTalents: [ ],\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Form } from 'react-bootstrap';\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { LANGUAGE_CHANGED } from \"../../constants/actionTypes\";\r\nimport { ELanguages } from \"../../enums/languages\";\r\n\r\nfunction getSupportedLanguages() {\r\n    let langs = Object.values(ELanguages);\r\n    return langs.map((value) => {\r\n        return (\r\n            <option value={value} key={value}>{value}</option>\r\n        )\r\n    });\r\n}\r\n\r\nclass LanguageSelect extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.onLanguageChanged = this.onLanguageChanged.bind(this);\r\n    }\r\n\r\n    onLanguageChanged(event) {\r\n        let newLanguage = event.target.value;\r\n        this.props.dispatch({ type: LANGUAGE_CHANGED, value: newLanguage });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Form.Control \r\n                    className=\"foresight-dropdown\"\r\n                    as=\"select\" \r\n                    onChange={this.onLanguageChanged} \r\n                    defaultValue={this.props.lang}>\r\n                    { getSupportedLanguages() }\r\n                </Form.Control>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    lang: state.language.lang,\r\n});\r\n\r\nexport default connect(mapStateToProps)(LanguageSelect);","import LanguageSelect from \"./LanguageSelect\";\r\n\r\nexport default LanguageSelect;","import React, { Component } from 'react';\r\nimport { \r\n    Nav,\r\n    Navbar,\r\n    Container,\r\n    Button,\r\n}from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\r\n\r\nimport LanguageSelect from '../LanguageSelect';\r\n\r\nimport \"./Navigation.css\";\r\n\r\nlet pkg = require('../../../package.json');\r\n\r\nclass Navigation extends Component {\r\n    render() {\r\n        return (\r\n            <Navbar className=\"foresite-navbar\">\r\n                <Container>\r\n                    <Navbar.Brand \r\n                        className=\"navbar-brand-name\"\r\n                        to=\"/\" as={Link}>\r\n                        { pkg ? pkg.name : \"?\" }\r\n                    </Navbar.Brand>\r\n                    <Nav.Link \r\n                        className=\"px-1 align-bottom mr-2\"\r\n                        style={{ fontSize: \"0.85rem\" }}\r\n                        eventKey=\"disabled\" \r\n                        disabled>\r\n                            {\r\n                                pkg ? \"v\" + pkg.version : \"v0.0.0\"\r\n                            }\r\n                    </Nav.Link>\r\n                    <Nav.Link\r\n                        className=\"px-1 align-bottom mr-2\"\r\n                        style={{ fontSize: \"0.85rem\" }}\r\n                        eventKey=\"disabled\"\r\n                        disabled>\r\n                        {\r\n                            pkg ? pkg.dotaVersion : \"Unknown\"\r\n                        }\r\n                    </Nav.Link>\r\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                        <Nav className=\"mr-auto\">\r\n                            <Nav.Link to=\"/\" as={Link}>home</Nav.Link>\r\n                            <Nav.Link to=\"/app\" as={Link}>app</Nav.Link>\r\n                        </Nav>\r\n                        <div className=\"mr-2\">\r\n                            <LanguageSelect/>\r\n                        </div>\r\n                        <a href=\"https://github.com/JoshLmao/foresight\">\r\n                            <Button variant=\"outline-secondary\">\r\n                                <FontAwesomeIcon icon={faGithub} />\r\n                            </Button>\r\n                        </a>\r\n                    </Navbar.Collapse>\r\n                </Container>\r\n            </Navbar>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Navigation;","import Navigation from \"./Navigation\";\r\n\r\nexport default Navigation;","import FourOhFour from \"./FourOhFour\";\r\n\r\nexport default FourOhFour;","import React, { Component } from 'react';\r\n\r\nclass FourOhFour extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                404 page\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FourOhFour;","export const EDamageType = {\r\n    MAGICAL: \"DAMAGE_TYPE_MAGICAL\",\r\n    PURE: \"DAMAGE_TYPE_PURE\",\r\n    PHYSICAL: \"DAMAGE_TYPE_PHYSICAL\",\r\n};\r\n\r\n/// All Ability Behaviour types\r\nexport const EAbilityBehaviour = {\r\n    UNIT_TARGET: \"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET\",\r\n    POINT: \"DOTA_ABILITY_BEHAVIOR_POINT\",\r\n    AOE: \"DOTA_ABILITY_BEHAVIOR_AOE\",\r\n    HIDDEN: \"DOTA_ABILITY_BEHAVIOR_HIDDEN\",\r\n    PASSIVE: \"DOTA_ABILITY_BEHAVIOR_PASSIVE\",\r\n    NO_TARGET: \"DOTA_ABILITY_BEHAVIOR_NO_TARGET\",\r\n    IMMEDIATE: \"DOTA_ABILITY_BEHAVIOR_IMMEDIATE\",\r\n    IGNORE_CHANNEL: \"DOTA_ABILITY_BEHAVIOR_IGNORE_CHANNEL\",\r\n    SHOW_IN_GUIDES: \"DOTA_ABILITY_BEHAVIOR_SHOW_IN_GUIDES\",\r\n    AURA: \"DOTA_ABILITY_BEHAVIOR_AURA\",\r\n}\r\n\r\n/// Enum of all spell immune types, if the ability pierces spell immunity\r\nexport const ESpellImmunityType = {\r\n    YES: \"SPELL_IMMUNITY_ENEMIES_YES\",\r\n    NO: \"SPELL_IMMUNITY_ENEMIES_NO\",\r\n    ALLIES_YES_ENEMIES_NO: \"SPELL_IMMUNITY_ALLIES_YES_ENEMIES_NO\",\r\n    ALLIES_NO: \"SPELL_IMMUNITY_ALLIES_NO\",\r\n}\r\n\r\n// Enum of all special bonus operations inside AbilityInfo AbilitySpecials\r\nexport const ESpecialBonusOperation = {\r\n    MULTIPLY: \"SPECIAL_BONUS_MULTIPLY\",\r\n    SUBTRACT: \"SPECIAL_BONUS_SUBTRACT\",\r\n    PERCENT_ADD: \"SPECIAL_BONUS_PERCENTAGE_ADD\",\r\n}","import { DOTAAbilities } from \"../data/dota2/json/npc_abilities.json\";\r\nimport {\r\n    getAbilityInfoFromName,\r\n    getAbilitySpecialAbilityValue\r\n} from \"./dataHelperAbilities\";\r\n\r\n/// Gets info and formattable display name of a talent\r\n/// Returns both display name of talent and it's info in an object\r\nexport function getTalentInfoFromName(talent) {\r\n    if (talent) {\r\n        var talentInfo = DOTAAbilities[talent];\r\n        return talentInfo;    \r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport function tryGetTalentSpecialAbilityValue (talent, specialValueKey) {\r\n    let talentInfo = getAbilityInfoFromName(talent);\r\n    if(talentInfo) {\r\n        let specialValue = getAbilitySpecialAbilityValue(talentInfo, specialValueKey);\r\n        if (specialValue) {\r\n            return specialValue;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/// Checks the selected talents array to see if the targetTalent has been selected\r\nexport function talentsInclude(selectedTalents, targetTalent) {\r\n    if (!selectedTalents) {\r\n        return null;\r\n    }\r\n\r\n    for (let talent of selectedTalents) {\r\n        if (talent === targetTalent) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}","// * Helper and utility functions to provide for retrieving data from \"npc_abilities.json\"\r\n// * \r\n\r\nimport { DOTAAbilities } from \"../data/dota2/json/npc_abilities.json\";\r\nimport { \r\n    EAbilityBehaviour, \r\n    EDamageType, \r\n    ESpellImmunityType,\r\n    ESpecialBonusOperation\r\n} from \"../enums/abilities\";\r\n\r\nimport {\r\n    lang as DOTAEngAbilityStrings\r\n} from \"../data/dota2/languages/abilities_english.json\";\r\nimport { containsLocalizedString } from \"./data-helpers/language\";\r\nimport { itemsContainsScepter } from \"./dataHelperItems\";\r\nimport { \r\n    tryGetTalentSpecialAbilityValue,\r\n    talentsInclude\r\n} from \"./dataHelperTalents\";\r\n\r\nexport function getAbilityInfoFromName(abilityName) {\r\n    if (abilityName) {\r\n        return DOTAAbilities[abilityName];\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport function tryGetAbilitySpecialAbilityValue (ability, specialValueKey, abilityLevel = 1) {\r\n    let abilityInfo = getAbilityInfoFromName(ability);\r\n    if (abilityInfo) {\r\n        let specialValue = getAbilitySpecialAbilityValue(abilityInfo, specialValueKey, abilityLevel);\r\n        if (specialValue) {\r\n            return specialValue;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nexport function getAbilitySpecialAbilityValue(abilityInfo, specialAbilityKey, abilityLevel = 1) {\r\n    if (abilityInfo && abilityInfo.AbilitySpecial) {\r\n        for(let i = 0; i < abilityInfo.AbilitySpecial.length; i++) {\r\n            let keys = Object.keys(abilityInfo.AbilitySpecial[i]);\r\n            let matchingKey = keys.find(element => {\r\n                return element === specialAbilityKey;\r\n            });\r\n\r\n            if (matchingKey) {\r\n                let specialAbilityInfo = abilityInfo.AbilitySpecial[i];\r\n\r\n                // If value contains a space, it can be levelled up needs to be split up\r\n                let dataValue = specialAbilityInfo[matchingKey];\r\n                if (typeof dataValue === \"string\" && dataValue.includes(' ')) {\r\n                    let split = specialAbilityInfo[matchingKey].split(' ');\r\n                    dataValue = split[abilityLevel - 1];\r\n                }\r\n\r\n                /// If wanting it for it's value, correctly convert and return\r\n                if (matchingKey.includes(\"value\") && specialAbilityInfo.var_type) {\r\n                    if (specialAbilityInfo.var_type === \"FIELD_INTEGER\") {\r\n                        return parseInt(dataValue);\r\n                    } \r\n                    else if(specialAbilityInfo.var_type === \"FIELD_FLOAT\") {\r\n                        return parseFloat(dataValue);\r\n                    }\r\n                } \r\n                /// else return whatever the value is\r\n                else {\r\n                    return dataValue;\r\n                }\r\n                \r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/// Gets \r\nexport function getAbilitySpecialCastRangeValue (abilityInfo, includePhrase, abilityLevel = 1) {\r\n    if (abilityInfo && abilityInfo.AbilitySpecial) {\r\n        for(let i = 0; i < abilityInfo.AbilitySpecial.length; i++) {\r\n            let keys = Object.keys(abilityInfo.AbilitySpecial[i]);\r\n            let matchingKey = keys.find(element => {\r\n                return element.includes(includePhrase) && !element.includes(\"scepter\");\r\n            });\r\n\r\n            if (matchingKey) {\r\n                let specialAbilityInfo = abilityInfo.AbilitySpecial[i];\r\n\r\n                /// ignore if scepter \r\n                if (specialAbilityInfo.RequiresScepter) {\r\n                    return null;\r\n                }\r\n\r\n                // If value contains a space, it can be levelled up needs to be split up\r\n                let dataValue = specialAbilityInfo[matchingKey];\r\n                \r\n                /// Return dataValue in format\r\n                return tryParseAbilitySpecialValue(specialAbilityInfo, dataValue, abilityLevel)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/// Searches an AbilityInfo's AbilitySpecial array for a property that includes the the \"includePhrase\"\r\n/// in it's key. For example includePhrase = \"charges\" would return value of voice spirit's \"max_charges\"\r\nexport function getIncludesAbilitySpecialAbilityValue(abilityInfo, includePhrase, abilityLevel) {\r\n    if (abilityInfo && abilityInfo.AbilitySpecial) {\r\n        for(let i = 0; i < abilityInfo.AbilitySpecial.length; i++) {\r\n            let keys = Object.keys(abilityInfo.AbilitySpecial[i]);\r\n            let matchingKey = keys.find(element => {\r\n                return element.includes(includePhrase);\r\n            });\r\n\r\n            if (matchingKey) {\r\n                let specialAbilityInfo = abilityInfo.AbilitySpecial[i];\r\n                let dataValue = specialAbilityInfo[matchingKey];\r\n\r\n                /// Return dataValue in format\r\n                return tryParseAbilitySpecialValue(specialAbilityInfo, dataValue, abilityLevel);\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/// Gets the standard output damage of an ability from its level\r\nexport function getAbilityOutputDamage(abilityInfo, abilityLevel) {\r\n    let abilityDmg = {\r\n        min: null,\r\n        max: null,\r\n        damage: null,\r\n        isPercent: null,\r\n    };\r\n\r\n    if (abilityInfo && abilityLevel) {\r\n        if (abilityInfo.AbilityDamage) {\r\n            let dmgValue = abilityInfo.AbilityDamage.split(' ')[abilityLevel - 1];\r\n            abilityDmg = {\r\n                ...abilityDmg,\r\n                damage: parseFloat(dmgValue),\r\n            };\r\n        }\r\n        else if (abilityInfo.AbilitySpecial) \r\n        {\r\n            for (let i = 0; i < abilityInfo.AbilitySpecial.length; i++) {\r\n                let specialAbilityElement = abilityInfo.AbilitySpecial[i];\r\n                \r\n                let abilSpecKeys = Object.keys(specialAbilityElement);\r\n                for(let key of abilSpecKeys) {\r\n                    // AbilitySpecial contains damage under a property\r\n                    let lowerKey = key.toLowerCase();\r\n                    \r\n                    // Includes dmg & not scepter\r\n                    if (lowerKey.includes(\"damage\") && !lowerKey.includes(\"scepter\")) \r\n                    {\r\n                        let value = parseAbilityValueByLevel(specialAbilityElement[key], abilityLevel);\r\n                        let dmgValue = parseFloat(value);\r\n\r\n                        if (lowerKey.includes(\"min\")) {\r\n                            //min_damage\r\n                            abilityDmg.min =  dmgValue;\r\n                        }\r\n                        if (lowerKey.includes(\"max\")) {\r\n                            abilityDmg.max = dmgValue;\r\n                        } \r\n                        if (lowerKey.includes(\"pct\")) {\r\n                            abilityDmg.isPercent = true;\r\n                        }\r\n\r\n                        if (!abilityDmg.min && !abilityDmg.max) {\r\n                            abilityDmg.damage = dmgValue;\r\n                        }\r\n                    }\r\n\r\n                    // Stop iterate if have min&max or dmg\r\n                    if (abilityDmg.min && abilityDmg.max || abilityDmg.damage) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return abilityDmg;\r\n}\r\n\r\n/// Gets all behaviour options of an ability such as if it goes through BKB, damage type, etc\r\nexport function getAbilityBehaviours(abilityInfo) {\r\n    if (!abilityInfo) {\r\n        return null;\r\n    }\r\n\r\n    let behaviours = [];\r\n\r\n    if (abilityInfo.AbilityBehavior) {\r\n        let targeting = [];\r\n        let splitBehaviours = abilityInfo.AbilityBehavior.split(' | ');\r\n        for(let b of splitBehaviours) {\r\n            switch(b) {\r\n                case EAbilityBehaviour.UNIT_TARGET:\r\n                    targeting.push(\"DOTA_ToolTip_Ability_Target\");\r\n                    break;\r\n                case EAbilityBehaviour.POINT:\r\n                    targeting.push(\"DOTA_ToolTip_Ability_Point\");\r\n                    break;\r\n                case EAbilityBehaviour.PASSIVE:\r\n                    targeting.push(\"DOTA_ToolTip_Ability_Passive\");\r\n                    break;\r\n                case EAbilityBehaviour.NO_TARGET:\r\n                    targeting.push(\"DOTA_ToolTip_Ability_NoTarget\");\r\n                    break;\r\n            }\r\n        }\r\n    \r\n        behaviours.push({\r\n            key: \"DOTA_ToolTip_Ability\",\r\n            value: targeting,\r\n        });\r\n    }\r\n\r\n    if (abilityInfo.AbilityUnitDamageType) {\r\n        let dmgTypeVal = \"\";\r\n        let splitDmgTypes = abilityInfo.AbilityUnitDamageType.split(\" | \");\r\n        for(let type of splitDmgTypes) {\r\n            switch(type) {\r\n                case EDamageType.MAGICAL:\r\n                    dmgTypeVal = \"DOTA_Plus_Death_Screen_MagicalDamage\";\r\n                    break;\r\n                case EDamageType.PURE:\r\n                    dmgTypeVal = \"DOTA_Plus_Death_Screen_PureDamage\";\r\n                    break;\r\n                case EDamageType.PHYSICAL:\r\n                    dmgTypeVal = \"DOTA_Plus_Death_Screen_PhysicalDamage\";\r\n                    break;\r\n                default:\r\n                    dmgTypeVal = \"Not Implemented\";\r\n                    break;\r\n            }\r\n        }\r\n\r\n        behaviours.push({\r\n            key: \"DOTA_ToolTip_Damage\",\r\n            value: dmgTypeVal,\r\n        });\r\n    }\r\n\r\n    if (abilityInfo.SpellImmunityType) {\r\n        let pierceValue = \"\";\r\n        switch(abilityInfo.SpellImmunityType) {\r\n            case ESpellImmunityType.YES:\r\n                pierceValue = \"DOTA_ToolTip_PiercesSpellImmunity_Yes\";\r\n                break;\r\n            case ESpellImmunityType.NO:\r\n            case ESpellImmunityType.ALLIES_NO:\r\n                pierceValue = \"DOTA_ToolTip_PiercesSpellImmunity_No\";\r\n                break;\r\n            case ESpellImmunityType.ALLIES_YES_ENEMIES_NO:\r\n                pierceValue = \"DOTA_ToolTip_PiercesSpellImmunity_AlliesYesEnemiesNo\";\r\n                break;\r\n            default:\r\n                pierceValue = \"Unknown\";\r\n                break;\r\n        }\r\n\r\n        behaviours.push({\r\n            key: \"DOTA_ToolTip_PiercesSpellImmunity\",\r\n            value: pierceValue,\r\n        });\r\n    }\r\n\r\n    return behaviours;\r\n}\r\n\r\n/// Parses an AbilitySpecial\r\nexport function parseAbilitySpecialValueByLevel (abilitySpecials, key, level = 1) {\r\n    let valuesSplit = abilitySpecials[key].split(' ');\r\n    if (valuesSplit.length > 1) {\r\n        return valuesSplit[level - 1];\r\n    } else {\r\n        return abilitySpecials[key];\r\n    }\r\n}\r\n\r\n/// Parses a value in an abilityInfo that could be alone or have multiple values per level\r\nexport function parseAbilityValueByLevel (value, level = 1) {\r\n    if (level < 1) {\r\n        return null;\r\n    }\r\n    \r\n    let abilValue = 0;\r\n    if (typeof value === \"string\") {\r\n        let splitValues = value.split(\" \");\r\n        if (splitValues.length > 1) {\r\n            abilValue = splitValues[level - 1];\r\n        } else {\r\n            abilValue = value;\r\n        }\r\n\r\n        abilValue = parseFloat(abilValue);\r\n    } else {\r\n        abilValue = value;\r\n    }\r\n\r\n    return abilValue;\r\n}\r\n\r\nexport function isCooldownTalent (talent) {\r\n    return isTalent(talent, \"cooldown\");\r\n}\r\n\r\nexport function isDamageTalent (talent) {\r\n    return isTalent(talent, \"damage\");\r\n}\r\n\r\nexport function isCastRangeTalent (talent) {\r\n    return isTalent(talent, \"cast range\");\r\n}\r\n\r\nexport function isTalent (talent, lowerCasePhrase) {\r\n    let abilityString = DOTAEngAbilityStrings.Tokens[\"DOTA_Tooltip_ability_\" + talent];\r\n    return abilityString && abilityString.toLowerCase().includes(lowerCasePhrase);\r\n}\r\n\r\n/// Checks the AbilityBehavior string on an AbilityInfo to\r\n/// see if it contains all EBehaviours in array\r\nexport function isAbilityBehaviour (abilityBehaviour, ebehaviours) {\r\n    if (abilityBehaviour) {\r\n        let splitBehaviours = abilityBehaviour.split(' | ');\r\n        \r\n        let contains = splitBehaviours.some((b) => ebehaviours.includes(b));\r\n        return contains;\r\n    }\r\n    return false;\r\n}\r\n\r\n/// Gets all AbilitySpecial extra information values with it's translation key \r\nexport function getAbilitySpecialExtraValues (abilityName, abilityInfo, abilityLevel, items, selectedTalents) {\r\n    if (!abilityInfo || (abilityInfo && !abilityInfo.AbilitySpecial)) {\r\n        return null;\r\n    }\r\n\r\n    let abilitySpecials = [];\r\n    let containsScepter = itemsContainsScepter(items);\r\n\r\n    for (let specialInfo of abilityInfo.AbilitySpecial) {\r\n        let abilitySpecialKeys = Object.keys(specialInfo);\r\n        let currentAbilitySpecialObject = null;\r\n        for (let key of abilitySpecialKeys) {\r\n\r\n            // Store specific properties inside object for later\r\n            if (key === \"LinkedSpecialBonus\") {\r\n                currentAbilitySpecialObject = {\r\n                    ...currentAbilitySpecialObject,\r\n                    specialBonus: specialInfo[key],\r\n                };\r\n            } else if (key === \"LinkedSpecialBonusOperation\") {\r\n                currentAbilitySpecialObject = {\r\n                    ...currentAbilitySpecialObject,\r\n                    specialBonusOperation: specialInfo[key],\r\n                };\r\n            }\r\n\r\n            // Skip specific properties we don't need\r\n            if (key.includes(\"var_type\") || key.includes(\"RequiresScepter\") || key === \"damage\") {\r\n                continue;\r\n            }\r\n            \r\n            // Ignore scepter info if no aghs in inventory\r\n            if (key.includes(\"scepter\") && !containsScepter) {\r\n                continue;\r\n            }\r\n\r\n            // Create key for indexing inside locale files\r\n            let translationKey = `DOTA_Tooltip_ability_${abilityName}_${key}`;\r\n\r\n            let abilityValue = null;\r\n            // if AbilitySpecial key doesn't contain an underscore, it references property on master AbilityInfo object\r\n            if (!key.includes(\"_\") && !key.includes(\"Linked\")) {\r\n                let containsKey = tryGetAbilityInfoValueFromKey(abilityInfo, key);\r\n                if (containsKey) {\r\n                    abilityValue = tryParseAbilitySpecialValue(abilityInfo, abilityInfo[containsKey], abilityLevel);\r\n                }\r\n            } else {\r\n                abilityValue = tryParseAbilitySpecialValue(specialInfo, specialInfo[key], abilityLevel);\r\n            }\r\n            \r\n            if (translationKey && abilityValue) {\r\n                currentAbilitySpecialObject = {\r\n                    ...currentAbilitySpecialObject,\r\n                    key: translationKey,\r\n                    value: abilityValue,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (currentAbilitySpecialObject && currentAbilitySpecialObject.value) {\r\n            let value = currentAbilitySpecialObject.value;\r\n\r\n            // If AbilitySpecial has special bonus modifier and is selected\r\n            if ( talentsInclude(selectedTalents, currentAbilitySpecialObject.specialBonus) ) {\r\n                let specialBonusValue = tryGetTalentSpecialAbilityValue(currentAbilitySpecialObject.specialBonus, \"value\");\r\n               \r\n                /// Apply bonus operation to value\r\n                if (currentAbilitySpecialObject.specialBonusOperation) {\r\n                    switch (currentAbilitySpecialObject.specialBonusOperation) {\r\n                        case ESpecialBonusOperation.SUBTRACT:\r\n                            value -= specialBonusValue;\r\n                            break;\r\n                        case ESpecialBonusOperation.MULTIPLY:\r\n                            value *= specialBonusValue;\r\n                            break;\r\n                        case ESpecialBonusOperation.PERCENT_ADD:\r\n                            let percentBonus = (value / 100) * specialBonusValue;\r\n                            value += percentBonus;\r\n                            break;\r\n                        default:\r\n                            console.log(`Unknown SpecialBonusOperation: ${currentAbilitySpecialObject.specialBonusOperation}`);\r\n                            break;\r\n                    };\r\n                } else {\r\n                    /// If no special bonus operation, just replace new values on original\r\n                    if (specialBonusValue) {\r\n                        value = specialBonusValue;\r\n                    }\r\n                }\r\n            }\r\n\r\n            abilitySpecials.push({\r\n                key: currentAbilitySpecialObject.key,\r\n                value: value,\r\n            });\r\n        }\r\n    }\r\n\r\n    return abilitySpecials;\r\n}\r\n\r\nexport function tryParseAbilitySpecialValue (abilSpecialinfo, value, abilityLevel = 1) {\r\n    if (typeof value === \"string\" && value.includes(' ')) {\r\n        let split = value.split(' ');\r\n        value = split[abilityLevel - 1];\r\n    }\r\n\r\n    if (abilSpecialinfo) {\r\n        if (abilSpecialinfo.var_type === \"FIELD_INTEGER\") {\r\n            return parseInt(value);\r\n        } \r\n        else if(abilSpecialinfo.var_type === \"FIELD_FLOAT\") {\r\n            return parseFloat(value);\r\n        }\r\n    }\r\n    return value;\r\n}\r\n\r\n/// Try get's a value on an AbilityInfo object from it's key, which can be upper/lower/CamelCase\r\nexport function tryGetAbilityInfoValueFromKey (abilityInfo, key) {\r\n    let abilInfoKeys = Object.keys(abilityInfo);\r\n    for(let abilInfoKey of abilInfoKeys) {\r\n        if (abilInfoKey.toLowerCase() === key.toLowerCase()) {\r\n            return  abilInfoKey;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n","\r\n// * Helper and utility functions to provide for retrieving data from \"npc_items.json\"\r\n// * \r\nimport { DOTAAbilities as DOTAItems } from \"../data/dota2/json/items.json\";\r\nimport { neutral_items as DOTANeutralsTierList } from \"../data/dota2/json/neutral_items.json\";\r\nimport { EAttributes } from \"../enums/attributes\";\r\nimport React from \"react\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faClock } from '@fortawesome/free-solid-svg-icons';\r\nimport { tryParseAbilitySpecialValue } from \"./dataHelperAbilities\";\r\nimport { \r\n    getLocalizedString, \r\n    getFuzzyEngAbilityLocalizedString \r\n} from \"./data-helpers/language\";\r\n\r\nexport function getItemInfoFromName (itemName) {\r\n    if (itemName)\r\n        return DOTAItems[itemName];\r\n    else\r\n        return null;\r\n}\r\n\r\n/// Gets the value of an item's AbilitySpecial array\r\nexport function getItemSpecialAbilityValue (itemInfo, specialAbilityValueKey) {\r\n    if (itemInfo && itemInfo.AbilitySpecial) {\r\n        for(let i = 0; i < itemInfo.AbilitySpecial.length; i++) {\r\n            let keys = Object.keys(itemInfo.AbilitySpecial[i]);\r\n            let matchingKey = keys.find(element => {\r\n                return element === specialAbilityValueKey;\r\n            });\r\n\r\n            if (matchingKey) {\r\n                let specialAbilityInfo = itemInfo.AbilitySpecial[i];\r\n                return tryParseAbilitySpecialValue(specialAbilityInfo, specialAbilityInfo[matchingKey], 1);\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/// Try Gets a item info and sepcial value from it's item's Ability Special array\r\nexport function tryGetItemSpecialValue (item, specialAbilityValueKey) {\r\n    let itemInfo = getItemInfoFromName(item.item);\r\n    if (itemInfo) {\r\n        var specialValue = getItemSpecialAbilityValue(itemInfo, specialAbilityValueKey);\r\n        if (specialValue) {\r\n            return specialValue;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/// Try Gets a neutral item info and special value from it's items' AbilitySpecial array\r\nexport function tryGetNeutralSpecialValue (neutral, specialValueKey) {\r\n    let foundNeutralInfo = getItemInfoFromName(neutral.item);\r\n    if (foundNeutralInfo) {\r\n        var specialValue = getItemSpecialAbilityValue(foundNeutralInfo, specialValueKey);\r\n        if (specialValue) {\r\n            return specialValue;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/// Gets all normal items in dota\r\nexport function getAllItems () {\r\n    let selectableItems = Object.keys(DOTAItems).filter((value) => {\r\n        let key = value.toLowerCase();\r\n        let ability = DOTAItems[value];\r\n        if (key !== \"version\" && !key.includes(\"recipe\") && !ability.ItemIsNeutralDrop && !ability.IsObsolete) {\r\n            return true;\r\n        }\r\n        return false;\r\n    });\r\n\r\n    // Convert keys to item data\r\n    selectableItems = selectableItems.map((key) => {\r\n        return {\r\n            item:  DOTAItems[key],\r\n            name: key,\r\n        };\r\n    })\r\n    selectableItems.sort();\r\n\r\n    return selectableItems;\r\n}\r\n\r\n/// Returns all neutral items\r\nexport function getAllNeutrals() {\r\n     /// Filter out unused or unnecessary keys in items.json\r\n     let selectableNeutrals = Object.keys(DOTAItems).filter((value, index, array) => {\r\n        let key = value.toLowerCase();\r\n        let ability = DOTAItems[value];\r\n        \r\n        // Make sure it's a neutral\r\n        if (ability.ItemIsNeutralDrop === \"1\") {\r\n            // Filter irrelevant results, ignore any neutral recipes and return full item\r\n            if (key !== \"version\" && !ability.IsObsolete && !key.includes(\"recipe\")) {\r\n                return true;\r\n            }    \r\n        }\r\n        \r\n        return false;\r\n    });\r\n    selectableNeutrals.sort();\r\n\r\n    // Map to an object\r\n    selectableNeutrals = selectableNeutrals.map((key) => {\r\n        let itemKey = key;\r\n        if (itemKey.includes(\"recipe\")) {\r\n            // remove recipe and retrieve item version\r\n            itemKey = itemKey.replace(\"_recipe\", \"\");\r\n        }\r\n\r\n        let itemInfo = DOTAItems[itemKey];\r\n        if (itemInfo.ItemIsNeutralDrop === \"1\") {\r\n            return {\r\n                item: itemKey,\r\n                itemInfo: itemInfo,\r\n            };\r\n        }\r\n    });\r\n\r\n    return selectableNeutrals;\r\n}\r\n\r\n/// Gets the correct key inside items.json for the hero's primary attribute\r\nexport function primaryAttributeToItemBonusKey(primaryAttr) {\r\n    switch(primaryAttr) {\r\n        case EAttributes.ATTR_STRENGTH:\r\n            return [ \"bonus_strength\" ];\r\n        case EAttributes.ATTR_AGILITY:\r\n            return [ \"bonus_agility\" ];\r\n        case EAttributes.ATTR_INTELLIGENCE:\r\n            return [ \"bonus_intellect\", \"bonus_intelligence\" ];\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\n/// Checks if the items array contains an aghanims scepter\r\nexport function itemsContainsScepter (allItems) {\r\n    for (let item of allItems) {\r\n        if (item.item && item.item.includes(\"ultimate_scepter\")) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n/// Replaces a localized string with it's data values found inside AbilitySpecial \r\n/// or on ItemInfo object\r\nexport function replaceStringWithDataValues (string, itemInfo) {\r\n    if (!string) {\r\n        return null;\r\n    }\r\n\r\n    let replaceRegex = /%\\w*?%/;\r\n    // special character to use in placeholder of replacing in final string with ?\r\n    let REPLACE_CHAR = \"~\";\r\n\r\n    while (string.match(replaceRegex)?.length > 0) {\r\n        let phrase = string.match(replaceRegex)[0];\r\n        if (phrase) {\r\n            let infoKey = phrase.split(\"%\").join(\"\");\r\n            let specialAbilityValue = null;\r\n            // no characters inbetween, needs to be a normal percentage sign\r\n            if (infoKey === \"\") {\r\n                /// use the special REPLACE_CHAR\r\n                specialAbilityValue = REPLACE_CHAR;\r\n            }\r\n            // if is an AbilitySpecial key as all contain a '_' \r\n            else if (infoKey.includes(\"_\")) {\r\n                specialAbilityValue = getItemSpecialAbilityValue(itemInfo, infoKey);\r\n            }\r\n            else {\r\n                // Check if infoKey is a key on the main itemInfo object\r\n                specialAbilityValue = tryGetItemInfoValue(itemInfo, infoKey);\r\n\r\n                // could be AbilitySpecial key that contains no _\r\n                if (!specialAbilityValue) {\r\n                    specialAbilityValue = getItemSpecialAbilityValue(itemInfo, infoKey);\r\n                }\r\n            }\r\n            \r\n            // If not able to find a data value, use a question mark\r\n            if (!specialAbilityValue) {\r\n                specialAbilityValue = \"?\";\r\n            }\r\n            // Replace and set\r\n            string = string.replace(phrase, specialAbilityValue);\r\n        }\r\n    }\r\n\r\n\r\n    /// replace REPLACE_CHAR with actual percentage sign\r\n    let regexExp = new RegExp(REPLACE_CHAR, \"g\");\r\n    string = string.replace(regexExp, \"%\");\r\n    \r\n    return string;\r\n}\r\n\r\n/// Try Get's a ItemInfo value on the original object from a key\r\nexport function tryGetItemInfoValue (itemInfo, itemInfoKey) {\r\n    if (itemInfo) {\r\n        let keys = Object.keys(itemInfo);\r\n        let matchingKey = keys.find(element => {\r\n            return element.toLowerCase() === itemInfoKey.toLowerCase();\r\n        });\r\n\r\n        if (matchingKey) {\r\n            let infoValue = itemInfo[matchingKey];\r\n            if (infoValue.includes(\".\")) {\r\n                return parseFloat(infoValue);\r\n            } else {\r\n                return parseInt(infoValue);\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/// Converts a item description localized string into the correct displayable HTML\r\nexport function convertItemDescToHtml(itemDescString, itemName, itemInfo) {\r\n    /// Replace active/passive item ability with the data values inside the itemInfo\r\n    let dataString = replaceStringWithDataValues(itemDescString, itemInfo);\r\n    if (!dataString) {\r\n        return null;\r\n    }\r\n\r\n    /// Get english string to be able to check for \"Active:\" phrase\r\n    let engDataString = getFuzzyEngAbilityLocalizedString(`${itemName}_Description`);\r\n    let engSplitString = engDataString.split(\"\\\\n\");\r\n\r\n    /// Also split localized string to iterate over\r\n    let localizedSplit = dataString.split(\"\\\\n\");\r\n\r\n    let totalHtmlSections = [];\r\n    for(let i = 0; i < localizedSplit.length; i++) {\r\n        let section = localizedSplit[i];\r\n        let isActive = engSplitString[i].includes(\"Active:\");\r\n        if (isActive) {\r\n            // Return HTML for an active ability on item\r\n            totalHtmlSections.push(\r\n                <div className=\"my-3 item-active\" key={i}>\r\n                    <div\r\n                        className=\"d-flex justify-content-between align-items-center\" \r\n                        style={{ position: \"absolute\", right: \"1rem\" }}>\r\n                        {\r\n                            itemInfo && itemInfo.AbilityManaCost &&\r\n                            <div className=\"d-flex\">\r\n                                <div className=\"mx-1 my-1 mana-cost-box-icon\" />\r\n                                <div>\r\n                                    { parseInt(itemInfo.AbilityManaCost) }\r\n                                </div>\r\n                            </div>\r\n                        }\r\n                        <div className=\"px-1\" />\r\n                        {\r\n                            itemInfo && itemInfo.AbilityCooldown &&\r\n                            <div className=\"d-flex\">\r\n                                <FontAwesomeIcon \r\n                                    className=\"mx-1 my-1\" \r\n                                    icon={faClock} />\r\n                                <div>\r\n                                    { parseFloat(itemInfo.AbilityCooldown)  }\r\n                                </div>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                    <div dangerouslySetInnerHTML={{ __html: section }}>\r\n                    </div>\r\n                </div>\r\n            )\r\n        } else {\r\n            /// HTML for passive ability on item\r\n            totalHtmlSections.push(\r\n                <div\r\n                    key={i} \r\n                    className={`my-3 ${itemInfo.ItemQuality === \"consumable\" ? \"item-consumable\" : \"item-passive\"}`} \r\n                    dangerouslySetInnerHTML={{ __html: section }}>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    return totalHtmlSections;\r\n}\r\n\r\n/// Gets all bonuses the item provides, returning a key value list\r\nexport function getItemStatistics (itemInfo) {\r\n    if (!itemInfo || !itemInfo?.AbilitySpecial) {\r\n        return null;\r\n    }\r\n\r\n    let statistics = [];\r\n    // Array of phrases/keys to include check on AbilitySpecial keys\r\n    let itemStatIncludePhrases = [\r\n        \"bonus\", \"spell\", \"attack\", \"multiplier\", \"regen\",\r\n        \"resistance\", \"night_vision\"\r\n    ];\r\n\r\n    for (let i = 0; i < itemInfo.AbilitySpecial.length; i++) {\r\n        let keys = Object.keys(itemInfo.AbilitySpecial[i]);\r\n        // Iterate over each AbilitySpecial key and take \r\n        // matching keys in phrase array\r\n        for(let key of keys) {\r\n            for(let phrase of itemStatIncludePhrases) {\r\n                if (key.includes(phrase)) {\r\n                    let val = tryParseAbilitySpecialValue(itemInfo.AbilitySpecial[i], itemInfo.AbilitySpecial[i][key]);\r\n                    statistics.push({\r\n                        key: key,\r\n                        value: val,\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return statistics;\r\n}\r\n\r\n/// Checks an ItemInfo Disassemble rule if it matches the given rule\r\nexport function isDissassembleRule(itemInfo, eDisassembleRule) {\r\n    if (itemInfo && itemInfo.ItemDisassembleRule) {\r\n        let split = itemInfo.ItemDisassembleRule.split(\" | \");\r\n        for(let rule of split) {\r\n            if (rule === eDisassembleRule) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n/// Checks if an item requires charges to function\r\nexport function itemRequiresCharges (itemName) {\r\n    let itemInfo = getItemInfoFromName(itemName);\r\n    if (itemInfo) {\r\n        return itemInfo.ItemRequiresCharges === \"1\";\r\n    }\r\n    return false;\r\n}\r\n\r\n/// Checks an item alias from an ItemInfo to see if the phrase is included\r\nexport function itemAliasIncludes (itemAlias, includePhrase) {\r\n    if (itemAlias && includePhrase) {\r\n        let split = itemAlias.split(\";\");\r\n        for (let alias of split) {\r\n            if (alias.toLowerCase().indexOf(includePhrase.toLowerCase()) !== -1) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n/// Gets the list of enabled/disabled Neutrals in their tiers\r\nexport function getNeutralTierLayout () {\r\n    if (DOTANeutralsTierList) {\r\n        return DOTANeutralsTierList;\r\n    }\r\n    return null;\r\n}\r\n\r\n/// Attempts to get a DOTA_Tooltip_[Aa]bility_{tooltipKey} string in the \r\nexport function getFuzzyTooltipAbilityString (abilityStrings, key) {\r\n    let str = getLocalizedString(abilityStrings, `DOTA_Tooltip_ability_${key}`);\r\n    if (!str) {\r\n        str = getLocalizedString(abilityStrings, `DOTA_Tooltip_Ability_${key}`);\r\n    }\r\n    return str;\r\n}","import { lang as DOTAEngAbilityStrings } from \"../../data/dota2/languages/abilities_english.json\";\r\nimport { getFuzzyTooltipAbilityString } from \"../dataHelperItems\";\r\n\r\n/// Searches the passed strings file for the related string\r\n/// Very resource intensive\r\nexport function tryGetLocalizedString(languageStrings, stringKey) {\r\n    if (!languageStrings || !stringKey) {\r\n        return null;\r\n    }\r\n\r\n    let languageKeys = Object.keys(languageStrings.Tokens);\r\n    let matchingKeys = languageKeys.filter((key) => {\r\n        if (key.toLowerCase() === stringKey.toLowerCase()) {\r\n            return key;\r\n        } else {\r\n            return null;\r\n        }\r\n    });\r\n\r\n    if (matchingKeys && matchingKeys.length > 0) {\r\n        let displayName = languageStrings.Tokens[matchingKeys[0]];\r\n        return displayName;\r\n    } else {\r\n        return \"?\";\r\n    }\r\n}\r\n\r\nexport function tryGetTalentLocalizedString(languageStrings, stringKey) {\r\n    if (!languageStrings || !stringKey) {\r\n        return null;\r\n    }\r\n\r\n    let languageKeys = Object.keys(languageStrings.Tokens);\r\n    let matchingKeys = languageKeys.filter((key) => {\r\n        if (key.includes(stringKey)) {\r\n            return key;\r\n        } else {\r\n            return null;\r\n        }\r\n    });\r\n\r\n    if (matchingKeys && matchingKeys.length > 0) {\r\n        let displayName = languageStrings.Tokens[matchingKeys[0]];\r\n        return displayName;\r\n    } else {\r\n        return \"?\";\r\n    }\r\n}\r\n\r\n/// Quick method for retrieving localized string\r\n/// Main fast method to retrieve an exact key from strings\r\nexport function getLocalizedString(localeStrings, key) {\r\n    let string = localeStrings.Tokens[key];\r\n    return string ?? null;\r\n}\r\n\r\n/// Check if the localeStrings contains the key\r\nexport function containsLocalizedString (localeStrings, key) {\r\n    let containsVal = localeStrings.Tokens[key];\r\n    return containsVal != null;\r\n}\r\n\r\n/// Gets a string from the dota strings that contain the prefix \"DOTA_Toolip_\"\r\n/// Useful for getting general tooltip UI strings\r\nexport function getTooltipString(dotaStrings, tooltipKey) {\r\n    if (!dotaStrings || !tooltipKey) {\r\n        return null;\r\n    }\r\n\r\n    if (!tooltipKey.includes(\"DOTA_ToolTip_\")) {\r\n        tooltipKey = \"DOTA_ToolTip_\" + tooltipKey;\r\n    }\r\n    var match = dotaStrings.Tokens[tooltipKey];\r\n    return match;\r\n}\r\n\r\n/// Gets a string from the abilities strings that contain the prefix \"DOTA_Tooltip_ability\"\r\n/// Useful for retrieving localized strings of ability names\r\nexport function getTooltipAbilityString(abilityStrings, abilityKey) {\r\n    if (!abilityStrings || !abilityKey) {\r\n        return null;\r\n    }\r\n    if (!abilityKey.includes(\"DOTA_Tooltip_ability\")) {\r\n        abilityKey = \"DOTA_Tooltip_ability_\" + abilityKey;\r\n    }\r\n    var match = abilityStrings.Tokens[abilityKey];\r\n    return match;\r\n}\r\n\r\n/// Places a value in a translation string that contains a \"{s:value}\" inside\r\nexport function replaceStringValue(string, value) {\r\n    if (!string || value === undefined || value === null) {\r\n        return \"?\";\r\n    }\r\n\r\n    string = string.replace(/{.*}/, value);\r\n    return string;\r\n}\r\n\r\n/// Gets the english localized ability string\r\nexport function getEngAbilityLocalizedString (key) {\r\n    return getLocalizedString(DOTAEngAbilityStrings, key);\r\n}\r\n\r\n/// Gets the english localized DOTA_Tooltip_[Aa]bility_{key} string\r\nexport function getFuzzyEngAbilityLocalizedString (key) {\r\n    return getFuzzyTooltipAbilityString(DOTAEngAbilityStrings, key);\r\n}","// Enum for all Attack types\r\nexport const EAttackCapabilities = {\r\n    MELEE: \"DOTA_UNIT_CAP_MELEE_ATTACK\",\r\n    RANGED: \"DOTA_UNIT_CAP_RANGED_ATTACK\",\r\n};","import { \r\n    getItemInfoFromName,\r\n    getItemSpecialAbilityValue,\r\n    tryGetItemSpecialValue,\r\n    tryGetNeutralSpecialValue,\r\n    primaryAttributeToItemBonusKey,\r\n    itemsContainsScepter\r\n} from \"./dataHelperItems\";\r\n\r\nimport {\r\n    getAbilityInfoFromName,\r\n    getAbilitySpecialAbilityValue,\r\n    getAbilityOutputDamage,\r\n    tryGetAbilitySpecialAbilityValue,\r\n    parseAbilityValueByLevel,\r\n    isCooldownTalent,\r\n    isDamageTalent,\r\n    isCastRangeTalent,\r\n    getAbilitySpecialCastRangeValue,\r\n    getIncludesAbilitySpecialAbilityValue,\r\n    isAbilityBehaviour\r\n} from \"./dataHelperAbilities\";\r\n\r\nimport {\r\n    getTalentInfoFromName,\r\n    tryGetTalentSpecialAbilityValue,\r\n} from \"./dataHelperTalents\";\r\n\r\nimport {\r\n    getDotaBaseHero,\r\n    getSpecificAttributeStats,\r\n    getPrimaryAttributeStats,\r\n    getPrimaryAttribute,\r\n    isHeroAttackCapability\r\n} from \"./dataHelperHero\";\r\n\r\nimport { EAttributes } from \"../enums/attributes\";\r\nimport { EAttackCapabilities } from \"../enums/hero\";\r\n\r\nimport { DOTAHeroes } from \"../data/dota2/json/npc_heroes.json\";\r\nimport { DOTAAbilities } from \"../data/dota2/json/npc_abilities.json\";\r\n\r\n/// Calculates the health of a hero\r\n/// https://dota2.gamepedia.com/Health\r\nexport function calculateHealth(hero, heroLevel, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }\r\n    \r\n    let HEALTH_PER_STRENGTH_POINT = 20;\r\n    let baseStrength = parseInt(hero.AttributeBaseStrength)\r\n    let strengthGain = parseFloat(hero.AttributeStrengthGain);\r\n\r\n    let baseHealth = 0;\r\n    if (DOTAHeroes && DOTAHeroes.npc_dota_hero_base && DOTAHeroes.npc_dota_hero_base.StatusHealth) {\r\n        baseHealth = parseInt(DOTAHeroes.npc_dota_hero_base.StatusHealth);\r\n    } else {\r\n        console.error(\"Can't add baseHealth to heroes health pool\");\r\n    }\r\n\r\n    let totalStr = baseStrength + (strengthGain * (heroLevel - 1));\r\n    let totalHealth = baseHealth + (totalStr * HEALTH_PER_STRENGTH_POINT);\r\n\r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            let bonusHealth = tryGetItemSpecialValue(item, \"bonus_health\");\r\n            if (bonusHealth) {\r\n                totalHealth += bonusHealth;\r\n            }\r\n\r\n            let bonusStr = tryGetItemSpecialValue(item, \"bonus_strength\");\r\n            if (bonusStr) {\r\n                totalHealth += bonusStr * HEALTH_PER_STRENGTH_POINT;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalHealth += bonusAllStats * HEALTH_PER_STRENGTH_POINT;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let bonusHealth = tryGetNeutralSpecialValue(neutral, \"bonus_health\");\r\n        if (bonusHealth) {\r\n            totalHealth += bonusHealth;\r\n        }\r\n\r\n        let bonusStr = tryGetNeutralSpecialValue(neutral, \"bonus_strength\");\r\n        if (bonusStr) {\r\n            totalHealth += bonusStr * HEALTH_PER_STRENGTH_POINT;\r\n        }\r\n\r\n        let bonusAllStats = tryGetNeutralSpecialValue(neutral, \"bonus_all_stats\");\r\n        if (bonusAllStats) {\r\n            totalHealth += bonusAllStats * HEALTH_PER_STRENGTH_POINT;\r\n        }\r\n\r\n        let maxHealth = tryGetNeutralSpecialValue(neutral, \"max_health\");\r\n        if (maxHealth) {\r\n            totalHealth += maxHealth;\r\n        }\r\n    }\r\n\r\n    if (abilities && abilities.length > 0) {\r\n        \r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            if (talent.includes(\"bonus_hp\")) {\r\n                let bonusHealth = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusHealth) {\r\n                    totalHealth += bonusHealth;\r\n                }\r\n            } else if (talent.includes(\"bonus_strength\")) {\r\n                let bonusStr = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusStr) {\r\n                    totalHealth += bonusStr * HEALTH_PER_STRENGTH_POINT;\r\n                }\r\n            } else if (talent.includes(\"bonus_all_stats\")) {\r\n                let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAllStats) {\r\n                    totalHealth += bonusAllStats * HEALTH_PER_STRENGTH_POINT;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return totalHealth.toFixed(0);\r\n}\r\n\r\n/// Calculates the mana pool of a hero\r\n/// https://dota2.gamepedia.com/Mana\r\nexport function calculateMana(hero, heroLevel, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }    \r\n\r\n    let MANA_PER_INT_POINT = 12;\r\n    let baseInt = parseInt(hero.AttributeBaseIntelligence);\r\n    let intGain = parseFloat(hero.AttributeIntelligenceGain);\r\n\r\n    let baseMana = 0;\r\n    if (DOTAHeroes && DOTAHeroes.npc_dota_hero_base && DOTAHeroes.npc_dota_hero_base.StatusMana) {\r\n        baseMana = parseInt(DOTAHeroes.npc_dota_hero_base.StatusMana);\r\n    } else {\r\n        console.error(\"Can't add baseMana to heroes mana pool\");\r\n    }\r\n\r\n    let totalInt = baseInt + (intGain * (heroLevel - 1));\r\n    let totalMana = baseMana + (totalInt * MANA_PER_INT_POINT);\r\n\r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            let bonusMana = tryGetItemSpecialValue(item, \"bonus_mana\");\r\n            if (bonusMana) {\r\n                totalMana += bonusMana;\r\n            }\r\n\r\n            let bonusInt = tryGetItemSpecialValue(item, \"bonus_intellect\");\r\n            if (bonusInt) {\r\n                totalMana += bonusInt * MANA_PER_INT_POINT;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalMana += bonusAllStats * MANA_PER_INT_POINT;\r\n            }\r\n        }\r\n    }\r\n    \r\n    if (neutral) {\r\n        let bonusMana = tryGetNeutralSpecialValue(neutral, \"bonus_mana\");\r\n        if (bonusMana) {\r\n            totalMana += bonusMana;\r\n        }\r\n\r\n        let bonusInt = tryGetNeutralSpecialValue(neutral, \"bonus_intellect\");\r\n        if (bonusInt) {\r\n            totalMana += bonusInt * MANA_PER_INT_POINT;\r\n        }\r\n\r\n        let bonusAllStats = tryGetNeutralSpecialValue(neutral, \"bonus_all_stats\");\r\n        if (bonusAllStats) {\r\n            totalMana += bonusAllStats * MANA_PER_INT_POINT;\r\n        }\r\n\r\n        // If witless shako, remove from total mana pool\r\n        if (neutral.item === \"item_witless_shako\") {\r\n            let maxMana = tryGetNeutralSpecialValue(neutral, \"max_mana\");\r\n            if (maxMana) {\r\n                totalMana -= maxMana;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (abilities && abilities.length > 0) {\r\n        for(let ability of abilities) {\r\n            let bonusMana = tryGetAbilitySpecialAbilityValue(ability, \"bonus_mana\");\r\n            if (bonusMana) {\r\n                totalMana += bonusMana;\r\n            }\r\n\r\n            let bonusInt = tryGetAbilitySpecialAbilityValue(ability, \"bonus_intellect\");\r\n            if (bonusInt) {\r\n                totalMana += bonusInt * MANA_PER_INT_POINT;\r\n            }\r\n\r\n            let bonusAllStats = tryGetAbilitySpecialAbilityValue(ability, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalMana += bonusAllStats * MANA_PER_INT_POINT;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            if (talent.includes(\"bonus_mp\")) {\r\n                let bonusMana = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusMana) {\r\n                    totalMana += bonusMana;\r\n                }\r\n            } else if (talent.includes(\"bonus_intelligence\")) {\r\n                let bonusInt = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusInt) {\r\n                    totalMana += bonusInt * MANA_PER_INT_POINT;\r\n                }\r\n            } else if (talent.includes(\"bonus_all_stats\")) {\r\n                let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAllStats) {\r\n                    totalMana += bonusAllStats * MANA_PER_INT_POINT;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return totalMana.toFixed(0);\r\n}\r\n\r\n/* Hero gains +0.1 regen per each point of strength\r\n* https://dota2.gamepedia.com/Health_regeneration */\r\nexport function calculateHealthRegen(hero, heroLevel, items, neutral, abilities, talents) {\r\n    if(!hero) {\r\n        return \"?\";\r\n    }\r\n\r\n    let HP_REGEN_PER_STRENGTH = 0.1;\r\n    let baseStr = parseInt(hero.AttributeBaseStrength);\r\n    let strPerLvl = parseFloat(hero.AttributeStrengthGain);\r\n\r\n    let totalHpRegen = (baseStr + (strPerLvl * (heroLevel - 1))) * HP_REGEN_PER_STRENGTH;\r\n    if (hero.StatusHealthRegen) {\r\n        totalHpRegen += parseFloat(hero.StatusHealthRegen);\r\n    }\r\n\r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            let regenAmt = tryGetItemSpecialValue(item, \"bonus_health_regen\");\r\n            if (regenAmt) {\r\n                totalHpRegen += regenAmt;\r\n            }\r\n\r\n            let bonusStr = tryGetItemSpecialValue(item, \"bonus_strength\");\r\n            if(bonusStr) {\r\n                totalHpRegen += bonusStr * HP_REGEN_PER_STRENGTH;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalHpRegen += bonusAllStats * HP_REGEN_PER_STRENGTH;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let healthRegen = tryGetNeutralSpecialValue(neutral, \"hp_regen\");\r\n        if (healthRegen) {\r\n            totalHpRegen += healthRegen;\r\n        }\r\n\r\n        let bonusHealthRegen = tryGetNeutralSpecialValue(neutral, \"bonus_health_regen\");\r\n        if (bonusHealthRegen) {\r\n            totalHpRegen += bonusHealthRegen;\r\n        }\r\n\r\n        let bonusStr = tryGetNeutralSpecialValue(neutral, \"bonus_strength\");\r\n        if (bonusStr) {\r\n            totalHpRegen += bonusStr * HP_REGEN_PER_STRENGTH;\r\n        }\r\n        \r\n        let bonusAllStats = tryGetNeutralSpecialValue(neutral, \"bonus_all_stats\");\r\n        if (bonusAllStats) {\r\n            totalHpRegen += bonusAllStats * HP_REGEN_PER_STRENGTH;\r\n        }\r\n    } \r\n\r\n    // if (abilities && abilities.length > 0) {\r\n    //     for (let ability of abilities) {\r\n    //         let bonusRegen = tryGetAbilitySpecialAbilityValue(ability, \"bonus_health_regen\", 1);\r\n    //         if (bonusRegen) {\r\n    //             totalHpRegen += bonusRegen;\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for (let talent of talents) {\r\n            // Only get bonus_hp_regen talents\r\n            if (talent.includes(\"bonus_hp_regen\")) {\r\n                let bonusRegen = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusRegen) {\r\n                    totalHpRegen += bonusRegen;\r\n                }\r\n            } else if(talent.includes(\"bonus_strength\")) {\r\n                let bonusStr = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusStr) {\r\n                    totalHpRegen += bonusStr * HP_REGEN_PER_STRENGTH;\r\n                }\r\n            } else if (talent.includes(\"bonus_all_stats\")) {\r\n                let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAllStats) {\r\n                    totalHpRegen += bonusAllStats * HP_REGEN_PER_STRENGTH;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return totalHpRegen.toFixed(1);\r\n}\r\n\r\n/* Each point of intelligence increases the hero's mana regeneration by 0.05.\r\n * https://dota2.gamepedia.com/Mana_regeneration */\r\nexport function calculateManaRegen(hero, heroLevel, items, neutral, abilities, talents) {\r\n    if(!hero) {\r\n        return \"?\";\r\n    }\r\n    let MANA_REGEN_PER_INT = 0.05;\r\n    let baseInt = parseInt(hero.AttributeBaseIntelligence);\r\n    let intGain = parseFloat(hero.AttributeIntelligenceGain);\r\n\r\n    let totalManaRegen = (baseInt + (intGain * (heroLevel - 1))) * MANA_REGEN_PER_INT;\r\n    if (hero.StatusManaRegen) {\r\n        totalManaRegen += parseFloat(hero.StatusManaRegen);\r\n    }\r\n\r\n    let totalManaRegenPercentAmp = 100;\r\n\r\n    if(items && items.length > 0) {\r\n        for(let item of items) {\r\n            let bonusManaRegen = tryGetItemSpecialValue(item, \"bonus_mana_regen\");\r\n            if (bonusManaRegen) {\r\n                totalManaRegen += bonusManaRegen;\r\n            }\r\n\r\n            let bonusInt = tryGetItemSpecialValue(item, \"bonus_intelligence\");\r\n            if(bonusInt) {\r\n                let regen = bonusInt * MANA_REGEN_PER_INT; \r\n                totalManaRegen += regen;\r\n            }\r\n\r\n            let bonusIntellect = tryGetItemSpecialValue(item, \"bonus_intellect\");\r\n            if (bonusIntellect) {\r\n                let regen = bonusIntellect * MANA_REGEN_PER_INT; \r\n                totalManaRegen += regen;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalManaRegen += bonusAllStats * MANA_REGEN_PER_INT;\r\n            }\r\n\r\n            // If bloodstone mp regen per charge\r\n            let regenPerCharge = tryGetItemSpecialValue(item, \"regen_per_charge\");\r\n            if (item.extra?.charges && regenPerCharge) {\r\n                let bloodstoneCharges = item.extra.charges;\r\n                totalManaRegen += regenPerCharge * bloodstoneCharges;\r\n            }\r\n\r\n            /// any mana regen percentage multiplier\r\n            let manaRegenAmp = tryGetItemSpecialValue(item, \"mana_regen_multiplier\");\r\n            if (manaRegenAmp) {\r\n                totalManaRegenPercentAmp += manaRegenAmp;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let bonusInt = tryGetNeutralSpecialValue(neutral, \"bonus_intelligence\");\r\n        if (bonusInt) {\r\n            let manaRegen = bonusInt * MANA_REGEN_PER_INT;\r\n            totalManaRegen += manaRegen;\r\n        }\r\n\r\n        let bonusIntellect = tryGetNeutralSpecialValue(neutral, \"bonus_intellect\");\r\n        if (bonusIntellect) {\r\n            let regen = bonusIntellect * MANA_REGEN_PER_INT; \r\n            totalManaRegen += regen;\r\n        }\r\n\r\n        let bonusAllStats = tryGetNeutralSpecialValue(neutral, \"bonus_all_stats\");\r\n        if (bonusAllStats) {\r\n            totalManaRegen += bonusAllStats * MANA_REGEN_PER_INT;\r\n        }\r\n\r\n        let bonusRegen = tryGetNeutralSpecialValue(neutral, \"mana_regen\");\r\n        if (bonusRegen) {\r\n            totalManaRegen += bonusRegen;\r\n        }\r\n    }\r\n\r\n    if(abilities && abilities.length > 0) {\r\n        for (let ability of abilities) {\r\n            let manaRegen = tryGetAbilitySpecialAbilityValue(ability, \"mana_regen\", 1);\r\n            if (manaRegen) {\r\n                totalManaRegen += manaRegen;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            // Only includes bonus mana point regen talents\r\n            if(talent.includes(\"bonus_mp_regen\")) {\r\n                let value = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (value) {\r\n                    totalManaRegen += parseFloat(value);\r\n                }\r\n            } else if (talent.includes(\"bonus_intelligence\")) {\r\n                let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAllStats) {\r\n                    totalManaRegen += bonusAllStats * MANA_REGEN_PER_INT;\r\n                }\r\n            } else if (talent.includes(\"bonus_all_stats\")) {\r\n                let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAllStats) {\r\n                    totalManaRegen += bonusAllStats * MANA_REGEN_PER_INT;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    let totalMP = totalManaRegen * (totalManaRegenPercentAmp / 100);\r\n    return totalMP.toFixed(1);\r\n}\r\n\r\n// Calculates the main armor of the hero\r\n// Each point of agility increases a hero's armor by 0.167 (1/6) https://dota2.gamepedia.com/Armor\r\nexport function calculateMainArmor(hero, level, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }\r\n\r\n    let ARMOR_PER_AGI = 0.167;\r\n    let baseArmor = parseInt(hero.ArmorPhysical);\r\n    let baseAgility = parseInt(hero.AttributeBaseAgility);\r\n    let agiPerLevel = parseFloat(hero.AttributeAgilityGain);\r\n\r\n    // Determine bonus agility from perLevel. Then work out main armor\r\n    let agiPer = (agiPerLevel * (level - 1));\r\n    let totalArmor = baseArmor + ((baseAgility + agiPer) * ARMOR_PER_AGI);\r\n    let totalBonusArmor = 0;\r\n    \r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            let bonusArmor = tryGetItemSpecialValue(item, \"bonus_armor\");\r\n            if (bonusArmor) {\r\n                totalBonusArmor += bonusArmor;\r\n            }\r\n\r\n            let bonusAgility = tryGetItemSpecialValue(item, \"bonus_agility\");\r\n            if (bonusAgility) {\r\n                let armor = bonusAgility * ARMOR_PER_AGI;\r\n                totalArmor += armor;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                let armor = bonusAllStats * ARMOR_PER_AGI;\r\n                totalArmor += armor;\r\n            }\r\n        }\r\n    }\r\n    \r\n    if(neutral) {\r\n        /// If item is nether_shawl, armor needs to be removed\r\n        if (neutral.item === \"item_nether_shawl\") {\r\n            let bonusArmor = tryGetNeutralSpecialValue(neutral, \"bonus_armor\");\r\n            if (bonusArmor) {\r\n                totalBonusArmor -= bonusArmor;\r\n            }\r\n        } else {\r\n            let bonusArmor = tryGetNeutralSpecialValue(neutral, \"bonus_armor\");\r\n            if (bonusArmor) {\r\n                totalBonusArmor += bonusArmor;\r\n            }\r\n        }\r\n        \r\n\r\n        let armorBonus = tryGetNeutralSpecialValue(neutral, \"armor_bonus\");\r\n        if (armorBonus) {\r\n            totalBonusArmor += armorBonus;\r\n        }\r\n\r\n        let bonusAgi = tryGetNeutralSpecialValue(neutral, \"bonus_agility\");\r\n        if (bonusAgi) {\r\n            totalArmor += bonusAgi * ARMOR_PER_AGI;\r\n        }\r\n\r\n        let bonusAllStats = tryGetNeutralSpecialValue(neutral, \"bonus_all_stats\");\r\n        if (bonusAllStats) {\r\n            let armor = bonusAllStats * ARMOR_PER_AGI;\r\n            totalArmor += armor;\r\n        }\r\n    }\r\n\r\n    /// ToDo: If abilities active, add active ability armor\r\n    /// or if ability is passive, apply bonus\r\n    // if (abilities && abilities.length > 0) {\r\n    //     for(let ability of abilities) {\r\n    //         /// if a passive, add armor depending on ability level\r\n    //         let abilInfo = getAbilityInfoFromName(ability);\r\n    //         if (isAbilityBehaviour(abilInfo.AbilityBehavior, [ EAbilityBehaviour.PASSIVE ])) {\r\n    //             let bonusArmor = tryGetAbilitySpecialAbilityValue(ability, \"bonus_armor\");\r\n    //             if (bonusArmor) {\r\n    //                 totalArmor += bonusArmor;\r\n    //             }\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    if(talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            if (talent.includes(\"bonus_armor\")) {\r\n                let bonusArmor = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusArmor) {\r\n                    totalBonusArmor += bonusArmor;\r\n                }\r\n            } else if (talent.includes(\"bonus_agility\")) {\r\n                let bonusAgility = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAgility) {\r\n                    totalArmor += bonusAgility * ARMOR_PER_AGI;\r\n                }\r\n            } else if (talent.includes(\"bonus_all_stats\")) {\r\n                let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAllStats) {\r\n                    totalArmor += bonusAllStats * ARMOR_PER_AGI;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Round to one decimal place\r\n    return {\r\n        armor: totalArmor,\r\n        additional: totalBonusArmor,\r\n    };\r\n}\r\n\r\n/// Returns the total amount of spell amplification as a percentage applied to the hero\r\nexport function calculateTotalSpellAmp (talents, items, neutral) {\r\n    let totalSpellAmp = 0;\r\n    \r\n    // Determine if any talents provide spell amp\r\n    if (talents && talents.length > 0) {\r\n        let ampTalent = talents.find(element => element.includes(\"spell_amplify\"));\r\n        if (ampTalent) {\r\n            let talentInfo = DOTAAbilities[ampTalent.name];\r\n            if (talentInfo) {\r\n                let spellAmpInfo = talentInfo.AbilitySpecial.find(element => element.value);\r\n                if (spellAmpInfo) {\r\n                    let spellAmpAmt = parseInt(spellAmpInfo.value);\r\n                    totalSpellAmp += spellAmpAmt;\r\n\r\n                    //console.log(`Talent ${ampTalent.name} provides ${spellAmpAmt}% spell amp`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Determine if current neutral item provides any spell amplification\r\n    if (neutral) {\r\n        let foundNeutral = getItemInfoFromName(neutral.item);\r\n        if (foundNeutral) {\r\n            let spellAmpAmount = getItemSpecialAbilityValue(foundNeutral, \"spell_amp\");\r\n            if (spellAmpAmount) {\r\n                totalSpellAmp += spellAmpAmount;\r\n                //console.log(`Neutral ${neutral.item} provides ${spellAmpAmount}% spell amp`);\r\n            }\r\n        }\r\n    }\r\n\r\n    /// Determine if any items provide spell amp\r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            let spellAmpAmount = tryGetItemSpecialValue(item, \"spell_amp\");\r\n            if (spellAmpAmount) {\r\n                totalSpellAmp += spellAmpAmount;\r\n                //console.log(`Item ${items[i].item} provides ${spellAmpAmt}% spell amp`);\r\n            }\r\n\r\n            let ampPerCharge = tryGetItemSpecialValue(item, \"amp_per_charge\");\r\n            if (item.extra?.charges && ampPerCharge) {\r\n                let bloodstoneCharges = item.extra.charges;\r\n                totalSpellAmp += ampPerCharge * bloodstoneCharges;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    return totalSpellAmp.toFixed(1);\r\n}\r\n\r\nexport function calculateStatusResist(items, neutral) {\r\n    let totalStatusResist = 0.0;\r\n\r\n    if (items && items.length > 0) {\r\n        for(let i = 0; i < items.length; i++) {\r\n            if (items[i].item) {\r\n                let itemInfo = getItemInfoFromName(items[i].item);\r\n                if (itemInfo) {\r\n                    let statusResistAmount = getItemSpecialAbilityValue(itemInfo, \"status_resistance\");\r\n                    if (statusResistAmount) {\r\n                        totalStatusResist += statusResistAmount;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let statusResistAmount = tryGetNeutralSpecialValue(neutral, \"status_resistance\");\r\n        if (statusResistAmount) {\r\n            totalStatusResist += statusResistAmount;\r\n        }\r\n    }\r\n\r\n    return totalStatusResist;\r\n}\r\n\r\nexport function calculateMagicResist (items, neutral, abilities) {\r\n    // Formula from Wiki\r\n    // Total magic resistance = 1 − ((1 − natural resistance) × (1 − first resistance bonus) × (1 − second resistance bonus) × (1 + first resistance reduction) × (1 + second resistance reduction))\r\n    \r\n    // Array of magic resistance values\r\n    let resistanceBonuses = [ ];\r\n    \r\n    if (DOTAHeroes && DOTAHeroes?.npc_dota_hero_base?.MagicalResistance) {\r\n        let baseResist = parseInt(DOTAHeroes.npc_dota_hero_base.MagicalResistance);\r\n        resistanceBonuses.push(baseResist);\r\n    }\r\n\r\n    if (items && items.length > 0) {\r\n        for(let i = 0; i < items.length; i++) {\r\n            let itemInfo = getItemInfoFromName(items[i].item);\r\n            if (itemInfo) {\r\n                let magicResistAmount = getItemSpecialAbilityValue(itemInfo, \"bonus_magic_resistance\");\r\n                if (magicResistAmount) {\r\n                    resistanceBonuses.push(magicResistAmount);\r\n                }\r\n\r\n                magicResistAmount = getItemSpecialAbilityValue(itemInfo, \"magic_resistance\");\r\n                if (magicResistAmount) {\r\n                    resistanceBonuses.push(magicResistAmount);\r\n                }\r\n\r\n                magicResistAmount = getItemSpecialAbilityValue(itemInfo, \"bonus_magical_armor\");\r\n                if (magicResistAmount) {\r\n                    resistanceBonuses.push(magicResistAmount);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let magicResistAmount = tryGetNeutralSpecialValue(neutral, \"magic_resistance\");\r\n        if (magicResistAmount) {\r\n            resistanceBonuses.push(magicResistAmount);\r\n        }\r\n    }\r\n\r\n    if (abilities && abilities.length > 0) { \r\n        for(let ability of abilities) {\r\n            // let magicResistAmount = tryGetAbilitySpecialAbilityValue(ability, \"magic_resistance\");\r\n            // if (magicResistAmount) {\r\n            //     resistanceBonuses.push(magicResistAmount);\r\n            // }\r\n            \r\n            let magicResistAmount = tryGetAbilitySpecialAbilityValue(ability, \"bonus_magic_resistance\");\r\n            if (magicResistAmount) {\r\n                resistanceBonuses.push(magicResistAmount);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Divide original value into 0.x and minus from 1 to get the reverse\r\n    let edited = []\r\n    for(let i = 0; i < resistanceBonuses.length; i++) {\r\n        edited.push(1 - (resistanceBonuses[i] / 100));\r\n    }\r\n\r\n    // multiply them all together \r\n    let total = edited[0];\r\n    for(let i = 1; i < edited.length; i++) {\r\n        total *= edited[i];\r\n    }\r\n\r\n    // then minus from 1, and multiply by 100 to get value as a percentage\r\n    let percent = (1 - total) * 100;\r\n    return percent.toFixed(2);\r\n}\r\n\r\n/// Calculates the total magic resistance of the hero\r\n/// https://dota2.gamepedia.com/Magic_resistance\r\nexport function calculatePhysicalResist (totalArmor) {\r\n    // Formula from https://www.dotabuff.com/blog/2018-11-30-understanding-720-armor-changes\r\n    //( 0.052 * armor ) ÷ ( 0.9 + 0.048 * |armor|)\r\n    let physResist = (0.052 * totalArmor) / (0.9 + 0.048 * Math.abs(totalArmor));\r\n    let percent = physResist * 100;\r\n    return percent < 0 ? 0 : percent.toFixed(0);\r\n}\r\n\r\n/// Calculates evasion\r\nexport function calculateEvasion(items, neutral, abilities, talents) {\r\n    let totalEvasion = 0.0;\r\n\r\n    if (abilities && abilities.length > 0) {\r\n        for(let ability of abilities) {\r\n            let bonusEvasion = tryGetAbilitySpecialAbilityValue(ability, \"bonus_evasion\");\r\n            if (bonusEvasion) {\r\n                totalEvasion += bonusEvasion;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            if (talent.includes(\"bonus_evasion\")) {\r\n                let bonusEvasion = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusEvasion) {\r\n                    totalEvasion += bonusEvasion;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (items && items.length > 0) {\r\n        for(let i = 0; i < items.length; i++) {\r\n            if (items[i].item) {\r\n                let itemInfo = getItemInfoFromName(items[i].item);\r\n                if (itemInfo) {\r\n                    let evasionAmount = getItemSpecialAbilityValue(itemInfo, \"bonus_evasion\");\r\n                    if (evasionAmount) {\r\n                        totalEvasion += evasionAmount;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return totalEvasion;\r\n}\r\n\r\n/// Returns the minimum and maximum right click damage of a hero\r\n// atkMin, atkMax, primaryAttributeStats, heroLevel = 1\r\nexport function calculateRightClickDamage(hero, level, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }\r\n    \r\n    let heroMainAttribute = getPrimaryAttribute(hero);\r\n    let atkMin = parseInt(hero.AttackDamageMin);\r\n    let atkMax = parseInt(hero.AttackDamageMax);\r\n    let primaryAttributeStats = getPrimaryAttributeStats(hero);\r\n\r\n    // Check if the hero attack is melee or ranged\r\n    let heroIsMelee = isHeroAttackCapability(hero, EAttackCapabilities.MELEE);\r\n\r\n    // Work out how much bonus attack hero recieves from their primary attribute\r\n    let totalPrimaryAttribute = primaryAttributeStats.base + (primaryAttributeStats.perLevel * (level - 1));\r\n    // Calc additional damage from sources\r\n    let totalAdditional = 0;\r\n\r\n    /* Iterate over all items, neutral, abilities and talents to\r\n        get all primary attribute and all stat bonuses\r\n        */\r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            let allAttrKeys = primaryAttributeToItemBonusKey(heroMainAttribute);\r\n            for(let key of allAttrKeys) {\r\n                let bonusPrimaryAttr = tryGetItemSpecialValue(item, key);\r\n                if (bonusPrimaryAttr) {\r\n                    totalPrimaryAttribute += bonusPrimaryAttr;\r\n                }\r\n            }\r\n\r\n            let bonusPrimaryStat = tryGetItemSpecialValue(item, \"bonus_primary_stat\");\r\n            if (bonusPrimaryStat) {\r\n                totalPrimaryAttribute += bonusPrimaryStat;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalPrimaryAttribute += bonusAllStats;\r\n            }\r\n\r\n            let bonusDmg = tryGetItemSpecialValue(item, \"bonus_damage\");\r\n            if (bonusDmg) {\r\n                totalAdditional += bonusDmg;\r\n            }\r\n\r\n            if (heroIsMelee) {\r\n                let bonusMeleeDmg = tryGetItemSpecialValue(item, \"bonus_damage_melee\");\r\n                if (bonusMeleeDmg) {\r\n                    totalAdditional += bonusMeleeDmg;\r\n                }\r\n            } else {\r\n                let bonusRangedDmg = tryGetItemSpecialValue(item, \"bonus_damage_ranged\");\r\n                if (bonusRangedDmg) {\r\n                    totalAdditional += bonusRangedDmg;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let allAttrKeys = primaryAttributeToItemBonusKey(heroMainAttribute);\r\n        for(let key of allAttrKeys) {\r\n            let bonusPrimaryAttr = tryGetNeutralSpecialValue(neutral, key);\r\n            if (bonusPrimaryAttr) {\r\n                totalPrimaryAttribute += bonusPrimaryAttr;\r\n            }\r\n        }\r\n\r\n        let bonusPrimaryStat = tryGetNeutralSpecialValue(neutral, \"primary_stat\");\r\n        if (bonusPrimaryStat) {\r\n            totalPrimaryAttribute += bonusPrimaryStat;\r\n        }\r\n\r\n        let bonusAllStats = tryGetNeutralSpecialValue(neutral, \"bonus_all_stats\");\r\n        if (bonusAllStats) {\r\n            totalPrimaryAttribute += bonusAllStats;\r\n        }\r\n\r\n        let bonusDmg = tryGetNeutralSpecialValue(neutral, \"bonus_damage\");\r\n        if (bonusDmg) {\r\n            totalAdditional += bonusDmg;\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            let allAttrKeys = primaryAttributeToItemBonusKey(heroMainAttribute);\r\n            for(let key of allAttrKeys) {\r\n                if (talent.includes(key)) {\r\n                    let bonusPrimaryAttr = tryGetNeutralSpecialValue(talent, \"value\");\r\n                    if (bonusPrimaryAttr) {\r\n                        totalPrimaryAttribute += bonusPrimaryAttr;\r\n                    }\r\n                }\r\n            }\r\n            \r\n            if (talent.includes(\"bonus_all_stats\")) {\r\n                let allStats = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (allStats) {\r\n                    totalPrimaryAttribute += allStats;\r\n                }\r\n            } else if (talent.includes(\"bonus_attack_damage\")) {\r\n                let bonusDmg = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusDmg) {\r\n                    totalAdditional += bonusDmg;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /// Damage from primary attribute counts as part of the Min-Max\r\n    /// whereas bonus damage (+5 damage) from sources count as additional\r\n\r\n    let min = atkMin + totalPrimaryAttribute;\r\n    let max = atkMax + totalPrimaryAttribute;\r\n\r\n    return {\r\n        /// minimum attack damage of the hero\r\n        min: Math.floor(min),\r\n        /// maximum attack damage of the hero\r\n        max: Math.floor(max),\r\n        additional: totalAdditional,\r\n    };\r\n}\r\n\r\n/// Returns info on the attack time of the hero\r\nexport function calculateAttackTime(hero, level, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }\r\n    \r\n    let MAX_ATTACK_SPEED = 700;\r\n\r\n    // Check if hero has different attack rate or attack speed than base hero\r\n    let totalAttackSpeed = parseInt(getDotaBaseHero()?.BaseAttackSpeed);\r\n\r\n    /// Get base agi stats\r\n    let agiStats = getSpecificAttributeStats(EAttributes.ATTR_AGILITY, hero);\r\n    let baseAgi = agiStats.base;\r\n    let agiPerLevel = agiStats.perLevel;\r\n\r\n    let totalAgi = baseAgi + (agiPerLevel * (level - 1));\r\n\r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            let bonusAttackSpeed = tryGetItemSpecialValue(item, \"bonus_attack_speed\");\r\n            if (bonusAttackSpeed) {\r\n                totalAttackSpeed += bonusAttackSpeed;\r\n            }\r\n\r\n            let bonusAgility = tryGetItemSpecialValue(item, \"bonus_agility\");\r\n            if (bonusAgility) {\r\n                totalAgi += bonusAgility;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalAgi += bonusAllStats;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let bonusAttackSpeed = tryGetNeutralSpecialValue(neutral, \"bonus_attack_speed\");\r\n        if (bonusAttackSpeed) {\r\n            totalAttackSpeed += bonusAttackSpeed;\r\n        }\r\n\r\n        let attackSpeed = tryGetNeutralSpecialValue(neutral, \"attack_speed\");\r\n        if (attackSpeed) {\r\n            totalAttackSpeed += attackSpeed;\r\n        }\r\n    }\r\n\r\n    // Only actives that gives attack speed bonuses\r\n    // if (abilities && abilities.length > 0) {\r\n    // }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            let bonusAttackSpeed = tryGetTalentSpecialAbilityValue(talent, \"bonus_attack_speed\");\r\n            if (bonusAttackSpeed) {\r\n                totalAttackSpeed += bonusAttackSpeed;\r\n            }\r\n\r\n            let bonusAgility = tryGetTalentSpecialAbilityValue(talent, \"bonus_agility\");\r\n            if (bonusAgility) {\r\n                totalAgi += bonusAgility;\r\n            }\r\n\r\n            let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalAgi += bonusAllStats;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// Check that max atk speed hasn't been reached\r\n    if ((totalAttackSpeed + totalAgi) > MAX_ATTACK_SPEED) {\r\n        // Use totalAttackSpeed at max if so, reset agi since 1 agi = 1 atk speed\r\n        totalAttackSpeed = MAX_ATTACK_SPEED;\r\n        totalAgi = 0;\r\n    }\r\n\r\n    let attacksPerSec = ((totalAttackSpeed + totalAgi) * 0.01) / 1.7;\r\n    let attackTime = 1.7 / ((totalAttackSpeed + totalAgi) * 0.01);\r\n    attackTime = 1 / attacksPerSec;\r\n\r\n    let atkSpeed = totalAttackSpeed + totalAgi;\r\n\r\n    return {\r\n        /// Amount of seconds inbetween attacks\r\n        attackTime: attackTime.toFixed(2),\r\n        /// Amount of attacks per second\r\n        attacksPerSecond: attacksPerSec.toFixed(2),\r\n        /// Attack speed value shown in UI of dota\r\n        attackSpeed: atkSpeed.toFixed(0),\r\n    };\r\n}\r\n\r\n/// Calculates how much output damage an ability will do to an enemy, factoring in any items\r\nexport function calculateSpellDamage(abilityName, abilityInfo, abilityLevel, items, neutral, talents) {\r\n    if (!abilityLevel || !abilityInfo) {\r\n        return -1;\r\n    }\r\n\r\n    // Get normal dmg output of ability\r\n    let abilityDamageInfo = getAbilityOutputDamage(abilityInfo, abilityLevel);\r\n    \r\n    // Add up spellAmp from all bonuses to calculate at end\r\n    let totalSpellAmpPercent = 0;\r\n\r\n    /// Value bonus from talent\r\n    let talentBonus = 0;\r\n\r\n    if (items) {\r\n        // Add item spell damage increase\r\n        for(let item of items) {\r\n            let spellAmp = tryGetItemSpecialValue(item, \"spell_amp\");\r\n            if (spellAmp) {\r\n                totalSpellAmpPercent += spellAmp;\r\n            }\r\n\r\n            let bonusSpellAmp = tryGetItemSpecialValue(item, \"bonus_spell_amp\");\r\n            if (bonusSpellAmp) {\r\n                totalSpellAmpPercent += bonusSpellAmp;\r\n            }\r\n\r\n            // get current bloodstone charges and amp correctly\r\n            let chargeCount = item.extra?.charges;\r\n            let ampPerCharge = tryGetItemSpecialValue(item, \"amp_per_charge\");\r\n            if (ampPerCharge && chargeCount) {\r\n                totalSpellAmpPercent += (ampPerCharge * chargeCount);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        //Add neutral item spell dmg\r\n        let neutralInfo = getItemInfoFromName(neutral.item);\r\n        if (neutralInfo && neutralInfo.AbilitySpecial) {\r\n            for (let i = 0; i < neutralInfo.AbilitySpecial.length; i++) {\r\n                let special = neutralInfo.AbilitySpecial[i];\r\n                // Spell amp\r\n                if (special.bonus_spell_amp) {\r\n                    let bonusSpellAmp = parseInt(special.bonus_spell_amp);\r\n                    totalSpellAmpPercent += bonusSpellAmp; \r\n                }\r\n\r\n                if (special.spell_amp) {\r\n                    let bonusSpellAmp = parseInt(special.spell_amp);\r\n                    totalSpellAmpPercent += bonusSpellAmp;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        // Add spell amplify from any selected talents\r\n        for(let talent of talents) {\r\n            if (talent.includes(\"spell_amplify\")) {\r\n                let ampTalentValue = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (ampTalentValue) {\r\n                    totalSpellAmpPercent += ampTalentValue;\r\n                }\r\n            } \r\n            /// if a unique talent specific to a hero ability\r\n            else if (talent.includes(\"special_bonus_unique\")) {\r\n                /// Search Abilities_English.json for string of talent to \r\n                /// check if it is a damage talent modifier and apply\r\n                if (isDamageTalent(talent)) {\r\n                    let linkedAbility = tryGetTalentSpecialAbilityValue(talent, \"ad_linked_ability\");\r\n\r\n                    // if linked ability is equal to current one\r\n                    if (linkedAbility && linkedAbility === abilityName) {\r\n                        let value = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                        if (value) {\r\n                            talentBonus = value;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    let totalAbilDmg = abilityDamageInfo.damage + talentBonus;\r\n    let abilityDamage = calculateSpellAmp(totalAbilDmg, totalSpellAmpPercent);\r\n\r\n    return {\r\n        damage: abilityDamage === 0 ? null : abilityDamage,\r\n        isPercent: abilityDamageInfo.isPercent,\r\n    };\r\n}\r\n\r\n/// Calculates and applies spell amp to the spell damage and returns the result\r\nexport function calculateSpellAmp (spellDamage, spellAmpPercent) {\r\n    return spellDamage + ((spellDamage / 100) * spellAmpPercent);\r\n}\r\n\r\n/// Calculates ability mana cost with items, neutrals and talents that contain reductions\r\nexport function calculateManaCost(abilityInfo, abilityLevel, items, neutral, talents) {\r\n    if (abilityLevel <= 0) {\r\n        return null;\r\n    }\r\n    \r\n    let manaCost = null;\r\n\r\n    // Get inital mana cost amount\r\n    if (abilityInfo && abilityInfo.AbilityManaCost) {\r\n        manaCost = parseAbilityValueByLevel(abilityInfo.AbilityManaCost, abilityLevel);\r\n    }\r\n\r\n    // Determine mana reductions from items, neutral, talents\r\n    // Take all percentages and calculate at end\r\n    let totalManaCostReducePercent = 0;\r\n\r\n    if (items) {\r\n        for(let item of items) {\r\n            let itemInfo = getItemInfoFromName(item.item);\r\n            if(itemInfo) {\r\n                let manaCostReduceAmount = getItemSpecialAbilityValue(itemInfo, \"manacost_reduction\");\r\n                if(manaCostReduceAmount) {\r\n                    totalManaCostReducePercent += manaCostReduceAmount;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let neutralInfo = getItemInfoFromName(neutral.item);\r\n        if (neutralInfo) {\r\n            let costReductionAmount = getItemSpecialAbilityValue(neutralInfo, \"manacost_reduction\");\r\n            if (costReductionAmount) {\r\n                totalManaCostReducePercent += costReductionAmount;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (talents) {\r\n        for(let talent of talents) {\r\n            // Only apply mana reducing talents\r\n            if (talent.includes(\"mana_reduction\")) {\r\n                let reduceAmount = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (reduceAmount) {\r\n                    totalManaCostReducePercent += reduceAmount;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // If ability has a mana value and has mana reductions\r\n    if (manaCost && totalManaCostReducePercent > 0) {\r\n        let removeManaAmt = (manaCost / 100) * totalManaCostReducePercent;\r\n        manaCost -= removeManaAmt;\r\n    }\r\n\r\n    return manaCost;\r\n}\r\n\r\n/// Calculates ability cooldown with items, neutrals, talents and abilities\r\n/// https://liquipedia.net/dota2/Cooldown_Reduction\r\nexport function calculateAbilityCooldown(abilityName, abilityInfo, abilityLevel, items, neutral, talents) {\r\n    if (abilityLevel <= 0) {\r\n        return null;\r\n    }\r\n    \r\n    let cooldown = null;\r\n    let charges = null;\r\n    let fixedAmtReductionSeconds = 0;\r\n\r\n    if (abilityInfo && abilityInfo.AbilityCooldown) {\r\n        cooldown = parseAbilityValueByLevel(abilityInfo.AbilityCooldown, abilityLevel);\r\n\r\n        /// if ability uses charges, use charge cooldown\r\n        if (cooldown === 0 && abilityInfo.AbilityCharges && abilityInfo.AbilityChargeRestoreTime) {\r\n            cooldown = parseInt(abilityInfo.AbilityChargeRestoreTime);\r\n            charges = parseInt(abilityInfo.AbilityCharges);\r\n        }\r\n\r\n        // if AbilityInfo has a Scepter upgrade and items contains scepter\r\n        let requiresScepter = getAbilitySpecialAbilityValue(abilityInfo, \"RequiresScepter\") === \"1\";\r\n        if (requiresScepter && itemsContainsScepter(items)) {\r\n            let scepterCharges = getIncludesAbilitySpecialAbilityValue(abilityInfo, \"charges\", abilityLevel);\r\n            charges = scepterCharges;\r\n        }\r\n    }\r\n\r\n    let allReductions = [];\r\n    if (items) {\r\n        for (let item of items) {\r\n            if (item && item.item) {\r\n                let itemInfo = getItemInfoFromName(item.item);\r\n                if (itemInfo) {\r\n                    let bonusCooldown = getItemSpecialAbilityValue(itemInfo, \"bonus_cooldown\");\r\n                    if (bonusCooldown) {\r\n                        allReductions.push({ amount: bonusCooldown, source: item.item });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let neutralInfo = getItemInfoFromName(neutral.item);\r\n        if (neutralInfo) {\r\n            let bonusCooldown = getItemSpecialAbilityValue(neutralInfo, \"bonus_cooldown\");\r\n            if (bonusCooldown) {\r\n                allReductions.push({ amount: bonusCooldown, source: neutral });\r\n            } \r\n        }\r\n    }\r\n\r\n    if (talents) {\r\n        for(let talent of talents) {\r\n            // Ignore talent if it isn't a cd reduction one\r\n            if (talent.includes(\"cooldown_reduction\")) {\r\n                let reduction = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (reduction) {\r\n                    allReductions.push({ amount: reduction, source: talent });\r\n                }\r\n            }\r\n            else if (talent.includes(\"special_bonus_unique\")) {\r\n                if (isCooldownTalent(talent)) {\r\n                    let linkedAbility = tryGetTalentSpecialAbilityValue(talent, \"ad_linked_ability\");\r\n                    if (linkedAbility === abilityName) {\r\n                        let value = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                        if (value) {\r\n                            fixedAmtReductionSeconds += value;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /// Remove any fixed amount cooldown reductions first before\r\n    /// applying any other reductions\r\n    let totalCooldown = cooldown - fixedAmtReductionSeconds;\r\n\r\n    let sourceOfReductions = [];\r\n    for(let reduction of allReductions) {\r\n        let decimal = reduction.amount / 100;\r\n        sourceOfReductions.push((1 - decimal));\r\n    }\r\n\r\n    for(let reduce of sourceOfReductions) {\r\n        totalCooldown *= reduce;\r\n    }\r\n\r\n    return {\r\n        charges: charges,\r\n        cooldown: totalCooldown > 0 ? totalCooldown.toFixed(2) : null,\r\n    };\r\n}\r\n\r\n/// Calculates the movement speed of the hero, factoring in their items, neutral, abilities and talents\r\nexport function calculateMoveSpeed (hero, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }\r\n\r\n    let baseSpeed = parseInt(hero.MovementSpeed);\r\n    let flatBonus = 0;\r\n    let percentageBasedBonuses = 0;\r\n\r\n    if (items && items.length > 0) {\r\n        for (let item of items) {\r\n            let moveSpeed = tryGetItemSpecialValue(item, \"bonus_movement_speed\");\r\n            if (moveSpeed) {\r\n                flatBonus += moveSpeed;\r\n            }\r\n            \r\n            let bonusMovement = tryGetItemSpecialValue(item, \"bonus_movement\");\r\n            if (bonusMovement) {\r\n                flatBonus += bonusMovement;\r\n            }\r\n\r\n            let moveSpeedPercentBonus = tryGetItemSpecialValue(item, \"movement_speed_percent_bonus\");\r\n            if (moveSpeedPercentBonus) {\r\n                percentageBasedBonuses += moveSpeedPercentBonus;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let bonusMoveSpeed = tryGetNeutralSpecialValue(neutral, \"bonus_movement_speed\");\r\n        if (bonusMoveSpeed) {\r\n            flatBonus += bonusMoveSpeed;\r\n        }\r\n\r\n        let moveSpeedPercentBonus = tryGetNeutralSpecialValue(neutral, \"movement_speed_percent_bonus\");\r\n        if (moveSpeedPercentBonus) {\r\n            percentageBasedBonuses += moveSpeedPercentBonus;\r\n        }\r\n    }\r\n\r\n    /// Abilities are actives so dont include since no way in UI to activate an ability yet\r\n    // if (abilities && abilities.length > 0) {\r\n    //     for(let ability of abilities) {\r\n    //         let bonusMoveSpeed = tryGetAbilitySpecialAbilityValue(ability, \"bonus_movespeed\");\r\n    //         if (bonusMoveSpeed) {\r\n    //             flatBonus += bonusMoveSpeed;\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            if (talent.includes(\"bonus_movement_speed\")) {\r\n                let bonusSpeed = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusSpeed) {\r\n                    flatBonus += bonusSpeed;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    let total = baseSpeed + flatBonus;\r\n    return total;\r\n}\r\n\r\nexport function calculateAttackRange (hero, level, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }\r\n\r\n    let isHeroRanged = isHeroAttackCapability(hero, EAttackCapabilities.RANGED);\r\n\r\n    let baseRange = parseInt(hero.AttackRange);\r\n    let totalAttackRange = baseRange;\r\n\r\n    // Dont add bonuses if hero isn't ranged\r\n    if (isHeroRanged) {\r\n        if (items && items.length > 0) {\r\n            for(let item of items) {\r\n                let baseRange = tryGetItemSpecialValue(item, \"base_attack_range\");\r\n                if (baseRange) {\r\n                    totalAttackRange += baseRange;\r\n                }\r\n            }\r\n        }\r\n    \r\n        if (neutral) {\r\n            let rangeBonus = tryGetNeutralSpecialValue(neutral, \"attack_range_bonus\");\r\n            if (rangeBonus) {\r\n                totalAttackRange += rangeBonus;\r\n            }\r\n    \r\n            let bonusAttackRange = tryGetNeutralSpecialValue(neutral, \"bonus_attack_range\");\r\n            if (bonusAttackRange) {\r\n                totalAttackRange += bonusAttackRange;\r\n            }\r\n        }\r\n\r\n        if (abilities && abilities.length > 0) {\r\n            for(let ability of abilities) {\r\n                let bonusAttackRange = tryGetAbilitySpecialAbilityValue(ability, \"bonus_attack_range\", 1);\r\n                if (bonusAttackRange) {\r\n                    totalAttackRange += bonusAttackRange;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (talents && talents.length > 0) {\r\n            for(let talent of talents) {\r\n                if (talent.includes(\"bonus_attack_range\")) {\r\n                    let bonusAttackRange = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                    if (bonusAttackRange) {\r\n                        totalAttackRange += bonusAttackRange;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        // Melee units, apply any melee attack range bonuses\r\n        if (neutral) {\r\n            let bonusMeleeAttackRange = tryGetNeutralSpecialValue(neutral, \"melee_attack_range\");\r\n            if (bonusMeleeAttackRange) {\r\n                totalAttackRange += bonusMeleeAttackRange;\r\n            }\r\n        }\r\n    }\r\n\r\n    return totalAttackRange;\r\n}\r\n\r\n/// Calculates the correct attribute stats for a given hero\r\nexport function calculateAttribute(attribute, hero, level, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }\r\n\r\n    let attributeStats = getSpecificAttributeStats(attribute, hero);\r\n    let baseAttribute = attributeStats.base;\r\n    let attributePerLevel = attributeStats.perLevel;\r\n\r\n    let totalAttribute = baseAttribute + (attributePerLevel * (level - 1));\r\n    let additionalAttribute = 0;\r\n\r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            switch(attribute) {\r\n                case EAttributes.ATTR_STRENGTH:\r\n                    {\r\n                        let bonusStr = tryGetItemSpecialValue(item, \"bonus_strength\");\r\n                        if (bonusStr) {\r\n                            additionalAttribute += bonusStr;\r\n                        }\r\n                        break;\r\n                    }\r\n                case EAttributes.ATTR_AGILITY:\r\n                    {\r\n                        let bonusAgi = tryGetItemSpecialValue(item, \"bonus_agility\");\r\n                        if (bonusAgi) {\r\n                            additionalAttribute += bonusAgi;\r\n                        }\r\n                        break;\r\n                    }\r\n                case EAttributes.ATTR_INTELLIGENCE:\r\n                    {\r\n                        let bonusIntellect = tryGetItemSpecialValue(item, \"bonus_intellect\");\r\n                        if (bonusIntellect) {\r\n                            additionalAttribute += bonusIntellect;\r\n                        }\r\n\r\n                        let bonusInt = tryGetItemSpecialValue(item, \"bonus_intelligence\");\r\n                        if (bonusInt) {\r\n                            additionalAttribute += bonusInt;\r\n                        }\r\n                        break;    \r\n                    }\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                additionalAttribute += bonusAllStats;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        switch(attribute) {\r\n            case EAttributes.ATTR_STRENGTH:\r\n                    {\r\n                        let bonusStr = tryGetNeutralSpecialValue(neutral, \"bonus_strength\");\r\n                        if (bonusStr) {\r\n                            additionalAttribute += bonusStr;\r\n                        }\r\n                        break;\r\n                    }\r\n            case EAttributes.ATTR_AGILITY:\r\n                {\r\n                    let bonusAgi = tryGetNeutralSpecialValue(neutral, \"bonus_agility\");\r\n                    if (bonusAgi) {\r\n                        additionalAttribute += bonusAgi;\r\n                    }\r\n                    break;\r\n                }\r\n            case EAttributes.ATTR_INTELLIGENCE:\r\n                {\r\n                    let bonusInt = tryGetNeutralSpecialValue(neutral, \"bonus_intelligence\");\r\n                    if (bonusInt) {\r\n                        additionalAttribute += bonusInt;\r\n                    }\r\n\r\n                    let bonusIntellect = tryGetNeutralSpecialValue(neutral, \"bonus_intellect\");\r\n                    if (bonusIntellect) {\r\n                        additionalAttribute += bonusIntellect;\r\n                    }\r\n                    break;    \r\n                }\r\n            default:\r\n                break;\r\n        }\r\n\r\n        let bonusAllStats = tryGetNeutralSpecialValue(neutral, \"bonus_all_stats\");\r\n        if (bonusAllStats) {\r\n            additionalAttribute += bonusAllStats;\r\n        }\r\n\r\n        /// Add primary stat bonus if current attribute matches hero's primary\r\n        if (attribute == hero.AttributePrimary) {\r\n            let primaryStat = tryGetNeutralSpecialValue(neutral, \"primary_stat\");\r\n            if (primaryStat) {\r\n                additionalAttribute += primaryStat;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            switch(attribute) {\r\n                case EAttributes.ATTR_STRENGTH:\r\n                        {\r\n                            if (talent.includes(\"bonus_strength\")) {\r\n                                let bonusStr = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                                if (bonusStr) {\r\n                                    additionalAttribute += bonusStr;\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                case EAttributes.ATTR_AGILITY:\r\n                    {\r\n                        if (talent.includes(\"bonus_agility\")) {\r\n                            let bonusAgi = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                            if (bonusAgi) {\r\n                                additionalAttribute += bonusAgi;\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                case EAttributes.ATTR_INTELLIGENCE:\r\n                    {\r\n                        if (talent.includes(\"bonus_intelligence\")) {\r\n                            let bonusInt = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                            if (bonusInt) {\r\n                                additionalAttribute += bonusInt;\r\n                            }\r\n                        }\r\n                        break;    \r\n                    }\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            if (talent.includes(\"all_stats\")) {\r\n                let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAllStats) {\r\n                    additionalAttribute += bonusAllStats;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // If primary attribute, round down else us normal rounding\r\n    let isPrimaryAttr = getPrimaryAttribute(hero) === attribute;\r\n    if (isPrimaryAttr) {\r\n        totalAttribute = Math.floor(totalAttribute)\r\n    } else {\r\n        totalAttribute = parseInt(totalAttribute.toFixed(0));\r\n    }\r\n\r\n    return {\r\n        /// Base attribute amount, includes per level\r\n        attribute: totalAttribute,\r\n        /// Additional attribute amount, from items/neutral/abils/talents\r\n        additionalAttribute: additionalAttribute.toFixed(0),\r\n        /// Amount of attribute per level\r\n        perLevel: attributePerLevel,\r\n    };\r\n}\r\n\r\nexport function calculateAbilityCastRange (abilityName, abilityInfo, abilityLevel, items, neutral, talents) {\r\n    if (!abilityInfo) {\r\n        return \"?\";\r\n    }\r\n\r\n    /// Use CastRange or find range inside AbilitySpecial\r\n    let baseCastRange = parseInt(abilityInfo.AbilityCastRange);\r\n    if (!baseCastRange) {\r\n        let foundRange = getAbilitySpecialCastRangeValue(abilityInfo, \"_range\", abilityLevel.level);\r\n        if (foundRange) {\r\n            baseCastRange = foundRange;\r\n        } else {\r\n            // Cant determine a cast range, none\r\n            return null;\r\n        }\r\n    }\r\n\r\n    let totalBonusRange = 0;\r\n\r\n    if (items && items.length > 0) {\r\n        for (let item of items) {\r\n            let rangeBonus = tryGetItemSpecialValue(item, \"cast_range_bonus\");\r\n            if (rangeBonus) {\r\n                totalBonusRange += rangeBonus;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let rangeBonus = tryGetNeutralSpecialValue(neutral, \"cast_range_bonus\");\r\n        if (rangeBonus) {\r\n            totalBonusRange += rangeBonus;\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for (let talent of talents) {\r\n            if (talent.includes(\"bonus_cast_range\")) {\r\n                let rangeBonus = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (rangeBonus) {\r\n                    totalBonusRange += rangeBonus;\r\n                }\r\n            }\r\n            else if (talent.includes(\"special_bonus_unique\")) {\r\n                if (isCastRangeTalent(talent)) {\r\n                    let linkedAbility = tryGetTalentSpecialAbilityValue(talent, \"ad_linked_ability\");\r\n                    if (linkedAbility === abilityName) {\r\n                        let value = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                        if (value) {\r\n                            totalBonusRange += value;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return baseCastRange + totalBonusRange;\r\n}\r\n\r\n/// Calculates the normal sell price of an item from it's ItemInfo\r\nexport function calculateItemSellCost (itemInfo) {\r\n    if (itemInfo && itemInfo.ItemCost) {\r\n        let cost = parseInt(itemInfo.ItemCost);\r\n        // value rounded down\r\n        return Math.floor(cost / 2);\r\n    }\r\n    return 0;\r\n}","import React, { Component } from 'react';\r\n\r\nimport {\r\n    calculateSpellDamage\r\n} from \"../../utility/calculate\";\r\nimport { \r\n    tryGetLocalizedString, \r\n    getTooltipAbilityString,\r\n} from \"../../utility/data-helpers/language\";\r\n\r\n/// Retrieves ability damage and returns display value\r\nfunction parseDamage(abilityName, abilInfo, abilLvl, items, neutral, talents) {\r\n    let abilityDamage = calculateSpellDamage(abilityName, abilInfo, abilLvl, items, neutral, talents);\r\n    if (abilityDamage && abilityDamage.damage) {\r\n        // force to be to two decimal places\r\n        let damage = abilityDamage.damage.toFixed(2);\r\n        if (abilityDamage.isPercent) {\r\n            damage += \"%\";\r\n        }\r\n        return damage;\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nfunction getAbilityNameFromStrings(strings, key) {\r\n    if (strings && key) {\r\n        return tryGetLocalizedString(strings, key);\r\n    } else {\r\n        return \"?\";\r\n    }\r\n}\r\n\r\nclass DamageOutput extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            ability: props.ability,\r\n            abilityInfo: props.abilityInfo,\r\n            levelInfo: props.levelInfo,\r\n\r\n            items: props.items,\r\n            neutral: props.neutral,\r\n            selectedTalents: props.selectedTalents,\r\n\r\n            abilityStrings: props.abilityStrings,\r\n            dotaStrings: props.dotaStrings,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(prevProps.abilityInfo !== this.props.abilityInfo) {\r\n            this.setState({ abilityInfo: this.props.abilityInfo });\r\n        }\r\n\r\n        if (prevProps.levelInfo !== this.props.levelInfo) {\r\n            this.setState({ levelInfo: this.props.levelInfo });\r\n        }\r\n\r\n        if (prevProps.items !== this.props.items) {\r\n            this.setState({ items: this.props.items });\r\n        }\r\n\r\n        if (prevProps.neutral !== this.props.neutral) {\r\n            this.setState({ neutral: this.props.neutral });\r\n        }\r\n\r\n        if (prevProps.selectedTalents !== this.props.selectedTalents) {\r\n            this.setState({ selectedTalents: this.props.selectedTalents });\r\n        }\r\n\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ abilityStrings: this.props.abilityStrings });\r\n        }\r\n        if (prevProps.dotaStrings !== this.props.dotaStrings) {\r\n            this.setState({ dotaStrings: this.props.dotaStrings });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let abilityDamage = parseDamage(this.state.ability, this.state.abilityInfo, this.state.levelInfo?.level, this.state.items, this.state.neutral, this.state.selectedTalents);\r\n        return (\r\n            <div className=\"w-100 h-100\">\r\n                <h5>{getTooltipAbilityString(this.state.abilityStrings, this.state.ability)}</h5>\r\n                {\r\n                    abilityDamage && \r\n                    <h6>\r\n                        { (getAbilityNameFromStrings(this.state.abilityStrings, \"dota_ability_variable_damage\") + \":\")}\r\n                        {' '}\r\n                        { abilityDamage }\r\n                    </h6>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DamageOutput;","import React, { Component } from 'react';\r\nimport {\r\n    calculateAbilityCooldown\r\n} from \"../../utility/calculate\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faClock, faCircle }from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nclass Cooldown extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            abilityLevel: props.abilityLevel,\r\n            abilityCooldown: props.cooldown,\r\n\r\n            ability: props.ability,\r\n            abilityInfo: props.abilityInfo,\r\n            items: props.items,\r\n            neutral: props.neutral,\r\n            selectedTalents: props.selectedTalents,\r\n\r\n            cooldown: null,\r\n            charges: null,\r\n        };\r\n\r\n        this.updateCooldown = this.updateCooldown.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateCooldown();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                abilityLevel: this.props.abilityLevel,\r\n                abilityCooldown: this.props.cooldown,\r\n\r\n                ability: this.props.ability,\r\n                items: this.props.items,\r\n                neutral: this.props.neutral,\r\n                selectedTalents: this.props.selectedTalents,\r\n            }, () => this.updateCooldown() );\r\n        }\r\n    }\r\n\r\n    updateCooldown() {\r\n        let currentCooldownInfo = calculateAbilityCooldown(this.state.ability, this.state.abilityInfo, this.state.abilityLevel, this.state.items, this.state.neutral, this.state.selectedTalents);\r\n        \r\n        this.setState({\r\n            cooldown: currentCooldownInfo?.cooldown,\r\n            charges: currentCooldownInfo?.charges,\r\n        });\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                {\r\n                    this.state.cooldown &&\r\n                        <div className=\"d-flex\" title=\"cooldown\">\r\n                            <FontAwesomeIcon className=\"my-auto mr-1\" icon={faClock} />\r\n                            <div>\r\n                                { this.state.cooldown }\r\n                            </div>\r\n                        </div>\r\n                }\r\n                {\r\n                    this.state.charges &&\r\n                        <div className=\"d-flex\" title=\"charges\">\r\n                            <FontAwesomeIcon className=\"my-auto mr-1\" icon={faCircle} />\r\n                            <div>\r\n                                { this.state.charges }\r\n                            </div>\r\n                        </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Cooldown;","import React, { Component } from 'react';\r\nimport { \r\n    calculateManaCost \r\n} from '../../utility/calculate';\r\n\r\nclass ManaCost extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            ability: props.ability,\r\n            abilityLevel: props.abilityLevel,\r\n\r\n            items: props.items,\r\n            neutral: props.neutral,\r\n            selectedTalents: props.selectedTalents,\r\n        };\r\n\r\n        this.updateMana = this.updateMana.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                ability: this.props.ability,\r\n                abilityLevel: this.props.abilityLevel,\r\n\r\n                items: this.props.items,\r\n                neutral: this.props.neutral,\r\n                selectedTalents: this.props.selectedTalents,\r\n            });\r\n        }\r\n    }\r\n\r\n    updateMana() {\r\n        let manaCost = -1;\r\n        if (this.state.ability) {\r\n            manaCost = calculateManaCost(this.state.ability, this.state.abilityLevel, this.state.items, this.state.neutral, this.state.selectedTalents);\r\n        }\r\n        \r\n        // this.setState({\r\n        //     abilityManaCost: manaCost,\r\n        // });\r\n        return manaCost;\r\n    }\r\n\r\n    render() {\r\n        let manaCost = this.updateMana();\r\n        return (\r\n            <div>\r\n                { \r\n                    manaCost &&\r\n                        <div className=\"mana-cost d-flex\" title=\"mana cost\">\r\n                            <div className=\"my-auto mr-1\" style={{ \r\n                                height: \"10px\",\r\n                                width: \"10px\",\r\n                                backgroundColor: \"rgb(69, 148, 207)\",\r\n                            }}/>\r\n                            <div>{ manaCost }</div>\r\n                        </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ManaCost;","import React, { Component } from 'react';\r\nimport { \r\n    getAbilityBehaviours,\r\n    getAbilitySpecialExtraValues\r\n\r\n} from \"../../utility/dataHelperAbilities\";\r\nimport { \r\n    getTooltipString,\r\n    getLocalizedString,\r\n    containsLocalizedString\r\n} from \"../../utility/data-helpers/language\";\r\nimport {\r\n    calculateAbilityCastRange\r\n} from \"../../utility/calculate\";\r\n\r\nfunction stringContainsHtml (str) {\r\n    return typeof(str) === \"string\" && str.includes(\"</font>\");\r\n}\r\n\r\n/// Displays a Type/Value props used inside Ability descriptions\r\nfunction TypeValueUI (props) {\r\n    /// Check if localized type value contains percent and remove\r\n    let isPercentage = false;\r\n    let typeStr = props.type;\r\n    let valueStr = props.value;\r\n    if (props.type.includes(\"%\")) {\r\n        typeStr = typeStr.replace(\"%\", \"\");\r\n        isPercentage = true;\r\n    }\r\n\r\n    return (\r\n        <div className=\"d-flex\" style={{ fontSize: \"0.85rem\"}}>\r\n            {/* Type Key */}\r\n            {\r\n                stringContainsHtml(typeStr) ?\r\n                <div dangerouslySetInnerHTML={{ __html: typeStr.replace(\"\\\\\", \"\") }}></div>\r\n                :\r\n                <div>{ typeStr }</div>\r\n            }\r\n            <div className=\"mx-1\" />\r\n            {/* Value */}\r\n            {\r\n                stringContainsHtml(valueStr) ?    \r\n                <div dangerouslySetInnerHTML={{ __html: valueStr.replace(\"\\\\\", \"\") }}></div>\r\n                :\r\n                <div>{ valueStr }</div>\r\n            }\r\n            {\r\n                // Give percent sign after value if isPercent\r\n                isPercentage && \"%\"\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nclass AbilityDetails extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            ability: props.ability,\r\n            abilityInfo: props.abilityInfo,\r\n            levelInfo: props.levelInfo,\r\n\r\n            items: props.items,\r\n            neutral: props.neutral,\r\n            selectedTalents: props.selectedTalents,\r\n\r\n            abilityBehaviours: null,\r\n            castRange: 0,\r\n\r\n            abilityStrings: props.abilityStrings,\r\n            dotaStrings: props.dotaStrings,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(prevProps.abilityInfo !== this.props.abilityInfo) {\r\n            this.setState({ \r\n                abilityInfo: this.props.abilityInfo,\r\n            });\r\n        }\r\n\r\n        if (prevProps.levelInfo !== this.props.levelInfo) {\r\n            this.setState({ \r\n                levelInfo: this.props.levelInfo \r\n            });\r\n        }\r\n\r\n        if (prevProps.items !== this.props.items) {\r\n            this.setState({ \r\n                items: this.props.items \r\n            });\r\n        }\r\n\r\n        if (prevProps.neutral !== this.props.neutral) {\r\n            this.setState({ \r\n                neutral: this.props.neutral \r\n            });\r\n        }\r\n\r\n        if (prevProps.selectedTalents !== this.props.selectedTalents) {\r\n            this.setState({ \r\n                selectedTalents: this.props.selectedTalents \r\n            });\r\n        }\r\n\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ \r\n                abilityStrings: this.props.abilityStrings \r\n            });\r\n        }\r\n        if (prevProps.dotaStrings !== this.props.dotaStrings) {\r\n            this.setState({ \r\n                dotaStrings: this.props.dotaStrings \r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let castRangeAmt = calculateAbilityCastRange(this.state.ability, this.state.abilityInfo, this.state.levelInfo, this.state.items, this.state.neutral, this.state.selectedTalents);\r\n        let valuesInformation = getAbilitySpecialExtraValues(this.state.ability, this.state.abilityInfo, this.state.levelInfo.level, this.state.items, this.state.selectedTalents);\r\n        let abilityBehaviours = getAbilityBehaviours(this.state.abilityInfo);\r\n        return (\r\n            <div className=\"mb-2\">\r\n                {\r\n                    abilityBehaviours && abilityBehaviours.map((value, index) => {\r\n                        return (\r\n                            <TypeValueUI \r\n                                key={index}\r\n                                type={ getLocalizedString(this.state.dotaStrings, value.key) } \r\n                                value={ typeof value.value === \"object\" ? value.value.map((val) => {\r\n                                        return getLocalizedString(this.state.dotaStrings, val)\r\n                                    }).join(', ') : getLocalizedString(this.state.dotaStrings, value.value) \r\n                                } />\r\n                        );\r\n                    })\r\n                }\r\n                <div className=\"py-1\" />\r\n                {\r\n                    castRangeAmt &&\r\n                        <TypeValueUI \r\n                            type={getLocalizedString(this.state.abilityStrings, \"dota_ability_variable_cast_range\").toUpperCase() + \":\"}\r\n                            value={castRangeAmt} />\r\n                }\r\n                <div className=\"py-1\" />\r\n                {\r\n                    valuesInformation && valuesInformation.map((value, index) => {\r\n                        if (containsLocalizedString(this.state.abilityStrings, value.key)) {\r\n                            return (\r\n                                <TypeValueUI \r\n                                    key={ `${value.key}-${index}` }\r\n                                    type={ getLocalizedString(this.state.abilityStrings, value.key) }\r\n                                    value={ value.value } />\r\n                            );   \r\n                        }\r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AbilityDetails;","import React, { Component } from 'react';\r\nimport {\r\n    Row, \r\n    Col,\r\n    Button\r\n} from \"react-bootstrap\";\r\n\r\nimport { DOTAAbilities } from \"../../data/dota2/json/npc_abilities.json\";\r\n\r\nimport {\r\n    itemsContainsScepter\r\n} from \"../../utility/dataHelperItems\";\r\n\r\nimport DamageOutput from \"./DamageOutput\";\r\nimport Cooldown from \"./Cooldown\";\r\nimport ManaCost from \"./ManaCost\";\r\nimport AbilityDetails from \"./AbilityDetails\";\r\nimport \"./Abilities.css\";\r\n\r\n/// Returns array of html elements to represent the levels of the ability\r\nfunction getAbilityLevelHtml (levelInfo, abilityIndex, abilityInfo, onLevelChanged) {\r\n    if (levelInfo && abilityInfo)\r\n    {\r\n        /// Determine max level of ability\r\n        let maxLvl = abilityInfo.AbilityType === \"DOTA_ABILITY_TYPE_ULTIMATE\" ? 3 : 4;\r\n        if (abilityInfo.MaxLevel)\r\n            maxLvl = parseInt(abilityInfo.MaxLevel);\r\n        \r\n        let html = [];\r\n        for(let i = 0; i < maxLvl; i++) {\r\n            html.push(\r\n                <Button \r\n                    key={i} \r\n                    variant=\"outline-secondary\"\r\n                    className=\"p-1\"\r\n                    onClick={(e) => onLevelChanged(e)}\r\n                    data-lvlindex={abilityIndex}\r\n                    data-btnindex={i}>\r\n                    <div className={ i < levelInfo.level ? \"levelled\" : \"unlevelled\"}></div>\r\n                </Button>\r\n            );\r\n        }\r\n        return html;\r\n    }\r\n    else\r\n    {\r\n        return <div>?</div>\r\n    }\r\n}\r\n\r\nfunction getLevelInfo (abilities) {\r\n    if (abilities) {\r\n        return abilities.map((abil, index) => {\r\n            return { ability: index, level: 1 };\r\n        });\r\n    }\r\n    return null;\r\n}\r\n\r\n/// Max amount of abilities to show in one row\r\nconst ABILITY_ROW_MAX = 6;\r\n\r\nclass Abilities extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            heroName: props.heroName,\r\n            items: props.items,\r\n            neutral: props.neutral,\r\n            selectedTalents: props.selectedTalents,\r\n            displayDamage: props.displayDamage,\r\n\r\n            abilityStrings: props.abilityStrings,\r\n            dotaStrings: props.dotaStrings,\r\n\r\n            abilities: props.abilities,\r\n            abilityLevels: props.abilityLevels,\r\n\r\n            onAbilityLevelChanged: props.onAbilityLevelChanged,\r\n        };\r\n\r\n        this.onLevelChanged = this.onLevelChanged.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.heroName !== this.props.heroName) {\r\n            this.setState({ heroName: this.props.heroName });\r\n        }\r\n\r\n        if (prevProps.abilities !== this.props.abilities) {\r\n            this.setState({ abilities: this.props.abilities });\r\n        }\r\n        if (prevProps.abilityLevels !== this.props.abilityLevels) {\r\n            this.setState({ abilityLevels: this.props.abilityLevels });\r\n        }\r\n\r\n        if (prevProps.items !== this.props.items) {\r\n            this.setState({ items: this.props.items });\r\n        }\r\n        if (prevProps.neutral !== this.props.neutral) {\r\n            this.setState({ neutral: this.props.neutral });\r\n        }\r\n        if (prevProps.selectedTalents !== this.props.selectedTalents) {\r\n            this.setState({ selectedTalents: this.props.selectedTalents });\r\n        }\r\n\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ abilityStrings: this.props.abilityStrings });\r\n        }\r\n        if (prevProps.dotaStrings !== this.props.dotaStrings) {\r\n            this.setState({ dotaStrings: this.props.dotaStrings });\r\n        }\r\n    }\r\n\r\n    onLevelChanged(e) {\r\n        // If click on inner element\r\n        if (e.target.tagName.toLowerCase() !== \"button\") {\r\n            e.target = e.target.parentElement;\r\n        }\r\n\r\n        let abilityIndex = parseInt(e.target.dataset.lvlindex);\r\n        let abilities = this.state.abilityLevels;\r\n        let targetLevel = parseInt(e.target.dataset.btnindex) + 1;\r\n        // Clicked same level, set to 0\r\n        if (abilities[abilityIndex].level === targetLevel) {\r\n            targetLevel = 0;\r\n        }\r\n\r\n        this.state.onAbilityLevelChanged({\r\n            ability: abilityIndex,\r\n            level: targetLevel\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Row \r\n                md={this.state.abilities?.length > ABILITY_ROW_MAX ? ABILITY_ROW_MAX : 0}>\r\n                {\r\n                    this.state.abilities && this.state.abilityLevels && this.state.abilities.map((value, index) => {\r\n                        // Info about the ability\r\n                        let ability = DOTAAbilities[value];\r\n                        if (!ability) {\r\n                            console.log(`Unable to find info on ability '${value}'`);\r\n                        }\r\n                        // Current level of the ability\r\n                        let levelInfo = this.state.abilityLevels.find(abilVal => abilVal.ability === index);\r\n                        if (!ability && value) {\r\n                            return <div key={value}>?</div>\r\n                        }\r\n\r\n                        // Dont add any scepter abilities unless hero has scepter\r\n                        if (ability && ability.IsGrantedByScepter && !itemsContainsScepter(this.state.items)) {\r\n                            return;\r\n                        }\r\n                        return (\r\n                            <Col key={ability.ID} className=\"d-flex flex-column justify-content-top\">\r\n                                <img\r\n                                    className=\"h-100 align-self-center\"\r\n                                    style={{ maxWidth: \"90px\", maxHeight: \"90px\" }}\r\n                                    src={`http://cdn.dota2.com/apps/dota2/images/abilities/${value}_hp1.png`} \r\n                                    alt={ `${ability.ID}-${value}` } />\r\n                                <Row className=\"px-4\">\r\n                                    <Col md={6}>\r\n                                        {/* Cooldown */}\r\n                                        <Cooldown \r\n                                            ability={value} \r\n                                            abilityInfo={ability}\r\n                                            abilityLevel={levelInfo.level} \r\n                                            cooldown={ability.AbilityCooldown}\r\n                                            items={this.state.items}\r\n                                            neutral={this.state.neutral}\r\n                                            selectedTalents={this.state.selectedTalents} />\r\n                                    </Col>\r\n                                    <Col md={6}>\r\n                                        {/* Mana Cost */}\r\n                                        <ManaCost \r\n                                            ability={ability}\r\n                                            abilityLevel={levelInfo.level} \r\n                                            items={this.state.items}\r\n                                            neutral={this.state.neutral}\r\n                                            selectedTalents={this.state.selectedTalents} />\r\n                                    </Col>\r\n                                </Row>\r\n                                <div className=\"align-self-center pt-2 d-flex\">\r\n                                    {\r\n                                        this.state.abilityLevels && !ability.IsGrantedByScepter && \r\n                                            getAbilityLevelHtml(levelInfo, index, ability, this.onLevelChanged)\r\n                                    }\r\n                                </div>\r\n                                <div className=\"py-1\">\r\n                                    {\r\n                                        this.state.displayDamage && \r\n                                            <DamageOutput \r\n                                                ability={value}\r\n                                                abilityInfo={ability} \r\n                                                levelInfo={levelInfo}\r\n                                                items={this.state.items}\r\n                                                neutral={this.state.neutral} \r\n                                                selectedTalents={this.state.selectedTalents} \r\n                                                abilityStrings={this.state.abilityStrings} \r\n                                                dotaStrings={this.state.dotaStrings} />\r\n                                    }\r\n                                </div>\r\n                                <div className=\"py-1\">\r\n                                    <AbilityDetails \r\n                                        ability={value}\r\n                                        abilityInfo={ability} \r\n                                        levelInfo={levelInfo}\r\n                                        items={this.state.items}\r\n                                        neutral={this.state.neutral} \r\n                                        selectedTalents={this.state.selectedTalents}\r\n                                        abilityStrings={this.state.abilityStrings} \r\n                                        dotaStrings={this.state.dotaStrings} />\r\n                                </div>\r\n                            </Col>\r\n                        );\r\n                    })\r\n                }\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Abilities;","import Abilities from \"./Abilities\";\r\n\r\nexport default Abilities;","import React from \"react\";\r\n\r\nexport function filterItemName (name) {\r\n    if (name) {\r\n        let item = name.split('_');\r\n        item.shift();\r\n        item = item.join('_');\r\n        return item;\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\n/// Gets an item icon from it's name. For exmaple \"item_mango_tree\"\r\nexport function getItemIcon (itemName, width, height, scale) {\r\n    // Remove 'item_' prefix, split by _, remove \"item\" and join again\r\n    let item = filterItemName(itemName);\r\n\r\n    // Width and height of each item in item_stylesheet\r\n    if (item) {\r\n        return <span \r\n                    className={ 'sprite sprite-' + item + '_png '} \r\n                    alt={item} \r\n                    data-item={itemName} \r\n                    style={{ transform: `scale(${scale}, ${scale})`, transformOrigin: \"top left\" }} />\r\n    } else {\r\n        return <span \r\n                style={{ backgroundColor: \"#212121\", width: width, height: height, transform: `scale(${scale}, ${scale})`, display: \"block\", transformOrigin: \"top left\" }} />\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport {\r\n    Tabs,\r\n    Tab,\r\n    Button,\r\n    Form,\r\n    ListGroup\r\n} from \"react-bootstrap\";\r\nimport { getLocalizedString } from '../../utility/data-helpers/language';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faMinus } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport {\r\n    getItemIcon\r\n} from \"../../utility/spriteHelper\";\r\n\r\nimport \"../../css/dota_items.css\";\r\nimport { \r\n    itemAliasIncludes, \r\n    getAllItems \r\n} from '../../utility/dataHelperItems';\r\n\r\nfunction getItemsByQuality(itemsArray, matchArray) {\r\n    return itemsArray.filter((itemInfo) => {\r\n        let quality = itemInfo.item.ItemQuality;\r\n        if (quality) { //(quality === \"consumable\" || quality === \"component\" || quality === \"secret_shop\")) {\r\n            for(let i = 0; i < matchArray.length; i++) {\r\n                if (quality === matchArray[i]) {\r\n                    return itemInfo;\r\n                }\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction ItemIcon(props) {\r\n    return (\r\n            <div \r\n                key={props.keyName} \r\n                title={props.itemName} \r\n                onClick={props.onClick}\r\n                data-item={props.itemName}\r\n                className=\"m-1\" \r\n                style={{ width: `calc(88px * ${props.scale})`, height: `calc(64px * ${props.scale})` }}>\r\n                { \r\n                    getItemIcon(props.itemName, \"88px\", \"64px\", props.scale) \r\n                }\r\n            </div>\r\n    );\r\n}\r\n\r\nfunction TabHeading(props) {\r\n    return (\r\n        <h6 className=\"px-3 mb-0\">{props.text}</h6>\r\n    );\r\n}\r\n\r\nclass ItemSelector extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // Get all selectable items in dota\r\n        let allItems = getAllItems();\r\n        // Split into basic and upgrade items to sort into tabs\r\n        let basicItems = getItemsByQuality(allItems, [\"consumable\", \"component\", \"secret_shop\"]);\r\n        let upgradesItems = getItemsByQuality(allItems, [\"common\", \"rare\", \"epic\", \"artifact\"]);\r\n\r\n        this.state = {\r\n            allItems: allItems,\r\n            queryItems: null,\r\n\r\n            onSelectedItem: props.onSelectedItem,\r\n            dotaStrings: props.dotaStrings,\r\n            abilityStrings: props.abilityStrings,\r\n\r\n            basicItems: basicItems,\r\n            upgradesItems: upgradesItems,\r\n        };\r\n\r\n        this.onSearchChanged = this.onSearchChanged.bind(this);\r\n        this.onSearchItemSelected = this.onSearchItemSelected.bind(this);\r\n        this.onShopItemSelected = this.onShopItemSelected.bind(this);\r\n        this.onRemoveItemSelected = this.onRemoveItemSelected.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(prevProps !== this.props) {\r\n            this.setState({\r\n                dotaStrings: this.props.dotaStrings,\r\n                abilityStrings: this.props.abilityStrings,\r\n                onSelectedItem: this.props.onSelectedItem,\r\n            });\r\n        }\r\n    }\r\n\r\n    onSearchChanged(e) {\r\n        let query = e.target.value;\r\n        let filteredItems = null;\r\n        if (query) {\r\n            filteredItems = this.state.allItems.filter((item) => {\r\n                // Check query for match in localized string, should work most of the time\r\n                let localizedName = getLocalizedString(this.state.abilityStrings, `DOTA_Tooltip_Ability_${item.name}`)?.toLowerCase();\r\n                if (localizedName && localizedName.indexOf(query.toLowerCase()) !== -1) {\r\n                    return true;\r\n                }\r\n\r\n                // Match query with any item aliases (only works for english)\r\n                let aliasMatch = itemAliasIncludes(item.item.ItemAliases, query);\r\n                if (aliasMatch) {\r\n                    return true;\r\n                }\r\n            });\r\n        }\r\n\r\n        this.setState({\r\n            queryItems: filteredItems,\r\n        });\r\n    }\r\n\r\n    onSearchItemSelected(e) {\r\n        let val = e.target.dataset?.item;\r\n        this.state.onSelectedItem(val);\r\n    }\r\n\r\n    onShopItemSelected (e) {\r\n        let item = e.target.dataset?.item;\r\n        this.state.onSelectedItem(item);\r\n    }\r\n\r\n    onRemoveItemSelected(e) {\r\n        let item = null;\r\n        this.state.onSelectedItem(item);\r\n    }\r\n\r\n    render() {\r\n        let scale = 0.5;\r\n        let searchIconScale = 0.45;\r\n        return (\r\n            <div className=\"item-card\">\r\n                <div className=\"item-card header d-flex p-2\">\r\n                    <div>\r\n                        <Form.Control \r\n                            className=\"foresight-input-control\"\r\n                            type=\"text\" \r\n                            placeholder=\"Search...\" \r\n                            onChange={this.onSearchChanged}/>\r\n                    </div>\r\n                    <div className=\"ml-auto\">\r\n                        <Button variant=\"outline-danger\" onClick={this.onRemoveItemSelected}>\r\n                            <FontAwesomeIcon icon={faMinus} />\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"item-card content\">\r\n                    <div className=\"p-1\">\r\n                        {\r\n                            this.state.queryItems && \r\n                            <div style={{ color: \"white\" }}>\r\n                                <h5 >\r\n                                    { getLocalizedString(this.state.dotaStrings, \"DOTA_Shop_Search_Results_Title\") }\r\n                                </h5>\r\n                                <ListGroup className=\"foresight-list-group\">\r\n                                    {\r\n                                        // Query search term\r\n                                        this.state.queryItems.map((item) => {\r\n                                            // Add L char at end of dagons to show their level\r\n                                            let itmName = item.name;\r\n                                            if (item.name.includes(\"item_dagon_\")) {\r\n                                                itmName += \"L\";\r\n                                            }\r\n                                            \r\n                                            let localizedName = getLocalizedString(this.state.abilityStrings, `DOTA_Tooltip_Ability_${itmName}`);\r\n                                            return (\r\n                                                <ListGroup.Item \r\n                                                    key={item.name} \r\n                                                    data-item={item.name} \r\n                                                    onClick={this.onSearchItemSelected} \r\n                                                    action>\r\n                                                    <div className=\"d-flex\" data-item={item.name}>\r\n                                                        <ItemIcon \r\n                                                            itemName={item.name}\r\n                                                            onClick={this.onSearchItemSelected} \r\n                                                            scale={searchIconScale}/>\r\n\r\n                                                        <h6 className=\"mx-1 my-auto\" data-item={item.name}>\r\n                                                            { localizedName ?? itmName }\r\n                                                        </h6>\r\n                                                    </div>\r\n                                                </ListGroup.Item>\r\n                                            )\r\n                                        })\r\n                                    }   \r\n                                </ListGroup>\r\n                                {\r\n                                    this.state.queryItems && this.state.queryItems.length <= 0 &&\r\n                                        <h6>\r\n                                            { getLocalizedString(this.state.dotaStrings, \"DOTA_Shop_Search_No_Results\") }\r\n                                        </h6>\r\n                                }\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                    {/* Regular view */}\r\n                    {\r\n                        !this.state.queryItems && \r\n                            <div>\r\n                                <Tabs\r\n                                    className=\"foresight-tabs\"\r\n                                    defaultActiveKey=\"basic\" \r\n                                    transition={false} \r\n                                    id=\"shop-tabs\">\r\n                                    <Tab \r\n                                        eventKey=\"basic\" \r\n                                        title={<TabHeading text={getLocalizedString(this.state.dotaStrings, \"DOTA_Shop_Category_Basics\")} />} >\r\n                                        <div className=\"d-flex flex-wrap\">\r\n                                            {\r\n                                                this.state.basicItems && this.state.basicItems.map((item) => {\r\n                                                    return (\r\n                                                        <ItemIcon \r\n                                                            key={item.item.ID}\r\n                                                            itemName={item.name}\r\n                                                            onClick={this.onShopItemSelected} \r\n                                                            scale={scale} />\r\n                                                    )\r\n                                                })\r\n                                            }\r\n                                        </div>\r\n                                    </Tab>\r\n                                    <Tab \r\n                                        eventKey=\"upgrades\" \r\n                                        title={<TabHeading text={getLocalizedString(this.state.dotaStrings, \"DOTA_Shop_Category_Upgrades\")} />} >\r\n                                        <div className=\"d-flex flex-wrap\">\r\n                                            {\r\n                                                this.state.upgradesItems && this.state.upgradesItems.map((item) => {\r\n                                                    return (\r\n                                                        <ItemIcon \r\n                                                            key={item.item.ID}\r\n                                                            itemName={item.name}\r\n                                                            onClick={this.onShopItemSelected} \r\n                                                            scale={scale} />\r\n                                                    );\r\n                                                })\r\n                                            }\r\n                                        </div>\r\n                                    </Tab>\r\n                                </Tabs>\r\n                            </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ItemSelector;","/// All Disassemble rules of an item\r\nexport const EDisassembleRule = {\r\n    ALWAYS: \"DOTA_ITEM_DISASSEMBLE_ALWAYS\",\r\n    NEVER: \"DOTA_ITEM_DISASSEMBLE_NEVER\",\r\n};\r\n\r\n/// All ItemQuality properties on ItemInfo's\r\nexport const EItemQuality = {\r\n    SECRET_SHOP: \"secret_shop\",\r\n    COMPONENT: \"component\",\r\n};","import React, { Component } from 'react';\r\n\r\nimport {\r\n    getItemInfoFromName, \r\n    convertItemDescToHtml,\r\n    getItemStatistics,\r\n    isDissassembleRule,\r\n    getFuzzyTooltipAbilityString\r\n} from \"../../utility/dataHelperItems\";\r\nimport { \r\n    getLocalizedString\r\n} from '../../utility/data-helpers/language';\r\nimport { calculateItemSellCost } from \"../../utility/calculate\";\r\nimport {\r\n    EDisassembleRule, EItemQuality\r\n} from \"../../enums/items\";\r\n\r\nimport \"./ItemTooltip.css\";\r\nimport { getItemIcon } from '../../utility/spriteHelper';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faHome, faCampground } from '@fortawesome/free-solid-svg-icons';\r\n\r\nfunction replaceItemStatLocalizeString (localizeString, value) {\r\n    // If generic one tha contains $value, split and insert value\r\n    if(localizeString.includes(\"$\")) {\r\n        let split = localizeString.split('$');\r\n        split.splice(1, 0, value);\r\n        return split.join(\" \");\r\n    } \r\n    // If contains %, arrange it correctly\r\n    else if (localizeString.includes(\"%\")) {\r\n        return localizeString.replace(\"%+\", `+ ${value}% `);\r\n    }\r\n    /// If negative value\r\n    else if (localizeString.includes(\"-\")) {\r\n        return localizeString.replace(\"-\", `- ${Math.abs(value)} `);\r\n    }\r\n    /// If fallen this far and contains a + value, just split and give the value\r\n    else if (localizeString.includes(\"+\")) {\r\n        return localizeString.replace(\"+\", `+ ${Math.abs(value)} `);\r\n    }\r\n    return localizeString;\r\n}\r\n\r\nclass ItemTooltip extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            itemName: props.itemName,\r\n            dotaStrings: props.dotaStrings,\r\n            abilityStrings: props.abilityStrings,\r\n\r\n            itemInfo: getItemInfoFromName(props.itemName),  \r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                itemName: this.props.itemName,\r\n                dotaStrings: this.props.dotaStrings,\r\n                abilityStrings: this.props.abilityStrings,\r\n                itemInfo: getItemInfoFromName(this.props.itemName),  \r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let scale = 0.7;\r\n        let width = \"88px\";\r\n        let height = \"64px\";\r\n        let goldIconSize = 20;\r\n\r\n        let itemStats = getItemStatistics(this.state.itemInfo);\r\n        let loreString = getFuzzyTooltipAbilityString(this.state.abilityStrings, `${this.state.itemName}_Lore`);\r\n        /// Get localized string and filter it to correct html\r\n        let descString = getFuzzyTooltipAbilityString(this.state.abilityStrings, `${this.state.itemName}_Description`);\r\n        let descFiltered = convertItemDescToHtml(descString, this.state.itemName, this.state.itemInfo);\r\n        return (\r\n            <div className=\"item-tooltip\">\r\n                <div className=\"d-flex p-1\">\r\n                    <div className=\"m-2\" style={{ width: `calc(${width} * ${scale})`, height: `calc(${height} * ${scale})` }}>\r\n                        {  \r\n                            getItemIcon(this.state.itemName, width, height, 0.7) \r\n                        }\r\n                    </div>\r\n                    <div>\r\n                        <h4>\r\n                            { getFuzzyTooltipAbilityString(this.state.abilityStrings, `${this.state.itemName}`) }\r\n                        </h4>\r\n                        {\r\n                            //If has an item cost and is more than 0\r\n                            this.state.itemInfo?.ItemCost && this.state.itemInfo?.ItemCost > 0 &&\r\n                            <div className=\"d-flex\">\r\n                                {\r\n                                    this.state.itemInfo?.ItemQuality &&\r\n                                        <FontAwesomeIcon icon={this.state.itemInfo?.ItemQuality == EItemQuality.SECRET_SHOP ? faCampground : faHome } className=\"align-item-center\" />\r\n                                }\r\n                                <img \r\n                                    className=\"mx-1\"\r\n                                    src={process.env.PUBLIC_URL + \"/images/dota2/gold_icon_ui.png\"} \r\n                                    height={goldIconSize}\r\n                                    width={goldIconSize} />\r\n                                <h6 className=\"gold-amount\">\r\n                                    { parseInt(this.state.itemInfo?.ItemCost) }\r\n                                </h6>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <div className=\"item-content p-2\">\r\n                    {/* item stat info */}\r\n                    {\r\n                        itemStats &&\r\n                            <div className=\"pb-1\">\r\n                                { \r\n                                    itemStats.map((value) => {\r\n                                        /// attempt to get localized string and display\r\n                                        let string = getFuzzyTooltipAbilityString(this.state.abilityStrings, `${this.state.itemName}_${value.key}`);\r\n                                        \r\n                                        if (string) {\r\n                                            /// Check if item stat is a generic one that can be applied to most items and replace variable with localized string\r\n                                            let genericKeys = [\r\n                                                \"health\", \"mana\", \"armor\", \"damage\", \"str\", \"int\", \"agi\", \"all\", \"attack\", \"hp_regen\",\r\n                                                \"mana_regen\", \"spell_amp\", \"move_speed\", \"evasion\", \"spell_resist\", \"selected_attrib\",\r\n                                                \"attack_range\", \"attack_range_melee\", \"cast_range\", \"status_resist\"\r\n                                            ];\r\n                                            // split and use variable to compare\r\n                                            let splitCompare = string.split(\"$\")[1];\r\n                                            for (let key of genericKeys) {\r\n                                                if (splitCompare === key) {\r\n                                                    /// get localized generic and replace variable in existing string\r\n                                                    let localized = getLocalizedString(this.state.abilityStrings, `dota_ability_variable_${key}`);\r\n                                                    string = string.replace(key.toString(), localized);\r\n                                                    break;\r\n                                                }\r\n                                            }\r\n                                            \r\n                                            return (\r\n                                                <div key={value.key} dangerouslySetInnerHTML={{ __html: replaceItemStatLocalizeString(string, value.value) }}>\r\n                                                </div>\r\n                                            );\r\n                                        }\r\n                                    })\r\n                                }\r\n                            </div>\r\n                    }\r\n\r\n                    {/* abilities */}\r\n                    {\r\n                        descString && descString != \"?\" &&\r\n                            <div className=\"p-1\">\r\n                                { descFiltered }\r\n                            </div>\r\n                    }\r\n\r\n                    {/* lore */}\r\n                    {\r\n                        loreString && loreString != \"?\" &&   \r\n                            <div className=\"p-1 m-1 lore\">\r\n                                { loreString }\r\n                            </div>\r\n                    }\r\n\r\n                    {/* sell price */}\r\n                    {\r\n                        this.state.itemInfo?.ItemCost && !this.state.itemInfo?.ItemIsNeutralDrop &&\r\n                            <div className=\"px-1\"> \r\n                                {\r\n                                    getLocalizedString(this.state.dotaStrings, \"DOTA_Item_Tooltip_Sell_Price\")\r\n                                    .replace(\"%s1\", calculateItemSellCost(this.state.itemInfo))\r\n                                }\r\n                            </div>\r\n                    }\r\n\r\n                    {/* dissassemble */}\r\n                    {\r\n                        isDissassembleRule(this.state.itemInfo, EDisassembleRule.ALWAYS) && \r\n                            <div className=\"px-1\">\r\n                                { getLocalizedString(this.state.dotaStrings, \"DOTA_Item_Tooltip_Disassemble\") }\r\n                            </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ItemTooltip;","import ItemTooltip from \"./ItemTooltip\";\r\n\r\nexport default ItemTooltip;","import React, { Component } from 'react';\r\nimport Popup from 'reactjs-popup';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { \r\n    faInfo, \r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport {\r\n    Form\r\n} from \"react-bootstrap\";\r\n\r\nimport { getItemIcon } from \"../../utility/spriteHelper\"\r\nimport { \r\n    getItemInfoFromName,\r\n    itemRequiresCharges\r\n} from '../../utility/dataHelperItems';\r\n\r\nimport ItemSelector from \"./ItemSelector\";\r\nimport ItemTooltip from '../ItemTooltip';\r\nimport \"../../css/dota_hero_icons_big.css\";\r\n\r\n/// Single item that contains a popup to change the item\r\nclass Item extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            item: props.item,\r\n            slot: props.slot, \r\n            isBackpack: props.isBackpack,\r\n\r\n            onItemChanged: props.onItemChanged,\r\n            onItemExtraChanged: props.onItemExtraChanged,\r\n\r\n            dotaStrings: props.dotaStrings,\r\n            abilityStrings: props.abilityStrings,\r\n\r\n            itemExtra: { },\r\n\r\n            itemSelectorDisabled: false,\r\n        };\r\n\r\n        //console.log(`slot: ${this.state.slot} - item: ${this.state.item}`);\r\n        this.onSelectedItem = this.onSelectedItem.bind(this);\r\n        this.onBloodstoneChargesChanged = this.onBloodstoneChargesChanged.bind(this);\r\n        this.setCharges = this.setCharges.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.state.item === \"item_bloodstone\") {\r\n            /// Set inital charges of bloodstone\r\n            let itemInfo = getItemInfoFromName(this.state.item);\r\n            this.setState({\r\n                itemExtra: {\r\n                    ...this.state.itemExtra,\r\n                    charges: itemInfo?.ItemInitialCharges ?? 0,\r\n                },\r\n            }, () => {\r\n                /// Update state to new init value\r\n                this.setCharges(this.state.itemExtra.charges);\r\n            });\r\n        }\r\n    }\r\n\r\n    onSelectedItem (item) {\r\n        // Close item selector popup by disabling\r\n        this.setState({\r\n            itemSelectorDisabled: true,\r\n        });\r\n        \r\n        // Trigger onItemChanged event\r\n        this.state.onItemChanged({ \r\n            slot: this.state.slot, \r\n            item: item,\r\n            extra: this.state.itemExtra,\r\n            isBackpack: this.state.isBackpack ? true : false,\r\n        });\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.item !== this.props.item) {\r\n            this.setState({ item: this.props.item, });\r\n        }\r\n\r\n        if (prevProps.slot !== this.props.slot) {\r\n            this.setState({ slot: this.props.slot });\r\n        }\r\n\r\n        if (prevProps.isBackpack !== this.props.isBackpack) {\r\n            this.setState({ isBackpack: this.props.isBackpack });\r\n        }\r\n\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ abilityStrings: this.props.abilityStrings });\r\n        }\r\n\r\n        if (prevProps.dotaStrings !== this.props.dotaStrings) {\r\n            this.setState({ dotaStrings: this.props.dotaStrings });\r\n        }\r\n    }\r\n\r\n    onBloodstoneChargesChanged (e) {\r\n        let newVal = parseInt(e.target.value);\r\n        this.setCharges(newVal);\r\n    }\r\n\r\n    setCharges(newChargeAmt) {\r\n        // If null or not exist, set to 0\r\n        if (!newChargeAmt) {\r\n            newChargeAmt = 0;\r\n        }\r\n\r\n        // Value must be more than 0 and less than 999\r\n        if (newChargeAmt < 0) {\r\n            newChargeAmt = 0;\r\n        } else if (newChargeAmt > 999) {\r\n            newChargeAmt = 999;\r\n        }\r\n        \r\n        this.setState({\r\n            itemExtra: {\r\n                ...this.state.itemExtra,\r\n                charges: newChargeAmt,\r\n            },\r\n        }, () => {\r\n            this.state.onItemChanged({\r\n                slot: this.state.slot, \r\n                item: this.state.item,\r\n                extra: this.state.itemExtra,\r\n                isBackpack: this.state.isBackpack ? true : false,\r\n            });\r\n        });\r\n    }\r\n\r\n    render() {\r\n        // If last render was disabled, enable again\r\n        if (this.state.itemSelectorDisabled) {\r\n            this.setState({ itemSelectorDisabled: false });\r\n        }\r\n\r\n        let scale = 0.7;\r\n        let width = \"88px\";\r\n        let height = \"64px\";\r\n        return (\r\n            // Relative to make positioning work on children\r\n            <div style={{ position:\"relative\" }}>\r\n                {\r\n                    // Hover popup for Item information tooltip\r\n                    this.state.item &&\r\n                        <Popup\r\n                            trigger={isOpen => (\r\n                                // Info icon on item to display tooltip\r\n                                <div\r\n                                    className=\"ml-2 mt-1\" \r\n                                    style={{ position:\"absolute\", zIndex: 1 }}>\r\n                                    <FontAwesomeIcon icon={faInfo} />\r\n                                </div>\r\n                            )}\r\n                            position=\"right center\"\r\n                            on=\"hover\"\r\n                            className=\"foresight-tooltip\"\r\n                            contentStyle={{ width: \"350px\" }}>\r\n                                <ItemTooltip\r\n                                    itemName={this.state.item}\r\n                                    dotaStrings={this.state.dotaStrings}\r\n                                    abilityStrings={this.state.abilityStrings}\r\n                                    />\r\n                        </Popup>\r\n                }\r\n                {/* Item selector popup to allow for changing to new item */}\r\n                <Popup\r\n                    trigger={isOpen => (\r\n                        // Item icon\r\n                        <div className=\"m-1\">\r\n                            <div style={{ width: `calc(${width} * ${scale})`, height: `calc(${height} * ${scale})` }}>\r\n                                {  getItemIcon(this.state.item, width, height, 0.7) }\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                    closeOnDocumentClick \r\n                    disabled={this.state.itemSelectorDisabled}\r\n                    position=\"right center\"\r\n                    on=\"click\"\r\n                    className=\"foresight-tooltip\"\r\n                    contentStyle={{ \r\n                        width: \"350px\", \r\n                        height: \"450px\",\r\n                    }}>\r\n                        <ItemSelector \r\n                            onSelectedItem={this.onSelectedItem}\r\n                            dotaStrings={this.state.dotaStrings}\r\n                            abilityStrings={this.state.abilityStrings} />\r\n                </Popup>\r\n                {\r\n                    // Charge counter UI for bloodstone or charge based items\r\n                    (this.state.item === \"item_bloodstone\" || itemRequiresCharges(this.state.item)) &&\r\n                    <div style={{ \r\n                        position: \"absolute\", \r\n                        zIndex: 1, \r\n                        width: `calc(${width} * ${scale})`, \r\n                        height: `calc(${height} * ${scale})`,\r\n                        top: `calc(${height} * ${scale} - 17px)`,\r\n                        left: `calc(${width} * ${scale} - 27px)`, \r\n                    }}>\r\n                        <Form.Control \r\n                            size=\"sm\" \r\n                            value={ this.state.itemExtra?.charges ?? 0 } \r\n                            onChange={this.onBloodstoneChargesChanged} \r\n                            style={{ \r\n                                width: \"30px\",\r\n                                height: \"20px\",\r\n                                padding: 0,\r\n                                textAlign: \"center\",\r\n                                background: \"rgba(0, 0, 0, 0.5)\",\r\n                                border: 0,\r\n                                color: \"white\"\r\n                            }} />\r\n                    </div>\r\n                }\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default Item;","import React, { Component } from 'react';\r\nimport {\r\n    Button,\r\n    Form,\r\n    ListGroup\r\n} from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faMinus } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport {\r\n    getAllNeutrals, getItemInfoFromName, getNeutralTierLayout, itemAliasIncludes,\r\n} from \"../../utility/dataHelperItems\";\r\n\r\nimport { getItemIcon } from '../../utility/spriteHelper';\r\nimport { \r\n    getLocalizedString, \r\n    replaceStringValue,\r\n} from '../../utility/data-helpers/language';\r\n\r\nfunction ItemIcon(props) {\r\n    let searchIconScale = 0.45;\r\n    return (\r\n        <div \r\n            key={props.keyName} \r\n            title={props.itemName} \r\n            onClick={props.onClick}\r\n            data-item={props.itemName}\r\n            className=\"m-1\" \r\n            style={{ width: `calc(88px * ${searchIconScale})`, height: `calc(64px * ${searchIconScale})` }}>\r\n            { \r\n                getItemIcon(props.itemName, \"88px\", \"64px\", searchIconScale) \r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\n/// HTML for one level of tiered neutral items\r\nfunction NeutralTier (props) {\r\n    return (\r\n        <div>\r\n            <div className=\"d-flex\" style={{ color:\"white\" }}>\r\n                <h6>\r\n                    { replaceStringValue( getLocalizedString(props.dotaStrings, \"DOTA_Shop_NeutralTier\"), props.tier) } \r\n                </h6>\r\n                <h6 className=\"ml-auto text-muted\">\r\n                    { props.time + \"+\" }\r\n                </h6>\r\n            </div>\r\n            <div className=\"d-flex flex-wrap\">\r\n                {\r\n                    props.neutrals && Object.keys(props.neutrals).map((neutralKey, index) => {\r\n                        // Replace any recipes with actual item\r\n                        let neutral = neutralKey;\r\n                        if (neutral.includes(\"_recipe\")) {\r\n                            neutral = neutral.replace(\"_recipe\", \"\");\r\n                        }\r\n\r\n                        let localizedName = getLocalizedString(props.abilityStrings, `DOTA_Tooltip_Ability_${neutral}`);\r\n                        return (\r\n                            <div \r\n                                className=\"m-1\" \r\n                                key={ `${neutral}-${index}` } \r\n                                title={ localizedName }\r\n                                onClick={ props.onNeutralSelected }\r\n                                data-neutral={ neutral }\r\n                                style={{ width: `calc(88px * ${props.iconScale})`, height: `calc(64px * ${props.iconScale})` }}>\r\n                                { \r\n                                    getItemIcon(neutral, \"88px\", \"64px\", props.iconScale)\r\n                                }\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nclass NeutralItemSelector extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let allNeutrals = getAllNeutrals();\r\n        let neutralTierList = getNeutralTierLayout();\r\n        this.state = {\r\n            allNeutrals: allNeutrals,\r\n            queryNeutrals: null,\r\n            neutralTierList: neutralTierList,\r\n\r\n            iconScale: 0.49,\r\n            onNewNeutralSelected: props.onNeutralSelected,\r\n\r\n            dotaStrings: props.dotaStrings,\r\n            abilityStrings: props.abilityStrings,\r\n        };\r\n\r\n        this.onNeutralSelected = this.onNeutralSelected.bind(this);\r\n        this.onSearchChanged = this.onSearchChanged.bind(this);\r\n    }\r\n\r\n    onNeutralSelected(e) {\r\n        let neutral = e.target.parentElement.dataset.neutral;\r\n        this.state.onNewNeutralSelected({ item: neutral });\r\n    }\r\n\r\n    onSearchChanged (e) {\r\n        let query = e.target.value;\r\n        let filteredNeutrals = null;\r\n        if (query) {\r\n            filteredNeutrals = this.state.allNeutrals.filter((neutral, index) => {\r\n                // Check query for match in localized string, should work most of the time\r\n                let localizedName = getLocalizedString(this.state.abilityStrings, `DOTA_Tooltip_Ability_${neutral.item}`)?.toLowerCase();\r\n                if (localizedName && localizedName.indexOf(query.toLowerCase()) !== -1) {\r\n                    return true;\r\n                }\r\n\r\n                // Match query with any item aliases (only works for english)\r\n                let aliasMatch = itemAliasIncludes(neutral.itemInfo.ItemAliases, query);\r\n                if (aliasMatch) {\r\n                    return true;\r\n                }\r\n            });\r\n        }\r\n\r\n        /// If no query, show all neutrals\r\n        this.setState({\r\n            queryNeutrals: filteredNeutrals,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"neutral-item-card\" style={{ color: \"black\" }}>\r\n                <div className=\"neutral-item-card header d-flex p-2\">\r\n                    <div>\r\n                        <Form.Control \r\n                            className=\"foresight-input-control\"\r\n                            type=\"text\" \r\n                            placeholder=\"Search...\" \r\n                            onChange={this.onSearchChanged}/>\r\n                    </div>\r\n                    <Button className=\"ml-auto\" variant=\"outline-danger\" onClick={this.onNeutralSelected} data-neutral={null}>\r\n                        <FontAwesomeIcon icon={faMinus} data-neutral={null} />\r\n                    </Button>\r\n                </div>\r\n                <div className=\"neutral-item-card content p-2\">\r\n                    {/* Query search term UI */}\r\n                    {\r\n                        this.state.queryNeutrals && \r\n                            <ListGroup className=\"foresight-list-group\">\r\n                                {\r\n                                    <h6>\r\n                                        { getLocalizedString(this.state.dotaStrings, \"DOTA_Shop_Search_Results_Title\") }\r\n                                    </h6>\r\n                                }\r\n                                {\r\n                                    this.state.queryNeutrals.map((itemInfo, index) => {\r\n                                        let localizedName = getLocalizedString(this.state.abilityStrings, `DOTA_Tooltip_Ability_${itemInfo.item}`);\r\n                                        return ( \r\n                                            <ListGroup.Item\r\n                                                key={ `${itemInfo.item}-${index}`}\r\n                                                onClick={this.onNeutralSelected}\r\n                                                title={localizedName}\r\n                                                data-neutral={itemInfo.item}\r\n                                                action>\r\n                                                <div className=\"d-flex\" data-neutral={itemInfo.item}>\r\n                                                    <ItemIcon \r\n                                                        itemName={itemInfo.item}\r\n                                                        onClick={this.onNeutralSelected}  />\r\n                                                    <h6 className=\"mx-1 my-auto\" data-neutral={itemInfo.item}>\r\n                                                        { localizedName ?? itemInfo.item }\r\n                                                    </h6>\r\n                                                </div>\r\n                                            </ListGroup.Item>\r\n                                        )\r\n                                    })\r\n                                }\r\n                                {\r\n                                    this.state.queryNeutrals.length <= 0 &&\r\n                                        <h6>\r\n                                            { \r\n                                                getLocalizedString(this.state.dotaStrings, \"DOTA_Shop_Search_No_Results\")\r\n                                            }\r\n                                        </h6>\r\n                                }\r\n                            </ListGroup>\r\n                    }\r\n                    \r\n                    <div>\r\n                        {\r\n                            !this.state.queryNeutrals && this.state.neutralTierList && this.state.neutralTierList.map((tier, index) => {\r\n                                let time = Object.keys(tier.drop_rates).filter((key) => {\r\n                                    if (key.includes(\":\")) {\r\n                                        return true;\r\n                                    }\r\n                                });\r\n                                let array = tier.drop_rates[time[0]];\r\n                                let tierDropAmt = Object.keys(array).length;\r\n\r\n                                return (\r\n                                    <NeutralTier \r\n                                        tier={index + 1}\r\n                                        neutrals={tier.items}\r\n                                        time={time}\r\n                                        dropAmount={tierDropAmt}\r\n                                        iconScale={this.state.iconScale}\r\n                                        onNeutralSelected={this.onNeutralSelected}\r\n                                        dotaStrings={this.state.dotaStrings}\r\n                                        abilityStrings={this.state.abilityStrings}\r\n                                        />\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NeutralItemSelector;","import Neutral from \"./Neutral\";\r\n\r\nexport default Neutral;","import React, { Component } from 'react';\r\nimport Popup from \"reactjs-popup\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faInfo } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport NeutralItemSelector from \"./NeutralItemSelector\";\r\nimport ItemTooltip from '../ItemTooltip';\r\n\r\nimport { itemNameToElement } from \"../../utils\";\r\nimport { getItemIcon } from '../../utility/spriteHelper';\r\n\r\nclass Neutral extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            neutralItem: props.neutralItem,\r\n            onNewNeutralSelected: props.onNewNeutralSelected,\r\n            dotaStrings: props.dotaStrings,\r\n            abilityStrings: props.abilityStrings,\r\n\r\n            iconScale: 0.7,\r\n            neutralSelectorDisabled: false,\r\n        };\r\n\r\n        this.onNeutralSelected = this.onNeutralSelected.bind(this);\r\n    }\r\n\r\n    componentDidUpdate (prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                neutralItem: this.props.neutralItem,\r\n                dotaStrings: this.props.dotaStrings,\r\n                abilityStrings: this.props.abilityStrings,\r\n                onNewNeutralSelected: this.props.onNewNeutralSelected,\r\n            });\r\n        }\r\n    }\r\n\r\n    onNeutralSelected (neutral) {\r\n        this.setState({\r\n            neutralSelectorDisabled: true,\r\n        });\r\n\r\n        if (this.state.onNewNeutralSelected) {\r\n            this.state.onNewNeutralSelected(neutral);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if(this.state.neutralSelectorDisabled) {\r\n            this.setState({ neutralSelectorDisabled: false });\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                {\r\n                    this.state.neutralItem && this.state.neutralItem.item &&\r\n                        <Popup\r\n                            trigger={isOpen => (\r\n                                <div\r\n                                    className=\"ml-2 mt-1\" \r\n                                    style={{ position:\"absolute\", zIndex: 1 }}>\r\n                                    <FontAwesomeIcon icon={faInfo} />\r\n                                </div>\r\n                            )}\r\n                            position=\"right center\"\r\n                            on=\"hover\"\r\n                            className=\"foresight-tooltip\"\r\n                            contentStyle={{\r\n                                width: \"350px\",\r\n                            }}>\r\n                                <ItemTooltip\r\n                                    itemName={this.state.neutralItem.item}\r\n                                    dotaStrings={this.state.dotaStrings}\r\n                                    abilityStrings={this.state.abilityStrings}\r\n                                    />\r\n                        </Popup>\r\n                }\r\n                <Popup\r\n                    trigger={isOpen => {\r\n                        return getItemIcon(this.state.neutralItem.item, \"88px\", \"64px\", this.state.iconScale);\r\n                    }}\r\n                    position=\"right center\"\r\n                    disabled={this.state.neutralSelectorDisabled}\r\n                    className=\"foresight-tooltip\"\r\n                    contentStyle={{\r\n                        width: \"350px\",\r\n                        height: \"450px\"\r\n                    }}>\r\n                        <NeutralItemSelector \r\n                            onNeutralSelected={this.onNeutralSelected}\r\n                            dotaStrings={this.state.dotaStrings} \r\n                            abilityStrings={this.state.abilityStrings}\r\n                            />\r\n                </Popup>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Neutral;","import React, { Component } from 'react';\r\nimport {\r\n    Row, \r\n    Col\r\n} from \"react-bootstrap\";\r\n\r\nimport { \r\n    getLocalizedString\r\n} from '../../utility/data-helpers/language';\r\n\r\nimport Item from \"./Item\";\r\nimport Neutral from \"../Neutral\";\r\n\r\nclass ItemsBar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            items: props.items,\r\n            backpack: props.backpack,\r\n            neutral: props.neutral,\r\n            iconScale: 0.7,\r\n\r\n            onNeutralChanged: props.onNeutralChanged,\r\n            onItemChanged: props.onItemChanged,\r\n\r\n            dotaStrings: props.dotaStrings,\r\n            abilityStrings: props.abilityStrings,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        //Update if previous props have changed\r\n        if (prevProps.items !== this.props.items) {\r\n            this.setState({\r\n                items: this.props.items,\r\n            });\r\n        }\r\n\r\n        if (prevProps.backpack !== this.props.backpack) {\r\n            this.setState({\r\n                backpack: this.props.backpack,\r\n            });\r\n        }\r\n\r\n        if (prevProps.neutral !== this.props.neutral) {\r\n            this.setState({\r\n                neutral: this.props.neutral,\r\n            });\r\n        }\r\n\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ abilityStrings: this.props.abilityStrings });\r\n        }\r\n        if (prevProps.dotaStrings !== this.props.dotaStrings) {\r\n            this.setState({ dotaStrings: this.props.dotaStrings });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let itemsColWidth = 5;\r\n        let backpackColWidth = 5;\r\n        let neutralColWidth = 2;\r\n        return (\r\n            <div>\r\n                <Row>\r\n                    <Col md={itemsColWidth}>\r\n                        <h6>{ getLocalizedString(this.state.dotaStrings, \"DOTA_SHOP_ITEMS\") }</h6>\r\n                        <Row md={3} className=\"m-0 p-0\">\r\n                            {\r\n                                this.state.items && this.state.items.map((value) => {\r\n                                    return (\r\n                                        <Item \r\n                                            key={value.slot}\r\n                                            slot={value.slot}\r\n                                            item={value.item} \r\n                                            onItemChanged={this.state.onItemChanged}\r\n                                            onItemExtraChnaged={this.state.onItem}\r\n                                            dotaStrings={this.state.dotaStrings} \r\n                                            abilityStrings={this.state.abilityStrings} />\r\n                                    )\r\n                                })\r\n                            }\r\n                        </Row>\r\n                    </Col>\r\n                    <Col md={backpackColWidth}>\r\n                        <h6>{ getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_BackpackHintTitle\").toUpperCase() }</h6>\r\n                        <div className=\"d-flex flex-wrap\">\r\n                            {\r\n                                this.state.backpack && this.state.backpack.map((value) => {\r\n                                    return (\r\n                                        <Item\r\n                                            key={value.slot}\r\n                                            slot={value.slot}\r\n                                            item={value.item}\r\n\r\n                                            isBackpack={true}\r\n                                            onItemChanged={this.state.onItemChanged}\r\n                                            dotaStrings={this.state.dotaStrings}\r\n                                            abilityStrings={this.state.abilityStrings} />\r\n                                    )\r\n                                })\r\n                            }\r\n                        </div>\r\n                    </Col>\r\n                    <Col md={neutralColWidth}>\r\n                        <h6>{ getLocalizedString(this.state.dotaStrings, \"UI_NEUTRALS\") }</h6>\r\n                        {/* Neutral Item */}\r\n                        <div>\r\n                            <Neutral \r\n                                neutralItem={this.state.neutral} \r\n                                onNewNeutralSelected={this.state.onNeutralChanged}\r\n                                dotaStrings={this.state.dotaStrings}\r\n                                abilityStrings={this.state.abilityStrings} />\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ItemsBar;","import ItemsBar from \"./ItemsBar\";\r\n\r\nexport default ItemsBar;","import React, { Component } from 'react';\r\n\r\nimport { EAttributes } from \"../../enums/attributes.js\";\r\n\r\nimport \"./Attributes.css\";\r\nimport { getLocalizedString, replaceStringValue } from '../../utility/data-helpers/language.js';\r\nimport { calculateAttribute } from '../../utility/calculate.js';\r\n\r\nfunction Attribute(props) {\r\n    return (\r\n        <div className=\"d-flex my-2 align-items-center\">\r\n            <div className={props.isPrimaryAttribute ? \" primary-attribute\" : \"\"}>\r\n                <span className={'attribute ' + props.type} alt=\"attribute\" />\r\n            </div>\r\n            <div className=\"ml-2\">{props.value}</div>\r\n            {\r\n                props.additional && props.additional > 0 &&\r\n                <div   \r\n                    className=\"mx-1\" \r\n                    style={{ color: \"green\" }}>\r\n                    {\"+\" + props.additional}\r\n                </div>\r\n            }\r\n            <div\r\n                className=\"ml-3\"\r\n                style={{ fontSize: \"0.75rem\" }}>\r\n                {\r\n                    replaceStringValue(props.perLevelString, props.per)\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nclass Attributes extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            hero: props.hero,\r\n            level: props.heroLevel,\r\n            items: props.items,\r\n            talents: props.talents,\r\n            neutral: props.neutral,\r\n            abilities: props.abilities,\r\n\r\n            dotaStrings: props.dotaStrings,\r\n            abilityStrings: props.abilityStrings,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                hero: this.props.hero,\r\n                level: this.props.heroLevel,\r\n                items: this.props.items,\r\n                talents: this.props.talents,\r\n                neutral: this.props.neutral,\r\n                abilities: this.props.abilities,\r\n\r\n                dotaStrings: this.props.dotaStrings,\r\n                abilityStrings: this.props.abilityStrings,\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let strengthStats = calculateAttribute(EAttributes.ATTR_STRENGTH, this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents);\r\n        let agilityStats = calculateAttribute(EAttributes.ATTR_AGILITY, this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents);\r\n        let intStats = calculateAttribute(EAttributes.ATTR_INTELLIGENCE, this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents);\r\n        return (\r\n            <div>\r\n                <h5>{getLocalizedString(this.state.dotaStrings, \"DOTA_Tooltip_topbar_stats\")}</h5>\r\n                <h6>{getLocalizedString(this.state.dotaStrings, \"DOTA_Attributes\")}</h6>\r\n                <Attribute \r\n                    type=\"strength\" \r\n                    value={ strengthStats.attribute }\r\n                    additional= { strengthStats.additionalAttribute }\r\n                    per={ strengthStats.perLevel } \r\n                    isPrimaryAttribute={this.state.hero?.AttributePrimary === EAttributes.ATTR_STRENGTH}\r\n                    perLevelString={ getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_StrengthGain\") } />\r\n\r\n                <Attribute \r\n                    type=\"agility\"\r\n                    value={ agilityStats.attribute }\r\n                    additional= { agilityStats.additionalAttribute }\r\n                    per={ agilityStats.perLevel } \r\n                    isPrimaryAttribute={this.state.hero?.AttributePrimary === EAttributes.ATTR_AGILITY} \r\n                    perLevelString={ getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_AgilityGain\") } />\r\n\r\n                <Attribute \r\n                    type=\"intelligence\" \r\n                    value={ intStats.attribute }\r\n                    additional= { intStats.additionalAttribute }\r\n                    per={ intStats.perLevel } \r\n                    isPrimaryAttribute={this.state.hero?.AttributePrimary === EAttributes.ATTR_INTELLIGENCE} \r\n                    perLevelString={ getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_IntelligenceGain\") } />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Attributes;","import Attributes from \"./Attributes\";\r\n\r\nexport default Attributes;","import React, { Component } from 'react';\r\nimport {\r\n    Row, Col\r\n} from \"react-bootstrap\";\r\n\r\nimport {\r\n    calculateHealthRegen,\r\n    calculateManaRegen,\r\n    calculateMainArmor,\r\n    calculateTotalSpellAmp,\r\n    calculateStatusResist,\r\n    calculateMagicResist,\r\n    calculatePhysicalResist,\r\n    calculateEvasion,\r\n    calculateRightClickDamage,\r\n    calculateAttackTime,\r\n    calculateMoveSpeed,\r\n    calculateAttackRange\r\n} from \"../../utility/calculate\";\r\nimport {\r\n    getLocalizedString\r\n} from \"../../utility/data-helpers/language\";\r\n\r\nfunction StatArray(props) {\r\n    return (\r\n        <div style={{ backgroundColor: \"#171717\", color: \"white\", fontSize: \"0.8rem\" }} className=\"p-2 h-100\">\r\n            <h6 className=\"ml-auto\">{props.title}</h6>\r\n            {\r\n                props.stats &&\r\n                    props.stats.map((value) => {\r\n                        return (\r\n                        <Row \r\n                            key={value.name}\r\n                            className=\"mx-0\">\r\n                            <Col \r\n                                md={6}\r\n                                className=\"px-0\">\r\n                                {value.name}\r\n                            </Col>\r\n                            <Col \r\n                                md={6}\r\n                                className=\"px-0\">\r\n                                {value.value}\r\n                            </Col>\r\n                        </Row>\r\n                        );\r\n                    })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\n/// Gets the attack min/max and formats it for display in UI\r\nfunction formatAttackMinMax(hero, lvl, items, neutral, abilities, talents) {\r\n    let standardAtkDmg = calculateRightClickDamage(hero, lvl, items, neutral, abilities, talents);\r\n    \r\n    // Range string\r\n    //let dmgString = `${standardAtkDmg.min} - ${standardAtkDmg.max}`;\r\n    // Average damage inbetween range value\r\n    let dmgString = standardAtkDmg.min + ((standardAtkDmg.max - standardAtkDmg.min) / 2);\r\n    if (standardAtkDmg.additional) {\r\n        dmgString += \" \";\r\n        dmgString += `${ standardAtkDmg.additional >= 0 ? \"+\" : \"-\" } ${Math.abs(standardAtkDmg.additional)}`;\r\n    }\r\n    return dmgString;\r\n}\r\n\r\n/// Gets the atk time and formats it to display in UI\r\nfunction formatAttackTime(hero, lvl, items, neutral, abilities, talents) {\r\n    let attackInfo = calculateAttackTime(hero, lvl, items, neutral, abilities, talents);\r\n    return `${attackInfo.attackSpeed} (${attackInfo.attackTime} s)`;\r\n}\r\n\r\nfunction formatArmor (armorInfo) {\r\n    if (!armorInfo || !armorInfo?.armor) {\r\n        return null;\r\n    }\r\n\r\n    let str = armorInfo.armor.toFixed(1);\r\n    if (armorInfo.additional) {\r\n        str += \" \";\r\n        str += `${armorInfo.additional > 0 ? \"+\" : \"-\"} ${Math.abs(armorInfo.additional)}`;\r\n    }\r\n\r\n    return str;\r\n}\r\n\r\nclass Statistics extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            hero: props.hero,\r\n            level: props.heroLevel,\r\n            talents: props.talents,\r\n            items: props.items,\r\n            neutral: props.neutral,\r\n            abilities: props.abilities,\r\n\r\n            dotaStrings: props.dotaStrings,\r\n            abilityStrings: props.abilityStrings,\r\n        };\r\n\r\n        this.updateStatistics = this.updateStatistics.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateStatistics();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.hero !== this.props.hero) {\r\n            this.setState({ \r\n                hero: this.props.hero \r\n            }, () => {\r\n                this.updateStatistics();\r\n            });\r\n        }\r\n        if (prevProps.items !== this.props.items) {\r\n            this.setState({ \r\n                items: this.props.items \r\n            }, () => {\r\n                this.updateStatistics();\r\n            });\r\n        }\r\n        if (prevProps.neutral !== this.props.neutral) {\r\n            this.setState({ \r\n                neutral: this.props.neutral, \r\n            }, () => {\r\n                this.updateStatistics();\r\n            });\r\n        }\r\n        if (prevProps.talents !== this.props.talents) {\r\n            this.setState({ \r\n                talents: this.props.talents \r\n            }, () => {\r\n                this.updateStatistics();\r\n            });\r\n        }\r\n        if (prevProps.abilities !== this.props.abilities) {\r\n            this.setState({ \r\n                abilities: this.props.abilities \r\n            }, () => {\r\n                this.updateStatistics();\r\n            });\r\n        }\r\n        if (prevProps.heroLevel !== this.props.heroLevel) {\r\n            this.setState({ \r\n                level: this.props.heroLevel \r\n            }, () => {\r\n                this.updateStatistics();\r\n            });\r\n        }\r\n        if (prevProps.dotaStrings !== this.props.dotaStrings) {\r\n            this.setState({ dotaStrings: this.props.dotaStrings });\r\n        }\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ abilityStrings: this.props.abilityStrings });\r\n        }\r\n    }\r\n\r\n    updateStatistics() {\r\n        let armorInfo =  calculateMainArmor(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents);\r\n        let physResist = calculatePhysicalResist(armorInfo.armor + armorInfo.additional);\r\n        this.setState({\r\n            // Attack\r\n            attackSpeed: formatAttackTime(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n            damage: formatAttackMinMax(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n            attackRange: calculateAttackRange(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n            moveSpeed: calculateMoveSpeed(this.state.hero, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n            spellAmp: calculateTotalSpellAmp(this.state.talents, this.state.items, this.state.neutral),\r\n            manaRegen: calculateManaRegen(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n\r\n            // Defence\r\n            armor: formatArmor(armorInfo),\r\n            physicalResist: physResist,\r\n            magicResist: calculateMagicResist(this.state.items, this.state.neutral, this.state.abilities),\r\n            statusResist: calculateStatusResist(this.state.items, this.state.neutral),\r\n            evasion: calculateEvasion(this.state.items, this.state.neutrak, this.state.abilities , this.state.talents),\r\n            healthRegen: calculateHealthRegen(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Row>\r\n                {\r\n                    this.state.hero &&\r\n                    <Col md={6}>\r\n                        <StatArray title={getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_Attack\")} stats={[\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_AttackSpeed\"),\r\n                                value: this.state.attackSpeed\r\n                            },\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_Damage\"), \r\n                                value: this.state.damage \r\n                            },\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_AttackRange\"), \r\n                                value: this.state.attackRange \r\n                            },\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_MoveSpeed\"), \r\n                                value: this.state.moveSpeed \r\n                            },\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_SpellAmp\"), \r\n                                value: this.state.spellAmp + \"%\" \r\n                            },\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_ManaRegenDetail\"), \r\n                                value: this.state.manaRegen \r\n                            },\r\n                        ]} />\r\n                    </Col>\r\n                }   \r\n                {\r\n                    this.state.hero &&\r\n                    <Col md={6}>\r\n                        <StatArray title={getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_Defense\")} stats={[\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_Armor\"), \r\n                                value: this.state.armor,\r\n                            },\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_PhysicalResist\"), \r\n                                value: this.state.physicalResist + \"%\" \r\n                            },\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_MagicResist\"), \r\n                                value: this.state.magicResist + \"%\" \r\n                            },\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_StatusResist\"), \r\n                                value: this.state.statusResist + \"%\" \r\n                            },\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_Evasion\"), \r\n                                value: this.state.evasion + \"%\" \r\n                            },\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_HealthRegenDetail\"), \r\n                                value: this.state.healthRegen \r\n                            },\r\n                        ]}/>\r\n                    </Col>\r\n                }\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Statistics;","import Statistics from \"./Statistics\";\r\n\r\nexport default Statistics;","import React, { Component } from 'react';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport {  faSearch } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { getLocalizedString } from '../../utility/data-helpers/language';\r\nimport { getAllPlayableHeroes } from '../../utility/dataHelperHero';\r\n\r\nimport \"./HeroSelector.css\";\r\nimport { itemAliasIncludes } from '../../utility/dataHelperItems';\r\n\r\nclass HeroSelector extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let selectableHeroes = getAllPlayableHeroes();\r\n        this.state = {\r\n            filteredHeroes: selectableHeroes,\r\n            allHeroes: selectableHeroes,\r\n\r\n            onSelectedHero: props.onSelectedHero,\r\n            dotaStrings: props.dotaStrings,\r\n        };\r\n\r\n        this.onSearchChanged = this.onSearchChanged.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                onSelectedHero: this.props.onSelectedHero,\r\n                dotaStrings: this.props.dotaStrings,\r\n            });\r\n        }\r\n    }\r\n\r\n    onSearchChanged(e) {\r\n        let searchTerm = e.target.value;\r\n        let filteredHeroes = this.state.allHeroes;\r\n        if (searchTerm) {\r\n            filteredHeroes = this.state.allHeroes.filter((hero) => {\r\n                /// Match against localized string\r\n                let localizedHeroName = getLocalizedString(this.state.dotaStrings, hero.name)?.toLowerCase();\r\n                if (localizedHeroName && localizedHeroName.indexOf(searchTerm.toLowerCase()) !== -1) {\r\n                    return true;\r\n                }\r\n\r\n                // Alias if localized string hasnt got a match, only works in english\r\n                let aliasMatch = itemAliasIncludes(hero.heroInfo.NameAliases, searchTerm);\r\n                if (aliasMatch) {\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n            });\r\n        }\r\n\r\n        this.setState({\r\n            filteredHeroes: filteredHeroes,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let iconScale = 0.5;\r\n        return (\r\n            <div className=\"hero-card\">\r\n                <div className=\"hero-card header d-flex p-2\">\r\n                    <div className=\"d-flex\">\r\n                        <h5 className=\"my-auto ml-2\">{ getLocalizedString(this.state.dotaStrings, \"DOTA_Hero_Selection_Intro_Header\") }</h5>\r\n                        <div className=\"ml-auto p-1\">\r\n                            <Form.Control \r\n                                className=\"foresight-input-control\"\r\n                                type=\"text\"\r\n                                placeholder=\"Search...\" \r\n                                onChange={this.onSearchChanged} />\r\n                        </div>\r\n                        <FontAwesomeIcon \r\n                            className=\"my-auto mx-2\"\r\n                            icon={faSearch} />\r\n                    </div>\r\n                </div>\r\n                <div className=\"hero-card content p-2\">\r\n                    <div className=\"d-flex flex-wrap\">\r\n                        {\r\n                            this.state.filteredHeroes && this.state.filteredHeroes.map((value) => {\r\n                                return (\r\n                                    <div\r\n                                        key={value.name}  \r\n                                        onClick={this.state.onSelectedHero}\r\n                                        className=\"m-1\"\r\n                                        style={{ \r\n                                            height: `calc(72px * ${iconScale})`, \r\n                                            width: `calc(128px * ${iconScale})` \r\n                                        }}>\r\n                                        <span \r\n                                            className={`hero-icon-big hero-icon-big-${value.name}_png`} \r\n                                            style={{ transformOrigin: \"top left\", transform: `scale(${iconScale}, ${iconScale})` }}\r\n                                            data-heroname={value.displayName}\r\n                                            data-hero={value.name} />\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n                        {\r\n                            this.state.filteredHeroes && this.state.filteredHeroes.length <= 0 &&\r\n                                <h6 className=\"p-1\">\r\n                                    { getLocalizedString(this.state.dotaStrings, \"DOTA_Shop_Search_No_Results\") }\r\n                                </h6>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HeroSelector;","import ChangeHeroBtn from \"./ChangeHeroBtn\";\r\n\r\nexport default ChangeHeroBtn;","import React, { Component } from 'react';\r\nimport {\r\n    Button\r\n} from \"react-bootstrap\";\r\nimport Popup from \"reactjs-popup\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport HeroSelector from \"./HeroSelector\";\r\n\r\nclass ChangeHeroBtn extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            onSelectHero: props.onSelectHero,\r\n            dotaStrings: props.dotaStrings,\r\n\r\n            heroSelectorDisabled: false,\r\n        };\r\n\r\n        this.onSelectHero = this.onSelectHero.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                dotaStrings: this.props.dotaStrings,\r\n                onSelectHero: this.props.onSelectHero,\r\n            });\r\n        }\r\n    }\r\n\r\n    onSelectHero (e) {\r\n        // Disable popup to force close\r\n        this.setState({\r\n            heroSelectorDisabled: true,\r\n        });\r\n\r\n        let hero = e.target.dataset.hero;\r\n        this.state.onSelectHero(hero);\r\n    }\r\n\r\n    render() {\r\n        // If last render popup was force disabled to close, then flip to false\r\n        // to allow reopening \r\n        if (this.state.heroSelectorDisabled) {\r\n            this.setState({ heroSelectorDisabled: false });\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <Popup \r\n                    trigger={isOpen => (\r\n                        <Button onClick={this.onToggleHeroSelect}><FontAwesomeIcon icon={faPencilAlt} /></Button>\r\n                    )} \r\n                    position=\"right top\"\r\n                    closeOnDocumentClick\r\n                    closeOnEscape\r\n                    disabled={this.state.heroSelectorDisabled}\r\n                    className=\"foresight-tooltip\"\r\n                    contentStyle={{ \r\n                        width: \"750px\"\r\n                    }}>\r\n                     <HeroSelector \r\n                        onSelectedHero={this.onSelectHero} \r\n                        dotaStrings={this.state.dotaStrings}\r\n                         />\r\n                </Popup>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChangeHeroBtn;","import React, { Component } from 'react';\r\nimport {\r\n    Row,\r\n    Col\r\n} from \"react-bootstrap\";\r\n\r\nimport {\r\n    getTalentInfoFromName,\r\n} from \"../../utility/dataHelperTalents\";\r\nimport { \r\n    tryGetTalentLocalizedString,\r\n    replaceStringValue,\r\n    getLocalizedString\r\n} from \"../../utility/data-helpers/language\";\r\n\r\nfunction isTalentSelected (selectedTalents, talent) {\r\n    return selectedTalents?.includes(talent);\r\n}\r\n\r\nclass TalentRow extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            leftTalent: props.leftTalent,\r\n            rightTalent: props.rightTalent,\r\n            level: props.lvl,\r\n\r\n            selectedTalents: this.props.selectedTalents,\r\n            onTalentSelected: this.props.onTalentSelected,\r\n            onTalentUnselected: this.props.onTalentUnselected,\r\n\r\n            abilityStrings: this.props.abilityStrings,\r\n        };\r\n\r\n        this.onSelectTalent = this.onSelectTalent.bind(this);\r\n        this.getTalentDisplayName = this.getTalentDisplayName.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.leftTalent !== this.props.leftTalent) {\r\n            this.setState({ leftTalent: this.props.leftTalent });\r\n        }\r\n\r\n        if(prevProps.rightTalent !== this.props.rightTalent) {\r\n            this.setState({ rightTalent: this.props.rightTalent });\r\n        }\r\n\r\n        if (prevProps.lvl !== this.props.lvl) {\r\n            this.setState({ level: this.props.lvl });\r\n        }\r\n\r\n        if (prevProps.selectedTalents !== this.props.selectedTalents) {\r\n            this.setState({ selectedTalents: this.props.selectedTalents });\r\n        }\r\n\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ abilityStrings: this.props.abilityStrings });\r\n        }\r\n    }\r\n\r\n    onSelectTalent(e) {\r\n        let selectedTalent = e.target.dataset.talent;\r\n        // if clicked twice, unselect the talent\r\n        if (isTalentSelected(this.state.selectedTalents, selectedTalent)) {\r\n            this.state.onTalentUnselected(selectedTalent);\r\n        } else {\r\n            this.state.onTalentSelected(selectedTalent);\r\n        }\r\n    }\r\n\r\n    getTalentDisplayName (talent) {\r\n        let talentInfo = getTalentInfoFromName(talent);\r\n        if (!talentInfo) {\r\n            return \"Unknown Talent\";\r\n        }\r\n\r\n        let displayName = getLocalizedString(this.state.abilityStrings, \"DOTA_Tooltip_ability_\" + talent); \r\n        if (displayName && talentInfo && talentInfo.AbilitySpecial) {\r\n            displayName = replaceStringValue(displayName, talentInfo.AbilitySpecial[0].value)\r\n        }\r\n\r\n        return displayName;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Row className=\"my-1 py-2\" style={{ backgroundColor: \"rgb(24, 30, 33)\"}}>\r\n                {/* Left Talent */}\r\n                <Col \r\n                    md={5}\r\n                    className=\"text-center\"\r\n                    style={{ \r\n                        color: isTalentSelected(this.state.selectedTalents, this.state.leftTalent) ? \"#c4a66f\" : \"white\",\r\n                        userSelect: \"none\",\r\n                    }}>\r\n                    <div onClick={this.onSelectTalent} data-talent={this.state.leftTalent}>\r\n                        {\r\n                            this.getTalentDisplayName(this.state.leftTalent)\r\n                        }\r\n                    </div>\r\n                </Col>\r\n                {/* Talent Level */}\r\n                <Col md={2}>\r\n                    <h6 \r\n                        className=\"text-center\"\r\n                        style={{ color: \"#e7d291\"}}>\r\n                        {this.state.level}\r\n                    </h6>\r\n                </Col>\r\n                {/* Right Talent */}\r\n                <Col \r\n                    md={5}\r\n                    className=\"text-center\"\r\n                    style={{ \r\n                        color: isTalentSelected(this.state.selectedTalents, this.state.rightTalent) ? \"#c4a66f\" : \"white\",\r\n                        userSelect: \"none\",\r\n                    }}>\r\n                    <div onClick={this.onSelectTalent} data-talent={this.state.rightTalent}>\r\n                        {\r\n                            this.getTalentDisplayName(this.state.rightTalent)\r\n                        }\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TalentRow;\r\n","import TalentTree from \"./TalentTree\";\r\n\r\nexport default TalentTree;","import React, { Component } from 'react';\r\n\r\nimport TalentRow from \"./TalentRow\";\r\nimport { getLocalizedString } from '../../utility/data-helpers/language';\r\n\r\nclass TalentTree extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            talents: this.props.talents,\r\n            selectedTalents: this.props.selectedTalents,\r\n\r\n            onTalentSelected: this.props.onTalentSelected,\r\n            onTalentUnselected: this.props.onTalentUnselected,\r\n\r\n            dotaStrings: this.props.dotaStrings,\r\n            abilityStrings: this.props.abilityStrings,\r\n        };\r\n        this.findSelectedTalent = this.findSelectedTalent.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(prevProps.talents !== this.props.talents) {\r\n            this.setState({ talents: this.props.talents });\r\n        }\r\n        if (prevProps.selectedTalents !== this.props.selectedTalents) {\r\n            this.setState({ selectedTalents: this.props.selectedTalents });\r\n        }\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ abilityStrings: this.props.abilityStrings });\r\n        }\r\n        if (prevProps.dotaStrings !== this.props.dotaStrings) {\r\n            this.setState({ dotaStrings: this.props.dotaStrings });\r\n        }\r\n    }\r\n\r\n    findSelectedTalent(leftTalent, rightTalent) {\r\n        if (this.state.selectedTalents && this.state.selectedTalents.length > 0) {\r\n            let matchTalent = this.state.selectedTalents.find((val) => {\r\n                if (val.name === leftTalent) {\r\n                    return leftTalent;\r\n                } else if (val.name === rightTalent) {\r\n                    return rightTalent;\r\n                }\r\n                return null;\r\n            });\r\n            return matchTalent?.name;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h6 className=\"text-center\">{ getLocalizedString(this.state.dotaStrings, \"DOTA_StatBranch_TooltipTitle\") }</h6>\r\n                {/* <img src=\"/images/dota2/talent.jpg\" alt=\"talent tree\" /> */}\r\n                <div \r\n                    className=\"mr-2\"\r\n                    style={{ fontSize: \"0.8rem\" }}>\r\n                        {\r\n                            this.state.talents && this.state.talents.map((talentInfo) => {\r\n                                return <TalentRow \r\n                                                key={talentInfo.lvl}\r\n                                                lvl={talentInfo.lvl}\r\n                                                leftTalent={talentInfo.leftTalent} \r\n                                                rightTalent={talentInfo.rightTalent} \r\n                                                selectedTalents={this.state.selectedTalents}\r\n                                                onTalentSelected={this.state.onTalentSelected}\r\n                                                onTalentUnselected={this.state.onTalentUnselected} \r\n                                                \r\n                                                abilityStrings={this.state.abilityStrings} />\r\n                            })\r\n                        }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TalentTree;","import HealthManaBar from \"./HealthManaBar\";\r\n\r\nexport default HealthManaBar;","import React, { Component } from 'react';\r\n\r\nimport {\r\n    calculateHealth,\r\n    calculateMana,\r\n    calculateHealthRegen,\r\n    calculateManaRegen,\r\n} from \"../../utility/calculate\";\r\nimport { EAttributes } from \"../../enums/attributes\";\r\n\r\nimport \"./style.css\";\r\n\r\nclass HealthManaBar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            hero: props.hero,\r\n            level: props.heroLevel,\r\n            items: props.items,\r\n            talents: props.talents,\r\n            neutral: props.neutral,\r\n            abilities: props.abilities,\r\n\r\n            maxHealth: 0,\r\n            maxMana: 0,\r\n        }\r\n\r\n        this.updateBar = this.updateBar.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateBar();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                hero: this.props.hero,\r\n                level: this.props.heroLevel,\r\n                items: this.props.items,\r\n                talents: this.props.talents,\r\n                neutral: this.props.neutral,\r\n                abilities: this.props.abilities,\r\n\r\n                maxHealth: 0,\r\n                maxMana: 0,\r\n            }, () => this.updateBar());\r\n        }\r\n    }\r\n\r\n    updateBar() {\r\n        this.setState({\r\n            maxHealth: calculateHealth(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n            maxMana: calculateMana(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"bar health d-flex\">\r\n                    <h6 className=\"max-health-text my-auto mx-auto\">{this.state.maxHealth} / {this.state.maxHealth}</h6>\r\n                    <div className=\"health-bar-regen my-auto mr-1\">\r\n                        { \"+\" + calculateHealthRegen(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents) }\r\n                    </div>\r\n                </div>\r\n                <div className=\"bar mana d-flex\">\r\n                    <h6 className=\"max-mana-text my-auto mx-auto\">{this.state.maxMana} / {this.state.maxMana}</h6>\r\n                    <div className=\"mana-bar-regen my-auto mr-1\">\r\n                        { \"+\" + calculateManaRegen(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents) }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HealthManaBar;","import React, { Component } from 'react';\r\nimport { \r\n    Button, \r\n    Form\r\n} from 'react-bootstrap';\r\nimport { getLocalizedString } from '../../utility/data-helpers/language';\r\n\r\nconst MAX_LEVEL = 30;\r\nconst MIN_LEVEL = 1;\r\n\r\nfunction ModifyBtn (props) {\r\n    return (\r\n        <Button \r\n            className=\"py-1\"\r\n            variant=\"outline-secondary\" \r\n            onClick={props.onClick}>\r\n            { props.text }\r\n        </Button>\r\n    );\r\n}\r\n\r\nclass LevelSelector extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            level: props.heroLevel,\r\n            onHeroLevelChanged: props.onHeroLevelChanged,\r\n            dotaStrings: props.dotaStrings,\r\n        };\r\n\r\n        this.onIncrementHeroLevel = this.onIncrementHeroLevel.bind(this);\r\n        this.onDecrementHeroLevel = this.onDecrementHeroLevel.bind(this);\r\n        this.onLvlInputChanged = this.onLvlInputChanged.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.heroLevel !== this.props.heroLevel) {\r\n            this.setState({\r\n                level: this.props.heroLevel,\r\n            });\r\n        }\r\n        if (prevProps.dotaStrings !== this.props.dotaStrings) {\r\n            this.setState({ dotaStrings: this.props.dotaStrings });\r\n        }\r\n    }\r\n\r\n    onIncrementHeroLevel() {\r\n        let newLevel = this.state.level;\r\n        newLevel += 1;\r\n\r\n        if (newLevel >= MAX_LEVEL) {\r\n            newLevel = MAX_LEVEL;\r\n        }\r\n\r\n        this.state.onHeroLevelChanged(newLevel);\r\n    }\r\n\r\n    onDecrementHeroLevel() {\r\n        let newLevel = this.state.level;\r\n        newLevel -= 1;\r\n\r\n        if (newLevel < MIN_LEVEL) {\r\n            newLevel = MIN_LEVEL;\r\n        }\r\n\r\n        this.state.onHeroLevelChanged(newLevel);\r\n    }\r\n\r\n    onLvlInputChanged(e) {\r\n        let lvl = parseInt(e.target.value);\r\n        if (lvl) {\r\n            if (lvl > MAX_LEVEL) {\r\n                lvl = MAX_LEVEL;\r\n            }\r\n            else if (lvl < MIN_LEVEL) {\r\n                lvl = MIN_LEVEL;\r\n            }\r\n        } else {\r\n            lvl = MIN_LEVEL;\r\n        }\r\n\r\n        this.state.onHeroLevelChanged(lvl);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"mx-5\">\r\n                <h6>{ getLocalizedString(this.state.dotaStrings, \"dota_stat_dropdown_level\") }</h6>\r\n                <div className=\"d-flex\">\r\n                    <ModifyBtn \r\n                        onClick={this.onDecrementHeroLevel} \r\n                        text=\"-\" />\r\n                    <Form.Control\r\n                        className=\"foresight-input-control mx-3\" \r\n                        style={{ width: \"75px\" }}\r\n                        placeholder=\"lvl\" \r\n                        type=\"number\" \r\n                        value={this.state.level} \r\n                        onChange={this.onLvlInputChanged} />\r\n                    <ModifyBtn \r\n                        onClick={this.onIncrementHeroLevel} \r\n                        text=\"+\" />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LevelSelector;","import LevelSelector from \"./LevelSelector\";\r\n\r\nexport default LevelSelector;","import React, { Component } from 'react';\r\nimport {\r\n    Container,\r\n    Row,\r\n    Col,\r\n    Button,\r\n    Form,\r\n} from 'react-bootstrap';\r\nimport { connect } from \"react-redux\";\r\nimport copy from \"copy-to-clipboard\";\r\nimport { Base64 } from \"js-base64\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCopy, faFile, faChevronUp, faChevronDown, faShare } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport {\r\n    SELECTED_HERO,\r\n    SELECTED_ITEM,\r\n    SELECTED_NEUTRAL,\r\n    SELECTED_BACKPACK_ITEM,\r\n    SELECTED_TALENT,\r\n    UNSELECTED_TALENT,\r\n    NEW_HERO_LEVEL,\r\n    ENEMY_SELECTED_TALENT, SELECTED_ABILITY_LEVEL\r\n} from \"../../constants/actionTypes\";\r\n\r\nimport { \r\n    getLocalizedString\r\n} from '../../utility/data-helpers/language';\r\n\r\nimport Abilities from \"../Abilities\";\r\nimport ItemsBar from \"../ItemsBar\";\r\nimport Attributes from \"../Attributes\";\r\nimport Statistics from \"../Statistics\";\r\nimport ChangeHeroBtn from \"../ChangeHeroBtn\";\r\nimport TalentTree from \"../TalentTree\";\r\nimport HealthManaBar from \"../HealthManaBar\";\r\nimport LevelSelector from \"../LevelSelector\";\r\nimport EnemyHero from '../EnemyHero';\r\n\r\nimport \"../../css/dota_hero_icons.css\";\r\nimport \"../../css/dota_attributes.css\";\r\nimport \"../../css/dota_items.css\";\r\nimport \"../../css/dota_hero_icons_big.css\";\r\nimport \"./Calculator.css\";\r\nimport { Redirect, Link } from 'react-router-dom';\r\n\r\n\r\nclass Calculator extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            buildName: \"\",\r\n            buildCreator: \"\",\r\n            openBuildShare: false,\r\n            loadedFromParams: false,\r\n        };\r\n\r\n        this.onHeroSelected = this.onHeroSelected.bind(this);\r\n        this.onItemSelected = this.onItemSelected.bind(this);\r\n        this.onNeutralSelected = this.onNeutralSelected.bind(this);\r\n        this.onTalentSelected = this.onTalentSelected.bind(this);\r\n        this.onTalentUnselected = this.onTalentUnselected.bind(this);\r\n        this.onHeroLevelChanged = this.onHeroLevelChanged.bind(this);\r\n        this.onAbilityLevelChanged = this.onAbilityLevelChanged.bind(this);\r\n\r\n        this.onShareBuild = this.onShareBuild.bind(this);\r\n        this.onBuildNameChanged = this.onBuildNameChanged.bind(this);\r\n        this.onBuildCreatorChanged = this.onBuildCreatorChanged.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        /// Parse build data from url on start and set app state\r\n        if (this.props.location.search) {\r\n            let params = new URLSearchParams(this.props.location.search);\r\n            let buildData = params.get(\"build\");\r\n            if (buildData) {\r\n                let decoded = Base64.decode(buildData);\r\n                let buildObject = null;\r\n                try {\r\n                    buildObject = JSON.parse(decoded);\r\n                } catch(e) {\r\n                    console.error(\"Unable to parse build object\");\r\n                }\r\n\r\n                if (buildObject) {\r\n                    this.setState({\r\n                        buildCreator: buildObject.creator,\r\n                        buildName: buildObject.name,\r\n                        openBuildShare: true,\r\n                        loadedFromParams: true,\r\n                    });\r\n                    \r\n                    let build = buildObject.build;\r\n                    if (build?.selectedHeroName)\r\n                        this.props.dispatch({ type: SELECTED_HERO, value: build.selectedHeroName });\r\n                    if (build?.heroLevel)\r\n                        this.props.dispatch({ type: NEW_HERO_LEVEL, value: build.heroLevel });\r\n                    if (build?.selectedTalents) {\r\n                        for(let talent of  build.selectedTalents) {\r\n                            this.props.dispatch({ type: SELECTED_TALENT, value: talent });\r\n                        }\r\n                    }\r\n                    if (build?.heroAbilityLevels) {\r\n                        for (let abilLevel of build.heroAbilityLevels) {\r\n                            this.props.dispatch({ type: SELECTED_ABILITY_LEVEL, value: abilLevel });\r\n                        }\r\n                    }\r\n                    if (build?.items) {\r\n                        for (let item of build.items) {\r\n                            if (item.item) {\r\n                                this.props.dispatch({ type: SELECTED_ITEM, value: item });\r\n                            }\r\n                        }\r\n                    }\r\n                    if (build?.neutralItem) {\r\n                        this.props.dispatch({ type: SELECTED_NEUTRAL, value: build.neutralItem });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    onShareBuild() {\r\n        let buildObject = {\r\n            name: this.state.buildName ?? \"Unknown\",\r\n            creator: this.state.buildCreator ?? \"Unknown\",\r\n            build: {\r\n                selectedHeroName: this.props.selectedHeroName,\r\n                heroAbilities: this.props.heroAbilities,\r\n                heroAbilityLevels: this.props.heroAbilityLevels,\r\n                heroTalents: this.props.heroTalents,\r\n                heroLevel: this.props.heroLevel,\r\n\r\n                items: this.props.items,\r\n                backpack: this.props.backpack,\r\n                neutralItem: this.props.neutralItem,\r\n                selectedTalents: this.props.selectedTalents,\r\n            },\r\n        };\r\n        let str = JSON.stringify(buildObject);\r\n        let encoded = Base64.encode(str);\r\n        // set clipboard\r\n        copy(`${window.location.href}?build=${encoded}`);\r\n    }\r\n\r\n    onHeroSelected(heroName) {\r\n        console.log(`${SELECTED_HERO}: ${heroName}`);\r\n        this.props.dispatch({ type: SELECTED_HERO, value: heroName });\r\n    }\r\n\r\n    onItemSelected (item) {\r\n        if (item.isBackpack) \r\n        {\r\n            console.log(`${SELECTED_BACKPACK_ITEM}: Slot: ${item.slot} Item: ${item.item}`);\r\n            this.props.dispatch({ type: SELECTED_BACKPACK_ITEM, value: item });\r\n        }\r\n        else\r\n        {\r\n            console.log(`${SELECTED_ITEM}: Slot: ${item.slot} Item: ${item.item}`);\r\n            this.props.dispatch({ type: SELECTED_ITEM, value: item });\r\n        }\r\n    }\r\n\r\n    onNeutralSelected(neutralItem) {\r\n        console.log(`${SELECTED_NEUTRAL}: ${neutralItem.item}`);\r\n        this.props.dispatch({ type: SELECTED_NEUTRAL, value: neutralItem });\r\n    }\r\n\r\n    onTalentSelected (talent) {\r\n        console.log(`${SELECTED_TALENT}: ${talent}`);\r\n        this.props.dispatch({ type: SELECTED_TALENT, value: talent });\r\n    }\r\n\r\n    onTalentUnselected (talent) {\r\n        console.log(`${UNSELECTED_TALENT}: ${talent}`);\r\n        this.props.dispatch({ type: UNSELECTED_TALENT, value: talent });\r\n    }\r\n\r\n    onEnemyTalentSelected (enemy, talent) {\r\n        console.log(`${ENEMY_SELECTED_TALENT}: ${enemy}, ${talent}`);\r\n        this.props.dispatch({ type: ENEMY_SELECTED_TALENT, value: talent });\r\n    }\r\n\r\n    onHeroLevelChanged(newLevel) {\r\n        //console.log(`${NEW_HERO_LEVEL}: ${newLevel}`);\r\n        this.props.dispatch({ type: NEW_HERO_LEVEL, value: newLevel });\r\n    }\r\n\r\n    onAbilityLevelChanged (abilLvlInfo) {\r\n        console.log(`${SELECTED_ABILITY_LEVEL}: Ability: ${abilLvlInfo.ability} Level: ${abilLvlInfo.level}`);\r\n        this.props.dispatch({ type: SELECTED_ABILITY_LEVEL, value: abilLvlInfo });\r\n    }\r\n\r\n    onBuildNameChanged(e) {\r\n        this.setState({ buildName: e.target.value });\r\n    }\r\n\r\n    onBuildCreatorChanged(e) {\r\n        this.setState({ buildCreator: e.target.value });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"foresite-app-container\">\r\n                <Container className=\"app-main-content py-3\" fluid=\"md\">\r\n                    {/* Top row, Inital Hero Information */}\r\n                    <Row>\r\n                        {/* Main Hero Info */}\r\n                        <Col className=\"my-auto\" md={3}>\r\n                            <span \r\n                                className={`hero-icon-big hero-icon-big-${this.props.selectedHeroName}_png mx-3`}\r\n                                height={50}\r\n                                alt=\"hero banner\" />\r\n                            <div className=\"d-flex mt-3\">\r\n                                <h5 className=\"my-auto px-3\">\r\n                                    { getLocalizedString(this.props.dotaStrings, this.props.selectedHeroName) }\r\n                                </h5>\r\n                                <ChangeHeroBtn \r\n                                    onSelectHero={this.onHeroSelected}\r\n                                    dotaStrings={this.props.dotaStrings} />\r\n                            </div>\r\n                        </Col>\r\n                        {/* Small Stats */}\r\n                        <Col md={3}>\r\n                            <Attributes \r\n                                hero={this.props.selectedHero} \r\n                                heroLevel={this.props.heroLevel}\r\n                                talents={this.props.selectedTalents}\r\n                                items={this.props.items}\r\n                                neutral={this.props.neutralItem} \r\n                                abilities={this.props.heroAbilities} \r\n                                abilityStrings={this.props.abilityStrings}\r\n                                dotaStrings={this.props.dotaStrings}/>\r\n                        </Col>\r\n                        {/* Final Attack/Defence Stats */}\r\n                        <Col md={5}>\r\n                            <Statistics \r\n                                hero={this.props.selectedHero} \r\n                                heroLevel={this.props.heroLevel}\r\n                                talents={this.props.selectedTalents}\r\n                                items={this.props.items}\r\n                                neutral={this.props.neutralItem} \r\n                                abilities={this.props.heroAbilities} \r\n                                abilityStrings={this.props.abilityStrings}\r\n                                dotaStrings={this.props.dotaStrings}  />\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    {/* Health/Mana and Hero Lvl  */}\r\n                    <Row className=\"my-2 py-2\">\r\n                        <Col md={8}>\r\n                            <HealthManaBar \r\n                                hero={this.props.selectedHero} \r\n                                heroLevel={this.props.heroLevel}\r\n                                talents={this.props.selectedTalents}\r\n                                items={this.props.items}\r\n                                neutral={this.props.neutralItem} \r\n                                abilities={this.props.heroAbilities} />\r\n                        </Col>\r\n                        <Col md={4}>\r\n                            <LevelSelector \r\n                                heroLevel={ this.props.heroLevel } \r\n                                onHeroLevelChanged={ this.onHeroLevelChanged }\r\n                                dotaStrings={this.props.dotaStrings} />\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    {/* Items/Talent */}\r\n                    <Row className=\"items-row my-4\">\r\n                        <Col md={7}>\r\n                            <ItemsBar\r\n                                items={this.props.items} \r\n                                backpack={this.props.backpack} \r\n                                neutral={this.props.neutralItem} \r\n                                onItemChanged={this.onItemSelected}\r\n                                onNeutralChanged={this.onNeutralSelected} \r\n                                dotaStrings={this.props.dotaStrings}\r\n                                abilityStrings={this.props.abilityStrings} />\r\n                        </Col>\r\n                        <Col md={5}>\r\n                            <TalentTree\r\n                                talents={this.props.heroTalents} \r\n                                selectedTalents={this.props.selectedTalents}\r\n                                onTalentSelected={this.onTalentSelected} \r\n                                onTalentUnselected={this.onTalentUnselected} \r\n                                dotaStrings={this.props.dotaStrings}\r\n                                abilityStrings={this.props.abilityStrings} />\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    {/* Abilities */}\r\n                    <Abilities \r\n                        onAbilityLevelChanged={this.onAbilityLevelChanged}\r\n                        heroName={this.props.selectedHeroName}\r\n                        abilities={this.props.heroAbilities}\r\n                        abilityLevels={this.props.heroAbilityLevels}\r\n                        items={this.props.items}\r\n                        neutral={this.props.neutralItem} \r\n                        selectedTalents={this.props.selectedTalents} \r\n                        abilityStrings={this.props.abilityStrings}\r\n                        dotaStrings={this.props.dotaStrings} \r\n                        displayDamage={true} />\r\n\r\n                    <div className=\"pb-4\">\r\n                        <Button \r\n                            className=\"d-flex py-2\"\r\n                            onClick={() => this.setState({ openBuildShare: !this.state.openBuildShare })}>\r\n                            <h6 className=\"mx-1 mr-2 mb-0\">Share</h6>\r\n                            <FontAwesomeIcon className=\"my-auto\" icon={this.state.openBuildShare ? faChevronUp : faChevronDown} />\r\n                        </Button>\r\n                        {\r\n                            this.state.openBuildShare &&\r\n                                <Row>\r\n                                    <Col md={4}>\r\n                                        <h4>Build Name</h4>\r\n                                        {\r\n                                            this.state.buildName && this.state.loadedFromParams \r\n                                            ?\r\n                                            <Form.Control \r\n                                                className=\"foresight-input-control mr-2 ml-0\"\r\n                                                type=\"text\" \r\n                                                placeholder=\"Build Name\" \r\n                                                value={this.state.buildName} \r\n                                                plaintext\r\n                                                readonly />\r\n                                            :\r\n                                            <Form.Control \r\n                                                className=\"foresight-input-control mr-2 ml-0\"\r\n                                                type=\"text\" \r\n                                                placeholder=\"Build Name\" \r\n                                                onChange={this.onBuildNameChanged} />\r\n                                        }\r\n                                    </Col>\r\n                                    <Col md={4}>\r\n                                        <h4>Creator</h4>\r\n                                        {\r\n                                            this.state.buildCreator && this.state.loadedFromParams\r\n                                            ?\r\n                                            <Form.Control \r\n                                                className=\"foresight-input-control mr-2 ml-0\"\r\n                                                type=\"text\" \r\n                                                placeholder=\"Creator\" \r\n                                                value={this.state.buildCreator} \r\n                                                plaintext\r\n                                                readonly />\r\n                                            :\r\n                                            <Form.Control \r\n                                                className=\"foresight-input-control mr-2 ml-0\"\r\n                                                type=\"text\" \r\n                                                placeholder=\"Creator\" \r\n                                                onChange={this.onBuildCreatorChanged} />\r\n                                        }\r\n                                    </Col>\r\n                                    <Col md={4}>\r\n                                        <div className=\"d-flex my-auto h-100\">\r\n                                            <Button className=\"mr-1 my-auto\" onClick={this.onShareBuild}>\r\n                                                <FontAwesomeIcon icon={faShare} />\r\n                                            </Button>\r\n                                            <div className=\"my-auto\">Share this build!</div>\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                        }\r\n                    </div>\r\n\r\n                    {/* Padding Separator */}\r\n                    {/* <div className=\"py-5\" /> */}\r\n                    \r\n                    {/* Enemy Hero */}\r\n                    {/* <EnemyHero \r\n                        hero={this.props.selectedEnemyHero}\r\n                        heroName={this.props.selectedEnemyHeroName} \r\n                        heroAbilities={this.props.enemyHeroAbilities} \r\n                        heroItems={this.props.enemyHeroItems}\r\n                        heroTalents={this.props.enemyHeroTalents} \r\n                        selectedTalents={this.props.selectedEnemyTalents}\r\n                        neutral={this.props.enemyNeutralItem}\r\n                        abilityStrings={this.props.abilityStrings} \r\n                        dotaStrings={this.props.dotaStrings} /> */}\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    selectedHero: state.hero.selectedHero,\r\n    selectedHeroName: state.hero.selectedHeroName,\r\n    \r\n    heroAbilities: state.hero.heroAbilities,\r\n    heroAbilityLevels: state.hero.heroAbilityLevels,\r\n\r\n    heroTalents: state.hero.heroTalents,\r\n    heroLevel: state.hero.heroLevel,\r\n\r\n    items: state.hero.items,\r\n    backpack: state.hero.backpack,\r\n    neutralItem: state.hero.neutralItem,\r\n    selectedTalents: state.hero.selectedTalents,\r\n\r\n    abilityStrings: state.language.stringsAbilities,\r\n    dotaStrings: state.language.stringsDota,\r\n\r\n    selectedEnemyHero: state.enemy.selectedEnemyHero,\r\n    selectedEnemyHeroName: state.enemy.selectedEnemyHeroName,\r\n    enemyHeroTalents: state.enemy.enemyHeroTalents,\r\n    enemyHeroAbilities: state.enemy.enemyHeroAbilities,\r\n    selectedEnemyTalents: state.enemy.selectedEnemyTalents,\r\n    enemyHeroItems: state.enemy.enemyHeroItems,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Calculator);","import React, { Component } from 'react';\r\nimport {\r\n    Row,\r\n    Col,\r\n} from 'react-bootstrap';\r\n\r\nimport TalentTree from \"../TalentTree\";\r\nimport ItemsBar from '../ItemsBar/ItemsBar';\r\nimport Abilities from '../Abilities';\r\nimport HealthManaBar from \"../HealthManaBar\";\r\n\r\nclass EnemyHero extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            enemyHero: this.props.hero,\r\n            enemyHeroName: this.props.heroName,\r\n            heroTalents: this.props.heroTalents,\r\n            heroAbilities: this.props.heroAbilities,\r\n            selectedTalents: this.props.selectedTalents,\r\n            heroItems: this.props.heroItems,\r\n            heroNeutral: this.props.neutral,\r\n\r\n            abilityStrings: this.props.abilityStrings,\r\n            dotaStrings: this.props.dotaStrings,\r\n\r\n            heroLevel: 0,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.hero !== this.props.hero) {\r\n            this.setState({ enemyHero: this.props.hero });\r\n        }\r\n        if (prevProps.heroName !== this.props.heroName) {\r\n            this.setState({ enemyHeroName: this.props.heroName });\r\n        }\r\n        if (prevProps.heroTalents !== this.props.heroTalents) {\r\n            this.setState({ heroTalents: this.props.heroTalents });\r\n        }\r\n        if (prevProps.heroAbilities !== this.props.heroAbilities) {\r\n            this.setState({ heroAbilities: this.props.heroAbilities });\r\n        }\r\n        if (prevProps.selectedTalents !== this.props.selectedTalents) {\r\n            this.setState({ selectedTalents: this.props.selectedTalents });\r\n        }\r\n        if (prevProps.heroItems !== this.props.heroItems) {\r\n            this.setState({ heroItems: this.props.heroItems });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Row>\r\n                    <Col md={4}>\r\n                        {this.state.enemyHeroName}\r\n                    </Col>\r\n                    <Col md={8}>\r\n                        <HealthManaBar \r\n                                baseStrength ={ this.state.enemyHero?.AttributeBaseStrength }\r\n                                strengthGain={ this.state.enemyHero?.AttributeStrengthGain } \r\n                                baseIntelligence={this.state.enemyHero?.AttributeBaseIntelligence }\r\n                                intelligenceGain={ this.state.enemyHero?.AttributeIntelligenceGain }\r\n                                heroLevel={ this.state.heroLevel } \r\n                                primaryAttribute={ this.state.enemyHero?.AttributePrimary }\r\n                                bonusHealthRegen={ this.state.enemyHero?.StatusHealthRegen }\r\n                                bonusManaRegen={ this.state.enemyHero?.StatusManaRegen } />\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"\">\r\n                    {/* Talents */}\r\n                    <Col md={5}>\r\n                        <TalentTree\r\n                            talents={this.state.heroTalents} \r\n                            selectedTalents={this.state.selectedTalents}\r\n                            onTalentSelected={this.onTalentSelected} \r\n                            onTalentUnselected={this.onTalentUnselected} \r\n                            abilityStrings={this.state.abilityStrings} />\r\n                    </Col>\r\n                    {/* Abilities */}\r\n                    \r\n                    {/* Items */}\r\n                    <Col md={5}>\r\n                        <ItemsBar\r\n                            items={this.state.heroItems}  \r\n                            neutral={this.props.neutralItem}\r\n                            onItemChanged={this.onItemSelected}\r\n                            onNeutralChanged={this.onNeutralSelected} />\r\n                    </Col>\r\n                </Row>\r\n                <Abilities \r\n                        abilities={this.state.heroAbilities}\r\n                        items={this.state.heroItems}\r\n                        neutral={this.props.neutralItem} \r\n                        selectedTalents={this.props.selectedTalents} \r\n                        abilityStrings={this.props.abilityStrings}\r\n                        dotaStrings={this.state.dotaStrings} \r\n                        displayDamage={false} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EnemyHero;","import Calculator from \"./Calculator\";\r\n\r\nexport default Calculator;","import Home from \"./Home\";\r\n\r\nexport default Home;","import { faTwitter } from '@fortawesome/free-brands-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { Component } from 'react';\r\nimport {\r\n    Container,\r\n    Button,\r\n    Col, \r\n    Row,\r\n} from \"react-bootstrap\";\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport \"./Home.css\";\r\n\r\nclass Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            redirect: \"\",\r\n        };\r\n\r\n        this.onGoToApp = this.onGoToApp.bind(this);\r\n    }\r\n\r\n    onGoToApp() {\r\n        this.setState({ \r\n            redirect: \"/app\"\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                className=\"bg-master\">\r\n                {/* Primary Title Container */}\r\n                <div className=\"primary-home-container py-5\">\r\n                    <div className=\"home-bg-image\" />\r\n                    <Container \r\n                        className=\"faded-background\"\r\n                        style={{\r\n                            height: \"auto\",\r\n                            paddingTop: \"7rem\",\r\n                            paddingBottom: \"7rem\",\r\n                        }}>\r\n                        <div className=\"text-center\">\r\n                            {/* App title */}\r\n                            <h1>\r\n                                foresight\r\n                            </h1>\r\n                            {/* Sub text & action */}\r\n                            <div>\r\n                                <h6 className=\"py-2\">\r\n                                    Web application for calculating damage output for heroes in DotA 2 \r\n                                </h6>\r\n                                <Button\r\n                                    className=\"mx-auto mt-2\"\r\n                                    variant=\"primary\"\r\n                                    onClick={this.onGoToApp}>\r\n                                    <h5 className=\"m-0 px-5 py-2\">Get Started!</h5>\r\n                                </Button>\r\n                            </div>\r\n                            <div className=\"d-flex justify-content-center mt-3\">\r\n                                <a \r\n                                    className=\"px-2 mr-1\"\r\n                                    href=\"https://joshlmao.com\" \r\n                                    style={{ color: \"white\" }}>\r\n                                    <h6 className=\"my-auto\">JoshLmao</h6>\r\n                                </a>\r\n                                <a href=\"https://twitter.com/JoshLmao\">\r\n                                    <FontAwesomeIcon icon={faTwitter} />\r\n                                </a>\r\n                            </div>\r\n                        </div>\r\n                    </Container>\r\n                    <div className=\"py-3\" />\r\n                    <Container className=\"\">\r\n                        <Row>\r\n                            <Col sm \r\n                                className=\"p-3 mr-3 faded-background\">\r\n                                <h3>Experiment</h3>\r\n                                <p>\r\n                                    Gaze into the future and see how much an item effects your overall build and view the raw numbers behind the game\r\n                                </p>\r\n                            </Col>\r\n                            <Col sm\r\n                                className=\"p-3 mx-3 faded-background\">\r\n                                <h3>Share</h3>\r\n                                <p>\r\n                                    Share your item and ability builds to get an in depth look at the statistics and numbers, all in one handy and sharable link.\r\n                                </p>\r\n                            </Col>\r\n                            <Col sm\r\n                                className=\"p-3 ml-3 faded-background\">\r\n                                <h3>Open Source</h3>\r\n                                <p>\r\n                                    The site is completly open source and available to view on Github. Created by JoshLmao <span>😊</span>\r\n                                </p>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </div>\r\n                {\r\n                    this.state.redirect && <Redirect to={this.state.redirect} />\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import App from \"./App\";\r\n\r\nexport default App;","import React, { Component } from 'react';\nimport { \n    HashRouter,\n    Route,\n    Switch\n} from 'react-router-dom';\n\nimport Navigation from \"../Navigation\";\nimport FourOhFour from \"../FourOhFour\";\nimport Calculator from \"../Calculator\";\nimport Home from \"../Home\";\n\nimport \"../../css/foresight-bs-styling.css\";\nimport \"../../css/foresight-generic.css\";\n\nclass App extends Component {\n    render() {\n        return (\n            <HashRouter>\n                <Navigation />\n\n                <Switch>\n                    <Route exact path=\"/\" component={Home} />\n\n                    <Route exact path=\"/app\" component={Calculator} />\n\n                    <Route component={FourOhFour} />\n                </Switch>\n            </HashRouter>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./store\";\n\nimport App from './components/App/';\n\n// Import Bootstrap component styles\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst app = (\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>\n);\n\nReactDOM.render(app, document.getElementById('root') );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}