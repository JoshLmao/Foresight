{"version":3,"sources":["serviceWorker.js","utils.js","enums/attributes.js","utility/dataHelperHero.js","reducers/initialState.js","reducers/hero.js","constants/actionTypes.js","enums/languages.js","reducers/language.js","store/index.js","reducers/enemy.js","components/LanguageSelect/LanguageSelect.jsx","components/LanguageSelect/index.js","components/Navigation/Navigation.jsx","components/Navigation/index.js","components/FourOhFour/index.js","components/FourOhFour/FourOhFour.jsx","utility/dataHelperItems.js","utility/dataHelperAbilities.js","utility/dataHelperTalents.js","utility/calculate.js","utility/data-helpers/language.js","components/Abilities/DamageOutput.jsx","components/Abilities/Cooldown.jsx","components/Abilities/ManaCost.jsx","components/Abilities/AbilityDetails.jsx","components/Abilities/Abilities.jsx","components/Abilities/index.js","components/ItemsBar/ItemSelector.jsx","components/ItemsBar/Item.jsx","components/Neutral/NeutralItemSelector.jsx","components/Neutral/index.js","components/Neutral/Neutral.jsx","components/ItemsBar/ItemsBar.jsx","components/ItemsBar/index.js","components/Attributes/Attributes.jsx","components/Attributes/index.js","components/Statistics/Statistics.jsx","components/Statistics/index.js","components/ChangeHeroBtn/HeroSelector.jsx","components/ChangeHeroBtn/index.js","components/ChangeHeroBtn/ChangeHeroBtn.jsx","components/TalentTree/TalentRow.jsx","components/TalentTree/index.js","components/TalentTree/TalentTree.jsx","components/HealthManaBar/index.js","components/HealthManaBar/HealthManaBar.jsx","components/LevelSelector/LevelSelector.jsx","components/LevelSelector/index.js","components/Calculator/Calculator.jsx","components/EnemyHero/EnemyHero.jsx","components/Calculator/index.js","components/Home/index.js","components/Home/Home.jsx","components/App/index.js","components/App/App.jsx","index.js"],"names":["Boolean","window","location","hostname","match","itemNameToElement","itemInfo","scale","item","className","style","width","height","alt","transform","transformOrigin","backgroundColor","display","parseNameFromModel","modelString","dashSplit","split","length","EAttributes","EDamageType","EAbilityBehaviour","ESpellImmunityType","getSpecificAttributeStats","specificAttribute","heroInfo","basePrimary","primaryPerLevel","parseInt","AttributeBaseStrength","parseFloat","AttributeStrengthGain","AttributeBaseAgility","AttributeAgilityGain","AttributeBaseIntelligence","AttributeIntelligenceGain","console","error","base","perLevel","getHeroTalents","keys","Object","talents","i","includes","ability","push","mappedTalents","lvlRow","lvl","rightTalent","leftTalent","sort","a","b","getAllHeroAbilities","abilities","getPrimaryAttribute","hero","AttributePrimary","initialState","selectedHero","DOTAHeroes","npc_dota_hero_zuus","selectedHeroName","Model","heroAbilities","heroTalents","selectedTalents","heroLevel","items","slot","backpack","neutralItem","lang","stringsAbilities","EngAbilStrings","stringsDota","EngDotaStrings","selectedEnemyHero","npc_dota_hero_target_dummy","selectedEnemyHeroName","enemyHeroTalents","enemyHeroAbilities","selectedEnemyTalents","enemyHeroItems","getNewItemArray","itemArray","newItem","newArray","filter","val","getNewTalentArray","talentArray","newTalent","map","value","removeTalent","unselectedTalent","talent","reducer","state","action","type","ELanguages","SCHINESE","ENGLISH","getAbilityStrings","langCode","SChineseAbilStrings","getGeneralStrings","SChineseDotaStrings","allReducers","combineReducers","language","log","enemy","store","createStore","LanguageSelect","props","onLanguageChanged","bind","event","newLanguage","target","this","dispatch","Form","Control","as","onChange","defaultValue","values","key","Component","connect","pkg","require","Navigation","Navbar","Container","Brand","to","Link","Nav","fontSize","eventKey","disabled","version","dotaVersion","Toggle","aria-controls","Collapse","id","href","Button","variant","icon","faGithub","FourOhFour","getItemInfoFromName","itemName","DOTAItems","getItemSpecialAbilityValue","specialAbilityValueKey","AbilitySpecial","matchingKey","find","element","specialAbilityInfo","var_type","tryGetItemSpecialValue","specialValue","tryGetNeutralSpecialValue","neutral","specialValueKey","foundNeutralInfo","getAllNeutrals","selectableNeutrals","toLowerCase","IsObsolete","ItemIsNeutralDrop","itemKey","replace","name","shift","join","primaryAttributeToItemBonusKey","primaryAttr","getAbilityInfoFromName","abilityName","DOTAAbilities","tryGetAbilitySpecialAbilityValue","abilityLevel","abilityInfo","getAbilitySpecialAbilityValue","specialAbilityKey","dataValue","getAbilityBehaviours","behaviours","AbilityBehavior","targeting","splitBehaviours","AbilityUnitDamageType","dmgTypeVal","splitDmgTypes","SpellImmunityType","pierceValue","getAbilityCastRequirements","levelInfo","allRequirements","AbilityCastRange","range","parseAbilityValueByLevel","level","abilValue","splitValues","tryGetTalentSpecialAbilityValue","talentInfo","calculateHealth","baseStrength","strengthGain","baseHealth","npc_dota_hero_base","StatusHealth","totalHealth","bonusHealth","bonusStr","bonusAllStats","toFixed","calculateMana","baseInt","intGain","baseMana","StatusMana","totalMana","bonusMana","bonusInt","calculateHealthRegen","totalHpRegen","StatusHealthRegen","regenAmt","bonusHealthRegen","bonusRegen","calculateManaRegen","totalManaRegen","StatusManaRegen","bonusManaRegen","bonusIntellect","manaRegen","calculateTotalSpellAmp","totalSpellAmp","ampTalent","spellAmpInfo","foundNeutral","spellAmpAmount","calculateStatusResist","totalStatusResist","statusResistAmount","calculateMagicResist","resistanceBonuses","MagicalResistance","baseResist","magicResistAmount","edited","total","calculateEvasion","totalEvasion","bonusEvasion","evasionAmount","calculateRightClickDamage","heroMainAttribute","atkMin","AttackDamageMin","atkMax","AttackDamageMax","primaryAttributeStats","totalPrimaryAttribute","allAttrKeys","bonusPrimaryAttr","bonusPrimaryStat","allStats","min","max","Math","floor","calculateAttackTime","totalAttackSpeed","BaseAttackSpeed","agiStats","totalAgi","bonusAttackSpeed","bonusAgility","attacksPerSec","atkSpeed","attackTime","attacksPerSecond","attackSpeed","calculateSpellDamage","abilityDamageInfo","abilityDmg","damage","isPercent","AbilityDamage","dmgValue","specialAbilityElement","lowerKey","getAbilityOutputDamage","totalSpellAmpPercent","spellAmp","bonusSpellAmp","chargeCount","ampPerCharge","neutralInfo","special","bonus_spell_amp","spell_amp","ampTalentValue","spellDamage","abilityDamage","calculateMoveSpeed","baseSpeed","MovementSpeed","flatBonus","moveSpeed","moveSpeedPercentBonus","bonusMoveSpeed","bonusSpeed","calculateAttackRange","isHeroRanged","AttackCapabilities","totalAttackRange","AttackRange","baseRange","rangeBonus","bonusAttackRange","calculateAttribute","attribute","attributeStats","strengthPerLevel","totalAttribute","additionalAttribute","bonusAgi","getLocalizedString","localeStrings","string","Tokens","replaceStringValue","getAbilityNameFromStrings","strings","languageStrings","stringKey","matchingKeys","tryGetLocalizedString","DamageOutput","abilityStrings","dotaStrings","prevProps","setState","abilityKey","abilInfo","abilLvl","parseDamage","Cooldown","abilityCooldown","cooldown","updateCooldown","currentCooldown","AbilityCooldown","allReductions","bonusCooldown","amount","source","reduction","sourceOfReductions","decimal","reductionTotal","calculateAbilityCooldown","faClock","ManaCost","updateMana","manaCost","AbilityManaCost","totalManaCostReducePercent","manaCostReduceAmount","costReductionAmount","reduceAmount","calculateManaCost","TypeValueUI","AbilityDetails","abilityBehaviours","castRequirements","updateAbilityInfo","index","getLevelInfo","abil","Abilities","abils","filterAbilities","abilLevels","abilityLevels","displayDamage","onLevelChanged","e","tagName","parentElement","levelIndex","dataset","lvlindex","targetLevel","btnindex","Row","abilVal","IsGrantedByScepter","Col","ID","maxWidth","maxHeight","src","md","abilityIndex","maxLvl","AbilityType","MaxLevel","html","onClick","data-lvlindex","data-btnindex","getAbilityLevel","getItemsByQuality","itemsArray","matchArray","quality","ItemQuality","filterItemName","ItemFromInfo","keyName","title","data-item","TabHeading","text","ItemSelector","selectableItems","basicItems","upgradesItems","allItems","queryItems","onSelectedItem","onSearchChanged","onSearchItemSelected","onShopItemSelected","onRemoveItemSelected","query","filteredItems","indexOf","placeholder","faMinus","ListGroup","itemNameDisplay","Item","Tabs","defaultActiveKey","transition","Tab","isBackpack","onItemChanged","getItemIcon","open","trigger","isOpen","position","contentStyle","overflowY","NeutralItemSelector","allNeutrals","iconScale","onNewNeutralSelected","onNeutralSelected","color","data-neutral","Neutral","ItemsBar","onNeutralChanged","Attribute","isPrimaryAttribute","additional","perLevelString","per","Attributes","strengthStats","agilityStats","intStats","StatArray","stats","formatAttackMinMax","standardAtkDmg","formatAttackTime","attackInfo","Statistics","updateStatistics","totalArmor","armor","baseArmor","ArmorPhysical","baseAgility","agiPerLevel","agiPer","bonusArmor","calculateMainArmor","physResist","abs","attackRange","physicalResist","magicResist","statusResist","evasion","neutrak","healthRegen","HeroSelector","heroes","filteredHeroes","onSelectedHero","searchTerm","filtered","faSearch","data-heroname","displayName","data-hero","ChangeHeroBtn","selectableHeroes","workshop_guide_name","alias","NameAliases","onSelectHero","onToggleHeroSelect","faPencilAlt","isTalentSelected","TalentRow","onTalentSelected","onTalentUnselected","onSelectTalent","getTalentDisplayName","selectedTalent","getTalentInfoFromName","tryGetTalentLocalizedString","data-talent","TalentTree","findSelectedTalent","matchTalent","HealthManaBar","maxHealth","maxMana","updateBar","ModifyBtn","LevelSelector","onHeroLevelChanged","onIncrementHeroLevel","onDecrementHeroLevel","onLvlInputChanged","newLevel","Calculator","onHeroSelected","onItemSelected","heroName","targetHero","fluid","Home","redirect","onGoToCalc","App","exact","path","component","app","StrictMode","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.e29b41bd.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\n\r\n/// Returns a HTML element of a DotA item from it's info \r\nexport function itemNameToElement (itemInfo, scale) {\r\n    // Width and height of each item in item_stylesheet\r\n    var width, height;\r\n    width = \"88px\";\r\n    height = \"64px\";\r\n    if (itemInfo && itemInfo.item) {\r\n        // Return item icon\r\n        return (\r\n            <div \r\n                className=\"m-1\"\r\n                style={{ \r\n                    width: `calc(${width} * ${scale})`, \r\n                    height: `calc(${height} * ${scale})`}}>\r\n                <span \r\n                    className={ 'sprite sprite-' + itemInfo.item + '_png '} \r\n                    alt={itemInfo.item} \r\n                    style={{ \r\n                        transform: `scale(${scale}, ${scale})`, \r\n                        transformOrigin: \"top left\" \r\n                    }} />\r\n            </div>\r\n        );\r\n    } else {\r\n        // Return empty inventory slot since item is null/empty\r\n        return (\r\n            <div \r\n                style={{ \r\n                    width: `calc(${width} * ${scale})`, \r\n                    height: `calc(${height} * ${scale})` }}>\r\n                <span \r\n                    style={{ \r\n                        backgroundColor: \"#212121\", \r\n                        width: width, \r\n                        height: height, \r\n                        transform: `scale(${scale}, ${scale})`, \r\n                        display: \"block\", \r\n                        transformOrigin: \"top left\" \r\n                    }} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n/// Parses a display name from a hero info Model string\r\nexport function parseNameFromModel (modelString) {\r\n    var dashSplit = modelString.split('.')[0].split('/');\r\n    return dashSplit[dashSplit.length - 1];\r\n};","// Enum of all attributes contained within npc_heroes\r\nexport const EAttributes = {\r\n    ATTR_STRENGTH: \"DOTA_ATTRIBUTE_STRENGTH\",\r\n    ATTR_AGILITY: \"DOTA_ATTRIBUTE_AGILITY\",\r\n    ATTR_INTELLIGENCE: \"DOTA_ATTRIBUTE_INTELLECT\"\r\n};\r\n\r\nexport const EDamageType = {\r\n    MAGICAL: \"DAMAGE_TYPE_MAGICAL\",\r\n    PURE: \"DAMAGE_TYPE_PURE\",\r\n    PHYSICAL: \"DAMAGE_TYPE_PHYSICAL\",\r\n};\r\n\r\n/// All Ability Behaviour types\r\nexport const EAbilityBehaviour = {\r\n    UNIT_TARGET: \"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET\",\r\n    POINT: \"DOTA_ABILITY_BEHAVIOR_POINT\",\r\n    AOE: \"DOTA_ABILITY_BEHAVIOR_AOE\",\r\n    HIDDEN: \"DOTA_ABILITY_BEHAVIOR_HIDDEN\",\r\n    PASSIVE: \"DOTA_ABILITY_BEHAVIOR_PASSIVE\",\r\n    NO_TARGET: \"DOTA_ABILITY_BEHAVIOR_NO_TARGET\",\r\n    IMMEDIATE: \"DOTA_ABILITY_BEHAVIOR_IMMEDIATE\",\r\n    IGNORE_CHANNEL: \"DOTA_ABILITY_BEHAVIOR_IGNORE_CHANNEL\",\r\n    SHOW_IN_GUIDES: \"DOTA_ABILITY_BEHAVIOR_SHOW_IN_GUIDES\",\r\n    AURA: \"DOTA_ABILITY_BEHAVIOR_AURA\",\r\n}\r\n\r\n/// Enum of all spell immune types, if the ability pierces spell immunity\r\nexport const ESpellImmunityType = {\r\n    YES: \"SPELL_IMMUNITY_ENEMIES_YES\",\r\n    NO: \"SPELL_IMMUNITY_ENEMIES_NO\",\r\n}","// * Helper and utility functions to provide for retrieving data from \"npc_heroes.json\"\r\n// * \r\n\r\nimport { EAttributes } from \"../enums/attributes\";\r\n\r\nimport { DOTAHeroes } from \"../data/dota2/json/npc_heroes.json\";\r\n\r\n/// Get the base and per level stats of a heroes primary attribute\r\nexport function getPrimaryAttributeStats(heroInfo) {\r\n    if (heroInfo && heroInfo.AttributePrimary) {\r\n        return getSpecificAttributeStats(heroInfo.AttributePrimary, heroInfo);\r\n    } else{\r\n        return null;\r\n    }\r\n}\r\n\r\n/// Get the base and per level stats of a specific attribute\r\nexport function getSpecificAttributeStats(specificAttribute, heroInfo) {\r\n    var basePrimary = 0;\r\n    var primaryPerLevel = 0;\r\n\r\n    switch(specificAttribute) {\r\n        case EAttributes.ATTR_STRENGTH:\r\n            {\r\n                basePrimary = parseInt(heroInfo.AttributeBaseStrength);\r\n                primaryPerLevel = parseFloat(heroInfo.AttributeStrengthGain);\r\n                break;\r\n            }\r\n        case EAttributes.ATTR_AGILITY:\r\n            {\r\n                basePrimary = parseInt(heroInfo.AttributeBaseAgility);\r\n                primaryPerLevel = parseFloat(heroInfo.AttributeAgilityGain);\r\n                break;\r\n            }\r\n        case EAttributes.ATTR_INTELLIGENCE:\r\n            {\r\n                basePrimary = parseInt(heroInfo.AttributeBaseIntelligence);\r\n                primaryPerLevel = parseFloat(heroInfo.AttributeIntelligenceGain);\r\n                break;\r\n            }\r\n        default:\r\n            console.error(`Unable to get attribute stats because of unknown specific attribute '${specificAttribute}'`);\r\n    }\r\n    \r\n    return {\r\n        base: basePrimary,\r\n        perLevel: primaryPerLevel,\r\n    };\r\n}\r\n\r\n/// Gets all hero talents from a hero info\r\nexport function getHeroTalents (heroInfo) {\r\n    // Get simple array of all talents from npc_heroes.json\r\n    // All abilities are stored in npc_heroes.json as \"Ability?\", where ? is a number. \r\n    // Not always in numberical order like 1, 2, 3\r\n\r\n    var keys = Object.keys(heroInfo);\r\n    var talents = [];\r\n    for(var i = 0; i < keys.length; i++) {\r\n        if (keys[i].includes(\"Ability\") && !keys[i].includes(\"AbilityDraft\")) {\r\n            var ability = heroInfo[keys[i]];\r\n            if (ability && typeof ability === \"string\") {\r\n                if (ability !== \"generic_hidden\" && ability.includes(\"special_bonus\")) {\r\n                    talents.push(ability);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // sort into nice list\r\n    var mappedTalents = [];\r\n    var lvlRow = 0;\r\n    for (i = 0 ; i < talents.length; i += 2) {\r\n        mappedTalents.push({\r\n            lvl: 10 + (5 * lvlRow),\r\n            rightTalent: talents[i],\r\n            leftTalent: talents[i + 1]\r\n        });\r\n\r\n        lvlRow++;\r\n    }\r\n\r\n    // Sort by lvl 25 talents first\r\n    mappedTalents.sort((a, b) => a.lvl < b.lvl ? 1 : -1);\r\n\r\n    return mappedTalents;\r\n}\r\n\r\n/// Gets all hero abilities from a hero info\r\nexport function getAllHeroAbilities (heroInfo) {\r\n    var keys = Object.keys(heroInfo);\r\n    var abilities = [];\r\n    for(var i = 0; i < keys.length; i++) {\r\n        if (keys[i].includes(\"Ability\") && !keys[i].includes(\"AbilityDraft\")) {\r\n            var ability = heroInfo[keys[i]];\r\n            if (ability && typeof ability === \"string\") {\r\n                if (ability !== \"generic_hidden\" && !ability.includes(\"special_bonus\")) {\r\n                    abilities.push(ability);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return abilities;\r\n}\r\n\r\n/// Returns the base hero information that all heroes are based on\r\nexport function getDotaBaseHero () {\r\n    return DOTAHeroes?.npc_dota_hero_base;\r\n}\r\n\r\n/// Gets the hero's primary attribute as the EAttribute enum\r\nexport function getPrimaryAttribute (hero) {\r\n    switch(hero.AttributePrimary) {\r\n        case EAttributes.ATTR_STRENGTH:\r\n            return EAttributes.ATTR_STRENGTH;\r\n        case EAttributes.ATTR_AGILITY:\r\n            return EAttributes.ATTR_AGILITY;\r\n        case EAttributes.ATTR_INTELLIGENCE:\r\n            return EAttributes.ATTR_INTELLIGENCE;\r\n        default:\r\n            return null;\r\n    }\r\n}","import { DOTAHeroes } from \"../data/dota2/json/npc_heroes.json\";\r\nimport { lang as EngAbilStrings } from \"../data/dota2/languages/abilities_english.json\";\r\nimport { lang as EngDotaStrings } from \"../data/dota2/languages/dota_english.json\";\r\n\r\nimport {\r\n    parseNameFromModel,\r\n} from \"../utils\";\r\nimport {\r\n    getAllHeroAbilities,\r\n    getHeroTalents,\r\n} from \"../utility/dataHelperHero\";\r\n\r\nconst initialState = {\r\n    /// Current selected hero by the user\r\n    selectedHero: DOTAHeroes.npc_dota_hero_zuus,\r\n    /// display name of the selectedHero\r\n    selectedHeroName: parseNameFromModel(DOTAHeroes.npc_dota_hero_zuus.Model),\r\n    /// Array of abilities of the selectedHero\r\n    heroAbilities: getAllHeroAbilities(DOTAHeroes.npc_dota_hero_zuus),\r\n    /// Array of talents of the selectedHero\r\n    heroTalents: getHeroTalents(DOTAHeroes.npc_dota_hero_zuus),\r\n    /// Array of talents selected by the user\r\n    selectedTalents: [ ],\r\n    /// Current level of the hero set by the user\r\n    heroLevel: 1,\r\n\r\n    /// Current items that have been selected\r\n    items: [\r\n        { slot: 0, item: \"abyssal_blade\" },\r\n        { slot: 1, item: \"\" },\r\n        { slot: 2, item: \"\" },\r\n        { slot: 3, item: \"\" },\r\n        { slot: 4, item: \"\" },\r\n        { slot: 5, item: \"\" },\r\n    ],\r\n    /// Current backpack selected by user\r\n    backpack: [\r\n        { slot: 0, item: \"\" },\r\n        { slot: 1, item: \"\" },\r\n        { slot: 2, item: \"\" },\r\n    ],\r\n    /// Current neutral item selected by user\r\n    neutralItem: { item: \"orb_of_destruction\" },\r\n\r\n    // Current code of the selected UI language\r\n    lang: \"en\",\r\n    stringsAbilities: EngAbilStrings,\r\n    stringsDota: EngDotaStrings,\r\n\r\n    /// Selected enemy hero \r\n    selectedEnemyHero: DOTAHeroes.npc_dota_hero_target_dummy,\r\n    selectedEnemyHeroName: parseNameFromModel(DOTAHeroes.npc_dota_hero_target_dummy.Model[1]),\r\n    enemyHeroTalents: getHeroTalents(DOTAHeroes.npc_dota_hero_target_dummy),\r\n    enemyHeroAbilities: getAllHeroAbilities(DOTAHeroes.npc_dota_hero_target_dummy),\r\n    selectedEnemyTalents: [ ],\r\n    enemyHeroItems: [\r\n        { slot: 0, item: \"ultimate_scepter\" },\r\n        { slot: 1, item: \"\" },\r\n        { slot: 2, item: \"\" },\r\n        { slot: 3, item: \"\" },\r\n        { slot: 4, item: \"\" },\r\n        { slot: 5, item: \"\" },\r\n    ],\r\n};\r\n\r\nexport default initialState;","import initialState from \"./initialState\";\r\n\r\nimport {\r\n    SELECTED_HERO,\r\n    SELECTED_ITEM,\r\n    SELECTED_BACKPACK_ITEM,\r\n    SELECTED_NEUTRAL,\r\n    SELECTED_TALENT,\r\n    UNSELECTED_TALENT,\r\n    NEW_HERO_LEVEL,\r\n} from \"../constants/actionTypes\";\r\n\r\nimport {\r\n    parseNameFromModel,\r\n} from \"../utils\";\r\n\r\nimport {\r\n    getAllHeroAbilities,\r\n    getHeroTalents,\r\n} from \"../utility/dataHelperHero\";\r\n\r\nfunction getNewItemArray(itemArray, newItem) {\r\n    /// Remove old slot insert new and sort by Slot\r\n    var newArray = itemArray.filter((val) => {\r\n        if (val.slot !== newItem.slot) {\r\n            return val;\r\n        }\r\n    })\r\n    newArray.push({ slot: newItem.slot, item: newItem.item });\r\n    newArray.sort((a, b) => (a.slot > b.slot) ? 1 : -1);\r\n    return newArray;\r\n}\r\n\r\nfunction getNewTalentArray(talentArray, newTalent) {\r\n    var newArray = talentArray.map((value => { return value }));\r\n    newArray.push(newTalent);\r\n    return newArray;\r\n}\r\n\r\nfunction removeTalent (talentArray, unselectedTalent) {\r\n    /// Filter to get all but the unselectedTalent\r\n    var array = talentArray.filter((talent) => {\r\n        if (talent && talent !== unselectedTalent) {\r\n            return talent;\r\n        }\r\n    });\r\n    return array;\r\n}\r\n\r\nfunction reducer(state = initialState, action) {\r\n    switch(action.type)\r\n    {\r\n        case SELECTED_HERO:\r\n            return {\r\n                ...state,\r\n                selectedHero: action.value,\r\n                selectedHeroName: parseNameFromModel(action.value.Model),\r\n                heroAbilities: getAllHeroAbilities(action.value),\r\n                heroTalents: getHeroTalents(action.value),\r\n                \r\n                // reset selected talents when new hero selected\r\n                selectedTalents: [ ],\r\n            };\r\n        case SELECTED_ITEM:\r\n            return {\r\n                ...state,\r\n                items: getNewItemArray(state.items, action.value),\r\n            };\r\n        case SELECTED_BACKPACK_ITEM:\r\n            return {\r\n                ...state,\r\n                backpack: getNewItemArray(state.backpack, action.value),\r\n            }\r\n        case SELECTED_NEUTRAL:\r\n            return {\r\n                ...state,\r\n                neutralItem: action.value,\r\n            };\r\n        case SELECTED_TALENT:\r\n            return {\r\n                ...state,\r\n               selectedTalents: getNewTalentArray(state.selectedTalents, action.value),\r\n            }\r\n            case UNSELECTED_TALENT:\r\n                return {\r\n                    ...state,\r\n                    selectedTalents: removeTalent(state.selectedTalents, action.value),\r\n                }\r\n        case NEW_HERO_LEVEL:\r\n            return {\r\n                ...state,\r\n                heroLevel: action.value,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","export const SELECTED_HERO = \"SELECT_HERO\";\r\nexport const SELECTED_NEUTRAL = \"SELECTED_NEUTRAL\";\r\nexport const SELECTED_ITEM = \"SELECTED_ITEM\";\r\nexport const SELECTED_BACKPACK_ITEM = \"SELECTED_BACKPACK_ITEM\";\r\nexport const SELECTED_TALENT = \"SELECTED_TALENT\";\r\nexport const UNSELECTED_TALENT = \"UNSELECTED_TALENT\";\r\nexport const NEW_HERO_LEVEL = \"NEW_HERO_LEVEL\";\r\n\r\nexport const LANGUAGE_CHANGED = \"LANGUAGE_CHANGED\";\r\n\r\nexport const ENEMY_SELECTED = \"ENEMY_SELECTED\";\r\nexport const ENEMY_SELECTED_TALENT = \"ENEMY_SELECTED_TALENT\";","/// Enum of all supported languages\r\nexport const ELanguages = {\r\n    SCHINESE: \"szh\",\r\n    ENGLISH: \"en\",\r\n    //RUSSIAN: \"ru\",\r\n};","import {\r\n    LANGUAGE_CHANGED\r\n} from \"../constants/actionTypes\";\r\nimport { ELanguages } from \"../enums/languages\";\r\nimport initialState from \"./initialState\";\r\n\r\nimport { lang as EngAbilStrings } from \"../data/dota2/languages/abilities_english.json\";\r\nimport { lang as EngDotaStrings } from \"../data/dota2/languages/dota_english.json\";\r\n\r\nimport { lang as SChineseAbilStrings } from \"../data/dota2/languages/abilities_schinese.json\";\r\nimport { lang as SChineseDotaStrings } from \"../data/dota2/languages/dota_schinese.json\";\r\n\r\nfunction getAbilityStrings(langCode) {\r\n    switch(langCode) {\r\n        case ELanguages.ENGLISH:\r\n            return EngAbilStrings;\r\n        case ELanguages.SCHINESE:\r\n            return SChineseAbilStrings;\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\nfunction getGeneralStrings(langCode) {\r\n    switch(langCode) {\r\n        case ELanguages.ENGLISH:\r\n            return EngDotaStrings;\r\n        case ELanguages.SCHINESE:\r\n            return SChineseDotaStrings;\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\nexport default (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case LANGUAGE_CHANGED:\r\n            console.log(`${LANGUAGE_CHANGED}: ${action.value}`);\r\n            return {\r\n                ...state,\r\n                lang: action.value,\r\n\r\n                stringsAbilities: getAbilityStrings(action.value),\r\n                stringsDota: getGeneralStrings(action.value),\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import { createStore, combineReducers } from \"redux\";\r\nimport hero from \"../reducers/hero\";\r\nimport language from \"../reducers/language\";\r\nimport enemy from \"../reducers/enemy\";\r\n\r\nconst allReducers = combineReducers({\r\n    language,\r\n    hero,\r\n    enemy,\r\n});\r\n\r\nconst store = createStore(allReducers);\r\n\r\nexport default store;","import initialState from \"./initialState\";\r\n\r\nimport {\r\n    ENEMY_SELECTED,\r\n    ENEMY_SELECTED_TALENT\r\n} from \"../constants/actionTypes\";\r\n\r\nexport default (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case ENEMY_SELECTED:\r\n            return {\r\n                ...state,\r\n\r\n                enemy: action.value,\r\n            };\r\n        case ENEMY_SELECTED_TALENT:\r\n            return {\r\n                ...state,\r\n\r\n                selectedEnemyTalents: [ ],\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Form } from 'react-bootstrap';\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { LANGUAGE_CHANGED } from \"../../constants/actionTypes\";\r\nimport { ELanguages } from \"../../enums/languages\";\r\n\r\nfunction getSupportedLanguages() {\r\n    var langs = Object.values(ELanguages);\r\n    return langs.map((value) => {\r\n        return (\r\n            <option value={value} key={value}>{value}</option>\r\n        )\r\n    });\r\n}\r\n\r\nclass LanguageSelect extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.onLanguageChanged = this.onLanguageChanged.bind(this);\r\n    }\r\n\r\n    onLanguageChanged(event) {\r\n        let newLanguage = event.target.value;\r\n        this.props.dispatch({ type: LANGUAGE_CHANGED, value: newLanguage });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Form.Control as=\"select\" onChange={this.onLanguageChanged} defaultValue={this.props.lang}>\r\n                    { getSupportedLanguages() }\r\n                </Form.Control>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    lang: state.language.lang,\r\n});\r\n\r\nexport default connect(mapStateToProps)(LanguageSelect);","import LanguageSelect from \"./LanguageSelect\";\r\n\r\nexport default LanguageSelect;","import React, { Component } from 'react';\r\nimport { \r\n    Nav,\r\n    Navbar,\r\n    Container,\r\n    Button,\r\n}from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\r\n\r\nimport LanguageSelect from '../LanguageSelect';\r\n\r\nlet pkg = require('../../../package.json');\r\n\r\nclass Navigation extends Component {\r\n    render() {\r\n        return (\r\n            <Navbar>\r\n                <Container>\r\n                    <Navbar.Brand to=\"/\" as={Link}>foresight</Navbar.Brand>\r\n                    <Nav.Link \r\n                        className=\"px-1 align-bottom mr-2\"\r\n                        style={{ fontSize: \"0.85rem\" }}\r\n                        eventKey=\"disabled\" \r\n                        disabled>\r\n                            {\r\n                                pkg ? \"v\" + pkg.version : \"v0.0.0\"\r\n                            }\r\n                    </Nav.Link>\r\n                    <Nav.Link\r\n                        className=\"px-1 align-bottom mr-2\"\r\n                        style={{ fontSize: \"0.85rem\" }}\r\n                        eventKey=\"disabled\"\r\n                        disabled>\r\n                        {\r\n                            pkg ? pkg.dotaVersion : \"Unknown\"\r\n                        }\r\n                    </Nav.Link>\r\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                        <Nav className=\"mr-auto\">\r\n                            <Nav.Link to=\"/\" as={Link}>home</Nav.Link>\r\n                            <Nav.Link to=\"/app\" as={Link}>calculator</Nav.Link>\r\n                        </Nav>\r\n                        <div className=\"mr-2\">\r\n                            <LanguageSelect/>\r\n                        </div>\r\n                        <a href=\"https://github.com/JoshLmao/foresight\">\r\n                            <Button variant=\"outline-secondary\">\r\n                                <FontAwesomeIcon icon={faGithub} />\r\n                            </Button>\r\n                        </a>\r\n                    </Navbar.Collapse>\r\n                </Container>\r\n            </Navbar>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Navigation;","import Navigation from \"./Navigation\";\r\n\r\nexport default Navigation;","import FourOhFour from \"./FourOhFour\";\r\n\r\nexport default FourOhFour;","import React, { Component } from 'react';\r\n\r\nclass FourOhFour extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                404 page\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FourOhFour;","\r\n// * Helper and utility functions to provide for retrieving data from \"npc_items.json\"\r\n// * \r\nimport { DOTAAbilities as DOTAItems } from \"../data/dota2/json/items.json\";\r\nimport { EAttributes } from \"../enums/attributes\";\r\n\r\nexport function getItemInfoFromName (itemName) {\r\n    if (itemName)\r\n        return DOTAItems[\"item_\" + itemName];\r\n    else\r\n        return null;\r\n}\r\n\r\n/// Gets the value of an item's AbilitySpecial array\r\nexport function getItemSpecialAbilityValue (itemInfo, specialAbilityValueKey) {\r\n    if (itemInfo && itemInfo.AbilitySpecial) {\r\n        for(var i = 0; i < itemInfo.AbilitySpecial.length; i++) {\r\n            var keys = Object.keys(itemInfo.AbilitySpecial[i]);\r\n            var matchingKey = keys.find(element => {\r\n                return element === specialAbilityValueKey;\r\n            });\r\n\r\n            if (matchingKey) {\r\n                var specialAbilityInfo = itemInfo.AbilitySpecial[i];\r\n                if (specialAbilityInfo.var_type === \"FIELD_INTEGER\") {\r\n                    return parseInt(specialAbilityInfo[matchingKey]);\r\n                } \r\n                else if(specialAbilityInfo.var_type === \"FIELD_FLOAT\") {\r\n                    return parseFloat(specialAbilityInfo[matchingKey]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\n\r\n/// Try Gets a item info and sepcial value from it's item's Ability Special array\r\nexport function tryGetItemSpecialValue (item, specialAbilityValueKey) {\r\n    var itemInfo = getItemInfoFromName(item.item);\r\n    if (itemInfo) {\r\n        var specialValue = getItemSpecialAbilityValue(itemInfo, specialAbilityValueKey);\r\n        if (specialValue) {\r\n            return specialValue;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/// Try Gets a neutral item info and special value from it's items' AbilitySpecial array\r\nexport function tryGetNeutralSpecialValue (neutral, specialValueKey) {\r\n    var foundNeutralInfo = getItemInfoFromName(neutral.item);\r\n    if (foundNeutralInfo) {\r\n        var specialValue = getItemSpecialAbilityValue(foundNeutralInfo, specialValueKey);\r\n        if (specialValue) {\r\n            return specialValue;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/// Returns all neutral items\r\nexport function getAllNeutrals() {\r\n     /// Filter out unused or unnecessary keys in items.json\r\n     var selectableNeutrals = Object.keys(DOTAItems).filter((value) => {\r\n        var key = value.toLowerCase();\r\n        var ability = DOTAItems[value];\r\n        if (key !== \"version\" && !ability.IsObsolete) {\r\n            if (ability.ItemIsNeutralDrop === \"1\") {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    });\r\n    selectableNeutrals.sort();\r\n\r\n    // Map to an object\r\n    selectableNeutrals = selectableNeutrals.map((key) => {\r\n        let itemKey = key;\r\n        if (itemKey.includes(\"recipe\")) {\r\n            // remove recipe and retrieve item version\r\n            itemKey = itemKey.replace(\"_recipe\", \"\");\r\n        }\r\n\r\n        var itemInfo = DOTAItems[itemKey];\r\n        if (itemInfo.ItemIsNeutralDrop === \"1\") {\r\n            // Remove 'item_' prefix, split by _, remove \"item\" and join again\r\n            var name = itemKey.split('_');\r\n            name.shift();\r\n            name = name.join('_');\r\n\r\n            return {\r\n                item: name,\r\n                itemInfo: itemInfo,\r\n            };\r\n        }\r\n    });\r\n\r\n    return selectableNeutrals;\r\n}\r\n\r\n/// Gets the correct key inside items.json for the hero's primary attribute\r\nexport function primaryAttributeToItemBonusKey(primaryAttr) {\r\n    switch(primaryAttr) {\r\n        case EAttributes.ATTR_STRENGTH:\r\n            return [ \"bonus_strength\" ];\r\n        case EAttributes.ATTR_AGILITY:\r\n            return [ \"bonus_agility\" ];\r\n        case EAttributes.ATTR_INTELLIGENCE:\r\n            return [ \"bonus_intellect\", \"bonus_intelligence\" ];\r\n        default:\r\n            return null;\r\n    }\r\n}","// * Helper and utility functions to provide for retrieving data from \"npc_abilities.json\"\r\n// * \r\n\r\nimport { DOTAAbilities } from \"../data/dota2/json/npc_abilities.json\";\r\nimport { \r\n    EAbilityBehaviour, \r\n    EDamageType, \r\n    ESpellImmunityType \r\n} from \"../enums/attributes\";\r\n\r\nexport function getAbilityInfoFromName(abilityName) {\r\n    if (abilityName) {\r\n        return DOTAAbilities[abilityName];\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport function tryGetAbilitySpecialAbilityValue (ability, specialValueKey, abilityLevel = 1) {\r\n    let abilityInfo = getAbilityInfoFromName(ability);\r\n    if (abilityInfo) {\r\n        let specialValue = getAbilitySpecialAbilityValue(abilityInfo, specialValueKey, abilityLevel);\r\n        if (specialValue) {\r\n            return specialValue;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nexport function getAbilitySpecialAbilityValue(abilityInfo, specialAbilityKey, abilityLevel = 1) {\r\n    if (abilityInfo && abilityInfo.AbilitySpecial) {\r\n        for(let i = 0; i < abilityInfo.AbilitySpecial.length; i++) {\r\n            let keys = Object.keys(abilityInfo.AbilitySpecial[i]);\r\n            let matchingKey = keys.find(element => {\r\n                return element === specialAbilityKey;\r\n            });\r\n\r\n            if (matchingKey) {\r\n                let specialAbilityInfo = abilityInfo.AbilitySpecial[i];\r\n\r\n                // If value contains a space, it can be levelled up needs to be split up\r\n                let dataValue = specialAbilityInfo[matchingKey];\r\n                if (typeof dataValue === \"string\" && dataValue.includes(' ')) {\r\n                    let split = specialAbilityInfo[matchingKey].split(' ');\r\n                    dataValue = split[abilityLevel - 1];\r\n                }\r\n\r\n                if (specialAbilityInfo.var_type === \"FIELD_INTEGER\") {\r\n                    return parseInt(dataValue);\r\n                } \r\n                else if(specialAbilityInfo.var_type === \"FIELD_FLOAT\") {\r\n                    return parseFloat(dataValue);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/// Gets the standard output damage of an ability from its level\r\nexport function getAbilityOutputDamage(abilityInfo, abilityLevel) {\r\n    let abilityDmg = {\r\n        min: null,\r\n        max: null,\r\n        damage: null,\r\n        isPercent: null,\r\n    };\r\n\r\n    if (abilityInfo && abilityLevel) {\r\n        if (abilityInfo.AbilityDamage) {\r\n            let dmgValue = abilityInfo.AbilityDamage.split(' ')[abilityLevel - 1];\r\n            abilityDmg = {\r\n                ...abilityDmg,\r\n                damage: parseFloat(dmgValue),\r\n            };\r\n        }\r\n        else if (abilityInfo.AbilitySpecial) \r\n        {\r\n            for (let i = 0; i < abilityInfo.AbilitySpecial.length; i++) {\r\n                let specialAbilityElement = abilityInfo.AbilitySpecial[i];\r\n                \r\n                let abilSpecKeys = Object.keys(specialAbilityElement);\r\n                for(let key of abilSpecKeys) {\r\n                    // AbilitySpecial contains damage under a property\r\n                    let lowerKey = key.toLowerCase();\r\n                    \r\n                    // Includes dmg & not scepter\r\n                    if (lowerKey.includes(\"damage\") && !lowerKey.includes(\"scepter\")) \r\n                    {\r\n                        let value = parseAbilityValueByLevel(specialAbilityElement[key], abilityLevel);\r\n                        let dmgValue = parseFloat(value);\r\n\r\n                        if (lowerKey.includes(\"min\")) {\r\n                            //min_damage\r\n                            abilityDmg.min =  dmgValue;\r\n                        }\r\n                        if (lowerKey.includes(\"max\")) {\r\n                            abilityDmg.max = dmgValue;\r\n                        } \r\n                        if (lowerKey.includes(\"pct\")) {\r\n                            abilityDmg.isPercent = true;\r\n                        }\r\n\r\n                        if (!abilityDmg.min && !abilityDmg.max) {\r\n                            abilityDmg.damage = dmgValue;\r\n                        }\r\n                    }\r\n\r\n                    // Stop iterate if have min&max or dmg\r\n                    if (abilityDmg.min && abilityDmg.max || abilityDmg.damage) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return abilityDmg;\r\n}\r\n\r\n/// Gets all behaviour options of an ability such as if it goes through BKB, damage type, etc\r\nexport function getAbilityBehaviours(abilityInfo) {\r\n    if (!abilityInfo) {\r\n        return null;\r\n    }\r\n\r\n    let behaviours = [];\r\n\r\n    if (abilityInfo.AbilityBehavior) {\r\n        let targeting = [];\r\n        let splitBehaviours = abilityInfo.AbilityBehavior.split(' | ');\r\n        for(let b of splitBehaviours) {\r\n            switch(b) {\r\n                case EAbilityBehaviour.UNIT_TARGET:\r\n                    targeting.push(\"DOTA_ToolTip_Ability_Target\");\r\n                    break;\r\n                case EAbilityBehaviour.POINT:\r\n                    targeting.push(\"DOTA_ToolTip_Ability_Point\");\r\n                    break;\r\n                case EAbilityBehaviour.PASSIVE:\r\n                    targeting.push(\"DOTA_ToolTip_Ability_Passive\");\r\n                    break;\r\n                case EAbilityBehaviour.NO_TARGET:\r\n                    targeting.push(\"DOTA_ToolTip_Ability_NoTarget\");\r\n                    break;\r\n            }\r\n        }\r\n    \r\n        behaviours.push({\r\n            key: \"DOTA_ToolTip_Ability\",\r\n            value: targeting,\r\n        });\r\n    }\r\n\r\n    if (abilityInfo.AbilityUnitDamageType) {\r\n        let dmgTypeVal = \"\";\r\n        let splitDmgTypes = abilityInfo.AbilityUnitDamageType.split(\" | \");\r\n        for(let type of splitDmgTypes) {\r\n            switch(type) {\r\n                case EDamageType.MAGICAL:\r\n                    dmgTypeVal = \"DOTA_Plus_Death_Screen_MagicalDamage\";\r\n                    break;\r\n                case EDamageType.PURE:\r\n                    dmgTypeVal = \"DOTA_Plus_Death_Screen_PureDamage\";\r\n                    break;\r\n                case EDamageType.PHYSICAL:\r\n                    dmgTypeVal = \"DOTA_Plus_Death_Screen_PhysicalDamage\";\r\n                    break;\r\n                default:\r\n                    dmgTypeVal = \"Not Implemented\";\r\n                    break;\r\n            }\r\n        }\r\n\r\n        behaviours.push({\r\n            key: \"DOTA_ToolTip_Damage\",\r\n            value: dmgTypeVal,\r\n        });\r\n    }\r\n\r\n    if (abilityInfo.SpellImmunityType) {\r\n        let pierceValue = \"\";\r\n        switch(abilityInfo.SpellImmunityType) {\r\n            case ESpellImmunityType.YES:\r\n                pierceValue = \"DOTA_ToolTip_PiercesSpellImmunity_Yes\";\r\n                break;\r\n            case ESpellImmunityType.NO:\r\n                pierceValue = \"DOTA_ToolTip_PiercesSpellImmunity_No\";\r\n                break;\r\n            default:\r\n                pierceValue = \"Unknown\";\r\n                break;\r\n        }\r\n\r\n        behaviours.push({\r\n            key: \"DOTA_ToolTip_PiercesSpellImmunity\",\r\n            value: pierceValue,\r\n        });\r\n    }\r\n\r\n    return behaviours;\r\n}\r\n\r\nexport function getAbilityCastRequirements (abilityInfo, levelInfo) {\r\n    if (!abilityInfo) {\r\n        return null;\r\n    }\r\n\r\n    let allRequirements = [];\r\n    // Cast Range\r\n    if (abilityInfo.AbilityCastRange) {\r\n        let range = parseAbilityValueByLevel(abilityInfo.AbilityCastRange, levelInfo.level);\r\n        allRequirements.push({\r\n            key: \"dota_ability_variable_cast_range\",\r\n            value: range,\r\n        })\r\n    }\r\n    // Damage\r\n    // if (abilityInfo.AbilityDamage) {\r\n    //     let dmg = parseAbilityValueByLevel(abilityInfo.AbilityDamage, levelInfo.level);\r\n    //     allRequirements.push({\r\n    //         key: \"dota_ability_variable_damage\",\r\n    //         value: dmg,\r\n    //     });\r\n    // }\r\n\r\n    // if (abilityInfo.AbilityCastPoint) {\r\n    //     let castPoint = parseAbilityValueByLevel(abilityInfo.AbilityCastPoint);\r\n    //     allRequirements.push({\r\n    //         key: \"Cast Point\",\r\n    //         value: castPoint,\r\n    //     });\r\n    // }\r\n\r\n    return allRequirements;\r\n}\r\n\r\n/// Parses an AbilitySpecial\r\nexport function parseAbilitySpecialValueByLevel (abilitySpecials, key, level = 1) {\r\n    let valuesSplit = abilitySpecials[key].split(' ');\r\n    if (valuesSplit.length > 1) {\r\n        return valuesSplit[level - 1];\r\n    } else {\r\n        return abilitySpecials[key];\r\n    }\r\n}\r\n\r\n/// Parses a value in an abilityInfo that could be alone or have multiple values per level\r\nexport function parseAbilityValueByLevel (value, level = 1) {\r\n    if (level < 1) {\r\n        return null;\r\n    }\r\n    \r\n    let abilValue = 0;\r\n    if (typeof value === \"string\") {\r\n        let splitValues = value.split(\" \");\r\n        if (splitValues.length > 1) {\r\n            abilValue = splitValues[level - 1];\r\n        } else {\r\n            abilValue = value;\r\n        }\r\n\r\n        abilValue = parseFloat(abilValue);\r\n    } else {\r\n        abilValue = value;\r\n    }\r\n\r\n    return abilValue;\r\n}","import { DOTAAbilities } from \"../data/dota2/json/npc_abilities.json\";\r\nimport {\r\n    getAbilityInfoFromName,\r\n    getAbilitySpecialAbilityValue\r\n} from \"./dataHelperAbilities\";\r\n\r\n/// Gets info and formattable display name of a talent\r\n/// Returns both display name of talent and it's info in an object\r\nexport function getTalentInfoFromName(talent) {\r\n    if (talent) {\r\n        var talentInfo = DOTAAbilities[talent];\r\n        return talentInfo;    \r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport function tryGetTalentSpecialAbilityValue (talent, specialValueKey) {\r\n    let talentInfo = getAbilityInfoFromName(talent);\r\n    if(talentInfo) {\r\n        let specialValue = getAbilitySpecialAbilityValue(talentInfo, specialValueKey);\r\n        if (specialValue) {\r\n            return specialValue;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n","import { \r\n    getItemInfoFromName,\r\n    getItemSpecialAbilityValue,\r\n    tryGetItemSpecialValue,\r\n    tryGetNeutralSpecialValue,\r\n    primaryAttributeToItemBonusKey\r\n} from \"./dataHelperItems\";\r\n\r\nimport {\r\n    getAbilityInfoFromName,\r\n    getAbilitySpecialAbilityValue,\r\n    getAbilityOutputDamage,\r\n    tryGetAbilitySpecialAbilityValue,\r\n    parseAbilityValueByLevel\r\n\r\n} from \"./dataHelperAbilities\";\r\n\r\nimport {\r\n    getTalentInfoFromName,\r\n    tryGetTalentSpecialAbilityValue,\r\n} from \"./dataHelperTalents\";\r\n\r\nimport {\r\n    getDotaBaseHero,\r\n    getSpecificAttributeStats,\r\n    getPrimaryAttributeStats,\r\n    getPrimaryAttribute\r\n} from \"./dataHelperHero\";\r\n\r\nimport { EAttributes } from \"../enums/attributes\";\r\n\r\nimport { DOTAHeroes } from \"../data/dota2/json/npc_heroes.json\";\r\nimport { DOTAAbilities } from \"../data/dota2/json/npc_abilities.json\";\r\n\r\n/// Calculates the health of a hero\r\n/// https://dota2.gamepedia.com/Health\r\nexport function calculateHealth(hero, heroLevel, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }\r\n    \r\n    var HEALTH_PER_STRENGTH_POINT = 20;\r\n    let baseStrength = parseInt(hero.AttributeBaseStrength)\r\n    let strengthGain = parseFloat(hero.AttributeStrengthGain);\r\n\r\n    var baseHealth = 0;\r\n    if (DOTAHeroes && DOTAHeroes.npc_dota_hero_base && DOTAHeroes.npc_dota_hero_base.StatusHealth) {\r\n        baseHealth = parseInt(DOTAHeroes.npc_dota_hero_base.StatusHealth);\r\n    } else {\r\n        console.error(\"Can't add baseHealth to heroes health pool\");\r\n    }\r\n\r\n    var totalStr = baseStrength + (strengthGain * (heroLevel - 1));\r\n    let totalHealth = baseHealth + (totalStr * HEALTH_PER_STRENGTH_POINT);\r\n\r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            let bonusHealth = tryGetItemSpecialValue(item, \"bonus_health\");\r\n            if (bonusHealth) {\r\n                totalHealth += bonusHealth;\r\n            }\r\n\r\n            let bonusStr = tryGetItemSpecialValue(item, \"bonus_strength\");\r\n            if (bonusStr) {\r\n                totalHealth += bonusStr * HEALTH_PER_STRENGTH_POINT;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalHealth += bonusAllStats * HEALTH_PER_STRENGTH_POINT;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let bonusHealth = tryGetNeutralSpecialValue(neutral, \"bonus_health\");\r\n        if (bonusHealth) {\r\n            totalHealth += bonusHealth;\r\n        }\r\n\r\n        let bonusStr = tryGetNeutralSpecialValue(neutral, \"bonus_strength\");\r\n        if (bonusStr) {\r\n            totalHealth += bonusStr * HEALTH_PER_STRENGTH_POINT;\r\n        }\r\n\r\n        let bonusAllStats = tryGetNeutralSpecialValue(neutral, \"bonus_all_stats\");\r\n        if (bonusAllStats) {\r\n            totalHealth += bonusAllStats * HEALTH_PER_STRENGTH_POINT;\r\n        }\r\n    }\r\n\r\n    if (abilities && abilities.length > 0) {\r\n        \r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            if (talent.includes(\"bonus_hp\")) {\r\n                let bonusHealth = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusHealth) {\r\n                    totalHealth += bonusHealth;\r\n                }\r\n            } else if (talent.includes(\"bonus_strength\")) {\r\n                let bonusStr = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusStr) {\r\n                    totalHealth += bonusStr * HEALTH_PER_STRENGTH_POINT;\r\n                }\r\n            } else if (talent.includes(\"bonus_all_stats\")) {\r\n                let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAllStats) {\r\n                    totalHealth += bonusAllStats * HEALTH_PER_STRENGTH_POINT;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return totalHealth.toFixed(0);\r\n}\r\n\r\n/// Calculates the mana pool of a hero\r\n/// https://dota2.gamepedia.com/Mana\r\nexport function calculateMana(hero, heroLevel, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }    \r\n\r\n    let MANA_PER_INT_POINT = 12;\r\n    let baseInt = parseInt(hero.AttributeBaseIntelligence);\r\n    let intGain = parseFloat(hero.AttributeIntelligenceGain);\r\n\r\n    var baseMana = 0;\r\n    if (DOTAHeroes && DOTAHeroes.npc_dota_hero_base && DOTAHeroes.npc_dota_hero_base.StatusMana) {\r\n        baseMana = parseInt(DOTAHeroes.npc_dota_hero_base.StatusMana);\r\n    } else {\r\n        console.error(\"Can't add baseMana to heroes mana pool\");\r\n    }\r\n\r\n    var totalInt = baseInt + (intGain * (heroLevel - 1));\r\n    let totalMana = baseMana + (totalInt * MANA_PER_INT_POINT);\r\n\r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            let bonusMana = tryGetItemSpecialValue(item, \"bonus_mana\");\r\n            if (bonusMana) {\r\n                totalMana += bonusMana;\r\n            }\r\n\r\n            let bonusInt = tryGetItemSpecialValue(item, \"bonus_intellect\");\r\n            if (bonusInt) {\r\n                totalMana += bonusInt * MANA_PER_INT_POINT;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalMana += bonusAllStats * MANA_PER_INT_POINT;\r\n            }\r\n        }\r\n    }\r\n    \r\n    if (neutral) {\r\n        let bonusMana = tryGetNeutralSpecialValue(neutral, \"bonus_mana\");\r\n        if (bonusMana) {\r\n            totalMana += bonusMana;\r\n        }\r\n\r\n        let bonusInt = tryGetNeutralSpecialValue(neutral, \"bonus_intellect\");\r\n        if (bonusInt) {\r\n            totalMana += bonusInt * MANA_PER_INT_POINT;\r\n        }\r\n\r\n        let bonusAllStats = tryGetNeutralSpecialValue(neutral, \"bonus_all_stats\");\r\n        if (bonusAllStats) {\r\n            totalMana += bonusAllStats * MANA_PER_INT_POINT;\r\n        }\r\n    }\r\n\r\n    if (abilities && abilities.length > 0) {\r\n        for(let ability of abilities) {\r\n            let bonusMana = tryGetAbilitySpecialAbilityValue(ability, \"bonus_mana\");\r\n            if (bonusMana) {\r\n                totalMana += bonusMana;\r\n            }\r\n\r\n            let bonusInt = tryGetAbilitySpecialAbilityValue(ability, \"bonus_intellect\");\r\n            if (bonusInt) {\r\n                totalMana += bonusInt * MANA_PER_INT_POINT;\r\n            }\r\n\r\n            let bonusAllStats = tryGetAbilitySpecialAbilityValue(ability, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalMana += bonusAllStats * MANA_PER_INT_POINT;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            if (talent.includes(\"bonus_mp\")) {\r\n                let bonusMana = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusMana) {\r\n                    totalMana += bonusMana;\r\n                }\r\n            } else if (talent.includes(\"bonus_intelligence\")) {\r\n                let bonusInt = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusInt) {\r\n                    totalMana += bonusInt * MANA_PER_INT_POINT;\r\n                }\r\n            } else if (talent.includes(\"bonus_all_stats\")) {\r\n                let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAllStats) {\r\n                    totalMana += bonusAllStats * MANA_PER_INT_POINT;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return totalMana.toFixed(0);\r\n}\r\n\r\n/* Hero gains +0.1 regen per each point of strength\r\n* https://dota2.gamepedia.com/Health_regeneration */\r\nexport function calculateHealthRegen(hero, heroLevel, items, neutral, abilities, talents) {\r\n    if(!hero) {\r\n        return \"?\";\r\n    }\r\n\r\n    let HP_REGEN_PER_STRENGTH = 0.1;\r\n    let baseStr = parseInt(hero.AttributeBaseStrength);\r\n    let strPerLvl = parseFloat(hero.AttributeStrengthGain);\r\n\r\n    let totalHpRegen = (baseStr + (strPerLvl * (heroLevel - 1))) * HP_REGEN_PER_STRENGTH;\r\n    if (hero.StatusHealthRegen) {\r\n        totalHpRegen += parseFloat(hero.StatusHealthRegen);\r\n    }\r\n\r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            let regenAmt = tryGetItemSpecialValue(item, \"bonus_health_regen\");\r\n            if (regenAmt) {\r\n                totalHpRegen += regenAmt;\r\n            }\r\n\r\n            let bonusStr = tryGetItemSpecialValue(item, \"bonus_strength\");\r\n            if(bonusStr) {\r\n                totalHpRegen += bonusStr * HP_REGEN_PER_STRENGTH;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalHpRegen += bonusAllStats * HP_REGEN_PER_STRENGTH;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let bonusHealthRegen = tryGetNeutralSpecialValue(neutral, \"bonus_health_regen\");\r\n        if (bonusHealthRegen) {\r\n            totalHpRegen += bonusHealthRegen;\r\n        }\r\n\r\n        let bonusStr = tryGetNeutralSpecialValue(neutral, \"bonus_strength\");\r\n        if (bonusStr) {\r\n            totalHpRegen += bonusStr * HP_REGEN_PER_STRENGTH;\r\n        }\r\n        \r\n        let bonusAllStats = tryGetNeutralSpecialValue(neutral, \"bonus_all_stats\");\r\n        if (bonusAllStats) {\r\n            totalHpRegen += bonusAllStats * HP_REGEN_PER_STRENGTH;\r\n        }\r\n    } \r\n\r\n    if (abilities && abilities.length > 0) {\r\n        for (let ability of abilities) {\r\n            let bonusRegen = tryGetAbilitySpecialAbilityValue(ability, \"bonus_health_regen\", 1);\r\n            if (bonusRegen) {\r\n                totalHpRegen += bonusRegen;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for (let talent of talents) {\r\n            // Only get bonus_hp_regen talents\r\n            if (talent.includes(\"bonus_hp_regen\")) {\r\n                let bonusRegen = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusRegen) {\r\n                    totalHpRegen += bonusRegen;\r\n                }\r\n            } else if(talent.includes(\"bonus_strength\")) {\r\n                let bonusStr = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusStr) {\r\n                    totalHpRegen += bonusStr * HP_REGEN_PER_STRENGTH;\r\n                }\r\n            } else if (talent.includes(\"bonus_all_stats\")) {\r\n                let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAllStats) {\r\n                    totalHpRegen += bonusAllStats * HP_REGEN_PER_STRENGTH;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return totalHpRegen.toFixed(1);\r\n}\r\n\r\n/* Each point of intelligence increases the hero's mana regeneration by 0.05.\r\n * https://dota2.gamepedia.com/Mana_regeneration */\r\nexport function calculateManaRegen(hero, heroLevel, items, neutral, abilities, talents) {\r\n    if(!hero) {\r\n        return \"?\";\r\n    }\r\n    let MANA_REGEN_PER_INT = 0.05;\r\n    let baseInt = parseInt(hero.AttributeBaseIntelligence);\r\n    let intGain = parseFloat(hero.AttributeIntelligenceGain);\r\n\r\n    let totalManaRegen = (baseInt + (intGain * (heroLevel - 1))) * MANA_REGEN_PER_INT;\r\n    if (hero.StatusManaRegen) {\r\n        totalManaRegen += parseFloat(hero.StatusManaRegen);\r\n    }\r\n\r\n    if(items && items.length > 0) {\r\n        for(let item of items) {\r\n            let bonusManaRegen = tryGetItemSpecialValue(item, \"bonus_mana_regen\");\r\n            if (bonusManaRegen) {\r\n                totalManaRegen += bonusManaRegen;\r\n            }\r\n\r\n            let bonusInt = tryGetItemSpecialValue(item, \"bonus_intelligence\");\r\n            if(bonusInt) {\r\n                let regen = bonusInt * MANA_REGEN_PER_INT; \r\n                totalManaRegen += regen;\r\n            }\r\n\r\n            let bonusIntellect = tryGetItemSpecialValue(item, \"bonus_intellect\");\r\n            if (bonusIntellect) {\r\n                let regen = bonusIntellect * MANA_REGEN_PER_INT; \r\n                totalManaRegen += regen;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalManaRegen += bonusAllStats * MANA_REGEN_PER_INT;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let bonusInt = tryGetNeutralSpecialValue(neutral, \"bonus_intelligence\");\r\n        if (bonusInt) {\r\n            let manaRegen = bonusInt * MANA_REGEN_PER_INT;\r\n            totalManaRegen += manaRegen;\r\n        }\r\n\r\n        let bonusIntellect = tryGetNeutralSpecialValue(neutral, \"bonus_intellect\");\r\n        if (bonusIntellect) {\r\n            let regen = bonusIntellect * MANA_REGEN_PER_INT; \r\n            totalManaRegen += regen;\r\n        }\r\n\r\n        let bonusAllStats = tryGetNeutralSpecialValue(neutral, \"bonus_all_stats\");\r\n        if (bonusAllStats) {\r\n            totalManaRegen += bonusAllStats * MANA_REGEN_PER_INT;\r\n        }\r\n    }\r\n\r\n    if(abilities && abilities.length > 0) {\r\n        for (let ability of abilities) {\r\n            let manaRegen = tryGetAbilitySpecialAbilityValue(ability, \"mana_regen\", 1);\r\n            if (manaRegen) {\r\n                totalManaRegen += manaRegen;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            // Only includes bonus mana point regen talents\r\n            if(talent.includes(\"bonus_mp_regen\")) {\r\n                let value = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (value) {\r\n                    totalManaRegen += parseFloat(value);\r\n                }\r\n            } else if (talent.includes(\"bonus_intelligence\")) {\r\n                let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAllStats) {\r\n                    totalManaRegen += bonusAllStats * MANA_REGEN_PER_INT;\r\n                }\r\n            } else if (talent.includes(\"bonus_all_stats\")) {\r\n                let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAllStats) {\r\n                    totalManaRegen += bonusAllStats * MANA_REGEN_PER_INT;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return totalManaRegen.toFixed(1);\r\n}\r\n\r\n// Calculates the main armor of the hero\r\n// Each point of agility increases a hero's armor by 0.167 (1/6) https://dota2.gamepedia.com/Armor\r\nexport function calculateMainArmor(hero, level, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }\r\n\r\n    let ARMOR_PER_AGI = 0.167;\r\n    let baseArmor = hero.ArmorPhysical;\r\n    let baseAgility = hero.AttributeBaseAgility;\r\n    let agiPerLevel = hero.AttributeAgilityGain;\r\n\r\n    // Determine bonus agility from perLevel. Then work out main armor\r\n    var agiPer = (parseFloat(agiPerLevel) * (level - 1));\r\n    var totalArmor = parseInt(baseArmor) + ((parseInt(baseAgility) + agiPer) * ARMOR_PER_AGI);\r\n    \r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            let bonusArmor = tryGetItemSpecialValue(item, \"bonus_armor\");\r\n            if (bonusArmor) {\r\n                totalArmor += bonusArmor;\r\n            }\r\n\r\n            let bonusAgility = tryGetItemSpecialValue(item, \"bonus_agility\");\r\n            if (bonusAgility) {\r\n                let armor = bonusAgility * ARMOR_PER_AGI;\r\n                totalArmor += armor;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                let armor = bonusAllStats * ARMOR_PER_AGI;\r\n                totalArmor += armor;\r\n            }\r\n        }\r\n    }\r\n    \r\n    if(neutral) {\r\n        let bonusArmor = tryGetNeutralSpecialValue(neutral, \"bonus_armor\");\r\n        if (bonusArmor) {\r\n            totalArmor += bonusArmor;\r\n        }\r\n\r\n        let bonusAgi = tryGetNeutralSpecialValue(neutral, \"bonus_agility\");\r\n        if (bonusAgi) {\r\n            totalArmor += bonusAgi * ARMOR_PER_AGI;\r\n        }\r\n\r\n        let bonusAllStats = tryGetNeutralSpecialValue(neutral, \"bonus_all_stats\");\r\n        if (bonusAllStats) {\r\n            let armor = bonusAllStats * ARMOR_PER_AGI;\r\n            totalArmor += armor;\r\n        }\r\n    }\r\n\r\n    if (abilities && abilities.length > 0) {\r\n        for(let ability of abilities) {\r\n            let bonusArmor = tryGetAbilitySpecialAbilityValue(ability, \"bonus_armor\");\r\n            if (bonusArmor) {\r\n                totalArmor += bonusArmor;\r\n            }\r\n        }\r\n    }\r\n\r\n    if(talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            if (talent.includes(\"bonus_armor\")) {\r\n                let bonusArmor = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusArmor) {\r\n                    totalArmor += bonusArmor;\r\n                }\r\n            } else if (talent.includes(\"bonus_agility\")) {\r\n                let bonusAgility = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAgility) {\r\n                    totalArmor += bonusAgility * ARMOR_PER_AGI;\r\n                }\r\n            } else if (talent.includes(\"bonus_all_stats\")) {\r\n                let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAllStats) {\r\n                    totalArmor += bonusAllStats * ARMOR_PER_AGI;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Round to one decimal place\r\n    return totalArmor.toFixed(1);\r\n}\r\n\r\n/// Returns the total amount of spell amplification as a percentage applied to the hero\r\nexport function calculateTotalSpellAmp (talents, items, neutral) {\r\n    let totalSpellAmp = 0;\r\n    \r\n    // Determine if any talents provide spell amp\r\n    if (talents && talents.length > 0) {\r\n        let ampTalent = talents.find(element => element.includes(\"spell_amplify\"));\r\n        if (ampTalent) {\r\n            let talentInfo = DOTAAbilities[ampTalent.name];\r\n            if (talentInfo) {\r\n                let spellAmpInfo = talentInfo.AbilitySpecial.find(element => element.value);\r\n                if (spellAmpInfo) {\r\n                    let spellAmpAmt = parseInt(spellAmpInfo.value);\r\n                    totalSpellAmp += spellAmpAmt;\r\n\r\n                    //console.log(`Talent ${ampTalent.name} provides ${spellAmpAmt}% spell amp`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Determine if current neutral item provides any spell amplification\r\n    if (neutral) {\r\n        let foundNeutral = getItemInfoFromName(neutral.item);\r\n        if (foundNeutral) {\r\n            let spellAmpAmount = getItemSpecialAbilityValue(foundNeutral, \"spell_amp\");\r\n            if (spellAmpAmount) {\r\n                totalSpellAmp += spellAmpAmount;\r\n                //console.log(`Neutral ${neutral.item} provides ${spellAmpAmount}% spell amp`);\r\n            }\r\n        }\r\n    }\r\n\r\n    /// Determine if any items provide spell amp\r\n    if (items && items.length > 0) {\r\n        for(let i = 0; i < items.length; i++) {\r\n            if (items[i].item) {\r\n                let itemInfo = getItemInfoFromName(items[i].item);\r\n                if (itemInfo) {\r\n                    let spellAmpAmount = getItemSpecialAbilityValue(itemInfo, \"spell_amp\");\r\n                    if (spellAmpAmount) {\r\n                        totalSpellAmp += spellAmpAmount;\r\n                        //console.log(`Item ${items[i].item} provides ${spellAmpAmt}% spell amp`);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    return totalSpellAmp;\r\n}\r\n\r\nexport function calculateStatusResist(items, neutral) {\r\n    let totalStatusResist = 0.0;\r\n\r\n    if (items && items.length > 0) {\r\n        for(let i = 0; i < items.length; i++) {\r\n            if (items[i].item) {\r\n                let itemInfo = getItemInfoFromName(items[i].item);\r\n                if (itemInfo) {\r\n                    let statusResistAmount = getItemSpecialAbilityValue(itemInfo, \"status_resistance\");\r\n                    if (statusResistAmount) {\r\n                        totalStatusResist += statusResistAmount;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let statusResistAmount = tryGetNeutralSpecialValue(neutral, \"status_resistance\");\r\n        if (statusResistAmount) {\r\n            totalStatusResist += statusResistAmount;\r\n        }\r\n    }\r\n\r\n    return totalStatusResist;\r\n}\r\n\r\nexport function calculateMagicResist (items, neutral, abilities) {\r\n    // Formula from Wiki\r\n    // Total magic resistance = 1 − ((1 − natural resistance) × (1 − first resistance bonus) × (1 − second resistance bonus) × (1 + first resistance reduction) × (1 + second resistance reduction))\r\n    \r\n    // Array of magic resistance values\r\n    let resistanceBonuses = [ ];\r\n    \r\n    if (DOTAHeroes && DOTAHeroes?.npc_dota_hero_base?.MagicalResistance) {\r\n        let baseResist = parseInt(DOTAHeroes.npc_dota_hero_base.MagicalResistance);\r\n        resistanceBonuses.push(baseResist);\r\n    }\r\n\r\n    if (items && items.length > 0) {\r\n        for(let i = 0; i < items.length; i++) {\r\n            let itemInfo = getItemInfoFromName(items[i].item);\r\n            if (itemInfo) {\r\n                let magicResistAmount = getItemSpecialAbilityValue(itemInfo, \"bonus_magic_resistance\");\r\n                if (magicResistAmount) {\r\n                    resistanceBonuses.push(magicResistAmount);\r\n                }\r\n\r\n                magicResistAmount = getItemSpecialAbilityValue(itemInfo, \"magic_resistance\");\r\n                if (magicResistAmount) {\r\n                    resistanceBonuses.push(magicResistAmount);\r\n                }\r\n\r\n                magicResistAmount = getItemSpecialAbilityValue(itemInfo, \"bonus_magical_armor\");\r\n                if (magicResistAmount) {\r\n                    resistanceBonuses.push(magicResistAmount);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let magicResistAmount = tryGetNeutralSpecialValue(neutral, \"magic_resistance\");\r\n        if (magicResistAmount) {\r\n            resistanceBonuses.push(magicResistAmount);\r\n        }\r\n    }\r\n\r\n    if (abilities && abilities.length > 0) { \r\n        for(let ability of abilities) {\r\n            // let magicResistAmount = tryGetAbilitySpecialAbilityValue(ability, \"magic_resistance\");\r\n            // if (magicResistAmount) {\r\n            //     resistanceBonuses.push(magicResistAmount);\r\n            // }\r\n            \r\n            let magicResistAmount = tryGetAbilitySpecialAbilityValue(ability, \"bonus_magic_resistance\");\r\n            if (magicResistAmount) {\r\n                resistanceBonuses.push(magicResistAmount);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Divide original value into 0.x and minus from 1 to get the reverse\r\n    let edited = []\r\n    for(let i = 0; i < resistanceBonuses.length; i++) {\r\n        edited.push(1 - (resistanceBonuses[i] / 100));\r\n    }\r\n\r\n    // multiply them all together \r\n    let total = edited[0];\r\n    for(let i = 1; i < edited.length; i++) {\r\n        total *= edited[i];\r\n    }\r\n\r\n    // then minus from 1, and multiply by 100 to get value as a percentage\r\n    let percent = (1 - total) * 100;\r\n    return percent.toFixed(2);\r\n}\r\n\r\n/// Calculates the total magic resistance of the hero\r\n/// https://dota2.gamepedia.com/Magic_resistance\r\nexport function calculatePhysicalResist (totalArmor) {\r\n    // Formula from https://www.dotabuff.com/blog/2018-11-30-understanding-720-armor-changes\r\n    //( 0.052 * armor ) ÷ ( 0.9 + 0.048 * |armor|)\r\n    var physResist = (0.052 * totalArmor) / (0.9 + 0.048 * Math.abs(totalArmor));\r\n    var percent = physResist * 100;\r\n    return percent.toFixed(0);\r\n}\r\n\r\n/// Calculates evasion\r\nexport function calculateEvasion(items, neutral, abilities, talents) {\r\n    var totalEvasion = 0.0;\r\n\r\n    if (abilities && abilities.length > 0) {\r\n        for(let ability of abilities) {\r\n            let bonusEvasion = tryGetAbilitySpecialAbilityValue(ability, \"bonus_evasion\");\r\n            if (bonusEvasion) {\r\n                totalEvasion += bonusEvasion;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            if (talent.includes(\"bonus_evasion\")) {\r\n                let bonusEvasion = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusEvasion) {\r\n                    totalEvasion += bonusEvasion;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (items && items.length > 0) {\r\n        for(var i = 0; i < items.length; i++) {\r\n            if (items[i].item) {\r\n                var itemInfo = getItemInfoFromName(items[i].item);\r\n                if (itemInfo) {\r\n                    var evasionAmount = getItemSpecialAbilityValue(itemInfo, \"bonus_evasion\");\r\n                    if (evasionAmount) {\r\n                        totalEvasion += evasionAmount;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return totalEvasion;\r\n}\r\n\r\n/// Returns the minimum and maximum right click damage of a hero\r\n// atkMin, atkMax, primaryAttributeStats, heroLevel = 1\r\nexport function calculateRightClickDamage(hero, level, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }\r\n    \r\n    let heroMainAttribute = getPrimaryAttribute(hero);\r\n    let atkMin = parseInt(hero.AttackDamageMin);\r\n    let atkMax = parseInt(hero.AttackDamageMax);\r\n    let primaryAttributeStats = getPrimaryAttributeStats(hero);\r\n\r\n    // Work out how much bonus attack hero recieves from their primary attribute\r\n    let totalPrimaryAttribute = primaryAttributeStats.base + (primaryAttributeStats.perLevel * (level - 1));\r\n    \r\n    /* Iterate over all items, neutral, abilities and talents to\r\n        get all primary attribute and all stat bonuses\r\n        */\r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            let allAttrKeys = primaryAttributeToItemBonusKey(heroMainAttribute);\r\n            for(let key of allAttrKeys) {\r\n                let bonusPrimaryAttr = tryGetItemSpecialValue(item, key);\r\n                if (bonusPrimaryAttr) {\r\n                    totalPrimaryAttribute += bonusPrimaryAttr;\r\n                }\r\n            }\r\n\r\n            let bonusPrimaryStat = tryGetItemSpecialValue(item, \"bonus_primary_stat\");\r\n            if (bonusPrimaryStat) {\r\n                totalPrimaryAttribute += bonusPrimaryStat;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalPrimaryAttribute += bonusAllStats;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let allAttrKeys = primaryAttributeToItemBonusKey(heroMainAttribute);\r\n        for(let key of allAttrKeys) {\r\n            let bonusPrimaryAttr = tryGetNeutralSpecialValue(neutral, key);\r\n            if (bonusPrimaryAttr) {\r\n                totalPrimaryAttribute += bonusPrimaryAttr;\r\n            }\r\n        }\r\n\r\n        let bonusPrimaryStat = tryGetNeutralSpecialValue(neutral, \"primary_stat\");\r\n        if (bonusPrimaryStat) {\r\n            totalPrimaryAttribute += bonusPrimaryStat;\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            let allAttrKeys = primaryAttributeToItemBonusKey(heroMainAttribute);\r\n            for(let key of allAttrKeys) {\r\n                if (talent.includes(key)) {\r\n                    let bonusPrimaryAttr = tryGetNeutralSpecialValue(talent, \"value\");\r\n                    if (bonusPrimaryAttr) {\r\n                        totalPrimaryAttribute += bonusPrimaryAttr;\r\n                    }\r\n                }\r\n            }\r\n            \r\n            if (talent.includes(\"bonus_all_stats\")) {\r\n                let allStats = tryGetNeutralSpecialValue(talent, \"value\");\r\n                if (allStats) {\r\n                    totalPrimaryAttribute += allStats;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Add and return\r\n    let min = atkMin + totalPrimaryAttribute;\r\n    let max = atkMax + totalPrimaryAttribute;\r\n    return {\r\n        /// minimum attack damage of the hero\r\n        min: Math.floor(min).toFixed(0),\r\n        /// maximum attack damage of the hero\r\n        max: Math.floor(max).toFixed(0),\r\n    };\r\n}\r\n\r\n/// Returns info on the attack time of the hero\r\nexport function calculateAttackTime(hero, level, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }\r\n    \r\n    let MAX_ATTACK_SPEED = 700;\r\n\r\n    // Check if hero has different attack rate or attack speed than base hero\r\n    let totalAttackSpeed = parseInt(getDotaBaseHero()?.BaseAttackSpeed);\r\n\r\n    /// Get base agi stats\r\n    let agiStats = getSpecificAttributeStats(EAttributes.ATTR_AGILITY, hero);\r\n    let baseAgi = agiStats.base;\r\n    let agiPerLevel = agiStats.perLevel;\r\n\r\n    let totalAgi = baseAgi + (agiPerLevel * (level - 1));\r\n\r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            let bonusAttackSpeed = tryGetItemSpecialValue(item, \"bonus_attack_speed\");\r\n            if (bonusAttackSpeed) {\r\n                totalAttackSpeed += bonusAttackSpeed;\r\n            }\r\n\r\n            let bonusAgility = tryGetItemSpecialValue(item, \"bonus_agility\");\r\n            if (bonusAgility) {\r\n                totalAgi += bonusAgility;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalAgi += bonusAllStats;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let bonusAttackSpeed = tryGetNeutralSpecialValue(neutral, \"bonus_attack_speed\");\r\n        if (bonusAttackSpeed) {\r\n            totalAttackSpeed += bonusAttackSpeed;\r\n        }\r\n    }\r\n\r\n    // Only actives that gives attack speed bonuses\r\n    // if (abilities && abilities.length > 0) {\r\n    // }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            let bonusAttackSpeed = tryGetTalentSpecialAbilityValue(talent, \"bonus_attack_speed\");\r\n            if (bonusAttackSpeed) {\r\n                totalAttackSpeed += bonusAttackSpeed;\r\n            }\r\n\r\n            let bonusAgility = tryGetTalentSpecialAbilityValue(talent, \"bonus_agility\");\r\n            if (bonusAgility) {\r\n                totalAgi += bonusAgility;\r\n            }\r\n\r\n            let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalAgi += bonusAllStats;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// Check that max atk speed hasn't been reached\r\n    if ((totalAttackSpeed + totalAgi) > MAX_ATTACK_SPEED) {\r\n        // Use totalAttackSpeed at max if so, reset agi since 1 agi = 1 atk speed\r\n        totalAttackSpeed = MAX_ATTACK_SPEED;\r\n        totalAgi = 0;\r\n    }\r\n\r\n    let attacksPerSec = ((totalAttackSpeed + totalAgi) * 0.01) / 1.7;\r\n    let attackTime = 1.7 / ((totalAttackSpeed + totalAgi) * 0.01);\r\n    attackTime = 1 / attacksPerSec;\r\n\r\n    let atkSpeed = totalAttackSpeed + totalAgi;\r\n\r\n    return {\r\n        /// Amount of seconds inbetween attacks\r\n        attackTime: attackTime.toFixed(2),\r\n        /// Amount of attacks per second\r\n        attacksPerSecond: attacksPerSec.toFixed(2),\r\n        /// Attack speed value shown in UI of dota\r\n        attackSpeed: atkSpeed.toFixed(0),\r\n    };\r\n}\r\n\r\n/// Calculates how much output damage an ability will do to an enemy, factoring in any items\r\nexport function calculateSpellDamage(abilityInfo, abilityLevel, items, neutral, talents) {\r\n    if (!abilityLevel || !abilityInfo) {\r\n        return -1;\r\n    }\r\n\r\n    // Get normal dmg output of ability\r\n    let abilityDamageInfo = getAbilityOutputDamage(abilityInfo, abilityLevel);\r\n    \r\n    // Add up spellAmp from all bonuses to calculate at end\r\n    let totalSpellAmpPercent = 0;\r\n\r\n    if (items) {\r\n        // Add item spell damage increase\r\n        for(let i = 0; i < items.length; i++) {\r\n            var itemInfo = getItemInfoFromName(items[i].item);\r\n            if (itemInfo) {\r\n                let spellAmp = getItemSpecialAbilityValue(itemInfo, \"spell_amp\");\r\n                if (spellAmp) {\r\n                    totalSpellAmpPercent += spellAmp;\r\n                }\r\n\r\n                let bonusSpellAmp = getItemSpecialAbilityValue(itemInfo, \"bonus_spell_amp\");\r\n                if (bonusSpellAmp) {\r\n                    totalSpellAmpPercent += bonusSpellAmp;\r\n                }\r\n\r\n                // Bloodstone, item specific\r\n                let chargeCount = getItemSpecialAbilityValue(itemInfo, \"initial_charges_tooltip\");\r\n                let ampPerCharge = getItemSpecialAbilityValue(itemInfo, \"amp_per_charge\");\r\n                if (ampPerCharge && chargeCount) {\r\n                    totalSpellAmpPercent += (ampPerCharge * chargeCount);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        //Add neutral item spell dmg\r\n        var neutralInfo = getItemInfoFromName(neutral.item);\r\n        if (neutralInfo && neutralInfo.AbilitySpecial) {\r\n            for (let i = 0; i < neutralInfo.AbilitySpecial.length; i++) {\r\n                let special = neutralInfo.AbilitySpecial[i];\r\n                // Spell amp\r\n                if (special.bonus_spell_amp) {\r\n                    let bonusSpellAmp = parseInt(special.bonus_spell_amp);\r\n                    totalSpellAmpPercent += bonusSpellAmp; \r\n                }\r\n\r\n                if (special.spell_amp) {\r\n                    let bonusSpellAmp = parseInt(special.spell_amp);\r\n                    totalSpellAmpPercent += bonusSpellAmp;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        // Add spell amplify from any selected talents\r\n        for(let talent of talents) {\r\n            if (talent.includes(\"spell_amplify\")) {\r\n                let ampTalentValue = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (ampTalentValue) {\r\n                    totalSpellAmpPercent += ampTalentValue;\r\n\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    let abilityDamage = calculateSpellAmp(abilityDamageInfo.damage, totalSpellAmpPercent);\r\n    return {\r\n        damage: abilityDamage === 0 ? null : abilityDamage,\r\n        isPercent: abilityDamageInfo.isPercent,\r\n    };\r\n}\r\n\r\n/// Calculates and applies spell amp to the spell damage and returns the result\r\nexport function calculateSpellAmp (spellDamage, spellAmpPercent) {\r\n    return spellDamage + ((spellDamage / 100) * spellAmpPercent);\r\n}\r\n\r\n/// Calculates ability mana cost with items, neutrals and talents that contain reductions\r\nexport function calculateManaCost(abilityInfo, abilityLevel, items, neutral, talents) {\r\n    if (abilityLevel <= 0) {\r\n        return null;\r\n    }\r\n    \r\n    let manaCost = null;\r\n\r\n    // Get inital mana cost amount\r\n    if (abilityInfo && abilityInfo.AbilityManaCost) {\r\n        manaCost = parseAbilityValueByLevel(abilityInfo.AbilityManaCost, abilityLevel);\r\n    }\r\n\r\n    // Determine mana reductions from items, neutral, talents\r\n    // Take all percentages and calculate at end\r\n    let totalManaCostReducePercent = 0;\r\n\r\n    if (items) {\r\n        for(let item of items) {\r\n            var itemInfo = getItemInfoFromName(item.item);\r\n            if(itemInfo) {\r\n                var manaCostReduceAmount = getItemSpecialAbilityValue(itemInfo, \"manacost_reduction\");\r\n                if(manaCostReduceAmount) {\r\n                    totalManaCostReducePercent += manaCostReduceAmount;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let neutralInfo = getItemInfoFromName(neutral.item);\r\n        if (neutralInfo) {\r\n            let costReductionAmount = getItemSpecialAbilityValue(neutralInfo, \"manacost_reduction\");\r\n            if (costReductionAmount) {\r\n                totalManaCostReducePercent += costReductionAmount;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (talents) {\r\n        for(let talent of talents) {\r\n            // Only apply mana reducing talents\r\n            if (talent.includes(\"mana_reduction\")) {\r\n                let reduceAmount = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (reduceAmount) {\r\n                    totalManaCostReducePercent += reduceAmount;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // If ability has a mana value and has mana reductions\r\n    if (manaCost && totalManaCostReducePercent > 0) {\r\n        let removeManaAmt = (manaCost / 100) * totalManaCostReducePercent;\r\n        manaCost -= removeManaAmt;\r\n    }\r\n\r\n    return manaCost;\r\n}\r\n\r\n/// Calculates ability cooldown with items, neutrals, talents and abilities\r\n/// https://liquipedia.net/dota2/Cooldown_Reduction\r\nexport function calculateAbilityCooldown(abilityInfo, abilityLevel, items, neutral, talents) {\r\n    if (abilityLevel <= 0) {\r\n        return null;\r\n    }\r\n    \r\n    let cooldown = null;\r\n    \r\n    if (abilityInfo && abilityInfo.AbilityCooldown) {\r\n        cooldown = parseAbilityValueByLevel(abilityInfo.AbilityCooldown, abilityLevel);\r\n    }\r\n\r\n    let allReductions = [];\r\n    if (items) {\r\n        for (let item of items) {\r\n            if (item && item.item) {\r\n                var itemInfo = getItemInfoFromName(item.item);\r\n                if (itemInfo) {\r\n                    var bonusCooldown = getItemSpecialAbilityValue(itemInfo, \"bonus_cooldown\");\r\n                    if (bonusCooldown) {\r\n                        allReductions.push({ amount: bonusCooldown, source: item.item });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let neutralInfo = getItemInfoFromName(neutral.item);\r\n        if (neutralInfo) {\r\n            let bonusCooldown = getItemSpecialAbilityValue(neutralInfo, \"bonus_cooldown\");\r\n            if (bonusCooldown) {\r\n                allReductions.push({ amount: bonusCooldown, source: neutral });\r\n            } \r\n        }\r\n    }\r\n\r\n    if (talents) {\r\n        for(let talent of talents) {\r\n            // Ignore talent if it isn't a cd reduction one\r\n            if (talent.includes(\"cooldown_reduction\")) {\r\n                let reduction = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (reduction) {\r\n                    allReductions.push({ amount: reduction, source: talent });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    let sourceOfReductions = [];\r\n    for(let reduction of allReductions) {\r\n        let decimal = reduction.amount / 100;\r\n        sourceOfReductions.push((1 - decimal));\r\n    }\r\n\r\n    let reductionTotal = cooldown;\r\n    for(let reduce of sourceOfReductions) {\r\n        reductionTotal *= reduce;\r\n    }\r\n\r\n    return reductionTotal.toFixed(2);\r\n}\r\n\r\n/// Calculates the movement speed of the hero, factoring in their items, neutral, abilities and talents\r\nexport function calculateMoveSpeed (hero, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }\r\n\r\n    let baseSpeed = parseInt(hero.MovementSpeed);\r\n    let flatBonus = 0;\r\n    let percentageBasedBonuses = 0;\r\n\r\n    if (items && items.length > 0) {\r\n        for (let item of items) {\r\n            let moveSpeed = tryGetItemSpecialValue(item, \"bonus_movement_speed\");\r\n            if (moveSpeed) {\r\n                flatBonus += moveSpeed;\r\n            }\r\n\r\n            let moveSpeedPercentBonus = tryGetItemSpecialValue(item, \"movement_speed_percent_bonus\");\r\n            if (moveSpeedPercentBonus) {\r\n                percentageBasedBonuses += moveSpeedPercentBonus;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let bonusMoveSpeed = tryGetNeutralSpecialValue(neutral, \"bonus_movement_speed\");\r\n        if (bonusMoveSpeed) {\r\n            flatBonus += bonusMoveSpeed;\r\n        }\r\n\r\n        let moveSpeedPercentBonus = tryGetNeutralSpecialValue(neutral, \"movement_speed_percent_bonus\");\r\n        if (moveSpeedPercentBonus) {\r\n            percentageBasedBonuses += moveSpeedPercentBonus;\r\n        }\r\n    }\r\n\r\n    /// Abilities are actives so dont include since no way in UI to activate an ability yet\r\n    // if (abilities && abilities.length > 0) {\r\n    //     for(let ability of abilities) {\r\n    //         let bonusMoveSpeed = tryGetAbilitySpecialAbilityValue(ability, \"bonus_movespeed\");\r\n    //         if (bonusMoveSpeed) {\r\n    //             flatBonus += bonusMoveSpeed;\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            if (talent.includes(\"bonus_movement_speed\")) {\r\n                let bonusSpeed = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusSpeed) {\r\n                    flatBonus += bonusSpeed;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    let total = baseSpeed + flatBonus;\r\n    return total;\r\n}\r\n\r\nexport function calculateAttackRange (hero, level, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }\r\n\r\n    let isHeroRanged = hero.AttackCapabilities === \"DOTA_UNIT_CAP_RANGED_ATTACK\";\r\n\r\n    let baseRange = parseInt(hero.AttackRange);\r\n    let totalAttackRange = baseRange;\r\n\r\n    // Dont add bonuses if hero isn't ranged\r\n    if (isHeroRanged) {\r\n        if (items && items.length > 0) {\r\n            for(let item of items) {\r\n                let baseRange = tryGetItemSpecialValue(item, \"base_attack_range\");\r\n                if (baseRange) {\r\n                    totalAttackRange += baseRange;\r\n                }\r\n            }\r\n        }\r\n    \r\n        if (neutral) {\r\n            let rangeBonus = tryGetNeutralSpecialValue(neutral, \"attack_range_bonus\");\r\n            if (rangeBonus) {\r\n                totalAttackRange += rangeBonus;\r\n            }\r\n    \r\n            let bonusAttackRange = tryGetNeutralSpecialValue(neutral, \"bonus_attack_range\");\r\n            if (bonusAttackRange) {\r\n                totalAttackRange += bonusAttackRange;\r\n            }\r\n        }\r\n\r\n        if (abilities && abilities.length > 0) {\r\n            for(let ability of abilities) {\r\n                let bonusAttackRange = tryGetAbilitySpecialAbilityValue(ability, \"bonus_attack_range\", 1);\r\n                if (bonusAttackRange) {\r\n                    totalAttackRange += bonusAttackRange;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (talents && talents.length > 0) {\r\n            for(let talent of talents) {\r\n                if (talent.includes(\"bonus_attack_range\")) {\r\n                    let bonusAttackRange = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                    if (bonusAttackRange) {\r\n                        totalAttackRange += bonusAttackRange;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        // Melee units, apply any melee attack range bonuses\r\n        if (neutral) {\r\n            let bonusAttackRange = tryGetNeutralSpecialValue(neutral, \"melee_attack_range\");\r\n            if (bonusAttackRange) {\r\n                totalAttackRange += bonusAttackRange;\r\n            }\r\n        }\r\n    }\r\n\r\n    return totalAttackRange;\r\n}\r\n\r\nexport function calculateAttribute(attribute, hero, level, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }\r\n\r\n    let attributeStats = getSpecificAttributeStats(attribute, hero);\r\n    let baseStrength = attributeStats.base;\r\n    let strengthPerLevel = attributeStats.perLevel;\r\n\r\n    let totalAttribute = baseStrength + (strengthPerLevel * (level - 1));\r\n    let additionalAttribute = 0;\r\n\r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            switch(attribute) {\r\n                case EAttributes.ATTR_STRENGTH:\r\n                    {\r\n                        let bonusStr = tryGetItemSpecialValue(item, \"bonus_strength\");\r\n                        if (bonusStr) {\r\n                            additionalAttribute += bonusStr;\r\n                        }\r\n                        break;\r\n                    }\r\n                case EAttributes.ATTR_AGILITY:\r\n                    {\r\n                        let bonusAgi = tryGetItemSpecialValue(item, \"bonus_agility\");\r\n                        if (bonusAgi) {\r\n                            additionalAttribute += bonusAgi;\r\n                        }\r\n                        break;\r\n                    }\r\n                case EAttributes.ATTR_INTELLIGENCE:\r\n                    {\r\n                        let bonusInt = tryGetItemSpecialValue(item, \"bonus_intellect\");\r\n                        if (bonusInt) {\r\n                            additionalAttribute += bonusInt;\r\n                        }\r\n                        break;    \r\n                    }\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        switch(attribute) {\r\n            case EAttributes.ATTR_STRENGTH:\r\n                    {\r\n                        let bonusStr = tryGetNeutralSpecialValue(neutral, \"bonus_strength\");\r\n                        if (bonusStr) {\r\n                            additionalAttribute += bonusStr;\r\n                        }\r\n                        break;\r\n                    }\r\n            case EAttributes.ATTR_AGILITY:\r\n                {\r\n                    let bonusAgi = tryGetNeutralSpecialValue(neutral, \"bonus_agility\");\r\n                    if (bonusAgi) {\r\n                        additionalAttribute += bonusAgi;\r\n                    }\r\n                    break;\r\n                }\r\n            case EAttributes.ATTR_INTELLIGENCE:\r\n                {\r\n                    let bonusInt = tryGetNeutralSpecialValue(neutral, \"bonus_intelligence\");\r\n                    if (bonusInt) {\r\n                        additionalAttribute += bonusInt;\r\n                    }\r\n                    break;    \r\n                }\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            switch(attribute) {\r\n                case EAttributes.ATTR_STRENGTH:\r\n                        {\r\n                            if (talent.includes(\"bonus_strength\")) {\r\n                                let bonusStr = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                                if (bonusStr) {\r\n                                    additionalAttribute += bonusStr;\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                case EAttributes.ATTR_AGILITY:\r\n                    {\r\n                        if (talent.includes(\"bonus_agility\")) {\r\n                            let bonusAgi = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                            if (bonusAgi) {\r\n                                additionalAttribute += bonusAgi;\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                case EAttributes.ATTR_INTELLIGENCE:\r\n                    {\r\n                        if (talent.includes(\"bonus_intelligence\")) {\r\n                            let bonusInt = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                            if (bonusInt) {\r\n                                additionalAttribute += bonusInt;\r\n                            }\r\n                        }\r\n                        break;    \r\n                    }\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    // If primary attribute, round down else us normal rounding\r\n    let isPrimaryAttr = getPrimaryAttribute(hero) === attribute;\r\n    if (isPrimaryAttr) {\r\n        totalAttribute = Math.floor(totalAttribute)\r\n    } else {\r\n        totalAttribute = totalAttribute.toFixed(0);\r\n    }\r\n\r\n    return {\r\n        /// Base attribute amount, includes per level\r\n        attribute: totalAttribute,\r\n        /// Additional attribute amount, from items/neutral/abils/talents\r\n        additionalAttribute: additionalAttribute.toFixed(0),\r\n        /// Amount of strength per level\r\n        perLevel: strengthPerLevel,\r\n    };\r\n}","/// Searches the passed strings file for the related string\r\n/// Very resource intensive\r\nexport function tryGetLocalizedString(languageStrings, stringKey) {\r\n    if (!languageStrings || !stringKey) {\r\n        return null;\r\n    }\r\n\r\n    var languageKeys = Object.keys(languageStrings.Tokens);\r\n    var matchingKeys = languageKeys.filter((key) => {\r\n        if (key.toLowerCase() === stringKey.toLowerCase()) {\r\n            return key;\r\n        } else {\r\n            return null;\r\n        }\r\n    });\r\n\r\n    if (matchingKeys && matchingKeys.length > 0) {\r\n        var displayName = languageStrings.Tokens[matchingKeys[0]];\r\n        return displayName;\r\n    } else {\r\n        return \"?\";\r\n    }\r\n}\r\n\r\nexport function tryGetTalentLocalizedString(languageStrings, stringKey) {\r\n    if (!languageStrings || !stringKey) {\r\n        return null;\r\n    }\r\n\r\n    var languageKeys = Object.keys(languageStrings.Tokens);\r\n    var matchingKeys = languageKeys.filter((key) => {\r\n        if (key.includes(stringKey)) {\r\n            return key;\r\n        } else {\r\n            return null;\r\n        }\r\n    });\r\n\r\n    if (matchingKeys && matchingKeys.length > 0) {\r\n        var displayName = languageStrings.Tokens[matchingKeys[0]];\r\n        return displayName;\r\n    } else {\r\n        return \"?\";\r\n    }\r\n}\r\n\r\n/// Quick method for retrieving localized string\r\n/// Main fast method to retrieve an exact key from strings\r\nexport function getLocalizedString(localeStrings, key) {\r\n    let string = localeStrings.Tokens[key];\r\n    return string ?? \"?\";\r\n}\r\n\r\n/// Gets a string from the dota strings that contain the prefix \"DOTA_Toolip_\"\r\n/// Useful for getting general tooltip UI strings\r\nexport function getTooltipString(dotaStrings, tooltipKey) {\r\n    if (!dotaStrings || !tooltipKey) {\r\n        return null;\r\n    }\r\n\r\n    if (!tooltipKey.includes(\"DOTA_ToolTip_\")) {\r\n        tooltipKey = \"DOTA_ToolTip_\" + tooltipKey;\r\n    }\r\n    var match = dotaStrings.Tokens[tooltipKey];\r\n    return match;\r\n}\r\n\r\n/// Gets a string from the abilities strings that contain the prefix \"DOTA_Tooltip_ability\"\r\n/// Useful for retrieving localized strings of ability names\r\nexport function getTooltipAbilityString(abilityStrings, abilityKey) {\r\n    if (!abilityStrings || !abilityKey) {\r\n        return null;\r\n    }\r\n    if (!abilityKey.includes(\"DOTA_Tooltip_ability\")) {\r\n        abilityKey = \"DOTA_Tooltip_ability_\" + abilityKey;\r\n    }\r\n    var match = abilityStrings.Tokens[abilityKey];\r\n    return match;\r\n}\r\n\r\n/// Places a value in a translation string that contains a \"{s:value}\" inside\r\nexport function replaceStringValue(string, value) {\r\n    if (!string || !value) {\r\n        return \"?\";\r\n    }\r\n\r\n    string = string.replace(/{.*}/, value);\r\n    return string;\r\n}","import React, { Component } from 'react';\r\n\r\nimport {\r\n    calculateSpellDamage\r\n} from \"../../utility/calculate\";\r\nimport { \r\n    tryGetLocalizedString, \r\n    getTooltipString,\r\n    getTooltipAbilityString,\r\n} from \"../../utility/data-helpers/language\";\r\n\r\n/// Retrieves ability damage and returns display value\r\nfunction parseDamage(abilInfo, abilLvl, items, neutral, talents) {\r\n    let abilityDamage = calculateSpellDamage(abilInfo, abilLvl, items, neutral, talents);\r\n    if (abilityDamage && abilityDamage.damage) {\r\n        let damage = abilityDamage.damage;\r\n        if (abilityDamage.isPercent) {\r\n            damage += \"%\";\r\n        }\r\n        return damage;\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nfunction getAbilityNameFromStrings(strings, key) {\r\n    if (strings && key) {\r\n        return tryGetLocalizedString(strings, key);\r\n    } else {\r\n        return \"?\";\r\n    }\r\n}\r\n\r\nclass DamageOutput extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            ability: props.ability,\r\n            abilityInfo: props.abilityInfo,\r\n            levelInfo: props.levelInfo,\r\n\r\n            items: props.items,\r\n            neutral: props.neutral,\r\n            selectedTalents: props.selectedTalents,\r\n\r\n            abilityStrings: props.abilityStrings,\r\n            dotaStrings: props.dotaStrings,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(prevProps.abilityInfo !== this.props.abilityInfo) {\r\n            this.setState({ abilityInfo: this.props.abilityInfo });\r\n        }\r\n\r\n        if (prevProps.levelInfo !== this.props.levelInfo) {\r\n            this.setState({ levelInfo: this.props.levelInfo });\r\n        }\r\n\r\n        if (prevProps.items !== this.props.items) {\r\n            this.setState({ items: this.props.items });\r\n        }\r\n\r\n        if (prevProps.neutral !== this.props.neutral) {\r\n            this.setState({ neutral: this.props.neutral });\r\n        }\r\n\r\n        if (prevProps.selectedTalents !== this.props.selectedTalents) {\r\n            this.setState({ selectedTalents: this.props.selectedTalents });\r\n        }\r\n\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ abilityStrings: this.props.abilityStrings });\r\n        }\r\n        if (prevProps.dotaStrings !== this.props.dotaStrings) {\r\n            this.setState({ dotaStrings: this.props.dotaStrings });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let abilityDamage = parseDamage(this.state.abilityInfo, this.state.levelInfo?.level, this.state.items, this.state.neutral, this.state.selectedTalents);\r\n        return (\r\n            <div className=\"w-100 h-100\">\r\n                <h5>{getTooltipAbilityString(this.state.abilityStrings, this.state.ability)}</h5>\r\n                {\r\n                    abilityDamage && \r\n                    <h6>\r\n                        { (getAbilityNameFromStrings(this.state.abilityStrings, \"dota_ability_variable_damage\") + \":\")}\r\n                        {' '}\r\n                        { abilityDamage }\r\n                    </h6>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DamageOutput;","import React, { Component } from 'react';\r\nimport {\r\n    calculateAbilityCooldown\r\n} from \"../../utility/calculate\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faClock }from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nclass Cooldown extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            abilityLevel: props.abilityLevel,\r\n            abilityCooldown: props.cooldown,\r\n\r\n            ability: props.ability,\r\n            items: props.items,\r\n            neutral: props.neutral,\r\n            selectedTalents: props.selectedTalents,\r\n        };\r\n\r\n        this.updateCooldown = this.updateCooldown.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                abilityLevel: this.props.abilityLevel,\r\n                abilityCooldown: this.props.cooldown,\r\n\r\n                ability: this.props.ability,\r\n                items: this.props.items,\r\n                neutral: this.props.neutral,\r\n                selectedTalents: this.props.selectedTalents,\r\n            });\r\n        }\r\n    }\r\n\r\n    updateCooldown() {\r\n        let currentCooldown = null;\r\n        if (this.state.abilityCooldown) {\r\n            currentCooldown = calculateAbilityCooldown(this.state.ability, this.state.abilityLevel, this.state.items, this.state.neutral, this.state.selectedTalents);\r\n        }\r\n\r\n        return currentCooldown;\r\n    }\r\n    \r\n    render() {\r\n        let cooldown = this.updateCooldown();\r\n        return (\r\n            <div>\r\n                {\r\n                    cooldown &&\r\n                        <div className=\"d-flex\">\r\n                            <FontAwesomeIcon className=\"my-auto mr-1\" icon={faClock} />\r\n                            <div>{cooldown}</div>\r\n                        </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Cooldown;","import React, { Component } from 'react';\r\nimport { \r\n    calculateManaCost \r\n} from '../../utility/calculate';\r\n\r\nclass ManaCost extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            ability: props.ability,\r\n            abilityLevel: props.abilityLevel,\r\n\r\n            items: props.items,\r\n            neutral: props.neutral,\r\n            selectedTalents: props.selectedTalents,\r\n        };\r\n\r\n        this.updateMana = this.updateMana.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                ability: this.props.ability,\r\n                abilityLevel: this.props.abilityLevel,\r\n\r\n                items: this.props.items,\r\n                neutral: this.props.neutral,\r\n                selectedTalents: this.props.selectedTalents,\r\n            });\r\n        }\r\n    }\r\n\r\n    updateMana() {\r\n        let manaCost = -1;\r\n        if (this.state.ability) {\r\n            manaCost = calculateManaCost(this.state.ability, this.state.abilityLevel, this.state.items, this.state.neutral, this.state.selectedTalents);\r\n        }\r\n        \r\n        // this.setState({\r\n        //     abilityManaCost: manaCost,\r\n        // });\r\n        return manaCost;\r\n    }\r\n\r\n    render() {\r\n        let manaCost = this.updateMana();\r\n        return (\r\n            <div>\r\n                { \r\n                    manaCost &&\r\n                        <div className=\"mana-cost d-flex\">\r\n                            <div className=\"my-auto mr-1\" style={{ \r\n                                height: \"10px\",\r\n                                width: \"10px\",\r\n                                backgroundColor: \"rgb(69, 148, 207)\",\r\n                            }}/>\r\n                            <div>{ manaCost }</div>\r\n                        </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ManaCost;","import React, { Component } from 'react';\r\nimport { \r\n    getAbilityBehaviours,\r\n    getAbilityCastRequirements\r\n} from \"../../utility/dataHelperAbilities\";\r\nimport { \r\n    getTooltipString,\r\n    getLocalizedString,\r\n} from \"../../utility/data-helpers/language\";\r\n\r\nfunction TypeValueUI (props) {\r\n    return (\r\n        <div className=\"d-flex\" style={{ fontSize: \"0.85rem\"}}>\r\n            <div className=\"mr-2\">{props.type}</div>\r\n            <div>{props.value}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nclass AbilityDetails extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            ability: props.ability,\r\n            abilityInfo: props.abilityInfo,\r\n            levelInfo: props.levelInfo,\r\n\r\n            items: props.items,\r\n            neutral: props.neutral,\r\n            selectedTalents: props.selectedTalents,\r\n\r\n            abilityBehaviours: null,\r\n            castRequirements: null,\r\n\r\n            abilityStrings: props.abilityStrings,\r\n            dotaStrings: props.dotaStrings,\r\n        };\r\n\r\n        this.updateAbilityInfo = this.updateAbilityInfo.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateAbilityInfo();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(prevProps.abilityInfo !== this.props.abilityInfo) {\r\n            this.setState({ \r\n                abilityInfo: this.props.abilityInfo,\r\n            }, () => {\r\n                this.updateAbilityInfo();\r\n            });\r\n        }\r\n\r\n        if (prevProps.levelInfo !== this.props.levelInfo) {\r\n            this.setState({ levelInfo: this.props.levelInfo });\r\n        }\r\n\r\n        if (prevProps.items !== this.props.items) {\r\n            this.setState({ items: this.props.items });\r\n        }\r\n\r\n        if (prevProps.neutral !== this.props.neutral) {\r\n            this.setState({ neutral: this.props.neutral });\r\n        }\r\n\r\n        if (prevProps.selectedTalents !== this.props.selectedTalents) {\r\n            this.setState({ selectedTalents: this.props.selectedTalents });\r\n        }\r\n\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ abilityStrings: this.props.abilityStrings });\r\n        }\r\n        if (prevProps.dotaStrings !== this.props.dotaStrings) {\r\n            this.setState({ dotaStrings: this.props.dotaStrings });\r\n        }\r\n    }\r\n\r\n    updateAbilityInfo() {\r\n        this.setState({ \r\n            abilityBehaviours: getAbilityBehaviours(this.state.abilityInfo) ,\r\n            castRequirements: getAbilityCastRequirements(this.state.abilityInfo, this.state.levelInfo),\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"mb-2\">\r\n                {\r\n                    this.state.abilityBehaviours && this.state.abilityBehaviours.map((value, index) => {\r\n                        return (\r\n                            <TypeValueUI \r\n                                key={index}\r\n                                type={ getLocalizedString(this.state.dotaStrings, value.key) } \r\n                                value={ typeof value.value === \"object\" ? value.value.map((val) => {\r\n                                        return getLocalizedString(this.state.dotaStrings, val)\r\n                                    }).join(', ') : getLocalizedString(this.state.dotaStrings, value.value) \r\n                                } />\r\n                        );\r\n                    })\r\n                }\r\n                <div className=\"py-1\" />\r\n                {\r\n                    this.state.castRequirements && this.state.castRequirements.map((value, index) => {\r\n                        return (\r\n                            <TypeValueUI \r\n                                key={index}\r\n                                type={getLocalizedString(this.state.abilityStrings, value.key)}\r\n                                value={value.value} />\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AbilityDetails;","import React, { Component } from 'react';\r\nimport {\r\n    Row, \r\n    Col,\r\n    Button\r\n} from \"react-bootstrap\";\r\n\r\nimport { DOTAAbilities } from \"../../data/dota2/json/npc_abilities.json\";\r\n\r\nimport DamageOutput from \"./DamageOutput\";\r\nimport Cooldown from \"./Cooldown\";\r\nimport ManaCost from \"./ManaCost\";\r\nimport AbilityDetails from \"./AbilityDetails\";\r\nimport \"./Abilities.css\";\r\n\r\nfunction getAbilityLevel (levelInfo, abilityIndex, abilityInfo, onLevelChanged) {\r\n    if (levelInfo && abilityInfo)\r\n    {\r\n        /// Determine max level of ability\r\n        var maxLvl = abilityInfo.AbilityType === \"DOTA_ABILITY_TYPE_ULTIMATE\" ? 3 : 4;\r\n        if (abilityInfo.MaxLevel)\r\n            maxLvl = parseInt(abilityInfo.MaxLevel);\r\n        \r\n        var html = [];\r\n        for(var i = 0; i < maxLvl; i++) {\r\n            html.push(\r\n                <Button \r\n                    key={i} \r\n                    variant=\"outline-secondary\"\r\n                    onClick={(e) => onLevelChanged(e)}\r\n                    data-lvlindex={abilityIndex}\r\n                    data-btnindex={i}>\r\n                    <div className={ i < levelInfo.level ? \"levelled\" : \"unlevelled\"}></div>\r\n                </Button>\r\n            );\r\n        }\r\n        return html;\r\n    }\r\n    else\r\n    {\r\n        return <div>?</div>\r\n    }\r\n}\r\n\r\nfunction getLevelInfo (abilities) {\r\n    if (abilities) {\r\n        return abilities.map((abil, index) => {\r\n            return { ability: index, level: 1 };\r\n        });\r\n    }\r\n    return [ ];\r\n}\r\n\r\nclass Abilities extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        var abils = this.filterAbilities(props.abilities);\r\n        var abilLevels = getLevelInfo(abils);\r\n\r\n        this.state = {\r\n            abilities: abils,\r\n            abilityLevels: abilLevels,\r\n            items: props.items,\r\n            neutral: props.neutral,\r\n            selectedTalents: props.selectedTalents,\r\n\r\n            abilityStrings: props.abilityStrings,\r\n            dotaStrings: props.dotaStrings,\r\n\r\n            displayDamage: props.displayDamage,\r\n        };\r\n        \r\n        this.onLevelChanged = this.onLevelChanged.bind(this);\r\n        this.filterAbilities = this.filterAbilities.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        //Update if previous props have changed\r\n        if (prevProps.abilities !== this.props.abilities) {\r\n            var abils = this.filterAbilities(this.props.abilities);\r\n            this.setState({\r\n                abilities: abils,\r\n                abilityLevels: getLevelInfo(abils),\r\n            });\r\n        }\r\n\r\n        if (prevProps.items !== this.props.items) {\r\n            this.setState({ items: this.props.items });\r\n        }\r\n        if (prevProps.neutral !== this.props.neutral) {\r\n            this.setState({ neutral: this.props.neutral });\r\n        }\r\n        if (prevProps.selectedTalents !== this.props.selectedTalents) {\r\n            this.setState({ selectedTalents: this.props.selectedTalents });\r\n        }\r\n\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ abilityStrings: this.props.abilityStrings });\r\n        }\r\n        if (prevProps.dotaStrings !== this.props.dotaStrings) {\r\n            this.setState({ dotaStrings: this.props.dotaStrings });\r\n        }\r\n    }\r\n    \r\n    // Remove any undefined, hidden abilities\r\n    filterAbilities(abils) {\r\n        if (abils) {\r\n            return abils.filter(function (val) {\r\n                return val && val !== \"generic_hidden\";\r\n            });\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    onLevelChanged(e) {\r\n        // If click on inner element\r\n        if (e.target.tagName.toLowerCase() !== \"button\") {\r\n            e.target = e.target.parentElement;\r\n        }\r\n\r\n        var levelIndex = parseInt(e.target.dataset.lvlindex);\r\n        var abilities = this.state.abilityLevels;\r\n        var targetLevel = parseInt(e.target.dataset.btnindex) + 1;\r\n        // Clicked same level, set to 0\r\n        if (abilities[levelIndex].level === targetLevel) {\r\n            abilities[levelIndex].level = 0;\r\n        } else {\r\n            // Set Level's new value to which btn was pressed\r\n            abilities[levelIndex].level = targetLevel;\r\n        }\r\n\r\n        this.setState({\r\n            abilityLevels: abilities,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Row>\r\n                {\r\n                    this.state.abilities && this.state.abilities.map((value, index) => {\r\n                        // Info about the ability\r\n                        var ability = DOTAAbilities[value];\r\n                        if (!ability) {\r\n                            console.log(`Unable to find info on ability '${value}'`);\r\n                        }\r\n                        // Current level of the ability\r\n                        var levelInfo = this.state.abilityLevels.find(abilVal => abilVal.ability === index);\r\n                        if (!levelInfo) {\r\n                            debugger;\r\n                        }\r\n\r\n                        //console.log(levelInfo);\r\n                        if (!ability && value) {\r\n                            return <div key={value}>?</div>\r\n                        }\r\n\r\n                        // Dont add any scepter abilities unless hero has scepter\r\n                        if (ability && ability.IsGrantedByScepter && this.state.items.filter(item => item.item === \"ultimate_scepter\").length <= 0) {\r\n                            return;\r\n                        }\r\n                        return (\r\n                            <Col key={ability.ID} className=\"d-flex flex-column justify-content-top\">\r\n                                <img\r\n                                    className=\"h-100 align-self-center\"\r\n                                    style={{ maxWidth: \"90px\", maxHeight: \"90px\" }}\r\n                                    src={`http://cdn.dota2.com/apps/dota2/images/abilities/${value}_hp1.png`} \r\n                                    alt={ability.ID} />\r\n                                <Row className=\"px-4\">\r\n                                    <Col md={6}>\r\n                                        {/* Cooldown */}\r\n                                        <Cooldown \r\n                                            ability={ability} \r\n                                            abilityLevel={levelInfo.level} \r\n                                            cooldown={ability.AbilityCooldown}\r\n                                            items={this.state.items}\r\n                                            neutral={this.state.neutral}\r\n                                            selectedTalents={this.state.selectedTalents} />\r\n                                    </Col>\r\n                                    <Col md={6}>\r\n                                        {/* Mana Cost */}\r\n                                        <ManaCost \r\n                                            ability={ability}\r\n                                            abilityLevel={levelInfo.level} \r\n                                            items={this.state.items}\r\n                                            neutral={this.state.neutral}\r\n                                            selectedTalents={this.state.selectedTalents} />\r\n                                    </Col>\r\n                                </Row>\r\n                                <div className=\"align-self-center pt-2 d-flex\">\r\n                                    {\r\n                                        this.state.abilityLevels && !ability.IsGrantedByScepter && getAbilityLevel(levelInfo, index, ability, this.onLevelChanged)\r\n                                    }\r\n                                </div>\r\n                                <div className=\"py-1\">\r\n                                    {\r\n                                        this.state.displayDamage && \r\n                                            <DamageOutput \r\n                                                ability={value}\r\n                                                abilityInfo={ability} \r\n                                                levelInfo={levelInfo}\r\n                                                items={this.state.items}\r\n                                                neutral={this.state.neutral} \r\n                                                selectedTalents={this.state.selectedTalents} \r\n                                                abilityStrings={this.state.abilityStrings} \r\n                                                dotaStrings={this.state.dotaStrings} />\r\n                                    }\r\n                                </div>\r\n                                <div className=\"py-1\">\r\n                                    <AbilityDetails \r\n                                        ability={value}\r\n                                        abilityInfo={ability} \r\n                                        levelInfo={levelInfo}\r\n                                        items={this.state.items}\r\n                                        neutral={this.state.neutral} \r\n                                        selectedTalents={this.state.selectedTalents}\r\n                                        abilityStrings={this.state.abilityStrings} \r\n                                        dotaStrings={this.state.dotaStrings} />\r\n                                </div>\r\n                            </Col>\r\n                        );\r\n                    })\r\n                }\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Abilities;","import Abilities from \"./Abilities\";\r\n\r\nexport default Abilities;","import React, { Component } from 'react';\r\nimport {\r\n    Tabs,\r\n    Tab,\r\n    Button,\r\n    Form,\r\n    ListGroup\r\n} from \"react-bootstrap\";\r\nimport { DOTAAbilities } from \"../../data/dota2/json/items.json\";\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faMinus } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport {\r\n    itemNameToElement\r\n} from \"../../utils\";\r\n\r\nimport \"./ItemSelector.css\";\r\nimport \"../../css/dota_items.css\";\r\n\r\nfunction getItemsByQuality(itemsArray, matchArray) {\r\n    return itemsArray.filter((itemInfo) => {\r\n        var quality = itemInfo.item.ItemQuality;\r\n        if (quality) { //(quality === \"consumable\" || quality === \"component\" || quality === \"secret_shop\")) {\r\n            for(var i = 0; i < matchArray.length; i++) {\r\n                if (quality === matchArray[i]) {\r\n                    return itemInfo;\r\n                }\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction filterItemName (name) {\r\n    var item = name.split('_');\r\n    item.shift();\r\n    item = item.join('_');\r\n    return item;\r\n}\r\n\r\nfunction getItemIcon(item, width, height, scale) {\r\n    // Remove 'item_' prefix, split by _, remove \"item\" and join again\r\n    item = filterItemName(item);\r\n\r\n    // Width and height of each item in item_stylesheet\r\n    if (item) {\r\n        return <span className={ 'sprite sprite-' + item + '_png '} alt={item} data-item={item} style={{ transform: `scale(${scale}, ${scale})`, transformOrigin: \"top left\" }} />\r\n    } else {\r\n        return <span style={{ backgroundColor: \"#212121\", width: width, height: height, transform: `scale(${scale}, ${scale})`, display: \"block\", transformOrigin: \"top left\" }} />\r\n    }\r\n}\r\n\r\nfunction ItemFromInfo(props) {\r\n    return (\r\n            <div \r\n                key={props.keyName} \r\n                title={props.item.name} \r\n                onClick={props.onClick}\r\n                className=\"m-1\" \r\n                style={{ width: `calc(88px * ${props.scale})`, height: `calc(64px * ${props.scale})` }}>\r\n                { \r\n                    getItemIcon(props.item.name, \"88px\", \"64px\", props.scale) \r\n                }\r\n            </div>\r\n    );\r\n}\r\n\r\nfunction TabHeading(props) {\r\n    return (\r\n        <h6 className=\"px-3 mb-0\">{props.text}</h6>\r\n    );\r\n}\r\n\r\nclass ItemSelector extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        var selectableItems = Object.keys(DOTAAbilities).filter((value) => {\r\n            var key = value.toLowerCase();\r\n            var ability = DOTAAbilities[value];\r\n            if (key !== \"version\" && !key.includes(\"recipe\") && !ability.ItemIsNeutralDrop && !ability.IsObsolete) {\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n        // Convert keys to item data\r\n        selectableItems = selectableItems.map((key) => {\r\n            return {\r\n                item:  DOTAAbilities[key],\r\n                name: key,\r\n            };\r\n        })\r\n        selectableItems.sort();\r\n\r\n        var basicItems = getItemsByQuality(selectableItems, [\"consumable\", \"component\", \"secret_shop\"]);\r\n        var upgradesItems = getItemsByQuality(selectableItems, [\"common\", \"rare\", \"epic\", \"artifact\"]);\r\n\r\n        this.state = {\r\n            allItems: selectableItems,\r\n            queryItems: null,\r\n\r\n            onSelectedItem: props.onSelectedItem,\r\n\r\n            basicItems: basicItems,\r\n            upgradesItems: upgradesItems,\r\n        };\r\n\r\n        this.onSearchChanged = this.onSearchChanged.bind(this);\r\n        this.onSearchItemSelected = this.onSearchItemSelected.bind(this);\r\n        this.onShopItemSelected = this.onShopItemSelected.bind(this);\r\n        this.onRemoveItemSelected = this.onRemoveItemSelected.bind(this);\r\n    }\r\n\r\n    onSearchChanged(e) {\r\n        var query = e.target.value;\r\n        var filteredItems = null;\r\n        if (query) {\r\n            filteredItems = this.state.allItems.filter((item) => {\r\n                return item.name.indexOf(query.toLowerCase()) !== -1; \r\n            });\r\n        }\r\n\r\n        this.setState({\r\n            queryItems: filteredItems,\r\n        });\r\n    }\r\n\r\n    onSearchItemSelected(e) {\r\n        var val = e.target.dataset?.item;\r\n        this.state.onSelectedItem(val);\r\n    }\r\n\r\n    onShopItemSelected (e) {\r\n        var item = e.target.dataset?.item;\r\n        this.state.onSelectedItem(item);\r\n    }\r\n\r\n    onRemoveItemSelected(e) {\r\n        var item = null;\r\n        this.state.onSelectedItem(item);\r\n    }\r\n\r\n    render() {\r\n        var scale = 0.5;\r\n        var searchIconScale = 0.45;\r\n        return (\r\n            <div className=\"item-card\">\r\n                <div className=\"item-card header d-flex\">\r\n                    <div>\r\n                        <Form.Control type=\"text\" placeholder=\"Search...\" onChange={this.onSearchChanged}/>\r\n                    </div>\r\n                    <div className=\"ml-auto\">\r\n                        <Button variant=\"outline-danger\" onClick={this.onRemoveItemSelected}>\r\n                            <FontAwesomeIcon icon={faMinus} />\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"item-card content\">\r\n                    <div className=\"\">\r\n                        {\r\n                            this.state.queryItems && \r\n                            <div>\r\n                                <h6>SEARCH RESULTS</h6>\r\n                                <ListGroup>\r\n                                    {\r\n                                        // Query search term\r\n                                        this.state.queryItems.map((item) => {\r\n                                            var itemNameDisplay = filterItemName(item.name);\r\n                                            return (\r\n                                                <ListGroup.Item \r\n                                                    key={item.name} \r\n                                                    data-item={itemNameDisplay} \r\n                                                    className=\"py-1 px-3\"\r\n                                                    onClick={this.onSearchItemSelected} \r\n                                                    action>\r\n                                                    <div className=\"d-flex\" data-item={itemNameDisplay}>\r\n                                                        <ItemFromInfo \r\n                                                            item={item}\r\n                                                            onClick={this.onSearchItemSelected} \r\n                                                            scale={searchIconScale}/>\r\n\r\n                                                        <h6 className=\"mx-1 my-auto\" data-item={itemNameDisplay}>\r\n                                                            { itemNameDisplay }\r\n                                                        </h6>\r\n                                                    </div>\r\n                                                </ListGroup.Item>\r\n                                            )\r\n                                        })\r\n                                    }   \r\n                                </ListGroup>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                    {/* Regular view */}\r\n                    {\r\n                        !this.state.queryItems && \r\n                            <div>\r\n                                <Tabs defaultActiveKey=\"basic\" transition={false} id=\"shop-tabs\">\r\n                                    <Tab eventKey=\"basic\" title={<TabHeading text=\"BASIC\" />}>\r\n                                        <div className=\"d-flex flex-wrap\">\r\n                                            {\r\n                                                this.state.basicItems && this.state.basicItems.map((item) => {\r\n                                                    return (\r\n                                                        <ItemFromInfo \r\n                                                            key={item.item.ID}\r\n                                                            item={item}\r\n                                                            onClick={this.onShopItemSelected} \r\n                                                            scale={scale} />\r\n                                                    )\r\n                                                })\r\n                                            }\r\n                                        </div>\r\n                                    </Tab>\r\n                                    <Tab eventKey=\"upgrades\" title={<TabHeading text=\"UPGRADES\" />}>\r\n                                        <div className=\"d-flex flex-wrap\">\r\n                                            {\r\n                                                this.state.upgradesItems && this.state.upgradesItems.map((item) => {\r\n                                                    return (\r\n                                                        <ItemFromInfo \r\n                                                            key={item.item.ID}\r\n                                                            item={item}\r\n                                                            onClick={this.onShopItemSelected} \r\n                                                            scale={scale} />\r\n                                                    );\r\n                                                })\r\n                                            }\r\n                                        </div>\r\n                                    </Tab>\r\n                                </Tabs>\r\n                            </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ItemSelector;","import React, { Component } from 'react';\r\nimport Popup from 'reactjs-popup';\r\n\r\nimport ItemSelector from \"./ItemSelector\";\r\n\r\nimport \"../../css/dota_hero_icons_big.css\";\r\n\r\n/// Single item that contains a popup to change the item\r\nclass Item extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            item: props.item,\r\n            slot: props.slot,\r\n            isBackpack: props.isBackpack,\r\n\r\n            onItemChanged: props.onItemChanged,\r\n        };\r\n\r\n        //console.log(`slot: ${this.state.slot} - item: ${this.state.item}`);\r\n        this.getItemIcon = this.getItemIcon.bind(this);\r\n        this.onSelectedItem = this.onSelectedItem.bind(this);\r\n    }\r\n\r\n    getItemIcon(item, width, height, scale) {\r\n        // Width and height of each item in item_stylesheet\r\n        if (item) {\r\n            return <span className={ 'sprite sprite-' + item + '_png '} alt={item} style={{ transform: `scale(${scale}, ${scale})`, transformOrigin: \"top left\" }} />\r\n        } else {\r\n            return <span style={{ backgroundColor: \"#212121\", width: width, height: height, transform: `scale(${scale}, ${scale})`, display: \"block\", transformOrigin: \"top left\" }} />\r\n        }\r\n    }\r\n\r\n    onSelectedItem (item) {\r\n        this.setState({\r\n            open: false,\r\n        });\r\n        \r\n        this.state.onItemChanged({ \r\n            slot: this.state.slot, \r\n            item: item,\r\n            isBackpack: this.state.isBackpack ? true : false,\r\n        });\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.item !== this.props.item) {\r\n            this.setState({ item: this.props.item, });\r\n        }\r\n\r\n        if (prevProps.slot !== this.props.slot) {\r\n            this.setState({ slot: this.props.slot });\r\n        }\r\n\r\n        if (prevProps.isBackpack !== this.props.isBackpack) {\r\n            this.setState({ isBackpack: this.props.isBackpack });\r\n        }\r\n    }   \r\n\r\n    render() {\r\n        var scale = 0.7;\r\n        var width = \"88px\";\r\n        var height = \"64px\";\r\n        return (\r\n            <div>\r\n                <Popup\r\n                    trigger={isOpen => (\r\n                        <div className=\"m-1\" style={{ width: `calc(88px * ${scale})`, height: `calc(64px * ${scale})` }}  onClick={() => this.setState({ open: isOpen })}>\r\n                            {  this.getItemIcon(this.state.item, width, height, 0.7) }\r\n                        </div>\r\n                    )}\r\n                    open={this.state.open}\r\n                    position=\"right center\"\r\n                    contentStyle={{ width: \"350px\", height: \"400px\", overflowY: \"auto\" }}>\r\n                        <ItemSelector onSelectedItem={this.onSelectedItem} />\r\n                </Popup>\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default Item;","import React, { Component } from 'react';\r\nimport {\r\n    Button\r\n} from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faMinus } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport { itemNameToElement } from \"../../utils\";\r\nimport {\r\n    getAllNeutrals\r\n} from \"../../utility/dataHelperItems\";\r\n\r\nimport \"./NeutralItemSelector.css\";\r\n\r\nclass NeutralItemSelector extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            allNeutrals: getAllNeutrals(),\r\n            iconScale: 0.5,\r\n            onNewNeutralSelected: props.onNeutralSelected,\r\n        };\r\n\r\n        this.onNeutralSelected = this.onNeutralSelected.bind(this);\r\n    }\r\n\r\n    onNeutralSelected(e) {\r\n        var neutral = e.target.parentElement.parentElement.dataset.neutral;\r\n        this.state.onNewNeutralSelected({ item: neutral });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"neutral-item-card\" style={{ color: \"black\" }}>\r\n                <div className=\"neutral-item-card header d-flex\">\r\n                    <h5 className=\"my-auto\">NEUTRAL ITEMS</h5>\r\n                    <Button className=\"ml-auto\" variant=\"outline-danger\" onClick={this.onNeutralSelected} data-neutral={null}>\r\n                        <FontAwesomeIcon icon={faMinus} data-neutral={null} />\r\n                    </Button>\r\n                </div>\r\n                <div className=\"neutral-item-card content\">\r\n                    <div className=\"d-flex flex-wrap\">\r\n                        {\r\n                            this.state.allNeutrals && this.state.allNeutrals.map((itemInfo) => {\r\n                                return ( \r\n                                    <div \r\n                                        className=\"m-1\" \r\n                                        key={itemInfo.item} \r\n                                        onClick={this.onNeutralSelected} \r\n                                        title={itemInfo.item}\r\n                                        data-neutral={itemInfo.item}>\r\n                                        { itemNameToElement(itemInfo, this.state.iconScale) }\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NeutralItemSelector;","import Neutral from \"./Neutral\";\r\n\r\nexport default Neutral;","import React, { Component } from 'react';\r\nimport Popup from \"reactjs-popup\";\r\n\r\nimport NeutralItemSelector from \"./NeutralItemSelector\";\r\n\r\nimport { itemNameToElement } from \"../../utils\";\r\n\r\nclass Neutral extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            neutralItem: props.neutralItem,\r\n            iconScale: 0.7,\r\n            onNewNeutralSelected: props.onNewNeutralSelected,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate (prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                neutralItem: this.props.neutralItem,\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Popup\r\n                    trigger={isOpen => {\r\n                        return itemNameToElement(this.state.neutralItem, this.state.iconScale)\r\n                    }}\r\n                    position=\"right center\"\r\n                    contentStyle={{ width: \"325px\", overflowY: \"auto\" }}>\r\n                    <NeutralItemSelector onNeutralSelected={this.state.onNewNeutralSelected} />\r\n                </Popup>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Neutral;","import React, { Component } from 'react';\r\nimport {\r\n    Row, \r\n    Col\r\n} from \"react-bootstrap\";\r\n\r\nimport Item from \"./Item\";\r\nimport Neutral from \"../Neutral\";\r\n\r\nclass ItemsBar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            items: props.items,\r\n            backpack: props.backpack,\r\n            neutral: props.neutral,\r\n            iconScale: 0.7,\r\n\r\n            onNeutralChanged: props.onNeutralChanged,\r\n            onItemChanged: props.onItemChanged,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        //Update if previous props have changed\r\n        if (prevProps.items !== this.props.items) {\r\n            this.setState({\r\n                items: this.props.items,\r\n            });\r\n        }\r\n\r\n        if (prevProps.backpack !== this.props.backpack) {\r\n            this.setState({\r\n                backpack: this.props.backpack,\r\n            });\r\n        }\r\n\r\n        if (prevProps.neutral !== this.props.neutral) {\r\n            this.setState({\r\n                neutral: this.props.neutral,\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        var itemsColWidth = 5;\r\n        var backpackColWidth = 5;\r\n        var neutralColWidth = 2;\r\n        return (\r\n            <div>\r\n                <Row>\r\n                    <Col md={itemsColWidth}>\r\n                        <h6>ITEMS</h6>\r\n                        <div className=\"d-flex flex-wrap\">\r\n                            {\r\n                                this.state.items && this.state.items.map((value) => {\r\n                                    return (\r\n                                        <Item \r\n                                            key={value.slot}\r\n                                            slot={value.slot}\r\n                                            item={value.item} \r\n                                            onItemChanged={this.state.onItemChanged} />\r\n                                    )\r\n                                })\r\n                            }\r\n                        </div>\r\n                    </Col>\r\n                    <Col md={backpackColWidth}>\r\n                        <h6>BACKPACK</h6>\r\n                        <div className=\"d-flex flex-wrap\">\r\n                            {\r\n                                this.state.backpack && this.state.backpack.map((value) => {\r\n                                    return (\r\n                                        <Item\r\n                                            key={value.slot}\r\n                                            slot={value.slot}\r\n                                            item={value.item}\r\n\r\n                                            isBackpack={true}\r\n                                            onItemChanged={this.state.onItemChanged} />\r\n                                    )\r\n                                })\r\n                            }\r\n                        </div>\r\n                    </Col>\r\n                    <Col md={neutralColWidth}>\r\n                        <h6>NEUTRAL</h6>\r\n                        {/* Neutral Item */}\r\n                        <div>\r\n                            <Neutral neutralItem={this.state.neutral} onNewNeutralSelected={this.state.onNeutralChanged} />\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ItemsBar;","import ItemsBar from \"./ItemsBar\";\r\n\r\nexport default ItemsBar;","import React, { Component } from 'react';\r\n\r\nimport { EAttributes } from \"../../enums/attributes.js\";\r\n\r\nimport \"./Attributes.css\";\r\nimport { getLocalizedString, replaceStringValue } from '../../utility/data-helpers/language.js';\r\nimport { calculateAttribute } from '../../utility/calculate.js';\r\n\r\nfunction parse(value) {\r\n    return parseFloat(value).toFixed(2);\r\n}\r\n\r\nfunction Attribute(props) {\r\n    return (\r\n        <div className=\"d-flex my-2 align-items-center\">\r\n            <div className={props.isPrimaryAttribute ? \" primary-attribute\" : \"\"}>\r\n                <span className={'attribute ' + props.type} alt=\"attribute\" />\r\n            </div>\r\n            <div className=\"mx-1\">{props.value}</div>\r\n            <div   \r\n                className=\"mx-1\" \r\n                style={{ color: \"green\" }}>{\"+\" + props.additional}</div>\r\n            <div\r\n                style={{ fontSize: \"0.75rem\" }}>\r\n                {\r\n                    replaceStringValue(props.perLevelString, props.per)\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nclass Attributes extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            hero: props.hero,\r\n            level: props.heroLevel,\r\n            items: props.items,\r\n            talents: props.talents,\r\n            neutral: props.neutral,\r\n            abilities: props.abilities,\r\n\r\n            dotaStrings: props.dotaStrings,\r\n            abilityStrings: props.abilityStrings,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                hero: this.props.hero,\r\n                level: this.props.heroLevel,\r\n                items: this.props.items,\r\n                talents: this.props.talents,\r\n                neutral: this.props.neutral,\r\n                abilities: this.props.abilities,\r\n\r\n                dotaStrings: this.props.dotaStrings,\r\n                abilityStrings: this.props.abilityStrings,\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let strengthStats = calculateAttribute(EAttributes.ATTR_STRENGTH, this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents);\r\n        let agilityStats = calculateAttribute(EAttributes.ATTR_AGILITY, this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents);\r\n        let intStats = calculateAttribute(EAttributes.ATTR_INTELLIGENCE, this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents);\r\n        return (\r\n            <div>\r\n                <h5>{getLocalizedString(this.state.dotaStrings, \"DOTA_Tooltip_topbar_stats\")}</h5>\r\n                <h6>{getLocalizedString(this.state.dotaStrings, \"DOTA_Attributes\")}</h6>\r\n                <Attribute \r\n                    type=\"strength\" \r\n                    value={ strengthStats.attribute }\r\n                    additional= { strengthStats.additionalAttribute }\r\n                    per={ strengthStats.perLevel } \r\n                    isPrimaryAttribute={this.state.hero?.AttributePrimary === EAttributes.ATTR_STRENGTH}\r\n                    perLevelString={ getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_StrengthGain\") } />\r\n\r\n                <Attribute \r\n                    type=\"agility\"\r\n                    value={ agilityStats.attribute }\r\n                    additional= { agilityStats.additionalAttribute }\r\n                    per={ agilityStats.perLevel } \r\n                    isPrimaryAttribute={this.state.hero?.AttributePrimary === EAttributes.ATTR_AGILITY} \r\n                    perLevelString={ getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_AgilityGain\") } />\r\n\r\n                <Attribute \r\n                    type=\"intelligence\" \r\n                    value={ intStats.attribute }\r\n                    additional= { intStats.additionalAttribute }\r\n                    per={ intStats.perLevel } \r\n                    isPrimaryAttribute={this.state.hero?.AttributePrimary === EAttributes.ATTR_INTELLIGENCE} \r\n                    perLevelString={ getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_IntelligenceGain\") } />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Attributes;","import Attributes from \"./Attributes\";\r\n\r\nexport default Attributes;","import React, { Component } from 'react';\r\nimport {\r\n    Row, Col\r\n} from \"react-bootstrap\";\r\n\r\nimport {\r\n    calculateHealthRegen,\r\n    calculateManaRegen,\r\n    calculateMainArmor,\r\n    calculateTotalSpellAmp,\r\n    calculateStatusResist,\r\n    calculateMagicResist,\r\n    calculatePhysicalResist,\r\n    calculateEvasion,\r\n    calculateRightClickDamage,\r\n    calculateAttackTime,\r\n    calculateMoveSpeed,\r\n    calculateAttackRange\r\n} from \"../../utility/calculate\";\r\nimport { \r\n    getPrimaryAttributeStats\r\n} from '../../utility/dataHelperHero';\r\nimport {\r\n    getLocalizedString\r\n} from \"../../utility/data-helpers/language\";\r\n\r\nfunction StatArray(props) {\r\n    return (\r\n        <div style={{ backgroundColor: \"#171717\", color: \"white\", fontSize: \"0.8rem\" }} className=\"p-2 h-100\">\r\n            <h6 className=\"ml-auto\">{props.title}</h6>\r\n            {\r\n                props.stats &&\r\n                    props.stats.map((value) => {\r\n                        return (<Row key={value.name}>\r\n                            <Col md={6}>\r\n                                {value.name}\r\n                            </Col>\r\n                            <Col md={6}>\r\n                                {value.value}\r\n                            </Col>\r\n                        </Row>\r\n                        );\r\n                    })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\n/// Gets the attack min/max and formats it for display in UI\r\nfunction formatAttackMinMax(hero, lvl, items, neutral, abilities, talents) {\r\n    let standardAtkDmg = calculateRightClickDamage(hero, lvl, items, neutral, abilities, talents);\r\n    return `${standardAtkDmg.min} - ${standardAtkDmg.max}`;\r\n}\r\n\r\n/// Gets the atk time and formats it to display in UI\r\nfunction formatAttackTime(hero, lvl, items, neutral, abilities, talents) {\r\n    let attackInfo = calculateAttackTime(hero, lvl, items, neutral, abilities, talents);\r\n    return `${attackInfo.attackSpeed} (${attackInfo.attackTime} s)`;\r\n}\r\n\r\nclass Statistics extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            hero: props.hero,\r\n            level: props.heroLevel,\r\n            talents: props.talents,\r\n            items: props.items,\r\n            neutral: props.neutral,\r\n            abilities: props.abilities,\r\n\r\n            dotaStrings: props.dotaStrings,\r\n            abilityStrings: props.abilityStrings,\r\n        };\r\n\r\n        this.updateStatistics = this.updateStatistics.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateStatistics()\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        \r\n        if (prevProps.hero !== this.props.hero) {\r\n            this.setState({ \r\n                hero: this.props.hero \r\n            }, () => {\r\n                this.updateStatistics();\r\n            });\r\n        }\r\n        if (prevProps.items !== this.props.items) {\r\n            this.setState({ \r\n                items: this.props.items \r\n            }, () => {\r\n                this.updateStatistics();\r\n            });\r\n        }\r\n        if (prevProps.neutral !== this.props.neutral) {\r\n            this.setState({ \r\n                neutral: this.props.neutral, \r\n            }, () => {\r\n                this.updateStatistics();\r\n            });\r\n        }\r\n        if (prevProps.talents !== this.props.talents) {\r\n            this.setState({ \r\n                talents: this.props.talents \r\n            }, () => {\r\n                this.updateStatistics();\r\n            });\r\n        }\r\n        if (prevProps.abilities !== this.props.abilities) {\r\n            this.setState({ \r\n                abilities: this.props.abilities \r\n            }, () => {\r\n                this.updateStatistics();\r\n            });\r\n        }\r\n        if (prevProps.heroLevel !== this.props.heroLevel) {\r\n            this.setState({ \r\n                level: this.props.heroLevel \r\n            }, () => {\r\n                this.updateStatistics();\r\n            });\r\n        }\r\n        if (prevProps.dotaStrings !== this.props.dotaStrings) {\r\n            this.setState({ dotaStrings: this.props.dotaStrings });\r\n        }\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ abilityStrings: this.props.abilityStrings });\r\n        }\r\n    }\r\n\r\n    updateStatistics() {\r\n        let armor =  calculateMainArmor(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents);\r\n        let physResist = calculatePhysicalResist(armor);\r\n        this.setState({\r\n            // Attack\r\n            attackSpeed: formatAttackTime(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n            damage: formatAttackMinMax(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n            attackRange: calculateAttackRange(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n            moveSpeed: calculateMoveSpeed(this.state.hero, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n            spellAmp: calculateTotalSpellAmp(this.state.talents, this.state.items, this.state.neutral),\r\n            manaRegen: calculateManaRegen(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n\r\n            // Defence\r\n            armor: armor,\r\n            physicalResist: physResist,\r\n            magicResist: calculateMagicResist(this.state.items, this.state.neutral, this.state.abilities),\r\n            statusResist: calculateStatusResist(this.state.items, this.state.neutral),\r\n            evasion: calculateEvasion(this.state.items, this.state.neutrak, this.state.abilities , this.state.talents),\r\n            healthRegen: calculateHealthRegen(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Row>\r\n                {\r\n                    this.state.hero &&\r\n                    <Col md={6}>\r\n                        <StatArray title={getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_Attack\")} stats={[\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_AttackSpeed\"),\r\n                                value: this.state.attackSpeed\r\n                            },\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_Damage\"), \r\n                                value: this.state.damage \r\n                            },\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_AttackRange\"), \r\n                                value: this.state.attackRange \r\n                            },\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_MoveSpeed\"), \r\n                                value: this.state.moveSpeed \r\n                            },\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_SpellAmp\"), \r\n                                value: this.state.spellAmp + \"%\" \r\n                            },\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_ManaRegenDetail\"), \r\n                                value: this.state.manaRegen \r\n                            },\r\n                        ]} />\r\n                    </Col>\r\n                }   \r\n                {\r\n                    this.state.hero &&\r\n                    <Col md={6}>\r\n                        <StatArray title={getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_Defense\")} stats={[\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_Armor\"), \r\n                                value:  this.state.armor \r\n                            },\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_PhysicalResist\"), \r\n                                value: this.state.physicalResist + \"%\" \r\n                            },\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_MagicResist\"), \r\n                                value: this.state.magicResist + \"%\" \r\n                            },\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_StatusResist\"), \r\n                                value: this.state.statusResist + \"%\" \r\n                            },\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_Evasion\"), \r\n                                value: this.state.evasion + \"%\" \r\n                            },\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_HealthRegenDetail\"), \r\n                                value: this.state.healthRegen \r\n                            },\r\n                        ]}/>\r\n                    </Col>\r\n                }\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Statistics;","import Statistics from \"./Statistics\";\r\n\r\nexport default Statistics;","import React, { Component } from 'react';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport {  faSearch } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nclass HeroSelector extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            heroes: props.heroes,\r\n            filteredHeroes: props.heroes,\r\n            onSelectedHero: props.onSelectedHero,\r\n        };\r\n\r\n        this.onSearchChanged = this.onSearchChanged.bind(this);\r\n    }\r\n\r\n    onSearchChanged(e) {\r\n        var searchTerm = e.target.value;\r\n        var filtered = this.state.heroes;\r\n        filtered = filtered.filter((hero) => {\r\n            return hero.name.indexOf(searchTerm.toLowerCase()) !== -1;\r\n        });\r\n\r\n        this.setState({\r\n            filteredHeroes: filtered,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        var iconScale = 0.5;\r\n        return (\r\n            <div className=\"hero-card\">\r\n                <div className=\"hero-card header d-flex\">\r\n                    <div className=\"d-flex\">\r\n                        <h5 className=\"my-auto ml-2\">CHOOSE A HERO</h5>\r\n                        <div className=\"ml-auto p-1\">\r\n                            <Form.Control type=\"text\" placeholder=\"Search...\" onChange={this.onSearchChanged} />\r\n                        </div>\r\n                        <FontAwesomeIcon icon={faSearch} className=\"my-auto mr-2\" />\r\n                    </div>\r\n                </div>\r\n                <div className=\"content\">\r\n                    <div className=\"d-flex flex-wrap\">\r\n                        {\r\n                            this.state.filteredHeroes && this.state.filteredHeroes.map((value) => {\r\n                                return (\r\n                                    <div\r\n                                        key={value.name}  \r\n                                        onClick={this.state.onSelectedHero}\r\n                                        className=\"m-1\"\r\n                                        style={{ height: `calc(72px * ${iconScale})`, width: `calc(128px * ${iconScale})` }}>\r\n                                        <span \r\n                                            className={`hero-icon-big hero-icon-big-${value.name}_png`} \r\n                                            style={{ transformOrigin: \"top left\", transform: `scale(${iconScale}, ${iconScale})` }}\r\n                                            data-heroname={value.displayName}\r\n                                            data-hero={value.name} />\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HeroSelector;","import ChangeHeroBtn from \"./ChangeHeroBtn\";\r\n\r\nexport default ChangeHeroBtn;","import React, { Component } from 'react';\r\nimport {\r\n    Button\r\n} from \"react-bootstrap\";\r\nimport Popup from \"reactjs-popup\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport HeroSelector from \"./HeroSelector\";\r\n\r\nimport { DOTAHeroes } from \"../../data/dota2/json/npc_heroes.json\";\r\n\r\nimport \"./ChangeHeroBtn.css\";\r\n\r\nclass ChangeHeroBtn extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        // Filter and remove any unwanted heroes\r\n        var selectableHeroes = Object.keys(DOTAHeroes).filter((value) => {\r\n            var key = value.toLowerCase();\r\n            if (key !== \"version\" && key !== \"npc_dota_hero_base\" && key !== \"npc_dota_hero_target_dummy\") {\r\n                return true;\r\n            }\r\n            return false;\r\n        })\r\n        // Map only necessary data\r\n        selectableHeroes = selectableHeroes.map((key) => {\r\n            if (DOTAHeroes[key].workshop_guide_name) {\r\n                return {\r\n                    displayName: DOTAHeroes[key].workshop_guide_name,\r\n                    name: key,\r\n                    alias: DOTAHeroes[key].NameAliases ? DOTAHeroes[key].NameAliases.split(',') : null,\r\n                };\r\n            }\r\n        });\r\n        // sort by name property\r\n        selectableHeroes.sort((a, b) => (a.name > b.name) ? 1 : -1)\r\n\r\n        this.state = {\r\n            open: false,\r\n            heroes: selectableHeroes,\r\n\r\n            onSelectHero: props.onSelectHero,\r\n        };\r\n\r\n        this.onToggleHeroSelect = this.onToggleHeroSelect.bind(this);\r\n        this.onSelectHero = this.onSelectHero.bind(this);\r\n    }\r\n\r\n    onToggleHeroSelect(e) {\r\n        this.setState({\r\n            open: !this.state.open,\r\n        });\r\n    }\r\n\r\n    onSelectHero (e) {\r\n        //e.persist();\r\n        //console.log(e);\r\n        this.setState({\r\n            open: !this.state.open,\r\n        });\r\n        \r\n        var hero = e.target.dataset.hero;\r\n        this.state.onSelectHero(hero);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Popup \r\n                    trigger={isOpen => (\r\n                        <Button onClick={this.onToggleHeroSelect}><FontAwesomeIcon icon={faPencilAlt} /></Button>\r\n                    )} \r\n                    position=\"right top\"\r\n                    contentStyle={{ width: \"750px\" }}>\r\n                     <HeroSelector heroes={this.state.heroes} onSelectedHero={this.onSelectHero} />\r\n                </Popup>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChangeHeroBtn;","import React, { Component } from 'react';\r\nimport {\r\n    Row,\r\n    Col\r\n} from \"react-bootstrap\";\r\n\r\nimport {\r\n    getTalentInfoFromName,\r\n} from \"../../utility/dataHelperTalents\";\r\nimport { \r\n    tryGetTalentLocalizedString,\r\n    replaceStringValue\r\n} from \"../../utility/data-helpers/language\";\r\n\r\nfunction isTalentSelected (selectedTalents, talent) {\r\n    return selectedTalents?.includes(talent);\r\n}\r\n\r\nclass TalentRow extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            leftTalent: props.leftTalent,\r\n            rightTalent: props.rightTalent,\r\n            level: props.lvl,\r\n\r\n            selectedTalents: this.props.selectedTalents,\r\n            onTalentSelected: this.props.onTalentSelected,\r\n            onTalentUnselected: this.props.onTalentUnselected,\r\n\r\n            abilityStrings: this.props.abilityStrings,\r\n        };\r\n\r\n        this.onSelectTalent = this.onSelectTalent.bind(this);\r\n        this.getTalentDisplayName = this.getTalentDisplayName.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.leftTalent !== this.props.leftTalent) {\r\n            this.setState({ leftTalent: this.props.leftTalent });\r\n        }\r\n\r\n        if(prevProps.rightTalent !== this.props.rightTalent) {\r\n            this.setState({ rightTalent: this.props.rightTalent });\r\n        }\r\n\r\n        if (prevProps.lvl !== this.props.lvl) {\r\n            this.setState({ level: this.props.lvl });\r\n        }\r\n\r\n        if (prevProps.selectedTalents !== this.props.selectedTalents) {\r\n            this.setState({ selectedTalents: this.props.selectedTalents });\r\n        }\r\n\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ abilityStrings: this.props.abilityStrings });\r\n        }\r\n    }\r\n\r\n    onSelectTalent(e) {\r\n        var selectedTalent = e.target.dataset.talent;\r\n        // if clicked twice, unselect the talent\r\n        if (isTalentSelected(this.state.selectedTalents, selectedTalent)) {\r\n            this.state.onTalentUnselected(selectedTalent);\r\n        } else {\r\n            this.state.onTalentSelected(selectedTalent);\r\n        }\r\n    }\r\n\r\n    getTalentDisplayName (talent) {\r\n        let talentInfo = getTalentInfoFromName(talent);\r\n        if (!talentInfo) {\r\n            return \"Unknown Talent\";\r\n        }\r\n\r\n        let displayName = tryGetTalentLocalizedString(this.state.abilityStrings, talent);\r\n        if (displayName && talentInfo && talentInfo.AbilitySpecial) {\r\n            displayName = replaceStringValue(displayName, talentInfo.AbilitySpecial[0].value)\r\n        }\r\n\r\n        return displayName;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Row className=\"my-1 py-2\" style={{ backgroundColor: \"rgb(24, 30, 33)\"}}>\r\n                {/* Left Talent */}\r\n                <Col \r\n                    md={5}\r\n                    className=\"text-center\"\r\n                    style={{ color: isTalentSelected(this.state.selectedTalents, this.state.leftTalent) ? \"#c4a66f\" : \"white\" }}>\r\n                    <div onClick={this.onSelectTalent} data-talent={this.state.leftTalent}>\r\n                        {\r\n                            this.getTalentDisplayName(this.state.leftTalent)\r\n                        }\r\n                    </div>\r\n                </Col>\r\n                {/* Talent Level */}\r\n                <Col md={2}>\r\n                    <h6 \r\n                        className=\"text-center\"\r\n                        style={{ color: \"#e7d291\"}}>\r\n                        {this.state.level}\r\n                    </h6>\r\n                </Col>\r\n                {/* Right Talent */}\r\n                <Col \r\n                    md={5}\r\n                    className=\"text-center\"\r\n                    style={{ color: isTalentSelected(this.state.selectedTalents, this.state.rightTalent) ? \"#c4a66f\" : \"white\" }}>\r\n                    <div onClick={this.onSelectTalent} data-talent={this.state.rightTalent}>\r\n                        {\r\n                            this.getTalentDisplayName(this.state.rightTalent)\r\n                        }\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TalentRow;\r\n","import TalentTree from \"./TalentTree\";\r\n\r\nexport default TalentTree;","import React, { Component } from 'react';\r\n\r\nimport TalentRow from \"./TalentRow\";\r\n\r\nclass TalentTree extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            talents: this.props.talents,\r\n            selectedTalents: this.props.selectedTalents,\r\n\r\n            onTalentSelected: this.props.onTalentSelected,\r\n            onTalentUnselected: this.props.onTalentUnselected,\r\n\r\n            abilityStrings: this.props.abilityStrings,\r\n        };\r\n        this.findSelectedTalent = this.findSelectedTalent.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(prevProps.talents !== this.props.talents) {\r\n            this.setState({\r\n                talents: this.props.talents,\r\n            });\r\n        }\r\n\r\n        if (prevProps.selectedTalents !== this.props.selectedTalents) {\r\n            this.setState({ selectedTalents: this.props.selectedTalents });\r\n        }\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ abilityStrings: this.props.abilityStrings });\r\n        }\r\n    }\r\n\r\n    findSelectedTalent(leftTalent, rightTalent) {\r\n        if (this.state.selectedTalents && this.state.selectedTalents.length > 0) {\r\n            var matchTalent = this.state.selectedTalents.find((val) => {\r\n                if (val.name === leftTalent) {\r\n                    return leftTalent;\r\n                } else if (val.name === rightTalent) {\r\n                    return rightTalent;\r\n                }\r\n                return null;\r\n            });\r\n            return matchTalent?.name;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h6 className=\"text-center\">TALENT TREE</h6>\r\n                {/* <img src=\"/images/dota2/talent.jpg\" alt=\"talent tree\" /> */}\r\n                <div \r\n                    className=\"mr-2\"\r\n                    style={{ fontSize: \"0.8rem\" }}>\r\n                        {\r\n                            this.state.talents && this.state.talents.map((talentInfo) => {\r\n                                return <TalentRow \r\n                                                key={talentInfo.lvl}\r\n                                                lvl={talentInfo.lvl}\r\n                                                leftTalent={talentInfo.leftTalent} \r\n                                                rightTalent={talentInfo.rightTalent} \r\n                                                selectedTalents={this.state.selectedTalents}\r\n                                                onTalentSelected={this.state.onTalentSelected}\r\n                                                onTalentUnselected={this.state.onTalentUnselected} \r\n                                                \r\n                                                abilityStrings={this.state.abilityStrings} />\r\n                            })\r\n                        }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TalentTree;","import HealthManaBar from \"./HealthManaBar\";\r\n\r\nexport default HealthManaBar;","import React, { Component } from 'react';\r\n\r\nimport {\r\n    calculateHealth,\r\n    calculateMana,\r\n    calculateHealthRegen,\r\n    calculateManaRegen,\r\n} from \"../../utility/calculate\";\r\nimport { EAttributes } from \"../../enums/attributes\";\r\n\r\nimport \"./style.css\";\r\n\r\nclass HealthManaBar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            hero: props.hero,\r\n            level: props.heroLevel,\r\n            items: props.items,\r\n            talents: props.talents,\r\n            neutral: props.neutral,\r\n            abilities: props.abilities,\r\n\r\n            maxHealth: 0,\r\n            maxMana: 0,\r\n        }\r\n\r\n        this.updateBar = this.updateBar.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateBar();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                hero: this.props.hero,\r\n                level: this.props.heroLevel,\r\n                items: this.props.items,\r\n                talents: this.props.talents,\r\n                neutral: this.props.neutral,\r\n                abilities: this.props.abilities,\r\n\r\n                maxHealth: 0,\r\n                maxMana: 0,\r\n            }, () => this.updateBar());\r\n        }\r\n    }\r\n\r\n    updateBar() {\r\n        this.setState({\r\n            maxHealth: calculateHealth(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n            maxMana: calculateMana(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"bar health d-flex\">\r\n                    <h6 className=\"my-auto mx-auto\">{this.state.maxHealth} / {this.state.maxHealth}</h6>\r\n                    <div className=\"my-auto mr-1\">\r\n                        { \"+\" + calculateHealthRegen(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents) }\r\n                    </div>\r\n                </div>\r\n                <div className=\"bar mana d-flex\">\r\n                    <h6 className=\"my-auto mx-auto\">{this.state.maxMana} / {this.state.maxMana}</h6>\r\n                    <div className=\"my-auto mr-1\">\r\n                        { \"+\" + calculateManaRegen(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents) }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HealthManaBar;","import React, { Component } from 'react';\r\nimport { \r\n    Button, \r\n    Form\r\n} from 'react-bootstrap';\r\n\r\nconst MAX_LEVEL = 30;\r\nconst MIN_LEVEL = 1;\r\n\r\nfunction ModifyBtn (props) {\r\n    return (\r\n        <Button \r\n            className=\"py-1\"\r\n            variant=\"outline-secondary\" \r\n            onClick={props.onClick}>\r\n            { props.text }\r\n        </Button>\r\n    );\r\n}\r\n\r\nclass LevelSelector extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            level: props.heroLevel,\r\n            onHeroLevelChanged: props.onHeroLevelChanged,\r\n        };\r\n\r\n        this.onIncrementHeroLevel = this.onIncrementHeroLevel.bind(this);\r\n        this.onDecrementHeroLevel = this.onDecrementHeroLevel.bind(this);\r\n        this.onLvlInputChanged = this.onLvlInputChanged.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.heroLevel !== this.props.heroLevel) {\r\n            this.setState({\r\n                level: this.props.heroLevel,\r\n            });\r\n        }\r\n    }\r\n\r\n    onIncrementHeroLevel() {\r\n        var newLevel = this.state.level;\r\n        newLevel += 1;\r\n\r\n        if (newLevel >= MAX_LEVEL) {\r\n            newLevel = MAX_LEVEL;\r\n        }\r\n\r\n        this.state.onHeroLevelChanged(newLevel);\r\n    }\r\n\r\n    onDecrementHeroLevel() {\r\n        var newLevel = this.state.level;\r\n        newLevel -= 1;\r\n\r\n        if (newLevel < MIN_LEVEL) {\r\n            newLevel = MIN_LEVEL;\r\n        }\r\n\r\n        this.state.onHeroLevelChanged(newLevel);\r\n    }\r\n\r\n    onLvlInputChanged(e) {\r\n        var lvl = parseInt(e.target.value);\r\n        if (lvl) {\r\n            if (lvl > MAX_LEVEL) {\r\n                lvl = MAX_LEVEL;\r\n            }\r\n            else if (lvl < MIN_LEVEL) {\r\n                lvl = MIN_LEVEL;\r\n            }\r\n        } else {\r\n            lvl = MIN_LEVEL;\r\n        }\r\n\r\n        this.state.onHeroLevelChanged(lvl);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"mx-5\">\r\n                <h6>HERO LEVEL</h6>\r\n                <div className=\"d-flex\">\r\n                    <ModifyBtn \r\n                        onClick={this.onDecrementHeroLevel} \r\n                        text=\"-\" />\r\n                    <Form.Control\r\n                        className=\"mx-3\" \r\n                        style={{ width: \"75px\" }}\r\n                        placeholder=\"lvl\" \r\n                        type=\"number\" \r\n                        value={this.state.level} \r\n                        onChange={this.onLvlInputChanged} />\r\n                    <ModifyBtn \r\n                        onClick={this.onIncrementHeroLevel} \r\n                        text=\"+\" />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LevelSelector;","import LevelSelector from \"./LevelSelector\";\r\n\r\nexport default LevelSelector;","import React, { Component } from 'react';\r\nimport {\r\n    Container,\r\n    Row,\r\n    Col,\r\n} from 'react-bootstrap';\r\nimport { connect } from \"react-redux\";\r\n\r\nimport {\r\n    SELECTED_HERO,\r\n    SELECTED_ITEM,\r\n    SELECTED_NEUTRAL,\r\n    SELECTED_BACKPACK_ITEM,\r\n    SELECTED_TALENT,\r\n    UNSELECTED_TALENT,\r\n    NEW_HERO_LEVEL,\r\n    ENEMY_SELECTED_TALENT\r\n} from \"../../constants/actionTypes\";\r\n\r\nimport Abilities from \"../Abilities\";\r\nimport ItemsBar from \"../ItemsBar\";\r\nimport Attributes from \"../Attributes\";\r\nimport Statistics from \"../Statistics\";\r\nimport ChangeHeroBtn from \"../ChangeHeroBtn\";\r\nimport TalentTree from \"../TalentTree\";\r\nimport HealthManaBar from \"../HealthManaBar\";\r\nimport LevelSelector from \"../LevelSelector\";\r\nimport EnemyHero from '../EnemyHero';\r\n\r\n/* DotA 2 Import Data */\r\nimport { DOTAHeroes } from \"../../data/dota2/json/npc_heroes.json\";\r\n\r\nimport \"../../css/dota_hero_icons.css\";\r\nimport \"../../css/dota_attributes.css\";\r\nimport \"../../css/dota_items.css\";\r\nimport \"../../css/dota_hero_icons_big.css\";\r\nimport \"./Calculator.css\";\r\n\r\nclass Calculator extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.onHeroSelected = this.onHeroSelected.bind(this);\r\n        this.onItemSelected = this.onItemSelected.bind(this);\r\n        this.onNeutralSelected = this.onNeutralSelected.bind(this);\r\n        this.onTalentSelected = this.onTalentSelected.bind(this);\r\n        this.onTalentUnselected = this.onTalentUnselected.bind(this);\r\n        this.onHeroLevelChanged = this.onHeroLevelChanged.bind(this);\r\n    }\r\n\r\n    onHeroSelected(heroName) {\r\n        var targetHero = DOTAHeroes[heroName];\r\n        console.log(`${SELECTED_HERO}: ${heroName}`);\r\n\r\n        this.props.dispatch({ type: SELECTED_HERO, value: targetHero });\r\n    }\r\n\r\n    onItemSelected (item) {\r\n        if (item.isBackpack) \r\n        {\r\n            console.log(`${SELECTED_BACKPACK_ITEM}: Slot: ${item.slot} Item: ${item.item}`);\r\n            this.props.dispatch({ type: SELECTED_BACKPACK_ITEM, value: item });\r\n        }\r\n        else\r\n        {\r\n            console.log(`${SELECTED_ITEM}: Slot: ${item.slot} Item: ${item.item}`);\r\n            this.props.dispatch({ type: SELECTED_ITEM, value: item });\r\n        }\r\n    }\r\n\r\n    onNeutralSelected(neutralItem) {\r\n        console.log(`${SELECTED_NEUTRAL}: ${neutralItem.item}`);\r\n        this.props.dispatch({ type: SELECTED_NEUTRAL, value: neutralItem });\r\n    }\r\n\r\n    onTalentSelected (talent) {\r\n        console.log(`${SELECTED_TALENT}: ${talent}`);\r\n        this.props.dispatch({ type: SELECTED_TALENT, value: talent });\r\n    }\r\n\r\n    onTalentUnselected (talent) {\r\n        console.log(`${UNSELECTED_TALENT}: ${talent}`);\r\n        this.props.dispatch({ type: UNSELECTED_TALENT, value: talent });\r\n    }\r\n\r\n    onEnemyTalentSelected (enemy, talent) {\r\n        console.log(`${ENEMY_SELECTED_TALENT}: ${enemy}, ${talent}`);\r\n        this.props.dispatch({ type: ENEMY_SELECTED_TALENT, value: talent });\r\n    }\r\n\r\n    onHeroLevelChanged(newLevel) {\r\n        //console.log(`${NEW_HERO_LEVEL}: ${newLevel}`);\r\n        this.props.dispatch({ type: NEW_HERO_LEVEL, value: newLevel });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"mt-3\">\r\n                <Container fluid=\"md\">\r\n                    {/* Top row, Inital Hero Information */}\r\n                    <Row>\r\n                        {/* Main Hero Info */}\r\n                        <Col className=\"my-auto\" md={3}>\r\n                            <span \r\n                                className={`hero-icon-big hero-icon-big-npc_dota_hero_${this.props.selectedHeroName}_png mx-3`}\r\n                                height={50}\r\n                                alt=\"hero banner\" />\r\n                            <div className=\"d-flex mt-3\">\r\n                                <h5 className=\"my-auto px-3\">\r\n                                    {this.props.selectedHeroName}\r\n                                </h5>\r\n                                <ChangeHeroBtn onSelectHero={this.onHeroSelected}/>\r\n                            </div>\r\n                        </Col>\r\n                        {/* Small Stats */}\r\n                        <Col md={3}>\r\n                            <Attributes \r\n                                hero={this.props.selectedHero} \r\n                                heroLevel={this.props.heroLevel}\r\n                                talents={this.props.selectedTalents}\r\n                                items={this.props.items}\r\n                                neutral={this.props.neutralItem} \r\n                                abilities={this.props.heroAbilities} \r\n                                abilityStrings={this.props.abilityStrings}\r\n                                dotaStrings={this.props.dotaStrings}/>\r\n                        </Col>\r\n                        {/* Final Attack/Defence Stats */}\r\n                        <Col md={5}>\r\n                            <Statistics \r\n                                hero={this.props.selectedHero} \r\n                                heroLevel={this.props.heroLevel}\r\n                                talents={this.props.selectedTalents}\r\n                                items={this.props.items}\r\n                                neutral={this.props.neutralItem} \r\n                                abilities={this.props.heroAbilities} \r\n                                abilityStrings={this.props.abilityStrings}\r\n                                dotaStrings={this.props.dotaStrings}  />\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    {/* Health/Mana and Hero Lvl  */}\r\n                    <Row className=\"my-2 py-2\">\r\n                        <Col md={8}>\r\n                            <HealthManaBar \r\n                                hero={this.props.selectedHero} \r\n                                heroLevel={this.props.heroLevel}\r\n                                talents={this.props.selectedTalents}\r\n                                items={this.props.items}\r\n                                neutral={this.props.neutralItem} \r\n                                abilities={this.props.heroAbilities} />\r\n                        </Col>\r\n                        <Col md={4}>\r\n                            <LevelSelector \r\n                                heroLevel={ this.props.heroLevel } \r\n                                onHeroLevelChanged={ this.onHeroLevelChanged }/>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    {/* Items/Talent */}\r\n                    <Row className=\"items-row my-4\">\r\n                        <Col md={7}>\r\n                            <ItemsBar\r\n                                items={this.props.items} \r\n                                backpack={this.props.backpack} \r\n                                neutral={this.props.neutralItem} \r\n                                onItemChanged={this.onItemSelected}\r\n                                onNeutralChanged={this.onNeutralSelected} />\r\n                        </Col>\r\n                        <Col md={5}>\r\n                            <TalentTree\r\n                                talents={this.props.heroTalents} \r\n                                selectedTalents={this.props.selectedTalents}\r\n                                onTalentSelected={this.onTalentSelected} \r\n                                onTalentUnselected={this.onTalentUnselected} \r\n                                abilityStrings={this.props.abilityStrings} />\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    {/* Abilities */}\r\n                    <Abilities \r\n                        abilities={this.props.heroAbilities}\r\n                        items={this.props.items}\r\n                        neutral={this.props.neutralItem} \r\n                        selectedTalents={this.props.selectedTalents} \r\n                        abilityStrings={this.props.abilityStrings}\r\n                        dotaStrings={this.props.dotaStrings} \r\n                        displayDamage={true} />\r\n\r\n                    {/* Padding Separator */}\r\n                    {/* <div className=\"py-5\" /> */}\r\n                    \r\n                    {/* Enemy Hero */}\r\n                    {/* <EnemyHero \r\n                        hero={this.props.selectedEnemyHero}\r\n                        heroName={this.props.selectedEnemyHeroName} \r\n                        heroAbilities={this.props.enemyHeroAbilities} \r\n                        heroItems={this.props.enemyHeroItems}\r\n                        heroTalents={this.props.enemyHeroTalents} \r\n                        selectedTalents={this.props.selectedEnemyTalents}\r\n                        neutral={this.props.enemyNeutralItem}\r\n                        abilityStrings={this.props.abilityStrings} \r\n                        dotaStrings={this.props.dotaStrings} /> */}\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    selectedHero: state.hero.selectedHero,\r\n    selectedHeroName: state.hero.selectedHeroName,\r\n    \r\n    heroAbilities: state.hero.heroAbilities,\r\n    heroTalents: state.hero.heroTalents,\r\n    heroLevel: state.hero.heroLevel,\r\n\r\n    items: state.hero.items,\r\n    backpack: state.hero.backpack,\r\n    neutralItem: state.hero.neutralItem,\r\n    selectedTalents: state.hero.selectedTalents,\r\n\r\n    abilityStrings: state.language.stringsAbilities,\r\n    dotaStrings: state.language.stringsDota,\r\n\r\n    selectedEnemyHero: state.enemy.selectedEnemyHero,\r\n    selectedEnemyHeroName: state.enemy.selectedEnemyHeroName,\r\n    enemyHeroTalents: state.enemy.enemyHeroTalents,\r\n    enemyHeroAbilities: state.enemy.enemyHeroAbilities,\r\n    selectedEnemyTalents: state.enemy.selectedEnemyTalents,\r\n    enemyHeroItems: state.enemy.enemyHeroItems,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Calculator);","import React, { Component } from 'react';\r\nimport {\r\n    Row,\r\n    Col,\r\n} from 'react-bootstrap';\r\n\r\nimport TalentTree from \"../TalentTree\";\r\nimport ItemsBar from '../ItemsBar/ItemsBar';\r\nimport Abilities from '../Abilities';\r\nimport HealthManaBar from \"../HealthManaBar\";\r\n\r\nclass EnemyHero extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            enemyHero: this.props.hero,\r\n            enemyHeroName: this.props.heroName,\r\n            heroTalents: this.props.heroTalents,\r\n            heroAbilities: this.props.heroAbilities,\r\n            selectedTalents: this.props.selectedTalents,\r\n            heroItems: this.props.heroItems,\r\n            heroNeutral: this.props.neutral,\r\n\r\n            abilityStrings: this.props.abilityStrings,\r\n            dotaStrings: this.props.dotaStrings,\r\n\r\n            heroLevel: 0,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.hero !== this.props.hero) {\r\n            this.setState({ enemyHero: this.props.hero });\r\n        }\r\n        if (prevProps.heroName !== this.props.heroName) {\r\n            this.setState({ enemyHeroName: this.props.heroName });\r\n        }\r\n        if (prevProps.heroTalents !== this.props.heroTalents) {\r\n            this.setState({ heroTalents: this.props.heroTalents });\r\n        }\r\n        if (prevProps.heroAbilities !== this.props.heroAbilities) {\r\n            this.setState({ heroAbilities: this.props.heroAbilities });\r\n        }\r\n        if (prevProps.selectedTalents !== this.props.selectedTalents) {\r\n            this.setState({ selectedTalents: this.props.selectedTalents });\r\n        }\r\n        if (prevProps.heroItems !== this.props.heroItems) {\r\n            this.setState({ heroItems: this.props.heroItems });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Row>\r\n                    <Col md={4}>\r\n                        {this.state.enemyHeroName}\r\n                    </Col>\r\n                    <Col md={8}>\r\n                        <HealthManaBar \r\n                                baseStrength ={ this.state.enemyHero?.AttributeBaseStrength }\r\n                                strengthGain={ this.state.enemyHero?.AttributeStrengthGain } \r\n                                baseIntelligence={this.state.enemyHero?.AttributeBaseIntelligence }\r\n                                intelligenceGain={ this.state.enemyHero?.AttributeIntelligenceGain }\r\n                                heroLevel={ this.state.heroLevel } \r\n                                primaryAttribute={ this.state.enemyHero?.AttributePrimary }\r\n                                bonusHealthRegen={ this.state.enemyHero?.StatusHealthRegen }\r\n                                bonusManaRegen={ this.state.enemyHero?.StatusManaRegen } />\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"\">\r\n                    {/* Talents */}\r\n                    <Col md={5}>\r\n                        <TalentTree\r\n                            talents={this.state.heroTalents} \r\n                            selectedTalents={this.state.selectedTalents}\r\n                            onTalentSelected={this.onTalentSelected} \r\n                            onTalentUnselected={this.onTalentUnselected} \r\n                            abilityStrings={this.state.abilityStrings} />\r\n                    </Col>\r\n                    {/* Abilities */}\r\n                    \r\n                    {/* Items */}\r\n                    <Col md={5}>\r\n                        <ItemsBar\r\n                            items={this.state.heroItems}  \r\n                            neutral={this.props.neutralItem}\r\n                            onItemChanged={this.onItemSelected}\r\n                            onNeutralChanged={this.onNeutralSelected} />\r\n                    </Col>\r\n                </Row>\r\n                <Abilities \r\n                        abilities={this.state.heroAbilities}\r\n                        items={this.state.heroItems}\r\n                        neutral={this.props.neutralItem} \r\n                        selectedTalents={this.props.selectedTalents} \r\n                        abilityStrings={this.props.abilityStrings}\r\n                        dotaStrings={this.state.dotaStrings} \r\n                        displayDamage={false} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EnemyHero;","import Calculator from \"./Calculator\";\r\n\r\nexport default Calculator;","import Home from \"./Home\";\r\n\r\nexport default Home;","import React, { Component } from 'react';\r\nimport {\r\n    Container,\r\n    Button\r\n} from \"react-bootstrap\";\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nclass Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            redirect: \"\",\r\n        };\r\n\r\n        this.onGoToCalc = this.onGoToCalc.bind(this);\r\n    }\r\n\r\n    onGoToCalc() {\r\n        this.setState({ redirect: \"/app\" });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Container>\r\n                    <div style={{ height: \"300px\" }}>\r\n                        <h1 \r\n                            className=\"text-center my-5 pt-3\">\r\n                                foresight\r\n                        </h1>\r\n                        <div className=\"text-center\">\r\n                            <h6 className=\"py-2\">work in progress</h6>\r\n                            <Button\r\n                                className=\"mx-auto\"\r\n                                onClick={this.onGoToCalc}>\r\n                                to app\r\n                            </Button>\r\n                        </div>\r\n                        \r\n                    </div>\r\n                </Container>\r\n                {\r\n                    this.state.redirect && <Redirect to={this.state.redirect} />\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import App from \"./App\";\r\n\r\nexport default App;","import React, { Component } from 'react';\nimport { \n    HashRouter,\n    Route,\n    Switch\n} from 'react-router-dom';\n\nimport Navigation from \"../Navigation\";\nimport FourOhFour from \"../FourOhFour\";\nimport Calculator from \"../Calculator\";\nimport Home from \"../Home\";\n\nclass App extends Component {\n    render() {\n        return (\n            <HashRouter>\n                <Navigation />\n\n                <Switch>\n                    <Route exact path=\"/\" component={Home} />\n\n                    <Route exact path=\"/app\" component={Calculator} />\n\n                    <Route component={FourOhFour} />\n                </Switch>\n            </HashRouter>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./store\";\n\nimport App from './components/App/';\n\n// Import Bootstrap component styles\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst app = (\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>\n);\n\nReactDOM.render(app, document.getElementById('root') );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}