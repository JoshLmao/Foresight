{"version":3,"sources":["serviceWorker.js","utils.js","enums/attributes.js","utility/dataHelperHero.js","reducers/initialState.js","reducers/hero.js","constants/actionTypes.js","enums/languages.js","reducers/language.js","store/index.js","reducers/enemy.js","components/LanguageSelect/LanguageSelect.jsx","components/LanguageSelect/index.js","components/Navigation/Navigation.jsx","components/Navigation/index.js","components/FourOhFour/index.js","components/FourOhFour/FourOhFour.jsx","utility/data-helpers/language.js","enums/abilities.js","utility/dataHelperAbilities.js","utility/dataHelperItems.js","utility/dataHelperTalents.js","utility/calculate.js","components/Abilities/DamageOutput.jsx","components/Abilities/Cooldown.jsx","components/Abilities/ManaCost.jsx","components/Abilities/AbilityDetails.jsx","components/Abilities/Abilities.jsx","components/Abilities/index.js","components/ItemsBar/ItemSelector.jsx","components/ItemsBar/ItemInfoTooltip.jsx","components/ItemsBar/Item.jsx","components/Neutral/NeutralItemSelector.jsx","components/Neutral/index.js","components/Neutral/Neutral.jsx","components/ItemsBar/ItemsBar.jsx","components/ItemsBar/index.js","components/Attributes/Attributes.jsx","components/Attributes/index.js","components/Statistics/Statistics.jsx","components/Statistics/index.js","components/ChangeHeroBtn/HeroSelector.jsx","components/ChangeHeroBtn/index.js","components/ChangeHeroBtn/ChangeHeroBtn.jsx","components/TalentTree/TalentRow.jsx","components/TalentTree/index.js","components/TalentTree/TalentTree.jsx","components/HealthManaBar/index.js","components/HealthManaBar/HealthManaBar.jsx","components/LevelSelector/LevelSelector.jsx","components/LevelSelector/index.js","components/Calculator/Calculator.jsx","components/EnemyHero/EnemyHero.jsx","components/Calculator/index.js","components/Home/index.js","components/Home/Home.jsx","components/App/index.js","components/App/App.jsx","index.js"],"names":["Boolean","window","location","hostname","match","itemNameToElement","itemInfo","scale","item","className","style","width","height","alt","transform","transformOrigin","backgroundColor","display","EAttributes","getSpecificAttributeStats","specificAttribute","heroInfo","basePrimary","primaryPerLevel","parseInt","AttributeBaseStrength","parseFloat","AttributeStrengthGain","AttributeBaseAgility","AttributeAgilityGain","AttributeBaseIntelligence","AttributeIntelligenceGain","console","error","base","perLevel","getHeroTalents","keys","Object","talents","i","length","includes","ability","push","mappedTalents","lvlRow","lvl","rightTalent","leftTalent","sort","a","b","getAllHeroAbilities","abilities","getPrimaryAttribute","hero","AttributePrimary","initialState","selectedHero","DOTAHeroes","npc_dota_hero_zuus","selectedHeroName","heroAbilities","heroTalents","selectedTalents","heroLevel","items","slot","backpack","neutralItem","lang","stringsAbilities","EngAbilStrings","stringsDota","EngDotaStrings","selectedEnemyHero","npc_dota_hero_target_dummy","selectedEnemyHeroName","modelString","dashSplit","split","parseNameFromModel","Model","enemyHeroTalents","enemyHeroAbilities","selectedEnemyTalents","enemyHeroItems","getNewItemArray","itemArray","newItem","newArray","filter","val","getNewTalentArray","talentArray","newTalent","map","value","removeTalent","unselectedTalent","talent","reducer","state","action","type","log","ELanguages","SCHINESE","ENGLISH","getAbilityStrings","langCode","SChineseAbilStrings","getGeneralStrings","SChineseDotaStrings","allReducers","combineReducers","language","enemy","store","createStore","LanguageSelect","props","onLanguageChanged","bind","event","newLanguage","target","this","dispatch","Form","Control","as","onChange","defaultValue","values","key","Component","connect","pkg","require","Navigation","Navbar","Container","Brand","to","Link","Nav","fontSize","eventKey","disabled","version","dotaVersion","Toggle","aria-controls","Collapse","id","href","Button","variant","icon","faGithub","FourOhFour","getLocalizedString","localeStrings","string","Tokens","replaceStringValue","replace","EDamageType","EAbilityBehaviour","ESpellImmunityType","getAbilityInfoFromName","abilityName","DOTAAbilities","tryGetAbilitySpecialAbilityValue","specialValueKey","abilityLevel","abilityInfo","specialValue","getAbilitySpecialAbilityValue","specialAbilityKey","AbilitySpecial","matchingKey","find","element","specialAbilityInfo","dataValue","var_type","parseAbilityValueByLevel","level","abilValue","splitValues","isCooldownTalent","isTalent","isDamageTalent","isCastRangeTalent","lowerCasePhrase","abilityString","DOTAEngAbilityStrings","toLowerCase","tryParseAbilitySpecialValue","abilSpecialinfo","getItemInfoFromName","itemName","DOTAItems","getItemSpecialAbilityValue","specialAbilityValueKey","tryGetItemSpecialValue","tryGetNeutralSpecialValue","neutral","foundNeutralInfo","primaryAttributeToItemBonusKey","primaryAttr","itemsContainsScepter","allItems","tryGetItemInfoValue","itemInfoKey","infoValue","convertItemDescToHtml","itemDescString","dataString","replaceRegex","phrase","infoKey","join","specialAbilityValue","replaceStringWithDataValues","engSplitString","localizedSplit","totalHtmlSections","section","position","right","AbilityManaCost","AbilityCooldown","faClock","dangerouslySetInnerHTML","__html","tryGetTalentSpecialAbilityValue","talentInfo","calculateHealth","baseStrength","strengthGain","baseHealth","npc_dota_hero_base","StatusHealth","totalHealth","bonusHealth","bonusStr","bonusAllStats","toFixed","calculateMana","baseInt","intGain","baseMana","StatusMana","totalMana","bonusMana","bonusInt","calculateHealthRegen","totalHpRegen","StatusHealthRegen","regenAmt","bonusHealthRegen","bonusRegen","calculateManaRegen","totalManaRegen","StatusManaRegen","bonusManaRegen","bonusIntellect","manaRegen","calculateTotalSpellAmp","totalSpellAmp","ampTalent","name","spellAmpInfo","foundNeutral","spellAmpAmount","calculateStatusResist","totalStatusResist","statusResistAmount","calculateMagicResist","resistanceBonuses","MagicalResistance","baseResist","magicResistAmount","edited","total","calculateEvasion","totalEvasion","bonusEvasion","evasionAmount","calculateRightClickDamage","heroMainAttribute","atkMin","AttackDamageMin","atkMax","AttackDamageMax","primaryAttributeStats","totalPrimaryAttribute","totalAdditional","allAttrKeys","bonusPrimaryAttr","bonusPrimaryStat","bonusDmg","allStats","min","max","Math","floor","additional","calculateAttackTime","totalAttackSpeed","BaseAttackSpeed","agiStats","totalAgi","bonusAttackSpeed","bonusAgility","attacksPerSec","atkSpeed","attackTime","attacksPerSecond","attackSpeed","calculateSpellDamage","abilityDamageInfo","abilityDmg","damage","isPercent","AbilityDamage","dmgValue","specialAbilityElement","lowerKey","getAbilityOutputDamage","totalSpellAmpPercent","talentBonus","spellAmp","bonusSpellAmp","chargeCount","ampPerCharge","neutralInfo","special","bonus_spell_amp","spell_amp","ampTalentValue","linkedAbility","spellDamage","totalAbilDmg","abilityDamage","calculateAbilityCooldown","cooldown","charges","fixedAmtReductionSeconds","AbilityCharges","AbilityChargeRestoreTime","includePhrase","getIncludesAbilitySpecialAbilityValue","allReductions","bonusCooldown","amount","source","reduction","totalCooldown","sourceOfReductions","decimal","calculateMoveSpeed","baseSpeed","MovementSpeed","flatBonus","moveSpeed","bonusMovement","moveSpeedPercentBonus","bonusMoveSpeed","bonusSpeed","calculateAttackRange","isHeroRanged","AttackCapabilities","totalAttackRange","AttackRange","baseRange","rangeBonus","bonusAttackRange","calculateAttribute","attribute","attributeStats","strengthPerLevel","totalAttribute","additionalAttribute","bonusAgi","calculateAbilityCastRange","baseCastRange","AbilityCastRange","foundRange","RequiresScepter","getAbilitySpecialCastRangeValue","totalBonusRange","getAbilityNameFromStrings","strings","languageStrings","stringKey","matchingKeys","tryGetLocalizedString","DamageOutput","levelInfo","abilityStrings","dotaStrings","prevProps","setState","abilityKey","abilInfo","abilLvl","parseDamage","Cooldown","abilityCooldown","updateCooldown","currentCooldownInfo","title","faCircle","ManaCost","updateMana","manaCost","totalManaCostReducePercent","manaCostReduceAmount","costReductionAmount","reduceAmount","calculateManaCost","TypeValueUI","AbilityDetails","abilityBehaviours","castRange","castRangeAmt","valuesInformation","abilitySpecials","specialInfo","abilitySpecialKeys","translationKey","getAbilitySpecialExtraValues","behaviours","AbilityBehavior","targeting","splitBehaviours","AbilityUnitDamageType","dmgTypeVal","splitDmgTypes","SpellImmunityType","pierceValue","getAbilityBehaviours","index","toUpperCase","getLevelInfo","abil","Abilities","abils","filterAbilities","abilLevels","heroName","abilityLevels","displayDamage","onLevelChanged","e","tagName","parentElement","levelIndex","dataset","lvlindex","targetLevel","btnindex","Row","abilVal","IsGrantedByScepter","Col","ID","maxWidth","maxHeight","src","md","abilityIndex","maxLvl","AbilityType","MaxLevel","html","onClick","data-lvlindex","data-btnindex","getAbilityLevel","getItemsByQuality","itemsArray","matchArray","quality","ItemQuality","filterItemName","shift","ItemFromInfo","keyName","data-item","TabHeading","text","ItemSelector","selectableItems","ItemIsNeutralDrop","IsObsolete","basicItems","upgradesItems","queryItems","onSelectedItem","onSearchChanged","onSearchItemSelected","onShopItemSelected","onRemoveItemSelected","query","filteredItems","indexOf","placeholder","faMinus","ListGroup","itemNameDisplay","Item","Tabs","defaultActiveKey","transition","Tab","ItemInfoTooltip","getItemIcon","itemStats","statistics","getItemStatistics","loreString","descString","descFiltered","ItemCost","localizeString","splice","replaceItemStatLocalizeString","isBackpack","onItemChanged","open","trigger","isOpen","zIndex","faInfo","hoverOpen","on","contentStyle","overflowY","padding","border","NeutralItemSelector","allNeutrals","selectableNeutrals","itemKey","getAllNeutrals","queryNeutrals","iconScale","onNewNeutralSelected","onNeutralSelected","filteredNeutrals","color","data-neutral","Neutral","ItemsBar","onNeutralChanged","Attribute","isPrimaryAttribute","perLevelString","per","Attributes","strengthStats","agilityStats","intStats","StatArray","stats","formatAttackMinMax","standardAtkDmg","dmgString","formatAttackTime","attackInfo","Statistics","updateStatistics","totalArmor","armor","ArmorPhysical","bonusArmor","calculateMainArmor","physResist","abs","attackRange","physicalResist","magicResist","statusResist","evasion","neutrak","healthRegen","HeroSelector","heroes","filteredHeroes","onSelectedHero","searchTerm","filtered","faSearch","data-heroname","displayName","data-hero","ChangeHeroBtn","selectableHeroes","workshop_guide_name","alias","NameAliases","onSelectHero","onToggleHeroSelect","faPencilAlt","isTalentSelected","TalentRow","onTalentSelected","onTalentUnselected","onSelectTalent","getTalentDisplayName","selectedTalent","getTalentInfoFromName","data-talent","TalentTree","findSelectedTalent","matchTalent","HealthManaBar","maxHealth","maxMana","updateBar","ModifyBtn","LevelSelector","onHeroLevelChanged","onIncrementHeroLevel","onDecrementHeroLevel","onLvlInputChanged","newLevel","Calculator","onHeroSelected","onItemSelected","fluid","Home","redirect","onGoToCalc","App","exact","path","component","app","StrictMode","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.9cdcef42.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\n\r\n/// Returns a HTML element of a DotA item from it's info \r\nexport function itemNameToElement (itemInfo, scale) {\r\n    // Width and height of each item in item_stylesheet\r\n    var width, height;\r\n    width = \"88px\";\r\n    height = \"64px\";\r\n    if (itemInfo && itemInfo.item) {\r\n        // Return item icon\r\n        return (\r\n            <div \r\n                className=\"m-1\"\r\n                style={{ \r\n                    width: `calc(${width} * ${scale})`, \r\n                    height: `calc(${height} * ${scale})`}}>\r\n                <span \r\n                    className={ 'sprite sprite-' + itemInfo.item + '_png '} \r\n                    alt={itemInfo.item} \r\n                    style={{ \r\n                        transform: `scale(${scale}, ${scale})`, \r\n                        transformOrigin: \"top left\" \r\n                    }} />\r\n            </div>\r\n        );\r\n    } else {\r\n        // Return empty inventory slot since item is null/empty\r\n        return (\r\n            <div \r\n                style={{ \r\n                    width: `calc(${width} * ${scale})`, \r\n                    height: `calc(${height} * ${scale})` }}>\r\n                <span \r\n                    style={{ \r\n                        backgroundColor: \"#212121\", \r\n                        width: width, \r\n                        height: height, \r\n                        transform: `scale(${scale}, ${scale})`, \r\n                        display: \"block\", \r\n                        transformOrigin: \"top left\" \r\n                    }} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n/// Parses a display name from a hero info Model string\r\nexport function parseNameFromModel (modelString) {\r\n    var dashSplit = modelString.split('.')[0].split('/');\r\n    return dashSplit[dashSplit.length - 1];\r\n};","// Enum of all attributes contained within npc_heroes\r\nexport const EAttributes = {\r\n    ATTR_STRENGTH: \"DOTA_ATTRIBUTE_STRENGTH\",\r\n    ATTR_AGILITY: \"DOTA_ATTRIBUTE_AGILITY\",\r\n    ATTR_INTELLIGENCE: \"DOTA_ATTRIBUTE_INTELLECT\"\r\n};","// * Helper and utility functions to provide for retrieving data from \"npc_heroes.json\"\r\n// * \r\n\r\nimport { EAttributes } from \"../enums/attributes\";\r\n\r\nimport { DOTAHeroes } from \"../data/dota2/json/npc_heroes.json\";\r\n\r\n/// Get the base and per level stats of a heroes primary attribute\r\nexport function getPrimaryAttributeStats(heroInfo) {\r\n    if (heroInfo && heroInfo.AttributePrimary) {\r\n        return getSpecificAttributeStats(heroInfo.AttributePrimary, heroInfo);\r\n    } else{\r\n        return null;\r\n    }\r\n}\r\n\r\n/// Get the base and per level stats of a specific attribute\r\nexport function getSpecificAttributeStats(specificAttribute, heroInfo) {\r\n    var basePrimary = 0;\r\n    var primaryPerLevel = 0;\r\n\r\n    switch(specificAttribute) {\r\n        case EAttributes.ATTR_STRENGTH:\r\n            {\r\n                basePrimary = parseInt(heroInfo.AttributeBaseStrength);\r\n                primaryPerLevel = parseFloat(heroInfo.AttributeStrengthGain);\r\n                break;\r\n            }\r\n        case EAttributes.ATTR_AGILITY:\r\n            {\r\n                basePrimary = parseInt(heroInfo.AttributeBaseAgility);\r\n                primaryPerLevel = parseFloat(heroInfo.AttributeAgilityGain);\r\n                break;\r\n            }\r\n        case EAttributes.ATTR_INTELLIGENCE:\r\n            {\r\n                basePrimary = parseInt(heroInfo.AttributeBaseIntelligence);\r\n                primaryPerLevel = parseFloat(heroInfo.AttributeIntelligenceGain);\r\n                break;\r\n            }\r\n        default:\r\n            console.error(`Unable to get attribute stats because of unknown specific attribute '${specificAttribute}'`);\r\n    }\r\n    \r\n    return {\r\n        base: basePrimary,\r\n        perLevel: primaryPerLevel,\r\n    };\r\n}\r\n\r\n/// Gets all hero talents from a hero info\r\nexport function getHeroTalents (heroInfo) {\r\n    // Get simple array of all talents from npc_heroes.json\r\n    // All abilities are stored in npc_heroes.json as \"Ability?\", where ? is a number. \r\n    // Not always in numberical order like 1, 2, 3\r\n\r\n    var keys = Object.keys(heroInfo);\r\n    var talents = [];\r\n    for(var i = 0; i < keys.length; i++) {\r\n        if (keys[i].includes(\"Ability\") && !keys[i].includes(\"AbilityDraft\")) {\r\n            var ability = heroInfo[keys[i]];\r\n            if (ability && typeof ability === \"string\") {\r\n                if (ability !== \"generic_hidden\" && ability.includes(\"special_bonus\")) {\r\n                    talents.push(ability);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // sort into nice list\r\n    var mappedTalents = [];\r\n    var lvlRow = 0;\r\n    for (i = 0 ; i < talents.length; i += 2) {\r\n        mappedTalents.push({\r\n            lvl: 10 + (5 * lvlRow),\r\n            rightTalent: talents[i],\r\n            leftTalent: talents[i + 1]\r\n        });\r\n\r\n        lvlRow++;\r\n    }\r\n\r\n    // Sort by lvl 25 talents first\r\n    mappedTalents.sort((a, b) => a.lvl < b.lvl ? 1 : -1);\r\n\r\n    return mappedTalents;\r\n}\r\n\r\n/// Gets all hero abilities from a hero info\r\nexport function getAllHeroAbilities (heroInfo) {\r\n    var keys = Object.keys(heroInfo);\r\n    var abilities = [];\r\n    for(var i = 0; i < keys.length; i++) {\r\n        if (keys[i].includes(\"Ability\") && !keys[i].includes(\"AbilityDraft\")) {\r\n            var ability = heroInfo[keys[i]];\r\n            if (ability && typeof ability === \"string\") {\r\n                if (ability !== \"generic_hidden\" && !ability.includes(\"special_bonus\")) {\r\n                    abilities.push(ability);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return abilities;\r\n}\r\n\r\n/// Returns the base hero information that all heroes are based on\r\nexport function getDotaBaseHero () {\r\n    return DOTAHeroes?.npc_dota_hero_base;\r\n}\r\n\r\n/// Gets the hero's primary attribute as the EAttribute enum\r\nexport function getPrimaryAttribute (hero) {\r\n    switch(hero.AttributePrimary) {\r\n        case EAttributes.ATTR_STRENGTH:\r\n            return EAttributes.ATTR_STRENGTH;\r\n        case EAttributes.ATTR_AGILITY:\r\n            return EAttributes.ATTR_AGILITY;\r\n        case EAttributes.ATTR_INTELLIGENCE:\r\n            return EAttributes.ATTR_INTELLIGENCE;\r\n        default:\r\n            return null;\r\n    }\r\n}","import { DOTAHeroes } from \"../data/dota2/json/npc_heroes.json\";\r\nimport { lang as EngAbilStrings } from \"../data/dota2/languages/abilities_english.json\";\r\nimport { lang as EngDotaStrings } from \"../data/dota2/languages/dota_english.json\";\r\n\r\nimport {\r\n    parseNameFromModel,\r\n} from \"../utils\";\r\nimport {\r\n    getAllHeroAbilities,\r\n    getHeroTalents,\r\n} from \"../utility/dataHelperHero\";\r\n\r\nconst initialState = {\r\n    /// Current selected hero info by the user\r\n    selectedHero: DOTAHeroes.npc_dota_hero_zuus,\r\n    /// Internal string name of the hero\r\n    selectedHeroName: \"npc_dota_hero_zuus\",\r\n    /// Array of abilities of the selectedHero\r\n    heroAbilities: getAllHeroAbilities(DOTAHeroes.npc_dota_hero_zuus),\r\n    /// Array of talents of the selectedHero\r\n    heroTalents: getHeroTalents(DOTAHeroes.npc_dota_hero_zuus),\r\n    /// Array of talents selected by the user\r\n    selectedTalents: [ ],\r\n    /// Current level of the hero set by the user\r\n    heroLevel: 1,\r\n\r\n    /// Current items that have been selected\r\n    items: [\r\n        { slot: 0, item: \"mjollnir\" },\r\n        { slot: 1, item: \"\" },\r\n        { slot: 2, item: \"\" },\r\n        { slot: 3, item: \"\" },\r\n        { slot: 4, item: \"\" },\r\n        { slot: 5, item: \"\" },\r\n    ],\r\n    /// Current backpack selected by user\r\n    backpack: [\r\n        { slot: 0, item: \"\" },\r\n        { slot: 1, item: \"\" },\r\n        { slot: 2, item: \"\" },\r\n    ],\r\n    /// Current neutral item selected by user\r\n    neutralItem: { item: \"orb_of_destruction\" },\r\n\r\n    // Current code of the selected UI language\r\n    lang: \"en\",\r\n    stringsAbilities: EngAbilStrings,\r\n    stringsDota: EngDotaStrings,\r\n\r\n    /// Selected enemy hero \r\n    selectedEnemyHero: DOTAHeroes.npc_dota_hero_target_dummy,\r\n    selectedEnemyHeroName: parseNameFromModel(DOTAHeroes.npc_dota_hero_target_dummy.Model[1]),\r\n    enemyHeroTalents: getHeroTalents(DOTAHeroes.npc_dota_hero_target_dummy),\r\n    enemyHeroAbilities: getAllHeroAbilities(DOTAHeroes.npc_dota_hero_target_dummy),\r\n    selectedEnemyTalents: [ ],\r\n    enemyHeroItems: [\r\n        { slot: 0, item: \"ultimate_scepter\" },\r\n        { slot: 1, item: \"\" },\r\n        { slot: 2, item: \"\" },\r\n        { slot: 3, item: \"\" },\r\n        { slot: 4, item: \"\" },\r\n        { slot: 5, item: \"\" },\r\n    ],\r\n};\r\n\r\nexport default initialState;","import initialState from \"./initialState\";\r\n\r\nimport {\r\n    SELECTED_HERO,\r\n    SELECTED_ITEM,\r\n    SELECTED_BACKPACK_ITEM,\r\n    SELECTED_NEUTRAL,\r\n    SELECTED_TALENT,\r\n    UNSELECTED_TALENT,\r\n    NEW_HERO_LEVEL,\r\n} from \"../constants/actionTypes\";\r\n\r\nimport {\r\n    parseNameFromModel,\r\n} from \"../utils\";\r\n\r\nimport {\r\n    getAllHeroAbilities,\r\n    getHeroTalents,\r\n} from \"../utility/dataHelperHero\";\r\n\r\n/* DotA 2 Import Data */\r\nimport { DOTAHeroes } from \"../data/dota2/json/npc_heroes.json\";\r\n\r\nfunction getNewItemArray(itemArray, newItem) {\r\n    /// Remove old slot insert new and sort by Slot\r\n    var newArray = itemArray.filter((val) => {\r\n        if (val.slot !== newItem.slot) {\r\n            return val;\r\n        }\r\n    })\r\n    newArray.push({ slot: newItem.slot, item: newItem.item });\r\n    newArray.sort((a, b) => (a.slot > b.slot) ? 1 : -1);\r\n    return newArray;\r\n}\r\n\r\nfunction getNewTalentArray(talentArray, newTalent) {\r\n    var newArray = talentArray.map((value => { return value }));\r\n    newArray.push(newTalent);\r\n    return newArray;\r\n}\r\n\r\nfunction removeTalent (talentArray, unselectedTalent) {\r\n    /// Filter to get all but the unselectedTalent\r\n    var array = talentArray.filter((talent) => {\r\n        if (talent && talent !== unselectedTalent) {\r\n            return talent;\r\n        }\r\n    });\r\n    return array;\r\n}\r\n\r\nfunction reducer(state = initialState, action) {\r\n    switch(action.type)\r\n    {\r\n        case SELECTED_HERO:\r\n            console.log(action);\r\n            let heroInfo = DOTAHeroes[action.value];\r\n            return {\r\n                ...state,\r\n                selectedHero: heroInfo,\r\n                selectedHeroName: action.value,\r\n                heroAbilities: getAllHeroAbilities(heroInfo),\r\n                heroTalents: getHeroTalents(heroInfo),\r\n                \r\n                // reset selected talents when new hero selected\r\n                selectedTalents: [ ],\r\n            };\r\n        case SELECTED_ITEM:\r\n            return {\r\n                ...state,\r\n                items: getNewItemArray(state.items, action.value),\r\n            };\r\n        case SELECTED_BACKPACK_ITEM:\r\n            return {\r\n                ...state,\r\n                backpack: getNewItemArray(state.backpack, action.value),\r\n            }\r\n        case SELECTED_NEUTRAL:\r\n            return {\r\n                ...state,\r\n                neutralItem: action.value,\r\n            };\r\n        case SELECTED_TALENT:\r\n            return {\r\n                ...state,\r\n               selectedTalents: getNewTalentArray(state.selectedTalents, action.value),\r\n            }\r\n            case UNSELECTED_TALENT:\r\n                return {\r\n                    ...state,\r\n                    selectedTalents: removeTalent(state.selectedTalents, action.value),\r\n                }\r\n        case NEW_HERO_LEVEL:\r\n            return {\r\n                ...state,\r\n                heroLevel: action.value,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","export const SELECTED_HERO = \"SELECT_HERO\";\r\nexport const SELECTED_NEUTRAL = \"SELECTED_NEUTRAL\";\r\nexport const SELECTED_ITEM = \"SELECTED_ITEM\";\r\nexport const SELECTED_BACKPACK_ITEM = \"SELECTED_BACKPACK_ITEM\";\r\nexport const SELECTED_TALENT = \"SELECTED_TALENT\";\r\nexport const UNSELECTED_TALENT = \"UNSELECTED_TALENT\";\r\nexport const NEW_HERO_LEVEL = \"NEW_HERO_LEVEL\";\r\n\r\nexport const LANGUAGE_CHANGED = \"LANGUAGE_CHANGED\";\r\n\r\nexport const ENEMY_SELECTED = \"ENEMY_SELECTED\";\r\nexport const ENEMY_SELECTED_TALENT = \"ENEMY_SELECTED_TALENT\";","/// Enum of all supported languages\r\nexport const ELanguages = {\r\n    SCHINESE: \"szh\",\r\n    ENGLISH: \"en\",\r\n    //RUSSIAN: \"ru\",\r\n};","import {\r\n    LANGUAGE_CHANGED\r\n} from \"../constants/actionTypes\";\r\nimport { ELanguages } from \"../enums/languages\";\r\nimport initialState from \"./initialState\";\r\n\r\nimport { lang as EngAbilStrings } from \"../data/dota2/languages/abilities_english.json\";\r\nimport { lang as EngDotaStrings } from \"../data/dota2/languages/dota_english.json\";\r\n\r\nimport { lang as SChineseAbilStrings } from \"../data/dota2/languages/abilities_schinese.json\";\r\nimport { lang as SChineseDotaStrings } from \"../data/dota2/languages/dota_schinese.json\";\r\n\r\nfunction getAbilityStrings(langCode) {\r\n    switch(langCode) {\r\n        case ELanguages.ENGLISH:\r\n            return EngAbilStrings;\r\n        case ELanguages.SCHINESE:\r\n            return SChineseAbilStrings;\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\nfunction getGeneralStrings(langCode) {\r\n    switch(langCode) {\r\n        case ELanguages.ENGLISH:\r\n            return EngDotaStrings;\r\n        case ELanguages.SCHINESE:\r\n            return SChineseDotaStrings;\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\nexport default (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case LANGUAGE_CHANGED:\r\n            console.log(`${LANGUAGE_CHANGED}: ${action.value}`);\r\n            return {\r\n                ...state,\r\n                lang: action.value,\r\n\r\n                stringsAbilities: getAbilityStrings(action.value),\r\n                stringsDota: getGeneralStrings(action.value),\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import { createStore, combineReducers } from \"redux\";\r\nimport hero from \"../reducers/hero\";\r\nimport language from \"../reducers/language\";\r\nimport enemy from \"../reducers/enemy\";\r\n\r\nconst allReducers = combineReducers({\r\n    language,\r\n    hero,\r\n    enemy,\r\n});\r\n\r\nconst store = createStore(allReducers);\r\n\r\nexport default store;","import initialState from \"./initialState\";\r\n\r\nimport {\r\n    ENEMY_SELECTED,\r\n    ENEMY_SELECTED_TALENT\r\n} from \"../constants/actionTypes\";\r\n\r\nexport default (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case ENEMY_SELECTED:\r\n            return {\r\n                ...state,\r\n\r\n                enemy: action.value,\r\n            };\r\n        case ENEMY_SELECTED_TALENT:\r\n            return {\r\n                ...state,\r\n\r\n                selectedEnemyTalents: [ ],\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Form } from 'react-bootstrap';\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { LANGUAGE_CHANGED } from \"../../constants/actionTypes\";\r\nimport { ELanguages } from \"../../enums/languages\";\r\n\r\nfunction getSupportedLanguages() {\r\n    var langs = Object.values(ELanguages);\r\n    return langs.map((value) => {\r\n        return (\r\n            <option value={value} key={value}>{value}</option>\r\n        )\r\n    });\r\n}\r\n\r\nclass LanguageSelect extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.onLanguageChanged = this.onLanguageChanged.bind(this);\r\n    }\r\n\r\n    onLanguageChanged(event) {\r\n        let newLanguage = event.target.value;\r\n        this.props.dispatch({ type: LANGUAGE_CHANGED, value: newLanguage });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Form.Control as=\"select\" onChange={this.onLanguageChanged} defaultValue={this.props.lang}>\r\n                    { getSupportedLanguages() }\r\n                </Form.Control>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    lang: state.language.lang,\r\n});\r\n\r\nexport default connect(mapStateToProps)(LanguageSelect);","import LanguageSelect from \"./LanguageSelect\";\r\n\r\nexport default LanguageSelect;","import React, { Component } from 'react';\r\nimport { \r\n    Nav,\r\n    Navbar,\r\n    Container,\r\n    Button,\r\n}from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\r\n\r\nimport LanguageSelect from '../LanguageSelect';\r\n\r\nlet pkg = require('../../../package.json');\r\n\r\nclass Navigation extends Component {\r\n    render() {\r\n        return (\r\n            <Navbar>\r\n                <Container>\r\n                    <Navbar.Brand to=\"/\" as={Link}>foresight</Navbar.Brand>\r\n                    <Nav.Link \r\n                        className=\"px-1 align-bottom mr-2\"\r\n                        style={{ fontSize: \"0.85rem\" }}\r\n                        eventKey=\"disabled\" \r\n                        disabled>\r\n                            {\r\n                                pkg ? \"v\" + pkg.version : \"v0.0.0\"\r\n                            }\r\n                    </Nav.Link>\r\n                    <Nav.Link\r\n                        className=\"px-1 align-bottom mr-2\"\r\n                        style={{ fontSize: \"0.85rem\" }}\r\n                        eventKey=\"disabled\"\r\n                        disabled>\r\n                        {\r\n                            pkg ? pkg.dotaVersion : \"Unknown\"\r\n                        }\r\n                    </Nav.Link>\r\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                        <Nav className=\"mr-auto\">\r\n                            <Nav.Link to=\"/\" as={Link}>home</Nav.Link>\r\n                            <Nav.Link to=\"/app\" as={Link}>calculator</Nav.Link>\r\n                        </Nav>\r\n                        <div className=\"mr-2\">\r\n                            <LanguageSelect/>\r\n                        </div>\r\n                        <a href=\"https://github.com/JoshLmao/foresight\">\r\n                            <Button variant=\"outline-secondary\">\r\n                                <FontAwesomeIcon icon={faGithub} />\r\n                            </Button>\r\n                        </a>\r\n                    </Navbar.Collapse>\r\n                </Container>\r\n            </Navbar>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Navigation;","import Navigation from \"./Navigation\";\r\n\r\nexport default Navigation;","import FourOhFour from \"./FourOhFour\";\r\n\r\nexport default FourOhFour;","import React, { Component } from 'react';\r\n\r\nclass FourOhFour extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                404 page\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FourOhFour;","import { lang as DOTAEngAbilityStrings } from \"../../data/dota2/languages/abilities_english.json\";\r\n\r\n/// Searches the passed strings file for the related string\r\n/// Very resource intensive\r\nexport function tryGetLocalizedString(languageStrings, stringKey) {\r\n    if (!languageStrings || !stringKey) {\r\n        return null;\r\n    }\r\n\r\n    let languageKeys = Object.keys(languageStrings.Tokens);\r\n    let matchingKeys = languageKeys.filter((key) => {\r\n        if (key.toLowerCase() === stringKey.toLowerCase()) {\r\n            return key;\r\n        } else {\r\n            return null;\r\n        }\r\n    });\r\n\r\n    if (matchingKeys && matchingKeys.length > 0) {\r\n        let displayName = languageStrings.Tokens[matchingKeys[0]];\r\n        return displayName;\r\n    } else {\r\n        return \"?\";\r\n    }\r\n}\r\n\r\nexport function tryGetTalentLocalizedString(languageStrings, stringKey) {\r\n    if (!languageStrings || !stringKey) {\r\n        return null;\r\n    }\r\n\r\n    let languageKeys = Object.keys(languageStrings.Tokens);\r\n    let matchingKeys = languageKeys.filter((key) => {\r\n        if (key.includes(stringKey)) {\r\n            return key;\r\n        } else {\r\n            return null;\r\n        }\r\n    });\r\n\r\n    if (matchingKeys && matchingKeys.length > 0) {\r\n        let displayName = languageStrings.Tokens[matchingKeys[0]];\r\n        return displayName;\r\n    } else {\r\n        return \"?\";\r\n    }\r\n}\r\n\r\n/// Quick method for retrieving localized string\r\n/// Main fast method to retrieve an exact key from strings\r\nexport function getLocalizedString(localeStrings, key) {\r\n    let string = localeStrings.Tokens[key];\r\n    return string ?? null;\r\n}\r\n\r\n/// Check if the localeStrings contains the key\r\nexport function containsLocalizedString (localeStrings, key) {\r\n    let containsVal = localeStrings.Tokens[key];\r\n    return containsVal != null;\r\n}\r\n\r\n/// Gets a string from the dota strings that contain the prefix \"DOTA_Toolip_\"\r\n/// Useful for getting general tooltip UI strings\r\nexport function getTooltipString(dotaStrings, tooltipKey) {\r\n    if (!dotaStrings || !tooltipKey) {\r\n        return null;\r\n    }\r\n\r\n    if (!tooltipKey.includes(\"DOTA_ToolTip_\")) {\r\n        tooltipKey = \"DOTA_ToolTip_\" + tooltipKey;\r\n    }\r\n    var match = dotaStrings.Tokens[tooltipKey];\r\n    return match;\r\n}\r\n\r\n/// Gets a string from the abilities strings that contain the prefix \"DOTA_Tooltip_ability\"\r\n/// Useful for retrieving localized strings of ability names\r\nexport function getTooltipAbilityString(abilityStrings, abilityKey) {\r\n    if (!abilityStrings || !abilityKey) {\r\n        return null;\r\n    }\r\n    if (!abilityKey.includes(\"DOTA_Tooltip_ability\")) {\r\n        abilityKey = \"DOTA_Tooltip_ability_\" + abilityKey;\r\n    }\r\n    var match = abilityStrings.Tokens[abilityKey];\r\n    return match;\r\n}\r\n\r\n/// Places a value in a translation string that contains a \"{s:value}\" inside\r\nexport function replaceStringValue(string, value) {\r\n    if (!string || !value) {\r\n        return \"?\";\r\n    }\r\n\r\n    string = string.replace(/{.*}/, value);\r\n    return string;\r\n}\r\n\r\n/// Gets the english localized ability string\r\nexport function getEngAnilityLocalizedString (key) {\r\n    return getLocalizedString(DOTAEngAbilityStrings, key);\r\n}","export const EDamageType = {\r\n    MAGICAL: \"DAMAGE_TYPE_MAGICAL\",\r\n    PURE: \"DAMAGE_TYPE_PURE\",\r\n    PHYSICAL: \"DAMAGE_TYPE_PHYSICAL\",\r\n};\r\n\r\n/// All Ability Behaviour types\r\nexport const EAbilityBehaviour = {\r\n    UNIT_TARGET: \"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET\",\r\n    POINT: \"DOTA_ABILITY_BEHAVIOR_POINT\",\r\n    AOE: \"DOTA_ABILITY_BEHAVIOR_AOE\",\r\n    HIDDEN: \"DOTA_ABILITY_BEHAVIOR_HIDDEN\",\r\n    PASSIVE: \"DOTA_ABILITY_BEHAVIOR_PASSIVE\",\r\n    NO_TARGET: \"DOTA_ABILITY_BEHAVIOR_NO_TARGET\",\r\n    IMMEDIATE: \"DOTA_ABILITY_BEHAVIOR_IMMEDIATE\",\r\n    IGNORE_CHANNEL: \"DOTA_ABILITY_BEHAVIOR_IGNORE_CHANNEL\",\r\n    SHOW_IN_GUIDES: \"DOTA_ABILITY_BEHAVIOR_SHOW_IN_GUIDES\",\r\n    AURA: \"DOTA_ABILITY_BEHAVIOR_AURA\",\r\n}\r\n\r\n/// Enum of all spell immune types, if the ability pierces spell immunity\r\nexport const ESpellImmunityType = {\r\n    YES: \"SPELL_IMMUNITY_ENEMIES_YES\",\r\n    NO: \"SPELL_IMMUNITY_ENEMIES_NO\",\r\n}","// * Helper and utility functions to provide for retrieving data from \"npc_abilities.json\"\r\n// * \r\n\r\nimport { DOTAAbilities } from \"../data/dota2/json/npc_abilities.json\";\r\nimport { \r\n    EAbilityBehaviour, \r\n    EDamageType, \r\n    ESpellImmunityType \r\n} from \"../enums/abilities\";\r\n\r\nimport {\r\n    lang as DOTAEngAbilityStrings\r\n} from \"../data/dota2/languages/abilities_english.json\";\r\nimport { containsLocalizedString } from \"./data-helpers/language\";\r\n\r\nexport function getAbilityInfoFromName(abilityName) {\r\n    if (abilityName) {\r\n        return DOTAAbilities[abilityName];\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport function tryGetAbilitySpecialAbilityValue (ability, specialValueKey, abilityLevel = 1) {\r\n    let abilityInfo = getAbilityInfoFromName(ability);\r\n    if (abilityInfo) {\r\n        let specialValue = getAbilitySpecialAbilityValue(abilityInfo, specialValueKey, abilityLevel);\r\n        if (specialValue) {\r\n            return specialValue;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nexport function getAbilitySpecialAbilityValue(abilityInfo, specialAbilityKey, abilityLevel = 1) {\r\n    if (abilityInfo && abilityInfo.AbilitySpecial) {\r\n        for(let i = 0; i < abilityInfo.AbilitySpecial.length; i++) {\r\n            let keys = Object.keys(abilityInfo.AbilitySpecial[i]);\r\n            let matchingKey = keys.find(element => {\r\n                return element === specialAbilityKey;\r\n            });\r\n\r\n            if (matchingKey) {\r\n                let specialAbilityInfo = abilityInfo.AbilitySpecial[i];\r\n\r\n                // If value contains a space, it can be levelled up needs to be split up\r\n                let dataValue = specialAbilityInfo[matchingKey];\r\n                if (typeof dataValue === \"string\" && dataValue.includes(' ')) {\r\n                    let split = specialAbilityInfo[matchingKey].split(' ');\r\n                    dataValue = split[abilityLevel - 1];\r\n                }\r\n\r\n                /// If wanting it for it's value, correctly convert and return\r\n                if (matchingKey.includes(\"value\") && specialAbilityInfo.var_type) {\r\n                    if (specialAbilityInfo.var_type === \"FIELD_INTEGER\") {\r\n                        return parseInt(dataValue);\r\n                    } \r\n                    else if(specialAbilityInfo.var_type === \"FIELD_FLOAT\") {\r\n                        return parseFloat(dataValue);\r\n                    }\r\n                } \r\n                /// else return whatever the value is\r\n                else {\r\n                    return dataValue;\r\n                }\r\n                \r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/// Gets \r\nexport function getAbilitySpecialCastRangeValue (abilityInfo, includePhrase, abilityLevel = 1) {\r\n    if (abilityInfo && abilityInfo.AbilitySpecial) {\r\n        for(let i = 0; i < abilityInfo.AbilitySpecial.length; i++) {\r\n            let keys = Object.keys(abilityInfo.AbilitySpecial[i]);\r\n            let matchingKey = keys.find(element => {\r\n                return element.includes(includePhrase) && !element.includes(\"scepter\");\r\n            });\r\n\r\n            if (matchingKey) {\r\n                let specialAbilityInfo = abilityInfo.AbilitySpecial[i];\r\n\r\n                /// ignore if scepter \r\n                if (specialAbilityInfo.RequiresScepter) {\r\n                    return null;\r\n                }\r\n\r\n                // If value contains a space, it can be levelled up needs to be split up\r\n                let dataValue = specialAbilityInfo[matchingKey];\r\n                \r\n                /// Return dataValue in format\r\n                return tryParseAbilitySpecialValue(specialAbilityInfo, dataValue, abilityLevel)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/// Searches an AbilityInfo's AbilitySpecial array for a property that includes the the \"includePhrase\"\r\n/// in it's key. For example includePhrase = \"charges\" would return value of voice spirit's \"max_charges\"\r\nexport function getIncludesAbilitySpecialAbilityValue(abilityInfo, includePhrase, abilityLevel) {\r\n    if (abilityInfo && abilityInfo.AbilitySpecial) {\r\n        for(let i = 0; i < abilityInfo.AbilitySpecial.length; i++) {\r\n            let keys = Object.keys(abilityInfo.AbilitySpecial[i]);\r\n            let matchingKey = keys.find(element => {\r\n                return element.includes(includePhrase);\r\n            });\r\n\r\n            if (matchingKey) {\r\n                let specialAbilityInfo = abilityInfo.AbilitySpecial[i];\r\n                let dataValue = specialAbilityInfo[matchingKey];\r\n\r\n                /// Return dataValue in format\r\n                return tryParseAbilitySpecialValue(specialAbilityInfo, dataValue, abilityLevel);\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/// Gets the standard output damage of an ability from its level\r\nexport function getAbilityOutputDamage(abilityInfo, abilityLevel) {\r\n    let abilityDmg = {\r\n        min: null,\r\n        max: null,\r\n        damage: null,\r\n        isPercent: null,\r\n    };\r\n\r\n    if (abilityInfo && abilityLevel) {\r\n        if (abilityInfo.AbilityDamage) {\r\n            let dmgValue = abilityInfo.AbilityDamage.split(' ')[abilityLevel - 1];\r\n            abilityDmg = {\r\n                ...abilityDmg,\r\n                damage: parseFloat(dmgValue),\r\n            };\r\n        }\r\n        else if (abilityInfo.AbilitySpecial) \r\n        {\r\n            for (let i = 0; i < abilityInfo.AbilitySpecial.length; i++) {\r\n                let specialAbilityElement = abilityInfo.AbilitySpecial[i];\r\n                \r\n                let abilSpecKeys = Object.keys(specialAbilityElement);\r\n                for(let key of abilSpecKeys) {\r\n                    // AbilitySpecial contains damage under a property\r\n                    let lowerKey = key.toLowerCase();\r\n                    \r\n                    // Includes dmg & not scepter\r\n                    if (lowerKey.includes(\"damage\") && !lowerKey.includes(\"scepter\")) \r\n                    {\r\n                        let value = parseAbilityValueByLevel(specialAbilityElement[key], abilityLevel);\r\n                        let dmgValue = parseFloat(value);\r\n\r\n                        if (lowerKey.includes(\"min\")) {\r\n                            //min_damage\r\n                            abilityDmg.min =  dmgValue;\r\n                        }\r\n                        if (lowerKey.includes(\"max\")) {\r\n                            abilityDmg.max = dmgValue;\r\n                        } \r\n                        if (lowerKey.includes(\"pct\")) {\r\n                            abilityDmg.isPercent = true;\r\n                        }\r\n\r\n                        if (!abilityDmg.min && !abilityDmg.max) {\r\n                            abilityDmg.damage = dmgValue;\r\n                        }\r\n                    }\r\n\r\n                    // Stop iterate if have min&max or dmg\r\n                    if (abilityDmg.min && abilityDmg.max || abilityDmg.damage) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return abilityDmg;\r\n}\r\n\r\n/// Gets all behaviour options of an ability such as if it goes through BKB, damage type, etc\r\nexport function getAbilityBehaviours(abilityInfo) {\r\n    if (!abilityInfo) {\r\n        return null;\r\n    }\r\n\r\n    let behaviours = [];\r\n\r\n    if (abilityInfo.AbilityBehavior) {\r\n        let targeting = [];\r\n        let splitBehaviours = abilityInfo.AbilityBehavior.split(' | ');\r\n        for(let b of splitBehaviours) {\r\n            switch(b) {\r\n                case EAbilityBehaviour.UNIT_TARGET:\r\n                    targeting.push(\"DOTA_ToolTip_Ability_Target\");\r\n                    break;\r\n                case EAbilityBehaviour.POINT:\r\n                    targeting.push(\"DOTA_ToolTip_Ability_Point\");\r\n                    break;\r\n                case EAbilityBehaviour.PASSIVE:\r\n                    targeting.push(\"DOTA_ToolTip_Ability_Passive\");\r\n                    break;\r\n                case EAbilityBehaviour.NO_TARGET:\r\n                    targeting.push(\"DOTA_ToolTip_Ability_NoTarget\");\r\n                    break;\r\n            }\r\n        }\r\n    \r\n        behaviours.push({\r\n            key: \"DOTA_ToolTip_Ability\",\r\n            value: targeting,\r\n        });\r\n    }\r\n\r\n    if (abilityInfo.AbilityUnitDamageType) {\r\n        let dmgTypeVal = \"\";\r\n        let splitDmgTypes = abilityInfo.AbilityUnitDamageType.split(\" | \");\r\n        for(let type of splitDmgTypes) {\r\n            switch(type) {\r\n                case EDamageType.MAGICAL:\r\n                    dmgTypeVal = \"DOTA_Plus_Death_Screen_MagicalDamage\";\r\n                    break;\r\n                case EDamageType.PURE:\r\n                    dmgTypeVal = \"DOTA_Plus_Death_Screen_PureDamage\";\r\n                    break;\r\n                case EDamageType.PHYSICAL:\r\n                    dmgTypeVal = \"DOTA_Plus_Death_Screen_PhysicalDamage\";\r\n                    break;\r\n                default:\r\n                    dmgTypeVal = \"Not Implemented\";\r\n                    break;\r\n            }\r\n        }\r\n\r\n        behaviours.push({\r\n            key: \"DOTA_ToolTip_Damage\",\r\n            value: dmgTypeVal,\r\n        });\r\n    }\r\n\r\n    if (abilityInfo.SpellImmunityType) {\r\n        let pierceValue = \"\";\r\n        switch(abilityInfo.SpellImmunityType) {\r\n            case ESpellImmunityType.YES:\r\n                pierceValue = \"DOTA_ToolTip_PiercesSpellImmunity_Yes\";\r\n                break;\r\n            case ESpellImmunityType.NO:\r\n                pierceValue = \"DOTA_ToolTip_PiercesSpellImmunity_No\";\r\n                break;\r\n            default:\r\n                pierceValue = \"Unknown\";\r\n                break;\r\n        }\r\n\r\n        behaviours.push({\r\n            key: \"DOTA_ToolTip_PiercesSpellImmunity\",\r\n            value: pierceValue,\r\n        });\r\n    }\r\n\r\n    return behaviours;\r\n}\r\n\r\n/// Parses an AbilitySpecial\r\nexport function parseAbilitySpecialValueByLevel (abilitySpecials, key, level = 1) {\r\n    let valuesSplit = abilitySpecials[key].split(' ');\r\n    if (valuesSplit.length > 1) {\r\n        return valuesSplit[level - 1];\r\n    } else {\r\n        return abilitySpecials[key];\r\n    }\r\n}\r\n\r\n/// Parses a value in an abilityInfo that could be alone or have multiple values per level\r\nexport function parseAbilityValueByLevel (value, level = 1) {\r\n    if (level < 1) {\r\n        return null;\r\n    }\r\n    \r\n    let abilValue = 0;\r\n    if (typeof value === \"string\") {\r\n        let splitValues = value.split(\" \");\r\n        if (splitValues.length > 1) {\r\n            abilValue = splitValues[level - 1];\r\n        } else {\r\n            abilValue = value;\r\n        }\r\n\r\n        abilValue = parseFloat(abilValue);\r\n    } else {\r\n        abilValue = value;\r\n    }\r\n\r\n    return abilValue;\r\n}\r\n\r\nexport function isCooldownTalent (talent) {\r\n    return isTalent(talent, \"cooldown\");\r\n}\r\n\r\nexport function isDamageTalent (talent) {\r\n    return isTalent(talent, \"damage\");\r\n}\r\n\r\nexport function isCastRangeTalent (talent) {\r\n    return isTalent(talent, \"cast range\");\r\n}\r\n\r\nexport function isTalent (talent, lowerCasePhrase) {\r\n    let abilityString = DOTAEngAbilityStrings.Tokens[\"DOTA_Tooltip_ability_\" + talent];\r\n    return abilityString && abilityString.toLowerCase().includes(lowerCasePhrase);\r\n}\r\n\r\n/// Checks the AbilityBehavior string on an AbilityInfo to\r\n/// see if it contains all EBehaviours in array\r\nexport function isAbilityBehaviour (abilityBehaviour, ebehaviours) {\r\n    if (abilityBehaviour) {\r\n        let splitBehaviours = abilityBehaviour.split(' | ');\r\n        \r\n        let contains = splitBehaviours.some((b) => ebehaviours.includes(b));\r\n        return contains;\r\n    }\r\n    return false;\r\n}\r\n\r\n/// Gets all AbilitySpecial extra information values with it's translation key \r\nexport function getAbilitySpecialExtraValues (abilityName, abilityInfo, abilityLevel, selectedTalents) {\r\n    let abilitySpecials = [];\r\n\r\n    for (let specialInfo of abilityInfo.AbilitySpecial) {\r\n        let abilitySpecialKeys = Object.keys(specialInfo);\r\n        for (let key of abilitySpecialKeys) {\r\n\r\n            if (key.includes(\"LinkedSpecialBonus\") || key.includes(\"var_type\") || key.includes(\"damage\")) {\r\n                continue;\r\n            }\r\n\r\n            let translationKey = `DOTA_Tooltip_ability_${abilityName}_${key}`;\r\n            abilitySpecials.push({\r\n                key: translationKey,\r\n                value: tryParseAbilitySpecialValue(specialInfo, specialInfo[key], abilityLevel),\r\n            });\r\n        }\r\n    }\r\n\r\n    return abilitySpecials;\r\n}\r\n\r\nexport function tryParseAbilitySpecialValue (abilSpecialinfo, value, abilityLevel = 1) {\r\n    if (typeof value === \"string\" && value.includes(' ')) {\r\n        let split = value.split(' ');\r\n        value = split[abilityLevel - 1];\r\n    }\r\n\r\n    if (abilSpecialinfo) {\r\n        if (abilSpecialinfo.var_type === \"FIELD_INTEGER\") {\r\n            return parseInt(value);\r\n        } \r\n        else if(abilSpecialinfo.var_type === \"FIELD_FLOAT\") {\r\n            return parseFloat(value);\r\n        }\r\n    }\r\n    return value;\r\n}","\r\n// * Helper and utility functions to provide for retrieving data from \"npc_items.json\"\r\n// * \r\nimport { DOTAAbilities as DOTAItems } from \"../data/dota2/json/items.json\";\r\nimport { EAttributes } from \"../enums/attributes\";\r\nimport React from \"react\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faClock } from '@fortawesome/free-solid-svg-icons';\r\nimport { tryParseAbilitySpecialValue } from \"./dataHelperAbilities\";\r\nimport { \r\n    getLocalizedString, \r\n    getEngAnilityLocalizedString \r\n} from \"./data-helpers/language\";\r\n\r\nexport function getItemInfoFromName (itemName) {\r\n    if (itemName)\r\n        return DOTAItems[\"item_\" + itemName];\r\n    else\r\n        return null;\r\n}\r\n\r\n/// Gets the value of an item's AbilitySpecial array\r\nexport function getItemSpecialAbilityValue (itemInfo, specialAbilityValueKey) {\r\n    if (itemInfo && itemInfo.AbilitySpecial) {\r\n        for(let i = 0; i < itemInfo.AbilitySpecial.length; i++) {\r\n            let keys = Object.keys(itemInfo.AbilitySpecial[i]);\r\n            let matchingKey = keys.find(element => {\r\n                return element === specialAbilityValueKey;\r\n            });\r\n\r\n            if (matchingKey) {\r\n                let specialAbilityInfo = itemInfo.AbilitySpecial[i];\r\n                return tryParseAbilitySpecialValue(specialAbilityInfo, specialAbilityInfo[matchingKey], 1);\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/// Try Gets a item info and sepcial value from it's item's Ability Special array\r\nexport function tryGetItemSpecialValue (item, specialAbilityValueKey) {\r\n    var itemInfo = getItemInfoFromName(item.item);\r\n    if (itemInfo) {\r\n        var specialValue = getItemSpecialAbilityValue(itemInfo, specialAbilityValueKey);\r\n        if (specialValue) {\r\n            return specialValue;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/// Try Gets a neutral item info and special value from it's items' AbilitySpecial array\r\nexport function tryGetNeutralSpecialValue (neutral, specialValueKey) {\r\n    var foundNeutralInfo = getItemInfoFromName(neutral.item);\r\n    if (foundNeutralInfo) {\r\n        var specialValue = getItemSpecialAbilityValue(foundNeutralInfo, specialValueKey);\r\n        if (specialValue) {\r\n            return specialValue;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/// Returns all neutral items\r\nexport function getAllNeutrals() {\r\n     /// Filter out unused or unnecessary keys in items.json\r\n     var selectableNeutrals = Object.keys(DOTAItems).filter((value) => {\r\n        var key = value.toLowerCase();\r\n        var ability = DOTAItems[value];\r\n        if (key !== \"version\" && !ability.IsObsolete) {\r\n            if (ability.ItemIsNeutralDrop === \"1\") {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    });\r\n    selectableNeutrals.sort();\r\n\r\n    // Map to an object\r\n    selectableNeutrals = selectableNeutrals.map((key) => {\r\n        let itemKey = key;\r\n        if (itemKey.includes(\"recipe\")) {\r\n            // remove recipe and retrieve item version\r\n            itemKey = itemKey.replace(\"_recipe\", \"\");\r\n        }\r\n\r\n        var itemInfo = DOTAItems[itemKey];\r\n        if (itemInfo.ItemIsNeutralDrop === \"1\") {\r\n            // Remove 'item_' prefix, split by _, remove \"item\" and join again\r\n            var name = itemKey.split('_');\r\n            name.shift();\r\n            name = name.join('_');\r\n\r\n            return {\r\n                item: name,\r\n                itemInfo: itemInfo,\r\n            };\r\n        }\r\n    });\r\n\r\n    return selectableNeutrals;\r\n}\r\n\r\n/// Gets the correct key inside items.json for the hero's primary attribute\r\nexport function primaryAttributeToItemBonusKey(primaryAttr) {\r\n    switch(primaryAttr) {\r\n        case EAttributes.ATTR_STRENGTH:\r\n            return [ \"bonus_strength\" ];\r\n        case EAttributes.ATTR_AGILITY:\r\n            return [ \"bonus_agility\" ];\r\n        case EAttributes.ATTR_INTELLIGENCE:\r\n            return [ \"bonus_intellect\", \"bonus_intelligence\" ];\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\n/// Checks if the items array contains an aghanims scepter\r\nexport function itemsContainsScepter (allItems) {\r\n    for (let item of allItems) {\r\n        if (item.item && item.item.includes(\"ultimate_scepter\")) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n/// Replaces a localized string with it's data values found inside AbilitySpecial \r\n/// or on ItemInfo object\r\nexport function replaceStringWithDataValues (string, itemInfo) {\r\n    if (!string) {\r\n        return null;\r\n    }\r\n\r\n    let replaceRegex = /(%.*?%)/;\r\n    \r\n    while (string.match(replaceRegex)?.length > 0) {\r\n        let phrase = string.match(replaceRegex)[0];\r\n        if (phrase) {\r\n            let infoKey = phrase.split(\"%\").join(\"\");\r\n            let specialAbilityValue = \"?\";\r\n            // no characters inbetween, needs to be a normal percentage sign\r\n            if (infoKey === \"\") {\r\n                /// use ~ for now, replace later\r\n                specialAbilityValue = \"~\";\r\n            }\r\n            // if is an AbilitySpecial key as all contain a '_' \r\n            else if (infoKey.includes(\"_\")) {\r\n                specialAbilityValue = getItemSpecialAbilityValue(itemInfo, infoKey);\r\n            }\r\n            // is a key on the main ItemInfo object \r\n            else {\r\n                specialAbilityValue = tryGetItemInfoValue(itemInfo, infoKey);\r\n            }\r\n            \r\n            string = string.replace(phrase, specialAbilityValue);\r\n        }\r\n    }\r\n\r\n    /// replace ! with actual percentage sign\r\n    string = string.replace(/[~]/g, \"%\");\r\n    \r\n    return string;\r\n}\r\n\r\n/// Try Get's a ItemInfo value on the original object from a key\r\nexport function tryGetItemInfoValue (itemInfo, itemInfoKey) {\r\n    if (itemInfo) {\r\n        let keys = Object.keys(itemInfo);\r\n        let matchingKey = keys.find(element => {\r\n            return element.toLowerCase() === itemInfoKey.toLowerCase();\r\n        });\r\n\r\n        if (matchingKey) {\r\n            let infoValue = itemInfo[matchingKey];\r\n            if (infoValue.includes(\".\")) {\r\n                return parseFloat(infoValue);\r\n            } else {\r\n                return parseInt(infoValue);\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/// Converts a item description localized string into the correct displayable HTML\r\nexport function convertItemDescToHtml(itemDescString, itemName, itemInfo) {\r\n    let dataString = replaceStringWithDataValues(itemDescString, itemInfo);\r\n    if (!dataString) {\r\n        return null;\r\n    }\r\n\r\n    /// Get english string to be able to check for \"Active:\" phrase\r\n    let engDataString = getEngAnilityLocalizedString(`DOTA_Tooltip_ability_item_${itemName}_Description`);\r\n    let engSplitString = engDataString.split(\"\\\\n\");\r\n\r\n    /// Also split localized string to iterate over\r\n    let localizedSplit = dataString.split(\"\\\\n\");\r\n\r\n    let totalHtmlSections = [];\r\n    for(let i = 0; i < localizedSplit.length; i++) {\r\n        let section = localizedSplit[i];\r\n        let isActive = engSplitString[i].includes(\"Active:\");\r\n        if (isActive) {\r\n            totalHtmlSections.push(\r\n                <div className=\"item-active my-3\">\r\n                    <div\r\n                        className=\"d-flex justify-content-between align-items-center\" \r\n                        style={{ position: \"absolute\", right: \"1rem\" }}>\r\n                        {\r\n                            itemInfo && itemInfo.AbilityManaCost &&\r\n                            <div className=\"d-flex\">\r\n                                <div className=\"mx-1 my-1 mana-cost-box-icon\" />\r\n                                <div>\r\n                                    { parseInt(itemInfo.AbilityManaCost) }\r\n                                </div>\r\n                            </div>\r\n                        }\r\n                        <div className=\"px-1\" />\r\n                        {\r\n                            itemInfo && itemInfo.AbilityCooldown &&\r\n                            <div className=\"d-flex\">\r\n                                <FontAwesomeIcon \r\n                                    className=\"mx-1 my-1\" \r\n                                    icon={faClock} />\r\n                                <div>\r\n                                    { parseFloat(itemInfo.AbilityCooldown) }\r\n                                </div>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                    <div dangerouslySetInnerHTML={{ __html: section }}>\r\n                    </div>\r\n                </div>\r\n            )\r\n        } else {\r\n            totalHtmlSections.push(<div className=\"item-passive my-3\" dangerouslySetInnerHTML={{ __html: section }}></div>);\r\n        }\r\n    }\r\n\r\n    return totalHtmlSections;\r\n}\r\n\r\n/// Gets all bonuses the item provides, returning a key value list\r\nexport function getItemStatistics (itemInfo) {\r\n    if (!itemInfo) {\r\n        return null;\r\n    }\r\n\r\n    let statistics = [];\r\n\r\n    for (let i = 0; i < itemInfo.AbilitySpecial.length; i++) {\r\n        let keys = Object.keys(itemInfo.AbilitySpecial[i]);\r\n        for(let key of keys) {\r\n            if (key.includes(\"bonus\") || key.includes(\"spell\") || key.includes(\"multiplier\") ) {\r\n                let val = tryParseAbilitySpecialValue(itemInfo.AbilitySpecial[i], itemInfo.AbilitySpecial[i][key]);\r\n                statistics.push({\r\n                    key: key,\r\n                    value: val,\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    return statistics;\r\n}","import { DOTAAbilities } from \"../data/dota2/json/npc_abilities.json\";\r\nimport {\r\n    getAbilityInfoFromName,\r\n    getAbilitySpecialAbilityValue\r\n} from \"./dataHelperAbilities\";\r\n\r\n/// Gets info and formattable display name of a talent\r\n/// Returns both display name of talent and it's info in an object\r\nexport function getTalentInfoFromName(talent) {\r\n    if (talent) {\r\n        var talentInfo = DOTAAbilities[talent];\r\n        return talentInfo;    \r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport function tryGetTalentSpecialAbilityValue (talent, specialValueKey) {\r\n    let talentInfo = getAbilityInfoFromName(talent);\r\n    if(talentInfo) {\r\n        let specialValue = getAbilitySpecialAbilityValue(talentInfo, specialValueKey);\r\n        if (specialValue) {\r\n            return specialValue;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n","import { \r\n    getItemInfoFromName,\r\n    getItemSpecialAbilityValue,\r\n    tryGetItemSpecialValue,\r\n    tryGetNeutralSpecialValue,\r\n    primaryAttributeToItemBonusKey,\r\n    itemsContainsScepter\r\n} from \"./dataHelperItems\";\r\n\r\nimport {\r\n    getAbilityInfoFromName,\r\n    getAbilitySpecialAbilityValue,\r\n    getAbilityOutputDamage,\r\n    tryGetAbilitySpecialAbilityValue,\r\n    parseAbilityValueByLevel,\r\n    isCooldownTalent,\r\n    isDamageTalent,\r\n    isCastRangeTalent,\r\n    getAbilitySpecialCastRangeValue,\r\n    getIncludesAbilitySpecialAbilityValue,\r\n    isAbilityBehaviour\r\n} from \"./dataHelperAbilities\";\r\n\r\nimport {\r\n    getTalentInfoFromName,\r\n    tryGetTalentSpecialAbilityValue,\r\n} from \"./dataHelperTalents\";\r\n\r\nimport {\r\n    getDotaBaseHero,\r\n    getSpecificAttributeStats,\r\n    getPrimaryAttributeStats,\r\n    getPrimaryAttribute\r\n} from \"./dataHelperHero\";\r\n\r\nimport { EAttributes } from \"../enums/attributes\";\r\n\r\nimport { DOTAHeroes } from \"../data/dota2/json/npc_heroes.json\";\r\nimport { DOTAAbilities } from \"../data/dota2/json/npc_abilities.json\";\r\nimport { EAbilityBehaviour } from \"../enums/abilities\";\r\n\r\n/// Calculates the health of a hero\r\n/// https://dota2.gamepedia.com/Health\r\nexport function calculateHealth(hero, heroLevel, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }\r\n    \r\n    let HEALTH_PER_STRENGTH_POINT = 20;\r\n    let baseStrength = parseInt(hero.AttributeBaseStrength)\r\n    let strengthGain = parseFloat(hero.AttributeStrengthGain);\r\n\r\n    let baseHealth = 0;\r\n    if (DOTAHeroes && DOTAHeroes.npc_dota_hero_base && DOTAHeroes.npc_dota_hero_base.StatusHealth) {\r\n        baseHealth = parseInt(DOTAHeroes.npc_dota_hero_base.StatusHealth);\r\n    } else {\r\n        console.error(\"Can't add baseHealth to heroes health pool\");\r\n    }\r\n\r\n    let totalStr = baseStrength + (strengthGain * (heroLevel - 1));\r\n    let totalHealth = baseHealth + (totalStr * HEALTH_PER_STRENGTH_POINT);\r\n\r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            let bonusHealth = tryGetItemSpecialValue(item, \"bonus_health\");\r\n            if (bonusHealth) {\r\n                totalHealth += bonusHealth;\r\n            }\r\n\r\n            let bonusStr = tryGetItemSpecialValue(item, \"bonus_strength\");\r\n            if (bonusStr) {\r\n                totalHealth += bonusStr * HEALTH_PER_STRENGTH_POINT;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalHealth += bonusAllStats * HEALTH_PER_STRENGTH_POINT;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let bonusHealth = tryGetNeutralSpecialValue(neutral, \"bonus_health\");\r\n        if (bonusHealth) {\r\n            totalHealth += bonusHealth;\r\n        }\r\n\r\n        let bonusStr = tryGetNeutralSpecialValue(neutral, \"bonus_strength\");\r\n        if (bonusStr) {\r\n            totalHealth += bonusStr * HEALTH_PER_STRENGTH_POINT;\r\n        }\r\n\r\n        let bonusAllStats = tryGetNeutralSpecialValue(neutral, \"bonus_all_stats\");\r\n        if (bonusAllStats) {\r\n            totalHealth += bonusAllStats * HEALTH_PER_STRENGTH_POINT;\r\n        }\r\n    }\r\n\r\n    if (abilities && abilities.length > 0) {\r\n        \r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            if (talent.includes(\"bonus_hp\")) {\r\n                let bonusHealth = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusHealth) {\r\n                    totalHealth += bonusHealth;\r\n                }\r\n            } else if (talent.includes(\"bonus_strength\")) {\r\n                let bonusStr = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusStr) {\r\n                    totalHealth += bonusStr * HEALTH_PER_STRENGTH_POINT;\r\n                }\r\n            } else if (talent.includes(\"bonus_all_stats\")) {\r\n                let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAllStats) {\r\n                    totalHealth += bonusAllStats * HEALTH_PER_STRENGTH_POINT;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return totalHealth.toFixed(0);\r\n}\r\n\r\n/// Calculates the mana pool of a hero\r\n/// https://dota2.gamepedia.com/Mana\r\nexport function calculateMana(hero, heroLevel, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }    \r\n\r\n    let MANA_PER_INT_POINT = 12;\r\n    let baseInt = parseInt(hero.AttributeBaseIntelligence);\r\n    let intGain = parseFloat(hero.AttributeIntelligenceGain);\r\n\r\n    let baseMana = 0;\r\n    if (DOTAHeroes && DOTAHeroes.npc_dota_hero_base && DOTAHeroes.npc_dota_hero_base.StatusMana) {\r\n        baseMana = parseInt(DOTAHeroes.npc_dota_hero_base.StatusMana);\r\n    } else {\r\n        console.error(\"Can't add baseMana to heroes mana pool\");\r\n    }\r\n\r\n    let totalInt = baseInt + (intGain * (heroLevel - 1));\r\n    let totalMana = baseMana + (totalInt * MANA_PER_INT_POINT);\r\n\r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            let bonusMana = tryGetItemSpecialValue(item, \"bonus_mana\");\r\n            if (bonusMana) {\r\n                totalMana += bonusMana;\r\n            }\r\n\r\n            let bonusInt = tryGetItemSpecialValue(item, \"bonus_intellect\");\r\n            if (bonusInt) {\r\n                totalMana += bonusInt * MANA_PER_INT_POINT;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalMana += bonusAllStats * MANA_PER_INT_POINT;\r\n            }\r\n        }\r\n    }\r\n    \r\n    if (neutral) {\r\n        let bonusMana = tryGetNeutralSpecialValue(neutral, \"bonus_mana\");\r\n        if (bonusMana) {\r\n            totalMana += bonusMana;\r\n        }\r\n\r\n        let bonusInt = tryGetNeutralSpecialValue(neutral, \"bonus_intellect\");\r\n        if (bonusInt) {\r\n            totalMana += bonusInt * MANA_PER_INT_POINT;\r\n        }\r\n\r\n        let bonusAllStats = tryGetNeutralSpecialValue(neutral, \"bonus_all_stats\");\r\n        if (bonusAllStats) {\r\n            totalMana += bonusAllStats * MANA_PER_INT_POINT;\r\n        }\r\n    }\r\n\r\n    if (abilities && abilities.length > 0) {\r\n        for(let ability of abilities) {\r\n            let bonusMana = tryGetAbilitySpecialAbilityValue(ability, \"bonus_mana\");\r\n            if (bonusMana) {\r\n                totalMana += bonusMana;\r\n            }\r\n\r\n            let bonusInt = tryGetAbilitySpecialAbilityValue(ability, \"bonus_intellect\");\r\n            if (bonusInt) {\r\n                totalMana += bonusInt * MANA_PER_INT_POINT;\r\n            }\r\n\r\n            let bonusAllStats = tryGetAbilitySpecialAbilityValue(ability, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalMana += bonusAllStats * MANA_PER_INT_POINT;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            if (talent.includes(\"bonus_mp\")) {\r\n                let bonusMana = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusMana) {\r\n                    totalMana += bonusMana;\r\n                }\r\n            } else if (talent.includes(\"bonus_intelligence\")) {\r\n                let bonusInt = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusInt) {\r\n                    totalMana += bonusInt * MANA_PER_INT_POINT;\r\n                }\r\n            } else if (talent.includes(\"bonus_all_stats\")) {\r\n                let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAllStats) {\r\n                    totalMana += bonusAllStats * MANA_PER_INT_POINT;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return totalMana.toFixed(0);\r\n}\r\n\r\n/* Hero gains +0.1 regen per each point of strength\r\n* https://dota2.gamepedia.com/Health_regeneration */\r\nexport function calculateHealthRegen(hero, heroLevel, items, neutral, abilities, talents) {\r\n    if(!hero) {\r\n        return \"?\";\r\n    }\r\n\r\n    let HP_REGEN_PER_STRENGTH = 0.1;\r\n    let baseStr = parseInt(hero.AttributeBaseStrength);\r\n    let strPerLvl = parseFloat(hero.AttributeStrengthGain);\r\n\r\n    let totalHpRegen = (baseStr + (strPerLvl * (heroLevel - 1))) * HP_REGEN_PER_STRENGTH;\r\n    if (hero.StatusHealthRegen) {\r\n        totalHpRegen += parseFloat(hero.StatusHealthRegen);\r\n    }\r\n\r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            let regenAmt = tryGetItemSpecialValue(item, \"bonus_health_regen\");\r\n            if (regenAmt) {\r\n                totalHpRegen += regenAmt;\r\n            }\r\n\r\n            let bonusStr = tryGetItemSpecialValue(item, \"bonus_strength\");\r\n            if(bonusStr) {\r\n                totalHpRegen += bonusStr * HP_REGEN_PER_STRENGTH;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalHpRegen += bonusAllStats * HP_REGEN_PER_STRENGTH;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let bonusHealthRegen = tryGetNeutralSpecialValue(neutral, \"bonus_health_regen\");\r\n        if (bonusHealthRegen) {\r\n            totalHpRegen += bonusHealthRegen;\r\n        }\r\n\r\n        let bonusStr = tryGetNeutralSpecialValue(neutral, \"bonus_strength\");\r\n        if (bonusStr) {\r\n            totalHpRegen += bonusStr * HP_REGEN_PER_STRENGTH;\r\n        }\r\n        \r\n        let bonusAllStats = tryGetNeutralSpecialValue(neutral, \"bonus_all_stats\");\r\n        if (bonusAllStats) {\r\n            totalHpRegen += bonusAllStats * HP_REGEN_PER_STRENGTH;\r\n        }\r\n    } \r\n\r\n    // if (abilities && abilities.length > 0) {\r\n    //     for (let ability of abilities) {\r\n    //         let bonusRegen = tryGetAbilitySpecialAbilityValue(ability, \"bonus_health_regen\", 1);\r\n    //         if (bonusRegen) {\r\n    //             totalHpRegen += bonusRegen;\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for (let talent of talents) {\r\n            // Only get bonus_hp_regen talents\r\n            if (talent.includes(\"bonus_hp_regen\")) {\r\n                let bonusRegen = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusRegen) {\r\n                    totalHpRegen += bonusRegen;\r\n                }\r\n            } else if(talent.includes(\"bonus_strength\")) {\r\n                let bonusStr = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusStr) {\r\n                    totalHpRegen += bonusStr * HP_REGEN_PER_STRENGTH;\r\n                }\r\n            } else if (talent.includes(\"bonus_all_stats\")) {\r\n                let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAllStats) {\r\n                    totalHpRegen += bonusAllStats * HP_REGEN_PER_STRENGTH;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return totalHpRegen.toFixed(1);\r\n}\r\n\r\n/* Each point of intelligence increases the hero's mana regeneration by 0.05.\r\n * https://dota2.gamepedia.com/Mana_regeneration */\r\nexport function calculateManaRegen(hero, heroLevel, items, neutral, abilities, talents) {\r\n    if(!hero) {\r\n        return \"?\";\r\n    }\r\n    let MANA_REGEN_PER_INT = 0.05;\r\n    let baseInt = parseInt(hero.AttributeBaseIntelligence);\r\n    let intGain = parseFloat(hero.AttributeIntelligenceGain);\r\n\r\n    let totalManaRegen = (baseInt + (intGain * (heroLevel - 1))) * MANA_REGEN_PER_INT;\r\n    if (hero.StatusManaRegen) {\r\n        totalManaRegen += parseFloat(hero.StatusManaRegen);\r\n    }\r\n\r\n    if(items && items.length > 0) {\r\n        for(let item of items) {\r\n            let bonusManaRegen = tryGetItemSpecialValue(item, \"bonus_mana_regen\");\r\n            if (bonusManaRegen) {\r\n                totalManaRegen += bonusManaRegen;\r\n            }\r\n\r\n            let bonusInt = tryGetItemSpecialValue(item, \"bonus_intelligence\");\r\n            if(bonusInt) {\r\n                let regen = bonusInt * MANA_REGEN_PER_INT; \r\n                totalManaRegen += regen;\r\n            }\r\n\r\n            let bonusIntellect = tryGetItemSpecialValue(item, \"bonus_intellect\");\r\n            if (bonusIntellect) {\r\n                let regen = bonusIntellect * MANA_REGEN_PER_INT; \r\n                totalManaRegen += regen;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalManaRegen += bonusAllStats * MANA_REGEN_PER_INT;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let bonusInt = tryGetNeutralSpecialValue(neutral, \"bonus_intelligence\");\r\n        if (bonusInt) {\r\n            let manaRegen = bonusInt * MANA_REGEN_PER_INT;\r\n            totalManaRegen += manaRegen;\r\n        }\r\n\r\n        let bonusIntellect = tryGetNeutralSpecialValue(neutral, \"bonus_intellect\");\r\n        if (bonusIntellect) {\r\n            let regen = bonusIntellect * MANA_REGEN_PER_INT; \r\n            totalManaRegen += regen;\r\n        }\r\n\r\n        let bonusAllStats = tryGetNeutralSpecialValue(neutral, \"bonus_all_stats\");\r\n        if (bonusAllStats) {\r\n            totalManaRegen += bonusAllStats * MANA_REGEN_PER_INT;\r\n        }\r\n    }\r\n\r\n    if(abilities && abilities.length > 0) {\r\n        for (let ability of abilities) {\r\n            let manaRegen = tryGetAbilitySpecialAbilityValue(ability, \"mana_regen\", 1);\r\n            if (manaRegen) {\r\n                totalManaRegen += manaRegen;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            // Only includes bonus mana point regen talents\r\n            if(talent.includes(\"bonus_mp_regen\")) {\r\n                let value = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (value) {\r\n                    totalManaRegen += parseFloat(value);\r\n                }\r\n            } else if (talent.includes(\"bonus_intelligence\")) {\r\n                let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAllStats) {\r\n                    totalManaRegen += bonusAllStats * MANA_REGEN_PER_INT;\r\n                }\r\n            } else if (talent.includes(\"bonus_all_stats\")) {\r\n                let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAllStats) {\r\n                    totalManaRegen += bonusAllStats * MANA_REGEN_PER_INT;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return totalManaRegen.toFixed(1);\r\n}\r\n\r\n// Calculates the main armor of the hero\r\n// Each point of agility increases a hero's armor by 0.167 (1/6) https://dota2.gamepedia.com/Armor\r\nexport function calculateMainArmor(hero, level, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }\r\n\r\n    let ARMOR_PER_AGI = 0.167;\r\n    let baseArmor = parseInt(hero.ArmorPhysical);\r\n    let baseAgility = parseInt(hero.AttributeBaseAgility);\r\n    let agiPerLevel = parseFloat(hero.AttributeAgilityGain);\r\n\r\n    // Determine bonus agility from perLevel. Then work out main armor\r\n    let agiPer = (agiPerLevel * (level - 1));\r\n    let totalArmor = baseArmor + ((baseAgility + agiPer) * ARMOR_PER_AGI);\r\n    \r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            let bonusArmor = tryGetItemSpecialValue(item, \"bonus_armor\");\r\n            if (bonusArmor) {\r\n                totalArmor += bonusArmor;\r\n            }\r\n\r\n            let bonusAgility = tryGetItemSpecialValue(item, \"bonus_agility\");\r\n            if (bonusAgility) {\r\n                let armor = bonusAgility * ARMOR_PER_AGI;\r\n                totalArmor += armor;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                let armor = bonusAllStats * ARMOR_PER_AGI;\r\n                totalArmor += armor;\r\n            }\r\n        }\r\n    }\r\n    \r\n    if(neutral) {\r\n        let bonusArmor = tryGetNeutralSpecialValue(neutral, \"bonus_armor\");\r\n        if (bonusArmor) {\r\n            totalArmor += bonusArmor;\r\n        }\r\n\r\n        let bonusAgi = tryGetNeutralSpecialValue(neutral, \"bonus_agility\");\r\n        if (bonusAgi) {\r\n            totalArmor += bonusAgi * ARMOR_PER_AGI;\r\n        }\r\n\r\n        let bonusAllStats = tryGetNeutralSpecialValue(neutral, \"bonus_all_stats\");\r\n        if (bonusAllStats) {\r\n            let armor = bonusAllStats * ARMOR_PER_AGI;\r\n            totalArmor += armor;\r\n        }\r\n    }\r\n\r\n    /// ToDo: If abilities active, add active ability armor\r\n    /// or if ability is passive, apply bonus\r\n    // if (abilities && abilities.length > 0) {\r\n    //     for(let ability of abilities) {\r\n    //         /// if a passive, add armor depending on ability level\r\n    //         let abilInfo = getAbilityInfoFromName(ability);\r\n    //         if (isAbilityBehaviour(abilInfo.AbilityBehavior, [ EAbilityBehaviour.PASSIVE ])) {\r\n    //             let bonusArmor = tryGetAbilitySpecialAbilityValue(ability, \"bonus_armor\");\r\n    //             if (bonusArmor) {\r\n    //                 totalArmor += bonusArmor;\r\n    //             }\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    if(talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            if (talent.includes(\"bonus_armor\")) {\r\n                let bonusArmor = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusArmor) {\r\n                    totalArmor += bonusArmor;\r\n                }\r\n            } else if (talent.includes(\"bonus_agility\")) {\r\n                let bonusAgility = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAgility) {\r\n                    totalArmor += bonusAgility * ARMOR_PER_AGI;\r\n                }\r\n            } else if (talent.includes(\"bonus_all_stats\")) {\r\n                let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAllStats) {\r\n                    totalArmor += bonusAllStats * ARMOR_PER_AGI;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Round to one decimal place\r\n    return totalArmor.toFixed(1);\r\n}\r\n\r\n/// Returns the total amount of spell amplification as a percentage applied to the hero\r\nexport function calculateTotalSpellAmp (talents, items, neutral) {\r\n    let totalSpellAmp = 0;\r\n    \r\n    // Determine if any talents provide spell amp\r\n    if (talents && talents.length > 0) {\r\n        let ampTalent = talents.find(element => element.includes(\"spell_amplify\"));\r\n        if (ampTalent) {\r\n            let talentInfo = DOTAAbilities[ampTalent.name];\r\n            if (talentInfo) {\r\n                let spellAmpInfo = talentInfo.AbilitySpecial.find(element => element.value);\r\n                if (spellAmpInfo) {\r\n                    let spellAmpAmt = parseInt(spellAmpInfo.value);\r\n                    totalSpellAmp += spellAmpAmt;\r\n\r\n                    //console.log(`Talent ${ampTalent.name} provides ${spellAmpAmt}% spell amp`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Determine if current neutral item provides any spell amplification\r\n    if (neutral) {\r\n        let foundNeutral = getItemInfoFromName(neutral.item);\r\n        if (foundNeutral) {\r\n            let spellAmpAmount = getItemSpecialAbilityValue(foundNeutral, \"spell_amp\");\r\n            if (spellAmpAmount) {\r\n                totalSpellAmp += spellAmpAmount;\r\n                //console.log(`Neutral ${neutral.item} provides ${spellAmpAmount}% spell amp`);\r\n            }\r\n        }\r\n    }\r\n\r\n    /// Determine if any items provide spell amp\r\n    if (items && items.length > 0) {\r\n        for(let i = 0; i < items.length; i++) {\r\n            if (items[i].item) {\r\n                let itemInfo = getItemInfoFromName(items[i].item);\r\n                if (itemInfo) {\r\n                    let spellAmpAmount = getItemSpecialAbilityValue(itemInfo, \"spell_amp\");\r\n                    if (spellAmpAmount) {\r\n                        totalSpellAmp += spellAmpAmount;\r\n                        //console.log(`Item ${items[i].item} provides ${spellAmpAmt}% spell amp`);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    return totalSpellAmp;\r\n}\r\n\r\nexport function calculateStatusResist(items, neutral) {\r\n    let totalStatusResist = 0.0;\r\n\r\n    if (items && items.length > 0) {\r\n        for(let i = 0; i < items.length; i++) {\r\n            if (items[i].item) {\r\n                let itemInfo = getItemInfoFromName(items[i].item);\r\n                if (itemInfo) {\r\n                    let statusResistAmount = getItemSpecialAbilityValue(itemInfo, \"status_resistance\");\r\n                    if (statusResistAmount) {\r\n                        totalStatusResist += statusResistAmount;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let statusResistAmount = tryGetNeutralSpecialValue(neutral, \"status_resistance\");\r\n        if (statusResistAmount) {\r\n            totalStatusResist += statusResistAmount;\r\n        }\r\n    }\r\n\r\n    return totalStatusResist;\r\n}\r\n\r\nexport function calculateMagicResist (items, neutral, abilities) {\r\n    // Formula from Wiki\r\n    // Total magic resistance = 1 − ((1 − natural resistance) × (1 − first resistance bonus) × (1 − second resistance bonus) × (1 + first resistance reduction) × (1 + second resistance reduction))\r\n    \r\n    // Array of magic resistance values\r\n    let resistanceBonuses = [ ];\r\n    \r\n    if (DOTAHeroes && DOTAHeroes?.npc_dota_hero_base?.MagicalResistance) {\r\n        let baseResist = parseInt(DOTAHeroes.npc_dota_hero_base.MagicalResistance);\r\n        resistanceBonuses.push(baseResist);\r\n    }\r\n\r\n    if (items && items.length > 0) {\r\n        for(let i = 0; i < items.length; i++) {\r\n            let itemInfo = getItemInfoFromName(items[i].item);\r\n            if (itemInfo) {\r\n                let magicResistAmount = getItemSpecialAbilityValue(itemInfo, \"bonus_magic_resistance\");\r\n                if (magicResistAmount) {\r\n                    resistanceBonuses.push(magicResistAmount);\r\n                }\r\n\r\n                magicResistAmount = getItemSpecialAbilityValue(itemInfo, \"magic_resistance\");\r\n                if (magicResistAmount) {\r\n                    resistanceBonuses.push(magicResistAmount);\r\n                }\r\n\r\n                magicResistAmount = getItemSpecialAbilityValue(itemInfo, \"bonus_magical_armor\");\r\n                if (magicResistAmount) {\r\n                    resistanceBonuses.push(magicResistAmount);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let magicResistAmount = tryGetNeutralSpecialValue(neutral, \"magic_resistance\");\r\n        if (magicResistAmount) {\r\n            resistanceBonuses.push(magicResistAmount);\r\n        }\r\n    }\r\n\r\n    if (abilities && abilities.length > 0) { \r\n        for(let ability of abilities) {\r\n            // let magicResistAmount = tryGetAbilitySpecialAbilityValue(ability, \"magic_resistance\");\r\n            // if (magicResistAmount) {\r\n            //     resistanceBonuses.push(magicResistAmount);\r\n            // }\r\n            \r\n            let magicResistAmount = tryGetAbilitySpecialAbilityValue(ability, \"bonus_magic_resistance\");\r\n            if (magicResistAmount) {\r\n                resistanceBonuses.push(magicResistAmount);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Divide original value into 0.x and minus from 1 to get the reverse\r\n    let edited = []\r\n    for(let i = 0; i < resistanceBonuses.length; i++) {\r\n        edited.push(1 - (resistanceBonuses[i] / 100));\r\n    }\r\n\r\n    // multiply them all together \r\n    let total = edited[0];\r\n    for(let i = 1; i < edited.length; i++) {\r\n        total *= edited[i];\r\n    }\r\n\r\n    // then minus from 1, and multiply by 100 to get value as a percentage\r\n    let percent = (1 - total) * 100;\r\n    return percent.toFixed(2);\r\n}\r\n\r\n/// Calculates the total magic resistance of the hero\r\n/// https://dota2.gamepedia.com/Magic_resistance\r\nexport function calculatePhysicalResist (totalArmor) {\r\n    // Formula from https://www.dotabuff.com/blog/2018-11-30-understanding-720-armor-changes\r\n    //( 0.052 * armor ) ÷ ( 0.9 + 0.048 * |armor|)\r\n    let physResist = (0.052 * totalArmor) / (0.9 + 0.048 * Math.abs(totalArmor));\r\n    let percent = physResist * 100;\r\n    return percent.toFixed(0);\r\n}\r\n\r\n/// Calculates evasion\r\nexport function calculateEvasion(items, neutral, abilities, talents) {\r\n    let totalEvasion = 0.0;\r\n\r\n    if (abilities && abilities.length > 0) {\r\n        for(let ability of abilities) {\r\n            let bonusEvasion = tryGetAbilitySpecialAbilityValue(ability, \"bonus_evasion\");\r\n            if (bonusEvasion) {\r\n                totalEvasion += bonusEvasion;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            if (talent.includes(\"bonus_evasion\")) {\r\n                let bonusEvasion = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusEvasion) {\r\n                    totalEvasion += bonusEvasion;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (items && items.length > 0) {\r\n        for(let i = 0; i < items.length; i++) {\r\n            if (items[i].item) {\r\n                let itemInfo = getItemInfoFromName(items[i].item);\r\n                if (itemInfo) {\r\n                    let evasionAmount = getItemSpecialAbilityValue(itemInfo, \"bonus_evasion\");\r\n                    if (evasionAmount) {\r\n                        totalEvasion += evasionAmount;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return totalEvasion;\r\n}\r\n\r\n/// Returns the minimum and maximum right click damage of a hero\r\n// atkMin, atkMax, primaryAttributeStats, heroLevel = 1\r\nexport function calculateRightClickDamage(hero, level, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }\r\n    \r\n    let heroMainAttribute = getPrimaryAttribute(hero);\r\n    let atkMin = parseInt(hero.AttackDamageMin);\r\n    let atkMax = parseInt(hero.AttackDamageMax);\r\n    let primaryAttributeStats = getPrimaryAttributeStats(hero);\r\n\r\n    // Work out how much bonus attack hero recieves from their primary attribute\r\n    let totalPrimaryAttribute = primaryAttributeStats.base + (primaryAttributeStats.perLevel * (level - 1));\r\n    // Calc additional damage from sources\r\n    let totalAdditional = 0;\r\n\r\n    /* Iterate over all items, neutral, abilities and talents to\r\n        get all primary attribute and all stat bonuses\r\n        */\r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            let allAttrKeys = primaryAttributeToItemBonusKey(heroMainAttribute);\r\n            for(let key of allAttrKeys) {\r\n                let bonusPrimaryAttr = tryGetItemSpecialValue(item, key);\r\n                if (bonusPrimaryAttr) {\r\n                    totalPrimaryAttribute += bonusPrimaryAttr;\r\n                }\r\n            }\r\n\r\n            let bonusPrimaryStat = tryGetItemSpecialValue(item, \"bonus_primary_stat\");\r\n            if (bonusPrimaryStat) {\r\n                totalPrimaryAttribute += bonusPrimaryStat;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalPrimaryAttribute += bonusAllStats;\r\n            }\r\n\r\n            let bonusDmg = tryGetItemSpecialValue(item, \"bonus_damage\");\r\n            if (bonusDmg) {\r\n                totalAdditional += bonusDmg;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let allAttrKeys = primaryAttributeToItemBonusKey(heroMainAttribute);\r\n        for(let key of allAttrKeys) {\r\n            let bonusPrimaryAttr = tryGetNeutralSpecialValue(neutral, key);\r\n            if (bonusPrimaryAttr) {\r\n                totalPrimaryAttribute += bonusPrimaryAttr;\r\n            }\r\n        }\r\n\r\n        let bonusPrimaryStat = tryGetNeutralSpecialValue(neutral, \"primary_stat\");\r\n        if (bonusPrimaryStat) {\r\n            totalPrimaryAttribute += bonusPrimaryStat;\r\n        }\r\n\r\n        let bonusDmg = tryGetNeutralSpecialValue(neutral, \"bonus_damage\");\r\n        if (bonusDmg) {\r\n            totalAdditional += bonusDmg;\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            let allAttrKeys = primaryAttributeToItemBonusKey(heroMainAttribute);\r\n            for(let key of allAttrKeys) {\r\n                if (talent.includes(key)) {\r\n                    let bonusPrimaryAttr = tryGetNeutralSpecialValue(talent, \"value\");\r\n                    if (bonusPrimaryAttr) {\r\n                        totalPrimaryAttribute += bonusPrimaryAttr;\r\n                    }\r\n                }\r\n            }\r\n            \r\n            if (talent.includes(\"bonus_all_stats\")) {\r\n                let allStats = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (allStats) {\r\n                    totalPrimaryAttribute += allStats;\r\n                }\r\n            } else if (talent.includes(\"bonus_attack_damage\")) {\r\n                let bonusDmg = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusDmg) {\r\n                    totalAdditional += bonusDmg;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /// Damage from primary attribute counts as part of the Min-Max\r\n    /// whereas bonus damage (+5 damage) from sources count as additional\r\n\r\n    let min = atkMin + totalPrimaryAttribute;\r\n    let max = atkMax + totalPrimaryAttribute;\r\n\r\n    return {\r\n        /// minimum attack damage of the hero\r\n        min: Math.floor(min).toFixed(0),\r\n        /// maximum attack damage of the hero\r\n        max: Math.floor(max).toFixed(0),\r\n        additional: totalAdditional,\r\n    };\r\n}\r\n\r\n/// Returns info on the attack time of the hero\r\nexport function calculateAttackTime(hero, level, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }\r\n    \r\n    let MAX_ATTACK_SPEED = 700;\r\n\r\n    // Check if hero has different attack rate or attack speed than base hero\r\n    let totalAttackSpeed = parseInt(getDotaBaseHero()?.BaseAttackSpeed);\r\n\r\n    /// Get base agi stats\r\n    let agiStats = getSpecificAttributeStats(EAttributes.ATTR_AGILITY, hero);\r\n    let baseAgi = agiStats.base;\r\n    let agiPerLevel = agiStats.perLevel;\r\n\r\n    let totalAgi = baseAgi + (agiPerLevel * (level - 1));\r\n\r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            let bonusAttackSpeed = tryGetItemSpecialValue(item, \"bonus_attack_speed\");\r\n            if (bonusAttackSpeed) {\r\n                totalAttackSpeed += bonusAttackSpeed;\r\n            }\r\n\r\n            let bonusAgility = tryGetItemSpecialValue(item, \"bonus_agility\");\r\n            if (bonusAgility) {\r\n                totalAgi += bonusAgility;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalAgi += bonusAllStats;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let bonusAttackSpeed = tryGetNeutralSpecialValue(neutral, \"bonus_attack_speed\");\r\n        if (bonusAttackSpeed) {\r\n            totalAttackSpeed += bonusAttackSpeed;\r\n        }\r\n    }\r\n\r\n    // Only actives that gives attack speed bonuses\r\n    // if (abilities && abilities.length > 0) {\r\n    // }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            let bonusAttackSpeed = tryGetTalentSpecialAbilityValue(talent, \"bonus_attack_speed\");\r\n            if (bonusAttackSpeed) {\r\n                totalAttackSpeed += bonusAttackSpeed;\r\n            }\r\n\r\n            let bonusAgility = tryGetTalentSpecialAbilityValue(talent, \"bonus_agility\");\r\n            if (bonusAgility) {\r\n                totalAgi += bonusAgility;\r\n            }\r\n\r\n            let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalAgi += bonusAllStats;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// Check that max atk speed hasn't been reached\r\n    if ((totalAttackSpeed + totalAgi) > MAX_ATTACK_SPEED) {\r\n        // Use totalAttackSpeed at max if so, reset agi since 1 agi = 1 atk speed\r\n        totalAttackSpeed = MAX_ATTACK_SPEED;\r\n        totalAgi = 0;\r\n    }\r\n\r\n    let attacksPerSec = ((totalAttackSpeed + totalAgi) * 0.01) / 1.7;\r\n    let attackTime = 1.7 / ((totalAttackSpeed + totalAgi) * 0.01);\r\n    attackTime = 1 / attacksPerSec;\r\n\r\n    let atkSpeed = totalAttackSpeed + totalAgi;\r\n\r\n    return {\r\n        /// Amount of seconds inbetween attacks\r\n        attackTime: attackTime.toFixed(2),\r\n        /// Amount of attacks per second\r\n        attacksPerSecond: attacksPerSec.toFixed(2),\r\n        /// Attack speed value shown in UI of dota\r\n        attackSpeed: atkSpeed.toFixed(0),\r\n    };\r\n}\r\n\r\n/// Calculates how much output damage an ability will do to an enemy, factoring in any items\r\nexport function calculateSpellDamage(abilityName, abilityInfo, abilityLevel, items, neutral, talents) {\r\n    if (!abilityLevel || !abilityInfo) {\r\n        return -1;\r\n    }\r\n\r\n    // Get normal dmg output of ability\r\n    let abilityDamageInfo = getAbilityOutputDamage(abilityInfo, abilityLevel);\r\n    \r\n    // Add up spellAmp from all bonuses to calculate at end\r\n    let totalSpellAmpPercent = 0;\r\n\r\n    /// Value bonus from talent\r\n    let talentBonus = 0;\r\n\r\n    if (items) {\r\n        // Add item spell damage increase\r\n        for(let i = 0; i < items.length; i++) {\r\n            let itemInfo = getItemInfoFromName(items[i].item);\r\n            if (itemInfo) {\r\n                let spellAmp = getItemSpecialAbilityValue(itemInfo, \"spell_amp\");\r\n                if (spellAmp) {\r\n                    totalSpellAmpPercent += spellAmp;\r\n                }\r\n\r\n                let bonusSpellAmp = getItemSpecialAbilityValue(itemInfo, \"bonus_spell_amp\");\r\n                if (bonusSpellAmp) {\r\n                    totalSpellAmpPercent += bonusSpellAmp;\r\n                }\r\n\r\n                // Bloodstone, item specific\r\n                let chargeCount = getItemSpecialAbilityValue(itemInfo, \"initial_charges_tooltip\");\r\n                let ampPerCharge = getItemSpecialAbilityValue(itemInfo, \"amp_per_charge\");\r\n                if (ampPerCharge && chargeCount) {\r\n                    totalSpellAmpPercent += (ampPerCharge * chargeCount);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        //Add neutral item spell dmg\r\n        let neutralInfo = getItemInfoFromName(neutral.item);\r\n        if (neutralInfo && neutralInfo.AbilitySpecial) {\r\n            for (let i = 0; i < neutralInfo.AbilitySpecial.length; i++) {\r\n                let special = neutralInfo.AbilitySpecial[i];\r\n                // Spell amp\r\n                if (special.bonus_spell_amp) {\r\n                    let bonusSpellAmp = parseInt(special.bonus_spell_amp);\r\n                    totalSpellAmpPercent += bonusSpellAmp; \r\n                }\r\n\r\n                if (special.spell_amp) {\r\n                    let bonusSpellAmp = parseInt(special.spell_amp);\r\n                    totalSpellAmpPercent += bonusSpellAmp;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        // Add spell amplify from any selected talents\r\n        for(let talent of talents) {\r\n            if (talent.includes(\"spell_amplify\")) {\r\n                let ampTalentValue = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (ampTalentValue) {\r\n                    totalSpellAmpPercent += ampTalentValue;\r\n                }\r\n            } \r\n            /// if a unique talent specific to a hero ability\r\n            else if (talent.includes(\"special_bonus_unique\")) {\r\n                /// Search Abilities_English.json for string of talent to \r\n                /// check if it is a damage talent modifier and apply\r\n                if (isDamageTalent(talent)) {\r\n                    let linkedAbility = tryGetTalentSpecialAbilityValue(talent, \"ad_linked_ability\");\r\n\r\n                    // if linked ability is equal to current one\r\n                    if (linkedAbility && linkedAbility === abilityName) {\r\n                        let value = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                        if (value) {\r\n                            talentBonus = value;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    let totalAbilDmg = abilityDamageInfo.damage + talentBonus;\r\n    let abilityDamage = calculateSpellAmp(totalAbilDmg, totalSpellAmpPercent);\r\n\r\n    return {\r\n        damage: abilityDamage === 0 ? null : abilityDamage,\r\n        isPercent: abilityDamageInfo.isPercent,\r\n    };\r\n}\r\n\r\n/// Calculates and applies spell amp to the spell damage and returns the result\r\nexport function calculateSpellAmp (spellDamage, spellAmpPercent) {\r\n    return spellDamage + ((spellDamage / 100) * spellAmpPercent);\r\n}\r\n\r\n/// Calculates ability mana cost with items, neutrals and talents that contain reductions\r\nexport function calculateManaCost(abilityInfo, abilityLevel, items, neutral, talents) {\r\n    if (abilityLevel <= 0) {\r\n        return null;\r\n    }\r\n    \r\n    let manaCost = null;\r\n\r\n    // Get inital mana cost amount\r\n    if (abilityInfo && abilityInfo.AbilityManaCost) {\r\n        manaCost = parseAbilityValueByLevel(abilityInfo.AbilityManaCost, abilityLevel);\r\n    }\r\n\r\n    // Determine mana reductions from items, neutral, talents\r\n    // Take all percentages and calculate at end\r\n    let totalManaCostReducePercent = 0;\r\n\r\n    if (items) {\r\n        for(let item of items) {\r\n            let itemInfo = getItemInfoFromName(item.item);\r\n            if(itemInfo) {\r\n                let manaCostReduceAmount = getItemSpecialAbilityValue(itemInfo, \"manacost_reduction\");\r\n                if(manaCostReduceAmount) {\r\n                    totalManaCostReducePercent += manaCostReduceAmount;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let neutralInfo = getItemInfoFromName(neutral.item);\r\n        if (neutralInfo) {\r\n            let costReductionAmount = getItemSpecialAbilityValue(neutralInfo, \"manacost_reduction\");\r\n            if (costReductionAmount) {\r\n                totalManaCostReducePercent += costReductionAmount;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (talents) {\r\n        for(let talent of talents) {\r\n            // Only apply mana reducing talents\r\n            if (talent.includes(\"mana_reduction\")) {\r\n                let reduceAmount = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (reduceAmount) {\r\n                    totalManaCostReducePercent += reduceAmount;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // If ability has a mana value and has mana reductions\r\n    if (manaCost && totalManaCostReducePercent > 0) {\r\n        let removeManaAmt = (manaCost / 100) * totalManaCostReducePercent;\r\n        manaCost -= removeManaAmt;\r\n    }\r\n\r\n    return manaCost;\r\n}\r\n\r\n/// Calculates ability cooldown with items, neutrals, talents and abilities\r\n/// https://liquipedia.net/dota2/Cooldown_Reduction\r\nexport function calculateAbilityCooldown(abilityName, abilityInfo, abilityLevel, items, neutral, talents) {\r\n    if (abilityLevel <= 0) {\r\n        return null;\r\n    }\r\n    \r\n    let cooldown = null;\r\n    let charges = null;\r\n    let fixedAmtReductionSeconds = 0;\r\n\r\n    if (abilityInfo && abilityInfo.AbilityCooldown) {\r\n        cooldown = parseAbilityValueByLevel(abilityInfo.AbilityCooldown, abilityLevel);\r\n\r\n        /// if ability uses charges, use charge cooldown\r\n        if (cooldown === 0 && abilityInfo.AbilityCharges && abilityInfo.AbilityChargeRestoreTime) {\r\n            cooldown = parseInt(abilityInfo.AbilityChargeRestoreTime);\r\n            charges = parseInt(abilityInfo.AbilityCharges);\r\n        }\r\n\r\n        // if AbilityInfo has a Scepter upgrade and items contains scepter\r\n        let requiresScepter = getAbilitySpecialAbilityValue(abilityInfo, \"RequiresScepter\") === \"1\";\r\n        if (requiresScepter && itemsContainsScepter(items)) {\r\n            let scepterCharges = getIncludesAbilitySpecialAbilityValue(abilityInfo, \"charges\", abilityLevel);\r\n            charges = scepterCharges;\r\n        }\r\n    }\r\n\r\n    let allReductions = [];\r\n    if (items) {\r\n        for (let item of items) {\r\n            if (item && item.item) {\r\n                let itemInfo = getItemInfoFromName(item.item);\r\n                if (itemInfo) {\r\n                    let bonusCooldown = getItemSpecialAbilityValue(itemInfo, \"bonus_cooldown\");\r\n                    if (bonusCooldown) {\r\n                        allReductions.push({ amount: bonusCooldown, source: item.item });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let neutralInfo = getItemInfoFromName(neutral.item);\r\n        if (neutralInfo) {\r\n            let bonusCooldown = getItemSpecialAbilityValue(neutralInfo, \"bonus_cooldown\");\r\n            if (bonusCooldown) {\r\n                allReductions.push({ amount: bonusCooldown, source: neutral });\r\n            } \r\n        }\r\n    }\r\n\r\n    if (talents) {\r\n        for(let talent of talents) {\r\n            // Ignore talent if it isn't a cd reduction one\r\n            if (talent.includes(\"cooldown_reduction\")) {\r\n                let reduction = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (reduction) {\r\n                    allReductions.push({ amount: reduction, source: talent });\r\n                }\r\n            }\r\n            else if (talent.includes(\"special_bonus_unique\")) {\r\n                if (isCooldownTalent(talent)) {\r\n                    let linkedAbility = tryGetTalentSpecialAbilityValue(talent, \"ad_linked_ability\");\r\n                    if (linkedAbility === abilityName) {\r\n                        let value = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                        if (value) {\r\n                            fixedAmtReductionSeconds += value;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /// Remove any fixed amount cooldown reductions first before\r\n    /// applying any other reductions\r\n    let totalCooldown = cooldown - fixedAmtReductionSeconds;\r\n\r\n    let sourceOfReductions = [];\r\n    for(let reduction of allReductions) {\r\n        let decimal = reduction.amount / 100;\r\n        sourceOfReductions.push((1 - decimal));\r\n    }\r\n\r\n    for(let reduce of sourceOfReductions) {\r\n        totalCooldown *= reduce;\r\n    }\r\n\r\n    return {\r\n        charges: charges,\r\n        cooldown: totalCooldown > 0 ? totalCooldown.toFixed(2) : null,\r\n    };\r\n}\r\n\r\n/// Calculates the movement speed of the hero, factoring in their items, neutral, abilities and talents\r\nexport function calculateMoveSpeed (hero, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }\r\n\r\n    let baseSpeed = parseInt(hero.MovementSpeed);\r\n    let flatBonus = 0;\r\n    let percentageBasedBonuses = 0;\r\n\r\n    if (items && items.length > 0) {\r\n        for (let item of items) {\r\n            let moveSpeed = tryGetItemSpecialValue(item, \"bonus_movement_speed\");\r\n            if (moveSpeed) {\r\n                flatBonus += moveSpeed;\r\n            }\r\n            \r\n            let bonusMovement = tryGetItemSpecialValue(item, \"bonus_movement\");\r\n            if (bonusMovement) {\r\n                flatBonus += bonusMovement;\r\n            }\r\n\r\n            let moveSpeedPercentBonus = tryGetItemSpecialValue(item, \"movement_speed_percent_bonus\");\r\n            if (moveSpeedPercentBonus) {\r\n                percentageBasedBonuses += moveSpeedPercentBonus;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let bonusMoveSpeed = tryGetNeutralSpecialValue(neutral, \"bonus_movement_speed\");\r\n        if (bonusMoveSpeed) {\r\n            flatBonus += bonusMoveSpeed;\r\n        }\r\n\r\n        let moveSpeedPercentBonus = tryGetNeutralSpecialValue(neutral, \"movement_speed_percent_bonus\");\r\n        if (moveSpeedPercentBonus) {\r\n            percentageBasedBonuses += moveSpeedPercentBonus;\r\n        }\r\n    }\r\n\r\n    /// Abilities are actives so dont include since no way in UI to activate an ability yet\r\n    // if (abilities && abilities.length > 0) {\r\n    //     for(let ability of abilities) {\r\n    //         let bonusMoveSpeed = tryGetAbilitySpecialAbilityValue(ability, \"bonus_movespeed\");\r\n    //         if (bonusMoveSpeed) {\r\n    //             flatBonus += bonusMoveSpeed;\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            if (talent.includes(\"bonus_movement_speed\")) {\r\n                let bonusSpeed = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusSpeed) {\r\n                    flatBonus += bonusSpeed;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    let total = baseSpeed + flatBonus;\r\n    return total;\r\n}\r\n\r\nexport function calculateAttackRange (hero, level, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }\r\n\r\n    let isHeroRanged = hero.AttackCapabilities === \"DOTA_UNIT_CAP_RANGED_ATTACK\";\r\n\r\n    let baseRange = parseInt(hero.AttackRange);\r\n    let totalAttackRange = baseRange;\r\n\r\n    // Dont add bonuses if hero isn't ranged\r\n    if (isHeroRanged) {\r\n        if (items && items.length > 0) {\r\n            for(let item of items) {\r\n                let baseRange = tryGetItemSpecialValue(item, \"base_attack_range\");\r\n                if (baseRange) {\r\n                    totalAttackRange += baseRange;\r\n                }\r\n            }\r\n        }\r\n    \r\n        if (neutral) {\r\n            let rangeBonus = tryGetNeutralSpecialValue(neutral, \"attack_range_bonus\");\r\n            if (rangeBonus) {\r\n                totalAttackRange += rangeBonus;\r\n            }\r\n    \r\n            let bonusAttackRange = tryGetNeutralSpecialValue(neutral, \"bonus_attack_range\");\r\n            if (bonusAttackRange) {\r\n                totalAttackRange += bonusAttackRange;\r\n            }\r\n        }\r\n\r\n        if (abilities && abilities.length > 0) {\r\n            for(let ability of abilities) {\r\n                let bonusAttackRange = tryGetAbilitySpecialAbilityValue(ability, \"bonus_attack_range\", 1);\r\n                if (bonusAttackRange) {\r\n                    totalAttackRange += bonusAttackRange;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (talents && talents.length > 0) {\r\n            for(let talent of talents) {\r\n                if (talent.includes(\"bonus_attack_range\")) {\r\n                    let bonusAttackRange = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                    if (bonusAttackRange) {\r\n                        totalAttackRange += bonusAttackRange;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        // Melee units, apply any melee attack range bonuses\r\n        if (neutral) {\r\n            let bonusAttackRange = tryGetNeutralSpecialValue(neutral, \"melee_attack_range\");\r\n            if (bonusAttackRange) {\r\n                totalAttackRange += bonusAttackRange;\r\n            }\r\n        }\r\n    }\r\n\r\n    return totalAttackRange;\r\n}\r\n\r\n/// Calculates the correct attribute stats for a given hero\r\nexport function calculateAttribute(attribute, hero, level, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }\r\n\r\n    let attributeStats = getSpecificAttributeStats(attribute, hero);\r\n    let baseStrength = attributeStats.base;\r\n    let strengthPerLevel = attributeStats.perLevel;\r\n\r\n    let totalAttribute = baseStrength + (strengthPerLevel * (level - 1));\r\n    let additionalAttribute = 0;\r\n\r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            switch(attribute) {\r\n                case EAttributes.ATTR_STRENGTH:\r\n                    {\r\n                        let bonusStr = tryGetItemSpecialValue(item, \"bonus_strength\");\r\n                        if (bonusStr) {\r\n                            additionalAttribute += bonusStr;\r\n                        }\r\n                        break;\r\n                    }\r\n                case EAttributes.ATTR_AGILITY:\r\n                    {\r\n                        let bonusAgi = tryGetItemSpecialValue(item, \"bonus_agility\");\r\n                        if (bonusAgi) {\r\n                            additionalAttribute += bonusAgi;\r\n                        }\r\n                        break;\r\n                    }\r\n                case EAttributes.ATTR_INTELLIGENCE:\r\n                    {\r\n                        let bonusInt = tryGetItemSpecialValue(item, \"bonus_intellect\");\r\n                        if (bonusInt) {\r\n                            additionalAttribute += bonusInt;\r\n                        }\r\n                        break;    \r\n                    }\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        switch(attribute) {\r\n            case EAttributes.ATTR_STRENGTH:\r\n                    {\r\n                        let bonusStr = tryGetNeutralSpecialValue(neutral, \"bonus_strength\");\r\n                        if (bonusStr) {\r\n                            additionalAttribute += bonusStr;\r\n                        }\r\n                        break;\r\n                    }\r\n            case EAttributes.ATTR_AGILITY:\r\n                {\r\n                    let bonusAgi = tryGetNeutralSpecialValue(neutral, \"bonus_agility\");\r\n                    if (bonusAgi) {\r\n                        additionalAttribute += bonusAgi;\r\n                    }\r\n                    break;\r\n                }\r\n            case EAttributes.ATTR_INTELLIGENCE:\r\n                {\r\n                    let bonusInt = tryGetNeutralSpecialValue(neutral, \"bonus_intelligence\");\r\n                    if (bonusInt) {\r\n                        additionalAttribute += bonusInt;\r\n                    }\r\n                    break;    \r\n                }\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            switch(attribute) {\r\n                case EAttributes.ATTR_STRENGTH:\r\n                        {\r\n                            if (talent.includes(\"bonus_strength\")) {\r\n                                let bonusStr = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                                if (bonusStr) {\r\n                                    additionalAttribute += bonusStr;\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                case EAttributes.ATTR_AGILITY:\r\n                    {\r\n                        if (talent.includes(\"bonus_agility\")) {\r\n                            let bonusAgi = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                            if (bonusAgi) {\r\n                                additionalAttribute += bonusAgi;\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                case EAttributes.ATTR_INTELLIGENCE:\r\n                    {\r\n                        if (talent.includes(\"bonus_intelligence\")) {\r\n                            let bonusInt = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                            if (bonusInt) {\r\n                                additionalAttribute += bonusInt;\r\n                            }\r\n                        }\r\n                        break;    \r\n                    }\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    // If primary attribute, round down else us normal rounding\r\n    let isPrimaryAttr = getPrimaryAttribute(hero) === attribute;\r\n    if (isPrimaryAttr) {\r\n        totalAttribute = Math.floor(totalAttribute)\r\n    } else {\r\n        totalAttribute = totalAttribute.toFixed(0);\r\n    }\r\n\r\n    return {\r\n        /// Base attribute amount, includes per level\r\n        attribute: totalAttribute,\r\n        /// Additional attribute amount, from items/neutral/abils/talents\r\n        additionalAttribute: additionalAttribute.toFixed(0),\r\n        /// Amount of strength per level\r\n        perLevel: strengthPerLevel,\r\n    };\r\n}\r\n\r\nexport function calculateAbilityCastRange (abilityName, abilityInfo, abilityLevel, items, neutral, talents) {\r\n    if (!abilityInfo) {\r\n        return \"?\";\r\n    }\r\n\r\n    /// Use CastRange or find range inside AbilitySpecial\r\n    let baseCastRange = parseInt(abilityInfo.AbilityCastRange);\r\n    if (!baseCastRange) {\r\n        let foundRange = getAbilitySpecialCastRangeValue(abilityInfo, \"_range\", abilityLevel.level);\r\n        if (foundRange) {\r\n            baseCastRange = foundRange;\r\n        } else {\r\n            // Cant determine a cast range, none\r\n            return null;\r\n        }\r\n    }\r\n\r\n    let totalBonusRange = 0;\r\n\r\n    if (items && items.length > 0) {\r\n        for (let item of items) {\r\n            let rangeBonus = tryGetItemSpecialValue(item, \"cast_range_bonus\");\r\n            if (rangeBonus) {\r\n                totalBonusRange += rangeBonus;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let rangeBonus = tryGetNeutralSpecialValue(neutral, \"cast_range_bonus\");\r\n        if (rangeBonus) {\r\n            totalBonusRange += rangeBonus;\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for (let talent of talents) {\r\n            if (talent.includes(\"bonus_cast_range\")) {\r\n                let rangeBonus = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (rangeBonus) {\r\n                    totalBonusRange += rangeBonus;\r\n                }\r\n            }\r\n            else if (talent.includes(\"special_bonus_unique\")) {\r\n                if (isCastRangeTalent(talent)) {\r\n                    let linkedAbility = tryGetTalentSpecialAbilityValue(talent, \"ad_linked_ability\");\r\n                    if (linkedAbility === abilityName) {\r\n                        let value = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                        if (value) {\r\n                            totalBonusRange += value;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return baseCastRange + totalBonusRange;\r\n}","import React, { Component } from 'react';\r\n\r\nimport {\r\n    calculateSpellDamage\r\n} from \"../../utility/calculate\";\r\nimport { \r\n    tryGetLocalizedString, \r\n    getTooltipString,\r\n    getTooltipAbilityString,\r\n} from \"../../utility/data-helpers/language\";\r\nimport { \r\n    tryGetTalentSpecialAbilityValue\r\n} from '../../utility/dataHelperTalents';\r\n\r\n/// Retrieves ability damage and returns display value\r\nfunction parseDamage(abilityName, abilInfo, abilLvl, items, neutral, talents) {\r\n    let abilityDamage = calculateSpellDamage(abilityName, abilInfo, abilLvl, items, neutral, talents);\r\n    if (abilityDamage && abilityDamage.damage) {\r\n        let damage = abilityDamage.damage;\r\n        if (abilityDamage.isPercent) {\r\n            damage += \"%\";\r\n        }\r\n        return damage;\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nfunction getAbilityNameFromStrings(strings, key) {\r\n    if (strings && key) {\r\n        return tryGetLocalizedString(strings, key);\r\n    } else {\r\n        return \"?\";\r\n    }\r\n}\r\n\r\nclass DamageOutput extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            ability: props.ability,\r\n            abilityInfo: props.abilityInfo,\r\n            levelInfo: props.levelInfo,\r\n\r\n            items: props.items,\r\n            neutral: props.neutral,\r\n            selectedTalents: props.selectedTalents,\r\n\r\n            abilityStrings: props.abilityStrings,\r\n            dotaStrings: props.dotaStrings,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(prevProps.abilityInfo !== this.props.abilityInfo) {\r\n            this.setState({ abilityInfo: this.props.abilityInfo });\r\n        }\r\n\r\n        if (prevProps.levelInfo !== this.props.levelInfo) {\r\n            this.setState({ levelInfo: this.props.levelInfo });\r\n        }\r\n\r\n        if (prevProps.items !== this.props.items) {\r\n            this.setState({ items: this.props.items });\r\n        }\r\n\r\n        if (prevProps.neutral !== this.props.neutral) {\r\n            this.setState({ neutral: this.props.neutral });\r\n        }\r\n\r\n        if (prevProps.selectedTalents !== this.props.selectedTalents) {\r\n            this.setState({ selectedTalents: this.props.selectedTalents });\r\n        }\r\n\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ abilityStrings: this.props.abilityStrings });\r\n        }\r\n        if (prevProps.dotaStrings !== this.props.dotaStrings) {\r\n            this.setState({ dotaStrings: this.props.dotaStrings });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let abilityDamage = parseDamage(this.state.ability, this.state.abilityInfo, this.state.levelInfo?.level, this.state.items, this.state.neutral, this.state.selectedTalents);\r\n        return (\r\n            <div className=\"w-100 h-100\">\r\n                <h5>{getTooltipAbilityString(this.state.abilityStrings, this.state.ability)}</h5>\r\n                {\r\n                    abilityDamage && \r\n                    <h6>\r\n                        { (getAbilityNameFromStrings(this.state.abilityStrings, \"dota_ability_variable_damage\") + \":\")}\r\n                        {' '}\r\n                        { abilityDamage }\r\n                    </h6>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DamageOutput;","import React, { Component } from 'react';\r\nimport {\r\n    calculateAbilityCooldown\r\n} from \"../../utility/calculate\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faClock, faCircle }from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nclass Cooldown extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            abilityLevel: props.abilityLevel,\r\n            abilityCooldown: props.cooldown,\r\n\r\n            ability: props.ability,\r\n            abilityInfo: props.abilityInfo,\r\n            items: props.items,\r\n            neutral: props.neutral,\r\n            selectedTalents: props.selectedTalents,\r\n\r\n            cooldown: null,\r\n            charges: null,\r\n        };\r\n\r\n        this.updateCooldown = this.updateCooldown.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateCooldown();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                abilityLevel: this.props.abilityLevel,\r\n                abilityCooldown: this.props.cooldown,\r\n\r\n                ability: this.props.ability,\r\n                items: this.props.items,\r\n                neutral: this.props.neutral,\r\n                selectedTalents: this.props.selectedTalents,\r\n            }, () => this.updateCooldown() );\r\n        }\r\n    }\r\n\r\n    updateCooldown() {\r\n        let currentCooldownInfo = calculateAbilityCooldown(this.state.ability, this.state.abilityInfo, this.state.abilityLevel, this.state.items, this.state.neutral, this.state.selectedTalents);\r\n        \r\n        this.setState({\r\n            cooldown: currentCooldownInfo.cooldown,\r\n            charges: currentCooldownInfo.charges,\r\n        });\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                {\r\n                    this.state.cooldown &&\r\n                        <div className=\"d-flex\" title=\"cooldown\">\r\n                            <FontAwesomeIcon className=\"my-auto mr-1\" icon={faClock} />\r\n                            <div>\r\n                                { this.state.cooldown }\r\n                            </div>\r\n                        </div>\r\n                }\r\n                {\r\n                    this.state.charges &&\r\n                        <div className=\"d-flex\" title=\"charges\">\r\n                            <FontAwesomeIcon className=\"my-auto mr-1\" icon={faCircle} />\r\n                            <div>\r\n                                { this.state.charges }\r\n                            </div>\r\n                        </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Cooldown;","import React, { Component } from 'react';\r\nimport { \r\n    calculateManaCost \r\n} from '../../utility/calculate';\r\n\r\nclass ManaCost extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            ability: props.ability,\r\n            abilityLevel: props.abilityLevel,\r\n\r\n            items: props.items,\r\n            neutral: props.neutral,\r\n            selectedTalents: props.selectedTalents,\r\n        };\r\n\r\n        this.updateMana = this.updateMana.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                ability: this.props.ability,\r\n                abilityLevel: this.props.abilityLevel,\r\n\r\n                items: this.props.items,\r\n                neutral: this.props.neutral,\r\n                selectedTalents: this.props.selectedTalents,\r\n            });\r\n        }\r\n    }\r\n\r\n    updateMana() {\r\n        let manaCost = -1;\r\n        if (this.state.ability) {\r\n            manaCost = calculateManaCost(this.state.ability, this.state.abilityLevel, this.state.items, this.state.neutral, this.state.selectedTalents);\r\n        }\r\n        \r\n        // this.setState({\r\n        //     abilityManaCost: manaCost,\r\n        // });\r\n        return manaCost;\r\n    }\r\n\r\n    render() {\r\n        let manaCost = this.updateMana();\r\n        return (\r\n            <div>\r\n                { \r\n                    manaCost &&\r\n                        <div className=\"mana-cost d-flex\" title=\"mana cost\">\r\n                            <div className=\"my-auto mr-1\" style={{ \r\n                                height: \"10px\",\r\n                                width: \"10px\",\r\n                                backgroundColor: \"rgb(69, 148, 207)\",\r\n                            }}/>\r\n                            <div>{ manaCost }</div>\r\n                        </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ManaCost;","import React, { Component } from 'react';\r\nimport { \r\n    getAbilityBehaviours,\r\n    getAbilitySpecialExtraValues\r\n\r\n} from \"../../utility/dataHelperAbilities\";\r\nimport { \r\n    getTooltipString,\r\n    getLocalizedString,\r\n    containsLocalizedString\r\n} from \"../../utility/data-helpers/language\";\r\nimport {\r\n    calculateAbilityCastRange\r\n} from \"../../utility/calculate\";\r\n\r\nfunction TypeValueUI (props) {\r\n    return (\r\n        <div className=\"d-flex\" style={{ fontSize: \"0.85rem\"}}>\r\n            <div className=\"mr-2\">{props.type}</div>\r\n            <div>{props.value}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nclass AbilityDetails extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            ability: props.ability,\r\n            abilityInfo: props.abilityInfo,\r\n            levelInfo: props.levelInfo,\r\n\r\n            items: props.items,\r\n            neutral: props.neutral,\r\n            selectedTalents: props.selectedTalents,\r\n\r\n            abilityBehaviours: null,\r\n            castRange: 0,\r\n\r\n            abilityStrings: props.abilityStrings,\r\n            dotaStrings: props.dotaStrings,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(prevProps.abilityInfo !== this.props.abilityInfo) {\r\n            this.setState({ \r\n                abilityInfo: this.props.abilityInfo,\r\n            });\r\n        }\r\n\r\n        if (prevProps.levelInfo !== this.props.levelInfo) {\r\n            this.setState({ \r\n                levelInfo: this.props.levelInfo \r\n            });\r\n        }\r\n\r\n        if (prevProps.items !== this.props.items) {\r\n            this.setState({ \r\n                items: this.props.items \r\n            });\r\n        }\r\n\r\n        if (prevProps.neutral !== this.props.neutral) {\r\n            this.setState({ \r\n                neutral: this.props.neutral \r\n            });\r\n        }\r\n\r\n        if (prevProps.selectedTalents !== this.props.selectedTalents) {\r\n            this.setState({ \r\n                selectedTalents: this.props.selectedTalents \r\n            });\r\n        }\r\n\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ \r\n                abilityStrings: this.props.abilityStrings \r\n            });\r\n        }\r\n        if (prevProps.dotaStrings !== this.props.dotaStrings) {\r\n            this.setState({ \r\n                dotaStrings: this.props.dotaStrings \r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let castRangeAmt = calculateAbilityCastRange(this.state.ability, this.state.abilityInfo, this.state.levelInfo, this.state.items, this.state.neutral, this.state.selectedTalents);\r\n        let valuesInformation = getAbilitySpecialExtraValues(this.state.ability, this.state.abilityInfo, this.state.levelInfo.level, this.state.selectedTalents);\r\n        let abilityBehaviours = getAbilityBehaviours(this.state.abilityInfo);\r\n        return (\r\n            <div className=\"mb-2\">\r\n                {\r\n                    abilityBehaviours && abilityBehaviours.map((value, index) => {\r\n                        return (\r\n                            <TypeValueUI \r\n                                key={index}\r\n                                type={ getLocalizedString(this.state.dotaStrings, value.key) } \r\n                                value={ typeof value.value === \"object\" ? value.value.map((val) => {\r\n                                        return getLocalizedString(this.state.dotaStrings, val)\r\n                                    }).join(', ') : getLocalizedString(this.state.dotaStrings, value.value) \r\n                                } />\r\n                        );\r\n                    })\r\n                }\r\n                <div className=\"py-1\" />\r\n                {\r\n                    castRangeAmt &&\r\n                        <TypeValueUI \r\n                            type={getLocalizedString(this.state.abilityStrings, \"dota_ability_variable_cast_range\").toUpperCase() + \":\"}\r\n                            value={castRangeAmt} />\r\n                }\r\n                <div className=\"py-1\" />\r\n                {\r\n                    valuesInformation && valuesInformation.map((value, index) => {\r\n                        if (containsLocalizedString(this.state.abilityStrings, value.key)) {\r\n                            return (\r\n                                <TypeValueUI \r\n                                    type={ getLocalizedString(this.state.abilityStrings, value.key) }\r\n                                    value={ value.value } />\r\n                            );   \r\n                        }\r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AbilityDetails;","import React, { Component } from 'react';\r\nimport {\r\n    Row, \r\n    Col,\r\n    Button\r\n} from \"react-bootstrap\";\r\n\r\nimport { DOTAAbilities } from \"../../data/dota2/json/npc_abilities.json\";\r\n\r\nimport {\r\n    itemsContainsScepter\r\n} from \"../../utility/dataHelperItems\";\r\n\r\nimport DamageOutput from \"./DamageOutput\";\r\nimport Cooldown from \"./Cooldown\";\r\nimport ManaCost from \"./ManaCost\";\r\nimport AbilityDetails from \"./AbilityDetails\";\r\nimport \"./Abilities.css\";\r\n\r\nfunction getAbilityLevel (levelInfo, abilityIndex, abilityInfo, onLevelChanged) {\r\n    if (levelInfo && abilityInfo)\r\n    {\r\n        /// Determine max level of ability\r\n        var maxLvl = abilityInfo.AbilityType === \"DOTA_ABILITY_TYPE_ULTIMATE\" ? 3 : 4;\r\n        if (abilityInfo.MaxLevel)\r\n            maxLvl = parseInt(abilityInfo.MaxLevel);\r\n        \r\n        var html = [];\r\n        for(var i = 0; i < maxLvl; i++) {\r\n            html.push(\r\n                <Button \r\n                    key={i} \r\n                    variant=\"outline-secondary\"\r\n                    onClick={(e) => onLevelChanged(e)}\r\n                    data-lvlindex={abilityIndex}\r\n                    data-btnindex={i}>\r\n                    <div className={ i < levelInfo.level ? \"levelled\" : \"unlevelled\"}></div>\r\n                </Button>\r\n            );\r\n        }\r\n        return html;\r\n    }\r\n    else\r\n    {\r\n        return <div>?</div>\r\n    }\r\n}\r\n\r\nfunction getLevelInfo (abilities) {\r\n    if (abilities) {\r\n        return abilities.map((abil, index) => {\r\n            return { ability: index, level: 1 };\r\n        });\r\n    }\r\n    return [ ];\r\n}\r\n\r\nclass Abilities extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        var abils = this.filterAbilities(props.abilities);\r\n        var abilLevels = getLevelInfo(abils);\r\n\r\n        this.state = {\r\n            heroName: props.heroName,\r\n            abilities: abils,\r\n            abilityLevels: abilLevels,\r\n            items: props.items,\r\n            neutral: props.neutral,\r\n            selectedTalents: props.selectedTalents,\r\n\r\n            abilityStrings: props.abilityStrings,\r\n            dotaStrings: props.dotaStrings,\r\n\r\n            displayDamage: props.displayDamage,\r\n        };\r\n\r\n        this.onLevelChanged = this.onLevelChanged.bind(this);\r\n        this.filterAbilities = this.filterAbilities.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.heroName !== this.props.heroName) {\r\n            this.setState({\r\n                heroName: this.props.heroName,\r\n            });\r\n        }\r\n\r\n        if (prevProps.abilities !== this.props.abilities) {\r\n            var abils = this.filterAbilities(this.props.abilities);\r\n            this.setState({\r\n                abilities: abils,\r\n                abilityLevels: getLevelInfo(abils),\r\n            });\r\n        }\r\n\r\n        if (prevProps.items !== this.props.items) {\r\n            this.setState({ items: this.props.items });\r\n        }\r\n        if (prevProps.neutral !== this.props.neutral) {\r\n            this.setState({ neutral: this.props.neutral });\r\n        }\r\n        if (prevProps.selectedTalents !== this.props.selectedTalents) {\r\n            this.setState({ selectedTalents: this.props.selectedTalents });\r\n        }\r\n\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ abilityStrings: this.props.abilityStrings });\r\n        }\r\n        if (prevProps.dotaStrings !== this.props.dotaStrings) {\r\n            this.setState({ dotaStrings: this.props.dotaStrings });\r\n        }\r\n    }\r\n    \r\n    // Remove any undefined, hidden abilities\r\n    filterAbilities(abils) {\r\n        if (abils) {\r\n            return abils.filter(function (val) {\r\n                return val && val !== \"generic_hidden\";\r\n            });\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    onLevelChanged(e) {\r\n        // If click on inner element\r\n        if (e.target.tagName.toLowerCase() !== \"button\") {\r\n            e.target = e.target.parentElement;\r\n        }\r\n\r\n        var levelIndex = parseInt(e.target.dataset.lvlindex);\r\n        var abilities = this.state.abilityLevels;\r\n        var targetLevel = parseInt(e.target.dataset.btnindex) + 1;\r\n        // Clicked same level, set to 0\r\n        if (abilities[levelIndex].level === targetLevel) {\r\n            abilities[levelIndex].level = 0;\r\n        } else {\r\n            // Set Level's new value to which btn was pressed\r\n            abilities[levelIndex].level = targetLevel;\r\n        }\r\n\r\n        this.setState({\r\n            abilityLevels: abilities,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Row>\r\n                {\r\n                    this.state.abilities && this.state.abilityLevels && this.state.abilities.map((value, index) => {\r\n                        // Info about the ability\r\n                        let ability = DOTAAbilities[value];\r\n                        if (!ability) {\r\n                            console.log(`Unable to find info on ability '${value}'`);\r\n                        }\r\n                        // Current level of the ability\r\n                        let levelInfo = this.state.abilityLevels.find(abilVal => abilVal.ability === index);\r\n                        if (!ability && value) {\r\n                            return <div key={value}>?</div>\r\n                        }\r\n\r\n                        // Dont add any scepter abilities unless hero has scepter\r\n                        if (ability && ability.IsGrantedByScepter && !itemsContainsScepter(this.state.items)) {\r\n                            return;\r\n                        }\r\n                        return (\r\n                            <Col key={ability.ID} className=\"d-flex flex-column justify-content-top\">\r\n                                <img\r\n                                    className=\"h-100 align-self-center\"\r\n                                    style={{ maxWidth: \"90px\", maxHeight: \"90px\" }}\r\n                                    src={`http://cdn.dota2.com/apps/dota2/images/abilities/${value}_hp1.png`} \r\n                                    alt={ability.ID} />\r\n                                <Row className=\"px-4\">\r\n                                    <Col md={6}>\r\n                                        {/* Cooldown */}\r\n                                        <Cooldown \r\n                                            ability={value} \r\n                                            abilityInfo={ability}\r\n                                            abilityLevel={levelInfo.level} \r\n                                            cooldown={ability.AbilityCooldown}\r\n                                            items={this.state.items}\r\n                                            neutral={this.state.neutral}\r\n                                            selectedTalents={this.state.selectedTalents} />\r\n                                    </Col>\r\n                                    <Col md={6}>\r\n                                        {/* Mana Cost */}\r\n                                        <ManaCost \r\n                                            ability={ability}\r\n                                            abilityLevel={levelInfo.level} \r\n                                            items={this.state.items}\r\n                                            neutral={this.state.neutral}\r\n                                            selectedTalents={this.state.selectedTalents} />\r\n                                    </Col>\r\n                                </Row>\r\n                                <div className=\"align-self-center pt-2 d-flex\">\r\n                                    {\r\n                                        this.state.abilityLevels && !ability.IsGrantedByScepter && getAbilityLevel(levelInfo, index, ability, this.onLevelChanged)\r\n                                    }\r\n                                </div>\r\n                                <div className=\"py-1\">\r\n                                    {\r\n                                        this.state.displayDamage && \r\n                                            <DamageOutput \r\n                                                ability={value}\r\n                                                abilityInfo={ability} \r\n                                                levelInfo={levelInfo}\r\n                                                items={this.state.items}\r\n                                                neutral={this.state.neutral} \r\n                                                selectedTalents={this.state.selectedTalents} \r\n                                                abilityStrings={this.state.abilityStrings} \r\n                                                dotaStrings={this.state.dotaStrings} />\r\n                                    }\r\n                                </div>\r\n                                <div className=\"py-1\">\r\n                                    <AbilityDetails \r\n                                        ability={value}\r\n                                        abilityInfo={ability} \r\n                                        levelInfo={levelInfo}\r\n                                        items={this.state.items}\r\n                                        neutral={this.state.neutral} \r\n                                        selectedTalents={this.state.selectedTalents}\r\n                                        abilityStrings={this.state.abilityStrings} \r\n                                        dotaStrings={this.state.dotaStrings} />\r\n                                </div>\r\n                            </Col>\r\n                        );\r\n                    })\r\n                }\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Abilities;","import Abilities from \"./Abilities\";\r\n\r\nexport default Abilities;","import React, { Component } from 'react';\r\nimport {\r\n    Tabs,\r\n    Tab,\r\n    Button,\r\n    Form,\r\n    ListGroup\r\n} from \"react-bootstrap\";\r\nimport { DOTAAbilities } from \"../../data/dota2/json/items.json\";\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faMinus } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport {\r\n    itemNameToElement\r\n} from \"../../utils\";\r\n\r\nimport \"./ItemSelector.css\";\r\nimport \"../../css/dota_items.css\";\r\n\r\nfunction getItemsByQuality(itemsArray, matchArray) {\r\n    return itemsArray.filter((itemInfo) => {\r\n        var quality = itemInfo.item.ItemQuality;\r\n        if (quality) { //(quality === \"consumable\" || quality === \"component\" || quality === \"secret_shop\")) {\r\n            for(var i = 0; i < matchArray.length; i++) {\r\n                if (quality === matchArray[i]) {\r\n                    return itemInfo;\r\n                }\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction filterItemName (name) {\r\n    var item = name.split('_');\r\n    item.shift();\r\n    item = item.join('_');\r\n    return item;\r\n}\r\n\r\nfunction getItemIcon(item, width, height, scale) {\r\n    // Remove 'item_' prefix, split by _, remove \"item\" and join again\r\n    item = filterItemName(item);\r\n\r\n    // Width and height of each item in item_stylesheet\r\n    if (item) {\r\n        return <span className={ 'sprite sprite-' + item + '_png '} alt={item} data-item={item} style={{ transform: `scale(${scale}, ${scale})`, transformOrigin: \"top left\" }} />\r\n    } else {\r\n        return <span style={{ backgroundColor: \"#212121\", width: width, height: height, transform: `scale(${scale}, ${scale})`, display: \"block\", transformOrigin: \"top left\" }} />\r\n    }\r\n}\r\n\r\nfunction ItemFromInfo(props) {\r\n    return (\r\n            <div \r\n                key={props.keyName} \r\n                title={props.item.name} \r\n                onClick={props.onClick}\r\n                className=\"m-1\" \r\n                style={{ width: `calc(88px * ${props.scale})`, height: `calc(64px * ${props.scale})` }}>\r\n                { \r\n                    getItemIcon(props.item.name, \"88px\", \"64px\", props.scale) \r\n                }\r\n            </div>\r\n    );\r\n}\r\n\r\nfunction TabHeading(props) {\r\n    return (\r\n        <h6 className=\"px-3 mb-0\">{props.text}</h6>\r\n    );\r\n}\r\n\r\nclass ItemSelector extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let selectableItems = Object.keys(DOTAAbilities).filter((value) => {\r\n            let key = value.toLowerCase();\r\n            let ability = DOTAAbilities[value];\r\n            if (key !== \"version\" && !key.includes(\"recipe\") && !ability.ItemIsNeutralDrop && !ability.IsObsolete) {\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n        // Convert keys to item data\r\n        selectableItems = selectableItems.map((key) => {\r\n            return {\r\n                item:  DOTAAbilities[key],\r\n                name: key,\r\n            };\r\n        })\r\n        selectableItems.sort();\r\n\r\n        let basicItems = getItemsByQuality(selectableItems, [\"consumable\", \"component\", \"secret_shop\"]);\r\n        let upgradesItems = getItemsByQuality(selectableItems, [\"common\", \"rare\", \"epic\", \"artifact\"]);\r\n\r\n        this.state = {\r\n            allItems: selectableItems,\r\n            queryItems: null,\r\n\r\n            onSelectedItem: props.onSelectedItem,\r\n\r\n            basicItems: basicItems,\r\n            upgradesItems: upgradesItems,\r\n        };\r\n\r\n        this.onSearchChanged = this.onSearchChanged.bind(this);\r\n        this.onSearchItemSelected = this.onSearchItemSelected.bind(this);\r\n        this.onShopItemSelected = this.onShopItemSelected.bind(this);\r\n        this.onRemoveItemSelected = this.onRemoveItemSelected.bind(this);\r\n    }\r\n\r\n    onSearchChanged(e) {\r\n        let query = e.target.value;\r\n        let filteredItems = null;\r\n        if (query) {\r\n            filteredItems = this.state.allItems.filter((item) => {\r\n                return item.name.indexOf(query.toLowerCase()) !== -1; \r\n            });\r\n        }\r\n\r\n        this.setState({\r\n            queryItems: filteredItems,\r\n        });\r\n    }\r\n\r\n    onSearchItemSelected(e) {\r\n        var val = e.target.dataset?.item;\r\n        this.state.onSelectedItem(val);\r\n    }\r\n\r\n    onShopItemSelected (e) {\r\n        var item = e.target.dataset?.item;\r\n        this.state.onSelectedItem(item);\r\n    }\r\n\r\n    onRemoveItemSelected(e) {\r\n        var item = null;\r\n        this.state.onSelectedItem(item);\r\n    }\r\n\r\n    render() {\r\n        var scale = 0.5;\r\n        var searchIconScale = 0.45;\r\n        return (\r\n            <div className=\"item-card\">\r\n                <div className=\"item-card header d-flex\">\r\n                    <div>\r\n                        <Form.Control type=\"text\" placeholder=\"Search...\" onChange={this.onSearchChanged}/>\r\n                    </div>\r\n                    <div className=\"ml-auto\">\r\n                        <Button variant=\"outline-danger\" onClick={this.onRemoveItemSelected}>\r\n                            <FontAwesomeIcon icon={faMinus} />\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"item-card content\">\r\n                    <div className=\"\">\r\n                        {\r\n                            this.state.queryItems && \r\n                            <div>\r\n                                <h6>SEARCH RESULTS</h6>\r\n                                <ListGroup>\r\n                                    {\r\n                                        // Query search term\r\n                                        this.state.queryItems.map((item) => {\r\n                                            var itemNameDisplay = filterItemName(item.name);\r\n                                            return (\r\n                                                <ListGroup.Item \r\n                                                    key={item.name} \r\n                                                    data-item={itemNameDisplay} \r\n                                                    className=\"py-1 px-3\"\r\n                                                    onClick={this.onSearchItemSelected} \r\n                                                    action>\r\n                                                    <div className=\"d-flex\" data-item={itemNameDisplay}>\r\n                                                        <ItemFromInfo \r\n                                                            item={item}\r\n                                                            onClick={this.onSearchItemSelected} \r\n                                                            scale={searchIconScale}/>\r\n\r\n                                                        <h6 className=\"mx-1 my-auto\" data-item={itemNameDisplay}>\r\n                                                            { itemNameDisplay }\r\n                                                        </h6>\r\n                                                    </div>\r\n                                                </ListGroup.Item>\r\n                                            )\r\n                                        })\r\n                                    }   \r\n                                </ListGroup>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                    {/* Regular view */}\r\n                    {\r\n                        !this.state.queryItems && \r\n                            <div>\r\n                                <Tabs defaultActiveKey=\"basic\" transition={false} id=\"shop-tabs\">\r\n                                    <Tab eventKey=\"basic\" title={<TabHeading text=\"BASIC\" />}>\r\n                                        <div className=\"d-flex flex-wrap\">\r\n                                            {\r\n                                                this.state.basicItems && this.state.basicItems.map((item) => {\r\n                                                    return (\r\n                                                        <ItemFromInfo \r\n                                                            key={item.item.ID}\r\n                                                            item={item}\r\n                                                            onClick={this.onShopItemSelected} \r\n                                                            scale={scale} />\r\n                                                    )\r\n                                                })\r\n                                            }\r\n                                        </div>\r\n                                    </Tab>\r\n                                    <Tab eventKey=\"upgrades\" title={<TabHeading text=\"UPGRADES\" />}>\r\n                                        <div className=\"d-flex flex-wrap\">\r\n                                            {\r\n                                                this.state.upgradesItems && this.state.upgradesItems.map((item) => {\r\n                                                    return (\r\n                                                        <ItemFromInfo \r\n                                                            key={item.item.ID}\r\n                                                            item={item}\r\n                                                            onClick={this.onShopItemSelected} \r\n                                                            scale={scale} />\r\n                                                    );\r\n                                                })\r\n                                            }\r\n                                        </div>\r\n                                    </Tab>\r\n                                </Tabs>\r\n                            </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ItemSelector;","import React, { Component } from 'react';\r\n\r\nimport {\r\n    getItemInfoFromName, \r\n    convertItemDescToHtml,\r\n    getItemStatistics\r\n} from \"../../utility/dataHelperItems\";\r\nimport { \r\n    getLocalizedString\r\n} from '../../utility/data-helpers/language';\r\n\r\nimport \"./ItemInfoTooltip.css\";\r\n\r\nfunction replaceItemStatLocalizeString (localizeString, value) {\r\n    let split = localizeString.split('$');\r\n    split.splice(1, 0, value);\r\n    return split.join(\" \");\r\n}\r\n\r\nclass ItemInfoTooltip extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            itemName: props.itemName,\r\n            abilityStrings: props.abilityStrings,\r\n\r\n            itemInfo: getItemInfoFromName(props.itemName),  \r\n        };\r\n\r\n        this.getItemIcon = this.getItemIcon.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                itemName: this.props.itemName,\r\n                abilityStrings: this.props.abilityStrings,\r\n                itemInfo: getItemInfoFromName(this.props.itemName),  \r\n            });\r\n        }\r\n    }\r\n\r\n    getItemIcon(item, width, height, scale) {\r\n        // Width and height of each item in item_stylesheet\r\n        if (item) {\r\n            return <span className={ 'sprite sprite-' + item + '_png '} alt={item} style={{ transform: `scale(${scale}, ${scale})`, transformOrigin: \"top left\" }} />\r\n        } else {\r\n            return <span style={{ backgroundColor: \"#212121\", width: width, height: height, transform: `scale(${scale}, ${scale})`, display: \"block\", transformOrigin: \"top left\" }} />\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let scale = 0.7;\r\n        let width = \"88px\";\r\n        let height = \"64px\";\r\n        let goldIconSize = 20;\r\n\r\n        let itemStats = getItemStatistics(this.state.itemInfo);\r\n        let loreString = getLocalizedString(this.state.abilityStrings, `DOTA_Tooltip_ability_item_${this.state.itemName}_Lore`);\r\n        /// Get localized string and filter it to correct html\r\n        let descString = getLocalizedString(this.state.abilityStrings, `DOTA_Tooltip_ability_item_${this.state.itemName}_Description`);\r\n        let descFiltered = convertItemDescToHtml(descString, this.state.itemName, this.state.itemInfo);\r\n        return (\r\n            <div className=\"item-tooltip\">\r\n                <div className=\"d-flex p-1\">\r\n                    <div className=\"m-2\" style={{ width: `calc(${width} * ${scale})`, height: `calc(${height} * ${scale})` }}>\r\n                        {  \r\n                            this.getItemIcon(this.state.itemName, width, height, 0.7) \r\n                        }\r\n                    </div>\r\n                    <div>\r\n                        <h4>\r\n                            { getLocalizedString(this.state.abilityStrings, `DOTA_Tooltip_Ability_item_${this.state.itemName}`) }\r\n                        </h4>\r\n                        {\r\n                            //If has an item cost and is more than 0\r\n                            this.state.itemInfo?.ItemCost && this.state.itemInfo?.ItemCost > 0 &&\r\n                            <div className=\"d-flex\">\r\n                                <img \r\n                                    className=\"mx-1\"\r\n                                    src={process.env.PUBLIC_URL + \"/images/dota2/gold_icon_ui.png\"} \r\n                                    height={goldIconSize}\r\n                                    width={goldIconSize} />\r\n                                <h6 className=\"gold-amount\">\r\n                                    { parseInt(this.state.itemInfo?.ItemCost) }\r\n                                </h6>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <div className=\"item-content p-2\">\r\n                    {/* item stat info */}\r\n                    {\r\n                        itemStats &&\r\n                            <div className=\"pb-1\">\r\n                                { \r\n                                    itemStats.map((value) => {\r\n                                        /// attempt to get localized string and display\r\n                                        let string = getLocalizedString(this.state.abilityStrings, `DOTA_Tooltip_ability_item_${this.state.itemName}_${value.key}`);\r\n                                        if (string) {\r\n                                            return (\r\n                                                <div>\r\n                                                    { replaceItemStatLocalizeString(string, value.value) }\r\n                                                </div>\r\n                                            );\r\n                                        }\r\n                                    })\r\n                                }\r\n                            </div>\r\n                    }\r\n\r\n                    {/* abilities */}\r\n                    {\r\n                        descString && descString != \"?\" &&\r\n                            <div className=\"p-1\">\r\n                                { descFiltered }\r\n                            </div>\r\n                    }\r\n\r\n                    {/* lore */}\r\n                    {\r\n                        loreString && loreString != \"?\" &&   \r\n                            <div className=\"p-1 m-1 lore\">\r\n                                { loreString }\r\n                            </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ItemInfoTooltip;","import React, { Component } from 'react';\r\nimport Popup from 'reactjs-popup';\r\n\r\nimport ItemSelector from \"./ItemSelector\";\r\n\r\nimport \"../../css/dota_hero_icons_big.css\";\r\nimport ItemInfoTooltip from './ItemInfoTooltip';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faInfo } from '@fortawesome/free-solid-svg-icons';\r\n\r\n/// Single item that contains a popup to change the item\r\nclass Item extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            item: props.item,\r\n            slot: props.slot,\r\n            isBackpack: props.isBackpack,\r\n\r\n            onItemChanged: props.onItemChanged,\r\n\r\n            abilityStrings: props.abilityStrings,\r\n        };\r\n\r\n        //console.log(`slot: ${this.state.slot} - item: ${this.state.item}`);\r\n        this.getItemIcon = this.getItemIcon.bind(this);\r\n        this.onSelectedItem = this.onSelectedItem.bind(this);\r\n    }\r\n\r\n    getItemIcon(item, width, height, scale) {\r\n        // Width and height of each item in item_stylesheet\r\n        if (item) {\r\n            return <span className={ 'sprite sprite-' + item + '_png '} alt={item} style={{ transform: `scale(${scale}, ${scale})`, transformOrigin: \"top left\" }} />\r\n        } else {\r\n            return <span style={{ backgroundColor: \"#212121\", width: width, height: height, transform: `scale(${scale}, ${scale})`, display: \"block\", transformOrigin: \"top left\" }} />\r\n        }\r\n    }\r\n\r\n    onSelectedItem (item) {\r\n        this.setState({\r\n            open: false,\r\n        });\r\n        \r\n        this.state.onItemChanged({ \r\n            slot: this.state.slot, \r\n            item: item,\r\n            isBackpack: this.state.isBackpack ? true : false,\r\n        });\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.item !== this.props.item) {\r\n            this.setState({ item: this.props.item, });\r\n        }\r\n\r\n        if (prevProps.slot !== this.props.slot) {\r\n            this.setState({ slot: this.props.slot });\r\n        }\r\n\r\n        if (prevProps.isBackpack !== this.props.isBackpack) {\r\n            this.setState({ isBackpack: this.props.isBackpack });\r\n        }\r\n\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ abilityStrings: this.props.abilityStrings });\r\n        }\r\n    }   \r\n\r\n    render() {\r\n        let scale = 0.7;\r\n        let width = \"88px\";\r\n        let height = \"64px\";\r\n        return (\r\n            <div>\r\n                {\r\n                    this.state.item &&\r\n                        <Popup\r\n                            trigger={isOpen => (\r\n                                <div\r\n                                    className=\"ml-2 mt-1\" \r\n                                    style={{ position:\"absolute\", zIndex: 1 }}>\r\n                                    <FontAwesomeIcon icon={faInfo} />\r\n                                </div>\r\n                            )}\r\n                            open={this.state.hoverOpen}\r\n                            position=\"right center\"\r\n                            on=\"hover\"\r\n                            contentStyle={{ width: \"350px\", overflowY: \"auto\", padding: 0, border: 0 }}>\r\n                                <ItemInfoTooltip\r\n                                    itemName={this.state.item}\r\n                                    abilityStrings={this.state.abilityStrings}\r\n                                    />\r\n                        </Popup>\r\n                }\r\n                <Popup\r\n                    trigger={isOpen => (\r\n                        <div className=\"m-1\" style={{ width: `calc(${width} * ${scale})`, height: `calc(${height} * ${scale})` }}  onClick={() => this.setState({ open: isOpen })}>\r\n                            {  this.getItemIcon(this.state.item, width, height, 0.7) }\r\n                        </div>\r\n                    )}\r\n                    open={this.state.open}\r\n                    position=\"right center\"\r\n                    contentStyle={{ width: \"350px\", height: \"400px\", overflowY: \"auto\" }}>\r\n                        <ItemSelector onSelectedItem={this.onSelectedItem} />\r\n                </Popup>\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default Item;","import React, { Component } from 'react';\r\nimport {\r\n    Button,\r\n    Form\r\n} from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faMinus } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport { itemNameToElement } from \"../../utils\";\r\nimport {\r\n    getAllNeutrals\r\n} from \"../../utility/dataHelperItems\";\r\n\r\nimport \"./NeutralItemSelector.css\";\r\n\r\nclass NeutralItemSelector extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let allNeutrals = getAllNeutrals();\r\n        this.state = {\r\n            allNeutrals: allNeutrals,\r\n            queryNeutrals: allNeutrals,\r\n\r\n            iconScale: 0.5,\r\n            onNewNeutralSelected: props.onNeutralSelected,\r\n        };\r\n\r\n        this.onNeutralSelected = this.onNeutralSelected.bind(this);\r\n        this.onSearchChanged = this.onSearchChanged.bind(this);\r\n    }\r\n\r\n    onNeutralSelected(e) {\r\n        var neutral = e.target.parentElement.parentElement.dataset.neutral;\r\n        this.state.onNewNeutralSelected({ item: neutral });\r\n    }\r\n\r\n    onSearchChanged (e) {\r\n        let query = e.target.value;\r\n        let filteredNeutrals = null;\r\n        if (query) {\r\n            filteredNeutrals = this.state.allNeutrals.filter((neutral) => {\r\n                return neutral.item.indexOf(query.toLowerCase()) !== -1; \r\n            });\r\n        }\r\n\r\n        /// If no query, show all neutrals\r\n        this.setState({\r\n            queryNeutrals: filteredNeutrals,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"neutral-item-card\" style={{ color: \"black\" }}>\r\n                <div className=\"neutral-item-card header d-flex\">\r\n                    <div>\r\n                        <Form.Control type=\"text\" placeholder=\"Search...\" onChange={this.onSearchChanged}/>\r\n                    </div>\r\n                    <Button className=\"ml-auto\" variant=\"outline-danger\" onClick={this.onNeutralSelected} data-neutral={null}>\r\n                        <FontAwesomeIcon icon={faMinus} data-neutral={null} />\r\n                    </Button>\r\n                </div>\r\n                <div className=\"neutral-item-card content\">\r\n                    <div className=\"d-flex flex-wrap\">\r\n                        {\r\n                            this.state.queryNeutrals && this.state.queryNeutrals.map((itemInfo) => {\r\n                                return ( \r\n                                    <div \r\n                                        className=\"m-1\" \r\n                                        key={itemInfo.item} \r\n                                        onClick={this.onNeutralSelected} \r\n                                        title={itemInfo.item}\r\n                                        data-neutral={itemInfo.item}>\r\n                                        { itemNameToElement(itemInfo, this.state.iconScale) }\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n                        {\r\n                            !this.state.queryNeutrals && this.state.allNeutrals.map((itemInfo) => {\r\n                                return ( \r\n                                    <div \r\n                                        className=\"m-1\" \r\n                                        key={itemInfo.item} \r\n                                        onClick={this.onNeutralSelected} \r\n                                        title={itemInfo.item}\r\n                                        data-neutral={itemInfo.item}>\r\n                                        { itemNameToElement(itemInfo, this.state.iconScale) }\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NeutralItemSelector;","import Neutral from \"./Neutral\";\r\n\r\nexport default Neutral;","import React, { Component } from 'react';\r\nimport Popup from \"reactjs-popup\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faInfo } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport NeutralItemSelector from \"./NeutralItemSelector\";\r\nimport ItemInfoTooltip from '../ItemsBar/ItemInfoTooltip';\r\n\r\nimport { itemNameToElement } from \"../../utils\";\r\n\r\nclass Neutral extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            neutralItem: props.neutralItem,\r\n            onNewNeutralSelected: props.onNewNeutralSelected,\r\n            abilityStrings: props.abilityStrings,\r\n            iconScale: 0.7,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate (prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                neutralItem: this.props.neutralItem,\r\n                abilityStrings: this.props.abilityStrings,\r\n                onNewNeutralSelected: this.props.onNewNeutralSelected,\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {\r\n                    this.state.neutralItem &&\r\n                        <Popup\r\n                            trigger={isOpen => (\r\n                                <div\r\n                                    className=\"ml-2 mt-1\" \r\n                                    style={{ position:\"absolute\", zIndex: 1 }}>\r\n                                    <FontAwesomeIcon icon={faInfo} />\r\n                                </div>\r\n                            )}\r\n                            open={this.state.hoverOpen}\r\n                            position=\"right center\"\r\n                            on=\"hover\"\r\n                            contentStyle={{ width: \"350px\", overflowY: \"auto\", padding: 0, border: 0 }}>\r\n                                <ItemInfoTooltip\r\n                                    itemName={this.state.neutralItem.item}\r\n                                    abilityStrings={this.state.abilityStrings}\r\n                                    />\r\n                        </Popup>\r\n                }\r\n                <Popup\r\n                    trigger={isOpen => {\r\n                        return itemNameToElement(this.state.neutralItem, this.state.iconScale)\r\n                    }}\r\n                    position=\"right center\"\r\n                    contentStyle={{ width: \"325px\", overflowY: \"auto\" }}>\r\n                    <NeutralItemSelector onNeutralSelected={this.state.onNewNeutralSelected} />\r\n                </Popup>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Neutral;","import React, { Component } from 'react';\r\nimport {\r\n    Row, \r\n    Col\r\n} from \"react-bootstrap\";\r\n\r\nimport Item from \"./Item\";\r\nimport Neutral from \"../Neutral\";\r\n\r\nclass ItemsBar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            items: props.items,\r\n            backpack: props.backpack,\r\n            neutral: props.neutral,\r\n            iconScale: 0.7,\r\n\r\n            onNeutralChanged: props.onNeutralChanged,\r\n            onItemChanged: props.onItemChanged,\r\n\r\n            abilityStrings: props.abilityStrings,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        //Update if previous props have changed\r\n        if (prevProps.items !== this.props.items) {\r\n            this.setState({\r\n                items: this.props.items,\r\n            });\r\n        }\r\n\r\n        if (prevProps.backpack !== this.props.backpack) {\r\n            this.setState({\r\n                backpack: this.props.backpack,\r\n            });\r\n        }\r\n\r\n        if (prevProps.neutral !== this.props.neutral) {\r\n            this.setState({\r\n                neutral: this.props.neutral,\r\n            });\r\n        }\r\n\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ abilityStrings: this.props.abilityStrings });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        var itemsColWidth = 5;\r\n        var backpackColWidth = 5;\r\n        var neutralColWidth = 2;\r\n        return (\r\n            <div>\r\n                <Row>\r\n                    <Col md={itemsColWidth}>\r\n                        <h6>ITEMS</h6>\r\n                        <div className=\"d-flex flex-wrap\">\r\n                            {\r\n                                this.state.items && this.state.items.map((value) => {\r\n                                    return (\r\n                                        <Item \r\n                                            key={value.slot}\r\n                                            slot={value.slot}\r\n                                            item={value.item} \r\n                                            onItemChanged={this.state.onItemChanged} \r\n                                            abilityStrings={this.state.abilityStrings} />\r\n                                    )\r\n                                })\r\n                            }\r\n                        </div>\r\n                    </Col>\r\n                    <Col md={backpackColWidth}>\r\n                        <h6>BACKPACK</h6>\r\n                        <div className=\"d-flex flex-wrap\">\r\n                            {\r\n                                this.state.backpack && this.state.backpack.map((value) => {\r\n                                    return (\r\n                                        <Item\r\n                                            key={value.slot}\r\n                                            slot={value.slot}\r\n                                            item={value.item}\r\n\r\n                                            isBackpack={true}\r\n                                            onItemChanged={this.state.onItemChanged}\r\n                                            abilityStrings={this.state.abilityStrings} />\r\n                                    )\r\n                                })\r\n                            }\r\n                        </div>\r\n                    </Col>\r\n                    <Col md={neutralColWidth}>\r\n                        <h6>NEUTRAL</h6>\r\n                        {/* Neutral Item */}\r\n                        <div>\r\n                            <Neutral \r\n                                neutralItem={this.state.neutral} \r\n                                onNewNeutralSelected={this.state.onNeutralChanged}\r\n                                abilityStrings={this.state.abilityStrings} />\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ItemsBar;","import ItemsBar from \"./ItemsBar\";\r\n\r\nexport default ItemsBar;","import React, { Component } from 'react';\r\n\r\nimport { EAttributes } from \"../../enums/attributes.js\";\r\n\r\nimport \"./Attributes.css\";\r\nimport { getLocalizedString, replaceStringValue } from '../../utility/data-helpers/language.js';\r\nimport { calculateAttribute } from '../../utility/calculate.js';\r\n\r\nfunction parse(value) {\r\n    return parseFloat(value).toFixed(2);\r\n}\r\n\r\nfunction Attribute(props) {\r\n    return (\r\n        <div className=\"d-flex my-2 align-items-center\">\r\n            <div className={props.isPrimaryAttribute ? \" primary-attribute\" : \"\"}>\r\n                <span className={'attribute ' + props.type} alt=\"attribute\" />\r\n            </div>\r\n            <div className=\"mx-1\">{props.value}</div>\r\n            <div   \r\n                className=\"mx-1\" \r\n                style={{ color: \"green\" }}>{\"+\" + props.additional}</div>\r\n            <div\r\n                style={{ fontSize: \"0.75rem\" }}>\r\n                {\r\n                    replaceStringValue(props.perLevelString, props.per)\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nclass Attributes extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            hero: props.hero,\r\n            level: props.heroLevel,\r\n            items: props.items,\r\n            talents: props.talents,\r\n            neutral: props.neutral,\r\n            abilities: props.abilities,\r\n\r\n            dotaStrings: props.dotaStrings,\r\n            abilityStrings: props.abilityStrings,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                hero: this.props.hero,\r\n                level: this.props.heroLevel,\r\n                items: this.props.items,\r\n                talents: this.props.talents,\r\n                neutral: this.props.neutral,\r\n                abilities: this.props.abilities,\r\n\r\n                dotaStrings: this.props.dotaStrings,\r\n                abilityStrings: this.props.abilityStrings,\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let strengthStats = calculateAttribute(EAttributes.ATTR_STRENGTH, this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents);\r\n        let agilityStats = calculateAttribute(EAttributes.ATTR_AGILITY, this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents);\r\n        let intStats = calculateAttribute(EAttributes.ATTR_INTELLIGENCE, this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents);\r\n        return (\r\n            <div>\r\n                <h5>{getLocalizedString(this.state.dotaStrings, \"DOTA_Tooltip_topbar_stats\")}</h5>\r\n                <h6>{getLocalizedString(this.state.dotaStrings, \"DOTA_Attributes\")}</h6>\r\n                <Attribute \r\n                    type=\"strength\" \r\n                    value={ strengthStats.attribute }\r\n                    additional= { strengthStats.additionalAttribute }\r\n                    per={ strengthStats.perLevel } \r\n                    isPrimaryAttribute={this.state.hero?.AttributePrimary === EAttributes.ATTR_STRENGTH}\r\n                    perLevelString={ getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_StrengthGain\") } />\r\n\r\n                <Attribute \r\n                    type=\"agility\"\r\n                    value={ agilityStats.attribute }\r\n                    additional= { agilityStats.additionalAttribute }\r\n                    per={ agilityStats.perLevel } \r\n                    isPrimaryAttribute={this.state.hero?.AttributePrimary === EAttributes.ATTR_AGILITY} \r\n                    perLevelString={ getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_AgilityGain\") } />\r\n\r\n                <Attribute \r\n                    type=\"intelligence\" \r\n                    value={ intStats.attribute }\r\n                    additional= { intStats.additionalAttribute }\r\n                    per={ intStats.perLevel } \r\n                    isPrimaryAttribute={this.state.hero?.AttributePrimary === EAttributes.ATTR_INTELLIGENCE} \r\n                    perLevelString={ getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_IntelligenceGain\") } />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Attributes;","import Attributes from \"./Attributes\";\r\n\r\nexport default Attributes;","import React, { Component } from 'react';\r\nimport {\r\n    Row, Col\r\n} from \"react-bootstrap\";\r\n\r\nimport {\r\n    calculateHealthRegen,\r\n    calculateManaRegen,\r\n    calculateMainArmor,\r\n    calculateTotalSpellAmp,\r\n    calculateStatusResist,\r\n    calculateMagicResist,\r\n    calculatePhysicalResist,\r\n    calculateEvasion,\r\n    calculateRightClickDamage,\r\n    calculateAttackTime,\r\n    calculateMoveSpeed,\r\n    calculateAttackRange\r\n} from \"../../utility/calculate\";\r\nimport { \r\n    getPrimaryAttributeStats\r\n} from '../../utility/dataHelperHero';\r\nimport {\r\n    getLocalizedString\r\n} from \"../../utility/data-helpers/language\";\r\n\r\nfunction StatArray(props) {\r\n    return (\r\n        <div style={{ backgroundColor: \"#171717\", color: \"white\", fontSize: \"0.8rem\" }} className=\"p-2 h-100\">\r\n            <h6 className=\"ml-auto\">{props.title}</h6>\r\n            {\r\n                props.stats &&\r\n                    props.stats.map((value) => {\r\n                        return (<Row key={value.name}>\r\n                            <Col md={6}>\r\n                                {value.name}\r\n                            </Col>\r\n                            <Col md={6}>\r\n                                {value.value}\r\n                            </Col>\r\n                        </Row>\r\n                        );\r\n                    })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\n/// Gets the attack min/max and formats it for display in UI\r\nfunction formatAttackMinMax(hero, lvl, items, neutral, abilities, talents) {\r\n    let standardAtkDmg = calculateRightClickDamage(hero, lvl, items, neutral, abilities, talents);\r\n    \r\n    let dmgString = `${standardAtkDmg.min} - ${standardAtkDmg.max}`;\r\n    if (standardAtkDmg.additional) {\r\n        dmgString += ` +${standardAtkDmg.additional}`;\r\n    }\r\n    return dmgString;\r\n}\r\n\r\n/// Gets the atk time and formats it to display in UI\r\nfunction formatAttackTime(hero, lvl, items, neutral, abilities, talents) {\r\n    let attackInfo = calculateAttackTime(hero, lvl, items, neutral, abilities, talents);\r\n    return `${attackInfo.attackSpeed} (${attackInfo.attackTime} s)`;\r\n}\r\n\r\nclass Statistics extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            hero: props.hero,\r\n            level: props.heroLevel,\r\n            talents: props.talents,\r\n            items: props.items,\r\n            neutral: props.neutral,\r\n            abilities: props.abilities,\r\n\r\n            dotaStrings: props.dotaStrings,\r\n            abilityStrings: props.abilityStrings,\r\n        };\r\n\r\n        this.updateStatistics = this.updateStatistics.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateStatistics()\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        \r\n        if (prevProps.hero !== this.props.hero) {\r\n            this.setState({ \r\n                hero: this.props.hero \r\n            }, () => {\r\n                this.updateStatistics();\r\n            });\r\n        }\r\n        if (prevProps.items !== this.props.items) {\r\n            this.setState({ \r\n                items: this.props.items \r\n            }, () => {\r\n                this.updateStatistics();\r\n            });\r\n        }\r\n        if (prevProps.neutral !== this.props.neutral) {\r\n            this.setState({ \r\n                neutral: this.props.neutral, \r\n            }, () => {\r\n                this.updateStatistics();\r\n            });\r\n        }\r\n        if (prevProps.talents !== this.props.talents) {\r\n            this.setState({ \r\n                talents: this.props.talents \r\n            }, () => {\r\n                this.updateStatistics();\r\n            });\r\n        }\r\n        if (prevProps.abilities !== this.props.abilities) {\r\n            this.setState({ \r\n                abilities: this.props.abilities \r\n            }, () => {\r\n                this.updateStatistics();\r\n            });\r\n        }\r\n        if (prevProps.heroLevel !== this.props.heroLevel) {\r\n            this.setState({ \r\n                level: this.props.heroLevel \r\n            }, () => {\r\n                this.updateStatistics();\r\n            });\r\n        }\r\n        if (prevProps.dotaStrings !== this.props.dotaStrings) {\r\n            this.setState({ dotaStrings: this.props.dotaStrings });\r\n        }\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ abilityStrings: this.props.abilityStrings });\r\n        }\r\n    }\r\n\r\n    updateStatistics() {\r\n        let armor =  calculateMainArmor(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents);\r\n        let physResist = calculatePhysicalResist(armor);\r\n        this.setState({\r\n            // Attack\r\n            attackSpeed: formatAttackTime(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n            damage: formatAttackMinMax(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n            attackRange: calculateAttackRange(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n            moveSpeed: calculateMoveSpeed(this.state.hero, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n            spellAmp: calculateTotalSpellAmp(this.state.talents, this.state.items, this.state.neutral),\r\n            manaRegen: calculateManaRegen(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n\r\n            // Defence\r\n            armor: armor,\r\n            physicalResist: physResist,\r\n            magicResist: calculateMagicResist(this.state.items, this.state.neutral, this.state.abilities),\r\n            statusResist: calculateStatusResist(this.state.items, this.state.neutral),\r\n            evasion: calculateEvasion(this.state.items, this.state.neutrak, this.state.abilities , this.state.talents),\r\n            healthRegen: calculateHealthRegen(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Row>\r\n                {\r\n                    this.state.hero &&\r\n                    <Col md={6}>\r\n                        <StatArray title={getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_Attack\")} stats={[\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_AttackSpeed\"),\r\n                                value: this.state.attackSpeed\r\n                            },\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_Damage\"), \r\n                                value: this.state.damage \r\n                            },\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_AttackRange\"), \r\n                                value: this.state.attackRange \r\n                            },\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_MoveSpeed\"), \r\n                                value: this.state.moveSpeed \r\n                            },\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_SpellAmp\"), \r\n                                value: this.state.spellAmp + \"%\" \r\n                            },\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_ManaRegenDetail\"), \r\n                                value: this.state.manaRegen \r\n                            },\r\n                        ]} />\r\n                    </Col>\r\n                }   \r\n                {\r\n                    this.state.hero &&\r\n                    <Col md={6}>\r\n                        <StatArray title={getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_Defense\")} stats={[\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_Armor\"), \r\n                                value:  this.state.armor \r\n                            },\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_PhysicalResist\"), \r\n                                value: this.state.physicalResist + \"%\" \r\n                            },\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_MagicResist\"), \r\n                                value: this.state.magicResist + \"%\" \r\n                            },\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_StatusResist\"), \r\n                                value: this.state.statusResist + \"%\" \r\n                            },\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_Evasion\"), \r\n                                value: this.state.evasion + \"%\" \r\n                            },\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_HealthRegenDetail\"), \r\n                                value: this.state.healthRegen \r\n                            },\r\n                        ]}/>\r\n                    </Col>\r\n                }\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Statistics;","import Statistics from \"./Statistics\";\r\n\r\nexport default Statistics;","import React, { Component } from 'react';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport {  faSearch } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nclass HeroSelector extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            heroes: props.heroes,\r\n            filteredHeroes: props.heroes,\r\n            onSelectedHero: props.onSelectedHero,\r\n        };\r\n\r\n        this.onSearchChanged = this.onSearchChanged.bind(this);\r\n    }\r\n\r\n    onSearchChanged(e) {\r\n        var searchTerm = e.target.value;\r\n        var filtered = this.state.heroes;\r\n        filtered = filtered.filter((hero) => {\r\n            return hero.name.indexOf(searchTerm.toLowerCase()) !== -1;\r\n        });\r\n\r\n        this.setState({\r\n            filteredHeroes: filtered,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        var iconScale = 0.5;\r\n        return (\r\n            <div className=\"hero-card\">\r\n                <div className=\"hero-card header d-flex\">\r\n                    <div className=\"d-flex\">\r\n                        <h5 className=\"my-auto ml-2\">CHOOSE A HERO</h5>\r\n                        <div className=\"ml-auto p-1\">\r\n                            <Form.Control type=\"text\" placeholder=\"Search...\" onChange={this.onSearchChanged} />\r\n                        </div>\r\n                        <FontAwesomeIcon icon={faSearch} className=\"my-auto mr-2\" />\r\n                    </div>\r\n                </div>\r\n                <div className=\"content\">\r\n                    <div className=\"d-flex flex-wrap\">\r\n                        {\r\n                            this.state.filteredHeroes && this.state.filteredHeroes.map((value) => {\r\n                                return (\r\n                                    <div\r\n                                        key={value.name}  \r\n                                        onClick={this.state.onSelectedHero}\r\n                                        className=\"m-1\"\r\n                                        style={{ height: `calc(72px * ${iconScale})`, width: `calc(128px * ${iconScale})` }}>\r\n                                        <span \r\n                                            className={`hero-icon-big hero-icon-big-${value.name}_png`} \r\n                                            style={{ transformOrigin: \"top left\", transform: `scale(${iconScale}, ${iconScale})` }}\r\n                                            data-heroname={value.displayName}\r\n                                            data-hero={value.name} />\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HeroSelector;","import ChangeHeroBtn from \"./ChangeHeroBtn\";\r\n\r\nexport default ChangeHeroBtn;","import React, { Component } from 'react';\r\nimport {\r\n    Button\r\n} from \"react-bootstrap\";\r\nimport Popup from \"reactjs-popup\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport HeroSelector from \"./HeroSelector\";\r\n\r\nimport { DOTAHeroes } from \"../../data/dota2/json/npc_heroes.json\";\r\n\r\nimport \"./ChangeHeroBtn.css\";\r\n\r\nclass ChangeHeroBtn extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        // Filter and remove any unwanted heroes\r\n        var selectableHeroes = Object.keys(DOTAHeroes).filter((value) => {\r\n            var key = value.toLowerCase();\r\n            if (key !== \"version\" && key !== \"npc_dota_hero_base\" && key !== \"npc_dota_hero_target_dummy\") {\r\n                return true;\r\n            }\r\n            return false;\r\n        })\r\n        // Map only necessary data\r\n        selectableHeroes = selectableHeroes.map((key) => {\r\n            if (DOTAHeroes[key].workshop_guide_name) {\r\n                return {\r\n                    displayName: DOTAHeroes[key].workshop_guide_name,\r\n                    name: key,\r\n                    alias: DOTAHeroes[key].NameAliases ? DOTAHeroes[key].NameAliases.split(',') : null,\r\n                };\r\n            }\r\n        });\r\n        // sort by name property\r\n        selectableHeroes.sort((a, b) => (a.name > b.name) ? 1 : -1)\r\n\r\n        this.state = {\r\n            open: false,\r\n            heroes: selectableHeroes,\r\n\r\n            onSelectHero: props.onSelectHero,\r\n        };\r\n\r\n        this.onToggleHeroSelect = this.onToggleHeroSelect.bind(this);\r\n        this.onSelectHero = this.onSelectHero.bind(this);\r\n    }\r\n\r\n    onToggleHeroSelect(e) {\r\n        this.setState({\r\n            open: !this.state.open,\r\n        });\r\n    }\r\n\r\n    onSelectHero (e) {\r\n        //e.persist();\r\n        //console.log(e);\r\n        this.setState({\r\n            open: !this.state.open,\r\n        });\r\n        \r\n        var hero = e.target.dataset.hero;\r\n        this.state.onSelectHero(hero);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Popup \r\n                    trigger={isOpen => (\r\n                        <Button onClick={this.onToggleHeroSelect}><FontAwesomeIcon icon={faPencilAlt} /></Button>\r\n                    )} \r\n                    position=\"right top\"\r\n                    contentStyle={{ width: \"750px\" }}>\r\n                     <HeroSelector \r\n                        heroes={this.state.heroes} \r\n                        onSelectedHero={this.onSelectHero} \r\n                         />\r\n                </Popup>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChangeHeroBtn;","import React, { Component } from 'react';\r\nimport {\r\n    Row,\r\n    Col\r\n} from \"react-bootstrap\";\r\n\r\nimport {\r\n    getTalentInfoFromName,\r\n} from \"../../utility/dataHelperTalents\";\r\nimport { \r\n    tryGetTalentLocalizedString,\r\n    replaceStringValue,\r\n    getLocalizedString\r\n} from \"../../utility/data-helpers/language\";\r\n\r\nfunction isTalentSelected (selectedTalents, talent) {\r\n    return selectedTalents?.includes(talent);\r\n}\r\n\r\nclass TalentRow extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            leftTalent: props.leftTalent,\r\n            rightTalent: props.rightTalent,\r\n            level: props.lvl,\r\n\r\n            selectedTalents: this.props.selectedTalents,\r\n            onTalentSelected: this.props.onTalentSelected,\r\n            onTalentUnselected: this.props.onTalentUnselected,\r\n\r\n            abilityStrings: this.props.abilityStrings,\r\n        };\r\n\r\n        this.onSelectTalent = this.onSelectTalent.bind(this);\r\n        this.getTalentDisplayName = this.getTalentDisplayName.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.leftTalent !== this.props.leftTalent) {\r\n            this.setState({ leftTalent: this.props.leftTalent });\r\n        }\r\n\r\n        if(prevProps.rightTalent !== this.props.rightTalent) {\r\n            this.setState({ rightTalent: this.props.rightTalent });\r\n        }\r\n\r\n        if (prevProps.lvl !== this.props.lvl) {\r\n            this.setState({ level: this.props.lvl });\r\n        }\r\n\r\n        if (prevProps.selectedTalents !== this.props.selectedTalents) {\r\n            this.setState({ selectedTalents: this.props.selectedTalents });\r\n        }\r\n\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ abilityStrings: this.props.abilityStrings });\r\n        }\r\n    }\r\n\r\n    onSelectTalent(e) {\r\n        var selectedTalent = e.target.dataset.talent;\r\n        // if clicked twice, unselect the talent\r\n        if (isTalentSelected(this.state.selectedTalents, selectedTalent)) {\r\n            this.state.onTalentUnselected(selectedTalent);\r\n        } else {\r\n            this.state.onTalentSelected(selectedTalent);\r\n        }\r\n    }\r\n\r\n    getTalentDisplayName (talent) {\r\n        let talentInfo = getTalentInfoFromName(talent);\r\n        if (!talentInfo) {\r\n            return \"Unknown Talent\";\r\n        }\r\n\r\n        let displayName = getLocalizedString(this.state.abilityStrings, \"DOTA_Tooltip_ability_\" + talent); \r\n        if (displayName && talentInfo && talentInfo.AbilitySpecial) {\r\n            displayName = replaceStringValue(displayName, talentInfo.AbilitySpecial[0].value)\r\n        }\r\n\r\n        return displayName;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Row className=\"my-1 py-2\" style={{ backgroundColor: \"rgb(24, 30, 33)\"}}>\r\n                {/* Left Talent */}\r\n                <Col \r\n                    md={5}\r\n                    className=\"text-center\"\r\n                    style={{ color: isTalentSelected(this.state.selectedTalents, this.state.leftTalent) ? \"#c4a66f\" : \"white\" }}>\r\n                    <div onClick={this.onSelectTalent} data-talent={this.state.leftTalent}>\r\n                        {\r\n                            this.getTalentDisplayName(this.state.leftTalent)\r\n                        }\r\n                    </div>\r\n                </Col>\r\n                {/* Talent Level */}\r\n                <Col md={2}>\r\n                    <h6 \r\n                        className=\"text-center\"\r\n                        style={{ color: \"#e7d291\"}}>\r\n                        {this.state.level}\r\n                    </h6>\r\n                </Col>\r\n                {/* Right Talent */}\r\n                <Col \r\n                    md={5}\r\n                    className=\"text-center\"\r\n                    style={{ color: isTalentSelected(this.state.selectedTalents, this.state.rightTalent) ? \"#c4a66f\" : \"white\" }}>\r\n                    <div onClick={this.onSelectTalent} data-talent={this.state.rightTalent}>\r\n                        {\r\n                            this.getTalentDisplayName(this.state.rightTalent)\r\n                        }\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TalentRow;\r\n","import TalentTree from \"./TalentTree\";\r\n\r\nexport default TalentTree;","import React, { Component } from 'react';\r\n\r\nimport TalentRow from \"./TalentRow\";\r\n\r\nclass TalentTree extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            talents: this.props.talents,\r\n            selectedTalents: this.props.selectedTalents,\r\n\r\n            onTalentSelected: this.props.onTalentSelected,\r\n            onTalentUnselected: this.props.onTalentUnselected,\r\n\r\n            abilityStrings: this.props.abilityStrings,\r\n        };\r\n        this.findSelectedTalent = this.findSelectedTalent.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(prevProps.talents !== this.props.talents) {\r\n            this.setState({\r\n                talents: this.props.talents,\r\n            });\r\n        }\r\n\r\n        if (prevProps.selectedTalents !== this.props.selectedTalents) {\r\n            this.setState({ selectedTalents: this.props.selectedTalents });\r\n        }\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ abilityStrings: this.props.abilityStrings });\r\n        }\r\n    }\r\n\r\n    findSelectedTalent(leftTalent, rightTalent) {\r\n        if (this.state.selectedTalents && this.state.selectedTalents.length > 0) {\r\n            var matchTalent = this.state.selectedTalents.find((val) => {\r\n                if (val.name === leftTalent) {\r\n                    return leftTalent;\r\n                } else if (val.name === rightTalent) {\r\n                    return rightTalent;\r\n                }\r\n                return null;\r\n            });\r\n            return matchTalent?.name;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h6 className=\"text-center\">TALENT TREE</h6>\r\n                {/* <img src=\"/images/dota2/talent.jpg\" alt=\"talent tree\" /> */}\r\n                <div \r\n                    className=\"mr-2\"\r\n                    style={{ fontSize: \"0.8rem\" }}>\r\n                        {\r\n                            this.state.talents && this.state.talents.map((talentInfo) => {\r\n                                return <TalentRow \r\n                                                key={talentInfo.lvl}\r\n                                                lvl={talentInfo.lvl}\r\n                                                leftTalent={talentInfo.leftTalent} \r\n                                                rightTalent={talentInfo.rightTalent} \r\n                                                selectedTalents={this.state.selectedTalents}\r\n                                                onTalentSelected={this.state.onTalentSelected}\r\n                                                onTalentUnselected={this.state.onTalentUnselected} \r\n                                                \r\n                                                abilityStrings={this.state.abilityStrings} />\r\n                            })\r\n                        }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TalentTree;","import HealthManaBar from \"./HealthManaBar\";\r\n\r\nexport default HealthManaBar;","import React, { Component } from 'react';\r\n\r\nimport {\r\n    calculateHealth,\r\n    calculateMana,\r\n    calculateHealthRegen,\r\n    calculateManaRegen,\r\n} from \"../../utility/calculate\";\r\nimport { EAttributes } from \"../../enums/attributes\";\r\n\r\nimport \"./style.css\";\r\n\r\nclass HealthManaBar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            hero: props.hero,\r\n            level: props.heroLevel,\r\n            items: props.items,\r\n            talents: props.talents,\r\n            neutral: props.neutral,\r\n            abilities: props.abilities,\r\n\r\n            maxHealth: 0,\r\n            maxMana: 0,\r\n        }\r\n\r\n        this.updateBar = this.updateBar.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateBar();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                hero: this.props.hero,\r\n                level: this.props.heroLevel,\r\n                items: this.props.items,\r\n                talents: this.props.talents,\r\n                neutral: this.props.neutral,\r\n                abilities: this.props.abilities,\r\n\r\n                maxHealth: 0,\r\n                maxMana: 0,\r\n            }, () => this.updateBar());\r\n        }\r\n    }\r\n\r\n    updateBar() {\r\n        this.setState({\r\n            maxHealth: calculateHealth(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n            maxMana: calculateMana(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"bar health d-flex\">\r\n                    <h6 className=\"my-auto mx-auto\">{this.state.maxHealth} / {this.state.maxHealth}</h6>\r\n                    <div className=\"my-auto mr-1\">\r\n                        { \"+\" + calculateHealthRegen(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents) }\r\n                    </div>\r\n                </div>\r\n                <div className=\"bar mana d-flex\">\r\n                    <h6 className=\"my-auto mx-auto\">{this.state.maxMana} / {this.state.maxMana}</h6>\r\n                    <div className=\"my-auto mr-1\">\r\n                        { \"+\" + calculateManaRegen(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents) }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HealthManaBar;","import React, { Component } from 'react';\r\nimport { \r\n    Button, \r\n    Form\r\n} from 'react-bootstrap';\r\n\r\nconst MAX_LEVEL = 30;\r\nconst MIN_LEVEL = 1;\r\n\r\nfunction ModifyBtn (props) {\r\n    return (\r\n        <Button \r\n            className=\"py-1\"\r\n            variant=\"outline-secondary\" \r\n            onClick={props.onClick}>\r\n            { props.text }\r\n        </Button>\r\n    );\r\n}\r\n\r\nclass LevelSelector extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            level: props.heroLevel,\r\n            onHeroLevelChanged: props.onHeroLevelChanged,\r\n        };\r\n\r\n        this.onIncrementHeroLevel = this.onIncrementHeroLevel.bind(this);\r\n        this.onDecrementHeroLevel = this.onDecrementHeroLevel.bind(this);\r\n        this.onLvlInputChanged = this.onLvlInputChanged.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.heroLevel !== this.props.heroLevel) {\r\n            this.setState({\r\n                level: this.props.heroLevel,\r\n            });\r\n        }\r\n    }\r\n\r\n    onIncrementHeroLevel() {\r\n        var newLevel = this.state.level;\r\n        newLevel += 1;\r\n\r\n        if (newLevel >= MAX_LEVEL) {\r\n            newLevel = MAX_LEVEL;\r\n        }\r\n\r\n        this.state.onHeroLevelChanged(newLevel);\r\n    }\r\n\r\n    onDecrementHeroLevel() {\r\n        var newLevel = this.state.level;\r\n        newLevel -= 1;\r\n\r\n        if (newLevel < MIN_LEVEL) {\r\n            newLevel = MIN_LEVEL;\r\n        }\r\n\r\n        this.state.onHeroLevelChanged(newLevel);\r\n    }\r\n\r\n    onLvlInputChanged(e) {\r\n        var lvl = parseInt(e.target.value);\r\n        if (lvl) {\r\n            if (lvl > MAX_LEVEL) {\r\n                lvl = MAX_LEVEL;\r\n            }\r\n            else if (lvl < MIN_LEVEL) {\r\n                lvl = MIN_LEVEL;\r\n            }\r\n        } else {\r\n            lvl = MIN_LEVEL;\r\n        }\r\n\r\n        this.state.onHeroLevelChanged(lvl);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"mx-5\">\r\n                <h6>HERO LEVEL</h6>\r\n                <div className=\"d-flex\">\r\n                    <ModifyBtn \r\n                        onClick={this.onDecrementHeroLevel} \r\n                        text=\"-\" />\r\n                    <Form.Control\r\n                        className=\"mx-3\" \r\n                        style={{ width: \"75px\" }}\r\n                        placeholder=\"lvl\" \r\n                        type=\"number\" \r\n                        value={this.state.level} \r\n                        onChange={this.onLvlInputChanged} />\r\n                    <ModifyBtn \r\n                        onClick={this.onIncrementHeroLevel} \r\n                        text=\"+\" />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LevelSelector;","import LevelSelector from \"./LevelSelector\";\r\n\r\nexport default LevelSelector;","import React, { Component } from 'react';\r\nimport {\r\n    Container,\r\n    Row,\r\n    Col,\r\n} from 'react-bootstrap';\r\nimport { connect } from \"react-redux\";\r\n\r\nimport {\r\n    SELECTED_HERO,\r\n    SELECTED_ITEM,\r\n    SELECTED_NEUTRAL,\r\n    SELECTED_BACKPACK_ITEM,\r\n    SELECTED_TALENT,\r\n    UNSELECTED_TALENT,\r\n    NEW_HERO_LEVEL,\r\n    ENEMY_SELECTED_TALENT\r\n} from \"../../constants/actionTypes\";\r\n\r\nimport { \r\n    getLocalizedString\r\n} from '../../utility/data-helpers/language';\r\n\r\nimport Abilities from \"../Abilities\";\r\nimport ItemsBar from \"../ItemsBar\";\r\nimport Attributes from \"../Attributes\";\r\nimport Statistics from \"../Statistics\";\r\nimport ChangeHeroBtn from \"../ChangeHeroBtn\";\r\nimport TalentTree from \"../TalentTree\";\r\nimport HealthManaBar from \"../HealthManaBar\";\r\nimport LevelSelector from \"../LevelSelector\";\r\nimport EnemyHero from '../EnemyHero';\r\n\r\nimport \"../../css/dota_hero_icons.css\";\r\nimport \"../../css/dota_attributes.css\";\r\nimport \"../../css/dota_items.css\";\r\nimport \"../../css/dota_hero_icons_big.css\";\r\nimport \"./Calculator.css\";\r\n\r\nclass Calculator extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.onHeroSelected = this.onHeroSelected.bind(this);\r\n        this.onItemSelected = this.onItemSelected.bind(this);\r\n        this.onNeutralSelected = this.onNeutralSelected.bind(this);\r\n        this.onTalentSelected = this.onTalentSelected.bind(this);\r\n        this.onTalentUnselected = this.onTalentUnselected.bind(this);\r\n        this.onHeroLevelChanged = this.onHeroLevelChanged.bind(this);\r\n    }\r\n\r\n    onHeroSelected(heroName) {\r\n        //var targetHero = DOTAHeroes[heroName];\r\n        console.log(`${SELECTED_HERO}: ${heroName}`);\r\n\r\n        this.props.dispatch({ type: SELECTED_HERO, value: heroName });\r\n    }\r\n\r\n    onItemSelected (item) {\r\n        if (item.isBackpack) \r\n        {\r\n            console.log(`${SELECTED_BACKPACK_ITEM}: Slot: ${item.slot} Item: ${item.item}`);\r\n            this.props.dispatch({ type: SELECTED_BACKPACK_ITEM, value: item });\r\n        }\r\n        else\r\n        {\r\n            console.log(`${SELECTED_ITEM}: Slot: ${item.slot} Item: ${item.item}`);\r\n            this.props.dispatch({ type: SELECTED_ITEM, value: item });\r\n        }\r\n    }\r\n\r\n    onNeutralSelected(neutralItem) {\r\n        console.log(`${SELECTED_NEUTRAL}: ${neutralItem.item}`);\r\n        this.props.dispatch({ type: SELECTED_NEUTRAL, value: neutralItem });\r\n    }\r\n\r\n    onTalentSelected (talent) {\r\n        console.log(`${SELECTED_TALENT}: ${talent}`);\r\n        this.props.dispatch({ type: SELECTED_TALENT, value: talent });\r\n    }\r\n\r\n    onTalentUnselected (talent) {\r\n        console.log(`${UNSELECTED_TALENT}: ${talent}`);\r\n        this.props.dispatch({ type: UNSELECTED_TALENT, value: talent });\r\n    }\r\n\r\n    onEnemyTalentSelected (enemy, talent) {\r\n        console.log(`${ENEMY_SELECTED_TALENT}: ${enemy}, ${talent}`);\r\n        this.props.dispatch({ type: ENEMY_SELECTED_TALENT, value: talent });\r\n    }\r\n\r\n    onHeroLevelChanged(newLevel) {\r\n        //console.log(`${NEW_HERO_LEVEL}: ${newLevel}`);\r\n        this.props.dispatch({ type: NEW_HERO_LEVEL, value: newLevel });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"mt-3\">\r\n                <Container fluid=\"md\">\r\n                    {/* Top row, Inital Hero Information */}\r\n                    <Row>\r\n                        {/* Main Hero Info */}\r\n                        <Col className=\"my-auto\" md={3}>\r\n                            <span \r\n                                className={`hero-icon-big hero-icon-big-${this.props.selectedHeroName}_png mx-3`}\r\n                                height={50}\r\n                                alt=\"hero banner\" />\r\n                            <div className=\"d-flex mt-3\">\r\n                                <h5 className=\"my-auto px-3\">\r\n                                    { getLocalizedString(this.props.dotaStrings, this.props.selectedHeroName) }\r\n                                </h5>\r\n                                <ChangeHeroBtn onSelectHero={this.onHeroSelected}/>\r\n                            </div>\r\n                        </Col>\r\n                        {/* Small Stats */}\r\n                        <Col md={3}>\r\n                            <Attributes \r\n                                hero={this.props.selectedHero} \r\n                                heroLevel={this.props.heroLevel}\r\n                                talents={this.props.selectedTalents}\r\n                                items={this.props.items}\r\n                                neutral={this.props.neutralItem} \r\n                                abilities={this.props.heroAbilities} \r\n                                abilityStrings={this.props.abilityStrings}\r\n                                dotaStrings={this.props.dotaStrings}/>\r\n                        </Col>\r\n                        {/* Final Attack/Defence Stats */}\r\n                        <Col md={5}>\r\n                            <Statistics \r\n                                hero={this.props.selectedHero} \r\n                                heroLevel={this.props.heroLevel}\r\n                                talents={this.props.selectedTalents}\r\n                                items={this.props.items}\r\n                                neutral={this.props.neutralItem} \r\n                                abilities={this.props.heroAbilities} \r\n                                abilityStrings={this.props.abilityStrings}\r\n                                dotaStrings={this.props.dotaStrings}  />\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    {/* Health/Mana and Hero Lvl  */}\r\n                    <Row className=\"my-2 py-2\">\r\n                        <Col md={8}>\r\n                            <HealthManaBar \r\n                                hero={this.props.selectedHero} \r\n                                heroLevel={this.props.heroLevel}\r\n                                talents={this.props.selectedTalents}\r\n                                items={this.props.items}\r\n                                neutral={this.props.neutralItem} \r\n                                abilities={this.props.heroAbilities} />\r\n                        </Col>\r\n                        <Col md={4}>\r\n                            <LevelSelector \r\n                                heroLevel={ this.props.heroLevel } \r\n                                onHeroLevelChanged={ this.onHeroLevelChanged }/>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    {/* Items/Talent */}\r\n                    <Row className=\"items-row my-4\">\r\n                        <Col md={7}>\r\n                            <ItemsBar\r\n                                items={this.props.items} \r\n                                backpack={this.props.backpack} \r\n                                neutral={this.props.neutralItem} \r\n                                onItemChanged={this.onItemSelected}\r\n                                onNeutralChanged={this.onNeutralSelected} \r\n                                abilityStrings={this.props.abilityStrings} />\r\n                        </Col>\r\n                        <Col md={5}>\r\n                            <TalentTree\r\n                                talents={this.props.heroTalents} \r\n                                selectedTalents={this.props.selectedTalents}\r\n                                onTalentSelected={this.onTalentSelected} \r\n                                onTalentUnselected={this.onTalentUnselected} \r\n                                abilityStrings={this.props.abilityStrings} />\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    {/* Abilities */}\r\n                    <Abilities \r\n                        heroName={this.props.selectedHeroName}\r\n                        abilities={this.props.heroAbilities}\r\n                        items={this.props.items}\r\n                        neutral={this.props.neutralItem} \r\n                        selectedTalents={this.props.selectedTalents} \r\n                        abilityStrings={this.props.abilityStrings}\r\n                        dotaStrings={this.props.dotaStrings} \r\n                        displayDamage={true} />\r\n\r\n                    {/* Padding Separator */}\r\n                    {/* <div className=\"py-5\" /> */}\r\n                    \r\n                    {/* Enemy Hero */}\r\n                    {/* <EnemyHero \r\n                        hero={this.props.selectedEnemyHero}\r\n                        heroName={this.props.selectedEnemyHeroName} \r\n                        heroAbilities={this.props.enemyHeroAbilities} \r\n                        heroItems={this.props.enemyHeroItems}\r\n                        heroTalents={this.props.enemyHeroTalents} \r\n                        selectedTalents={this.props.selectedEnemyTalents}\r\n                        neutral={this.props.enemyNeutralItem}\r\n                        abilityStrings={this.props.abilityStrings} \r\n                        dotaStrings={this.props.dotaStrings} /> */}\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    selectedHero: state.hero.selectedHero,\r\n    selectedHeroName: state.hero.selectedHeroName,\r\n    \r\n    heroAbilities: state.hero.heroAbilities,\r\n    heroTalents: state.hero.heroTalents,\r\n    heroLevel: state.hero.heroLevel,\r\n\r\n    items: state.hero.items,\r\n    backpack: state.hero.backpack,\r\n    neutralItem: state.hero.neutralItem,\r\n    selectedTalents: state.hero.selectedTalents,\r\n\r\n    abilityStrings: state.language.stringsAbilities,\r\n    dotaStrings: state.language.stringsDota,\r\n\r\n    selectedEnemyHero: state.enemy.selectedEnemyHero,\r\n    selectedEnemyHeroName: state.enemy.selectedEnemyHeroName,\r\n    enemyHeroTalents: state.enemy.enemyHeroTalents,\r\n    enemyHeroAbilities: state.enemy.enemyHeroAbilities,\r\n    selectedEnemyTalents: state.enemy.selectedEnemyTalents,\r\n    enemyHeroItems: state.enemy.enemyHeroItems,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Calculator);","import React, { Component } from 'react';\r\nimport {\r\n    Row,\r\n    Col,\r\n} from 'react-bootstrap';\r\n\r\nimport TalentTree from \"../TalentTree\";\r\nimport ItemsBar from '../ItemsBar/ItemsBar';\r\nimport Abilities from '../Abilities';\r\nimport HealthManaBar from \"../HealthManaBar\";\r\n\r\nclass EnemyHero extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            enemyHero: this.props.hero,\r\n            enemyHeroName: this.props.heroName,\r\n            heroTalents: this.props.heroTalents,\r\n            heroAbilities: this.props.heroAbilities,\r\n            selectedTalents: this.props.selectedTalents,\r\n            heroItems: this.props.heroItems,\r\n            heroNeutral: this.props.neutral,\r\n\r\n            abilityStrings: this.props.abilityStrings,\r\n            dotaStrings: this.props.dotaStrings,\r\n\r\n            heroLevel: 0,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.hero !== this.props.hero) {\r\n            this.setState({ enemyHero: this.props.hero });\r\n        }\r\n        if (prevProps.heroName !== this.props.heroName) {\r\n            this.setState({ enemyHeroName: this.props.heroName });\r\n        }\r\n        if (prevProps.heroTalents !== this.props.heroTalents) {\r\n            this.setState({ heroTalents: this.props.heroTalents });\r\n        }\r\n        if (prevProps.heroAbilities !== this.props.heroAbilities) {\r\n            this.setState({ heroAbilities: this.props.heroAbilities });\r\n        }\r\n        if (prevProps.selectedTalents !== this.props.selectedTalents) {\r\n            this.setState({ selectedTalents: this.props.selectedTalents });\r\n        }\r\n        if (prevProps.heroItems !== this.props.heroItems) {\r\n            this.setState({ heroItems: this.props.heroItems });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Row>\r\n                    <Col md={4}>\r\n                        {this.state.enemyHeroName}\r\n                    </Col>\r\n                    <Col md={8}>\r\n                        <HealthManaBar \r\n                                baseStrength ={ this.state.enemyHero?.AttributeBaseStrength }\r\n                                strengthGain={ this.state.enemyHero?.AttributeStrengthGain } \r\n                                baseIntelligence={this.state.enemyHero?.AttributeBaseIntelligence }\r\n                                intelligenceGain={ this.state.enemyHero?.AttributeIntelligenceGain }\r\n                                heroLevel={ this.state.heroLevel } \r\n                                primaryAttribute={ this.state.enemyHero?.AttributePrimary }\r\n                                bonusHealthRegen={ this.state.enemyHero?.StatusHealthRegen }\r\n                                bonusManaRegen={ this.state.enemyHero?.StatusManaRegen } />\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"\">\r\n                    {/* Talents */}\r\n                    <Col md={5}>\r\n                        <TalentTree\r\n                            talents={this.state.heroTalents} \r\n                            selectedTalents={this.state.selectedTalents}\r\n                            onTalentSelected={this.onTalentSelected} \r\n                            onTalentUnselected={this.onTalentUnselected} \r\n                            abilityStrings={this.state.abilityStrings} />\r\n                    </Col>\r\n                    {/* Abilities */}\r\n                    \r\n                    {/* Items */}\r\n                    <Col md={5}>\r\n                        <ItemsBar\r\n                            items={this.state.heroItems}  \r\n                            neutral={this.props.neutralItem}\r\n                            onItemChanged={this.onItemSelected}\r\n                            onNeutralChanged={this.onNeutralSelected} />\r\n                    </Col>\r\n                </Row>\r\n                <Abilities \r\n                        abilities={this.state.heroAbilities}\r\n                        items={this.state.heroItems}\r\n                        neutral={this.props.neutralItem} \r\n                        selectedTalents={this.props.selectedTalents} \r\n                        abilityStrings={this.props.abilityStrings}\r\n                        dotaStrings={this.state.dotaStrings} \r\n                        displayDamage={false} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EnemyHero;","import Calculator from \"./Calculator\";\r\n\r\nexport default Calculator;","import Home from \"./Home\";\r\n\r\nexport default Home;","import React, { Component } from 'react';\r\nimport {\r\n    Container,\r\n    Button\r\n} from \"react-bootstrap\";\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nclass Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            redirect: \"\",\r\n        };\r\n\r\n        this.onGoToCalc = this.onGoToCalc.bind(this);\r\n    }\r\n\r\n    onGoToCalc() {\r\n        this.setState({ redirect: \"/app\" });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Container>\r\n                    <div style={{ height: \"300px\" }}>\r\n                        <h1 \r\n                            className=\"text-center my-5 pt-3\">\r\n                                foresight\r\n                        </h1>\r\n                        <div className=\"text-center\">\r\n                            <h6 className=\"py-2\">work in progress</h6>\r\n                            <Button\r\n                                className=\"mx-auto\"\r\n                                onClick={this.onGoToCalc}>\r\n                                to app\r\n                            </Button>\r\n                        </div>\r\n                        \r\n                    </div>\r\n                </Container>\r\n                {\r\n                    this.state.redirect && <Redirect to={this.state.redirect} />\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import App from \"./App\";\r\n\r\nexport default App;","import React, { Component } from 'react';\nimport { \n    HashRouter,\n    Route,\n    Switch\n} from 'react-router-dom';\n\nimport Navigation from \"../Navigation\";\nimport FourOhFour from \"../FourOhFour\";\nimport Calculator from \"../Calculator\";\nimport Home from \"../Home\";\n\nclass App extends Component {\n    render() {\n        return (\n            <HashRouter>\n                <Navigation />\n\n                <Switch>\n                    <Route exact path=\"/\" component={Home} />\n\n                    <Route exact path=\"/app\" component={Calculator} />\n\n                    <Route component={FourOhFour} />\n                </Switch>\n            </HashRouter>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./store\";\n\nimport App from './components/App/';\n\n// Import Bootstrap component styles\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst app = (\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>\n);\n\nReactDOM.render(app, document.getElementById('root') );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}