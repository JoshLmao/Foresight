{"version":3,"sources":["serviceWorker.js","enums/attributes.js","utility/dataHelperHero.js","reducers/initialState.js","utils.js","reducers/hero.js","constants/actionTypes.js","enums/languages.js","reducers/language.js","store/index.js","reducers/enemy.js","components/LanguageSelect/LanguageSelect.jsx","components/LanguageSelect/index.js","components/Navigation/Navigation.jsx","components/Navigation/index.js","components/FourOhFour/index.js","components/FourOhFour/FourOhFour.jsx","enums/abilities.js","utility/dataHelperTalents.js","utility/dataHelperAbilities.js","utility/dataHelperItems.js","utility/data-helpers/language.js","utility/generalMath.js","enums/hero.js","utility/calculate.js","components/Abilities/DamageOutput.jsx","components/Abilities/Cooldown.jsx","components/Abilities/ManaCost.jsx","components/Abilities/AbilityDetails.jsx","components/Abilities/Abilities.jsx","components/Abilities/index.js","utility/spriteHelper.js","components/ItemsBar/ItemSelector.jsx","enums/items.js","components/ItemTooltip/ItemTooltip.jsx","components/ItemTooltip/index.js","components/ItemsBar/Item.jsx","components/Neutral/NeutralItemSelector.jsx","components/Neutral/index.js","components/Neutral/Neutral.jsx","components/ItemsBar/ItemsBar.jsx","components/ItemsBar/index.js","components/Attributes/Attributes.jsx","components/Attributes/index.js","components/Statistics/Statistics.jsx","components/Statistics/index.js","components/ChangeHeroBtn/HeroSelector.jsx","components/ChangeHeroBtn/index.js","components/ChangeHeroBtn/ChangeHeroBtn.jsx","components/TalentTree/TalentRow.jsx","components/TalentTree/index.js","components/TalentTree/TalentTree.jsx","components/HealthManaBar/index.js","components/HealthManaBar/HealthManaBar.jsx","components/LevelSelector/LevelSelector.jsx","components/LevelSelector/index.js","components/Calculator/Calculator.jsx","components/EnemyHero/EnemyHero.jsx","components/Calculator/index.js","components/Home/index.js","components/Home/Home.jsx","components/App/index.js","components/App/App.jsx","index.js"],"names":["Boolean","window","location","hostname","match","EAttributes","getSpecificAttributeStats","specificAttribute","heroInfo","basePrimary","primaryPerLevel","parseInt","AttributeBaseStrength","parseFloat","AttributeStrengthGain","AttributeBaseAgility","AttributeAgilityGain","AttributeBaseIntelligence","AttributeIntelligenceGain","console","error","base","perLevel","getHeroTalents","keys","Object","talents","i","length","includes","ability","push","mappedTalents","lvlRow","lvl","rightTalent","leftTalent","sort","a","b","getAllHeroAbilities","abilities","getPrimaryAttribute","hero","AttributePrimary","isHeroAttackCapability","atkCapability","AttackCapabilities","split","initialState","selectedHero","DOTAHeroes","npc_dota_hero_abaddon","selectedHeroName","heroAbilities","heroAbilityLevels","map","val","index","level","heroTalents","selectedTalents","heroLevel","items","slot","item","backpack","neutralItem","lang","stringsAbilities","EngAbilStrings","stringsDota","EngDotaStrings","selectedEnemyHero","npc_dota_hero_target_dummy","selectedEnemyHeroName","modelString","dashSplit","parseNameFromModel","Model","enemyHeroTalents","enemyHeroAbilities","selectedEnemyTalents","enemyHeroItems","replaceUpdatedAbilityLevel","abilityLevelArray","newAbilityLevel","newArray","filter","replaceUpdatedItem","itemArray","newItem","extra","getNewTalentArray","talentArray","newTalent","value","removeTalent","unselectedTalent","talent","reducer","state","action","type","allHeroAbilities","abil","ELanguages","SCHINESE","ENGLISH","getAbilityStrings","langCode","SChineseAbilStrings","getGeneralStrings","SChineseDotaStrings","allReducers","combineReducers","language","log","enemy","store","createStore","LanguageSelect","props","onLanguageChanged","bind","event","newLanguage","target","this","dispatch","Form","Control","className","as","onChange","defaultValue","values","key","Component","connect","pkg","require","Navigation","Navbar","Container","Brand","to","Link","name","Nav","style","fontSize","eventKey","disabled","version","dotaVersion","Toggle","aria-controls","Collapse","id","href","Button","variant","icon","faGithub","FourOhFour","EDamageType","EAbilityBehaviour","ESpellImmunityType","ESpecialBonusOperation","tryGetTalentSpecialAbilityValue","specialValueKey","talentInfo","getAbilityInfoFromName","specialValue","getAbilitySpecialAbilityValue","talentsInclude","targetTalent","abilityName","DOTAAbilities","tryGetAbilitySpecialAbilityValue","abilityLevel","abilityInfo","specialAbilityKey","AbilitySpecial","matchingKey","find","element","specialAbilityInfo","dataValue","var_type","parseAbilityValueByLevel","abilValue","splitValues","isCooldownTalent","isTalent","isDamageTalent","isCastRangeTalent","lowerCasePhrase","abilityString","DOTAEngAbilityStrings","Tokens","toLowerCase","tryParseAbilitySpecialValue","abilSpecialinfo","tryGetAbilityInfoValueFromKey","abilInfoKey","getItemInfoFromName","itemName","DOTAItems","getItemSpecialAbilityValue","itemInfo","specialAbilityValueKey","tryGetItemSpecialValue","tryGetNeutralSpecialValue","neutral","foundNeutralInfo","primaryAttributeToItemBonusKey","primaryAttr","itemsContainsScepter","allItems","tryGetItemInfoValue","itemInfoKey","infoValue","convertItemDescToHtml","itemDescString","dataString","string","replaceRegex","phrase","infoKey","join","specialAbilityValue","replace","regexExp","RegExp","replaceStringWithDataValues","engSplitString","getFuzzyTooltipAbilityString","localizedSplit","totalHtmlSections","section","position","right","AbilityManaCost","AbilityCooldown","faClock","dangerouslySetInnerHTML","__html","ItemQuality","itemAliasIncludes","itemAlias","includePhrase","indexOf","abilityStrings","str","getLocalizedString","localeStrings","replaceStringValue","undefined","calculateMultiplicativeStackingTotal","allStackedSources","decimals","source","total","EAttackCapabilities","calculateHealth","baseStrength","strengthGain","baseHealth","npc_dota_hero_base","StatusHealth","totalHealth","bonusHealth","bonusStr","bonusAllStats","maxHealth","toFixed","calculateMana","baseInt","intGain","baseMana","StatusMana","totalMana","bonusMana","bonusInt","maxMana","calculateHealthRegen","totalHpRegen","StatusHealthRegen","additionalHpRegen","allHpRegenAmpSources","totalMaxHealthRegenPercent","regenAmt","bonusRegen","healthRegen","regenAmp","healthRegenPct","bonusHealthRegen","bonusHpRegen","totalMaxHpRegen","regenAmpTotalPercent","ampedHpRegen","additional","calculateManaRegen","totalManaRegen","StatusManaRegen","totalManaRegenPercentAmp","bonusManaRegen","bonusIntellect","regenPerCharge","charges","manaRegenAmp","manaRegen","calculateTotalSpellAmp","totalSpellAmp","ampTalent","spellAmpInfo","foundNeutral","spellAmpAmount","bonusSpellAmp","ampPerCharge","calculateStatusResist","totalStatusResist","statusResistAmount","calculateMagicResist","resistanceBonuses","MagicalResistance","baseResist","magicResistAmount","calculateEvasion","totalEvasion","bonusEvasion","evasionAmount","calculateRightClickDamage","heroMainAttribute","atkMin","AttackDamageMin","atkMax","AttackDamageMax","primaryAttributeStats","heroIsMelee","totalPrimaryAttribute","totalAdditional","allAttrKeys","bonusPrimaryAttr","bonusPrimaryStat","bonusDmg","bonusMeleeDmg","bonusRangedDmg","allStats","min","max","Math","floor","calculateAttackTime","totalAttackSpeed","BaseAttackSpeed","agiStats","totalAgi","bonusAttackSpeed","bonusAgility","attackSpeed","attacksPerSec","atkSpeed","attackTime","attacksPerSecond","calculateSpellDamage","abilityDamageInfo","abilityDmg","damage","isPercent","AbilityDamage","dmgValue","specialAbilityElement","lowerKey","getAbilityOutputDamage","totalSpellAmpPercent","talentBonus","spellAmp","chargeCount","neutralInfo","special","bonus_spell_amp","spell_amp","ampTalentValue","linkedAbility","spellDamage","totalAbilDmg","abilityDamage","calculateAbilityCooldown","cooldown","fixedAmtReductionSeconds","AbilityCharges","AbilityChargeRestoreTime","getIncludesAbilitySpecialAbilityValue","allReductions","bonusCooldown","reduction","totalCooldown","sourceOfReductions","decimal","calculateMoveSpeed","baseSpeed","MovementSpeed","flatBonus","moveSpeed","bonusMovement","moveSpeedPercentBonus","bonusMoveSpeed","bonusSpeed","calculateAttackRange","isHeroRanged","totalAttackRange","AttackRange","baseRange","rangeBonus","bonusAttackRange","bonusMeleeAttackRange","calculateAttribute","attribute","attributeStats","baseAttribute","attributePerLevel","totalAttribute","additionalAttribute","bonusAgi","primaryStat","calculateAbilityCastRange","baseCastRange","AbilityCastRange","foundRange","RequiresScepter","getAbilitySpecialCastRangeValue","totalBonusRange","calculateTotalLifesteal","totalLifestealPercent","totalLifestealAmp","lifestealPercent","lifestealAmp","bonusLifesteal","calculateTotalCleaveDmgPercent","totalCleaveDmgPercent","cleaveDmgPercent","cleaveDmg","greatCleaveDmg","cleavePercent","calculateCritPercent","highestCritPercent","critMultiplier","critBonus","bladeDanceCrit","calculateCritChancePercent","totalCritChancePercent","critChance","bladeDanceCritChance","calculateTotalSpellLifesteal","totalAllPercent","totalHeroLsPerc","totalCreepLsPerc","octarineCount","heroLifesteal","creepLifesteal","spellLifesteal","getAbilityNameFromStrings","strings","languageStrings","stringKey","matchingKeys","tryGetLocalizedString","DamageOutput","levelInfo","dotaStrings","prevProps","setState","abilityKey","abilInfo","abilLvl","parseDamage","Cooldown","abilityCooldown","updateCooldown","currentCooldownInfo","title","faCircle","ManaCost","updateMana","manaCost","totalManaCostReducePercent","manaCostReduceAmount","costReductionAmount","reduceAmount","calculateManaCost","height","width","backgroundColor","stringContainsHtml","TypeValueUI","isPercentage","typeStr","valueStr","AbilityDetails","abilityBehaviours","castRange","castRangeAmt","valuesInformation","abilitySpecials","containsScepter","specialInfo","abilitySpecialKeys","currentAbilitySpecialObject","specialBonus","specialBonusOperation","translationKey","abilityValue","containsKey","specialBonusValue","getAbilitySpecialExtraValues","behaviours","AbilityBehavior","targeting","splitBehaviours","AbilityUnitDamageType","dmgTypeVal","splitDmgTypes","SpellImmunityType","pierceValue","getAbilityBehaviours","toUpperCase","Abilities","heroName","displayDamage","abilityLevels","onAbilityLevelChanged","onLevelChanged","e","tagName","parentElement","abilityIndex","dataset","lvlindex","targetLevel","btnindex","Row","md","abilVal","IsGrantedByScepter","Col","ID","maxWidth","maxHeight","src","alt","maxLvl","AbilityType","MaxLevel","html","onClick","data-lvlindex","data-btnindex","getAbilityLevelHtml","getItemIcon","scale","shift","filterItemName","data-item","transform","transformOrigin","display","getItemsByQuality","itemsArray","matchArray","quality","ItemIcon","keyName","localizedName","TabHeading","text","ItemSelector","selectableItems","ItemIsNeutralDrop","IsObsolete","getAllItems","basicItems","upgradesItems","queryItems","onSelectedItem","onSearchChanged","onSearchItemSelected","onShopItemSelected","onRemoveItemSelected","query","filteredItems","ItemAliases","placeholder","faMinus","color","ListGroup","itmName","Item","Tabs","defaultActiveKey","transition","Tab","EDisassembleRule","EItemQuality","replaceItemStatLocalizeString","localizeString","splice","abs","ItemTooltip","itemStats","statistics","itemStatIncludePhrases","getItemStatistics","loreString","descString","descFiltered","ItemCost","faCampground","faHome","splitCompare","localized","toString","cost","calculateItemSellCost","eDisassembleRule","ItemDisassembleRule","isDissassembleRule","isBackpack","onItemChanged","onItemExtraChanged","itemExtra","itemSelectorDisabled","onBloodstoneChargesChanged","setCharges","ItemInitialCharges","newVal","newChargeAmt","trigger","isOpen","zIndex","faInfo","on","contentStyle","closeOnDocumentClick","ItemRequiresCharges","itemRequiresCharges","top","left","size","padding","textAlign","background","border","NeutralTier","tier","time","neutrals","neutralKey","onNeutralSelected","data-neutral","iconScale","NeutralItemSelector","allNeutrals","selectableNeutrals","array","itemKey","getAllNeutrals","neutralTierList","DOTANeutralsTierList","queryNeutrals","onNewNeutralSelected","filteredNeutrals","drop_rates","tierDropAmt","dropAmount","Neutral","neutralSelectorDisabled","ItemsBar","onNeutralChanged","onItemExtraChnaged","onItem","Attribute","isPrimaryAttribute","perLevelString","per","Attributes","strengthStats","agilityStats","intStats","StatArray","stats","formatAttackMinMax","standardAtkDmg","dmgString","formatAttackTime","attackInfo","formatTotalAdditional","toFixedAmt","Statistics","otherOpen","updateStatistics","onToggleOtherDetails","armorInfo","totalArmor","ArmorPhysical","totalBonusArmor","bonusArmor","armorBonus","armor","calculateMainArmor","physResist","percent","calculatePhysicalResist","attackRange","physicalResist","magicResist","statusResist","evasion","totalLifesteal","totalSpellLifesteal","totalCleaveAmount","totalCritPercent","totalCooldownAmount","faEyeSlash","faEye","HeroSelector","selectableHeroes","getAllPlayableHeroes","filteredHeroes","allHeroes","onSelectedHero","searchTerm","localizedHeroName","NameAliases","faSearch","data-heroname","displayName","data-hero","ChangeHeroBtn","onSelectHero","heroSelectorDisabled","onToggleHeroSelect","faPencilAlt","closeOnEscape","isTalentSelected","TalentRow","onTalentSelected","onTalentUnselected","onSelectTalent","getTalentDisplayName","selectedTalent","getTalentInfoFromName","userSelect","data-talent","TalentTree","findSelectedTalent","matchTalent","HealthManaBar","updateBar","healthRegenInfo","ModifyBtn","LevelSelector","onHeroLevelChanged","onIncrementHeroLevel","onDecrementHeroLevel","onLvlInputChanged","newLevel","Calculator","buildName","buildCreator","openBuildShare","loadedFromParams","onHeroSelected","onItemSelected","onShareBuild","onBuildNameChanged","onBuildCreatorChanged","search","buildData","URLSearchParams","get","decoded","Base64","decode","buildObject","JSON","parse","creator","build","abilLevel","stringify","encoded","encode","copy","abilLvlInfo","fluid","faChevronUp","faChevronDown","plaintext","readonly","faShare","Home","redirect","onGoToApp","paddingTop","paddingBottom","faTwitter","sm","App","exact","path","component","app","StrictMode","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.d2475853.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// Enum of all attributes contained within npc_heroes\r\nexport const EAttributes = {\r\n    ATTR_STRENGTH: \"DOTA_ATTRIBUTE_STRENGTH\",\r\n    ATTR_AGILITY: \"DOTA_ATTRIBUTE_AGILITY\",\r\n    ATTR_INTELLIGENCE: \"DOTA_ATTRIBUTE_INTELLECT\"\r\n};","// * Helper and utility functions to provide for retrieving data from \"npc_heroes.json\"\r\n// * \r\n\r\nimport { EAttributes } from \"../enums/attributes\";\r\n\r\nimport { DOTAHeroes } from \"../data/dota2/json/npc_heroes.json\";\r\n\r\n/// Get the base and per level stats of a heroes primary attribute\r\nexport function getPrimaryAttributeStats(heroInfo) {\r\n    if (heroInfo && heroInfo.AttributePrimary) {\r\n        return getSpecificAttributeStats(heroInfo.AttributePrimary, heroInfo);\r\n    } else{\r\n        return null;\r\n    }\r\n}\r\n\r\n/// Get the base and per level stats of a specific attribute\r\nexport function getSpecificAttributeStats(specificAttribute, heroInfo) {\r\n    var basePrimary = 0;\r\n    var primaryPerLevel = 0;\r\n\r\n    switch(specificAttribute) {\r\n        case EAttributes.ATTR_STRENGTH:\r\n            {\r\n                basePrimary = parseInt(heroInfo.AttributeBaseStrength);\r\n                primaryPerLevel = parseFloat(heroInfo.AttributeStrengthGain);\r\n                break;\r\n            }\r\n        case EAttributes.ATTR_AGILITY:\r\n            {\r\n                basePrimary = parseInt(heroInfo.AttributeBaseAgility);\r\n                primaryPerLevel = parseFloat(heroInfo.AttributeAgilityGain);\r\n                break;\r\n            }\r\n        case EAttributes.ATTR_INTELLIGENCE:\r\n            {\r\n                basePrimary = parseInt(heroInfo.AttributeBaseIntelligence);\r\n                primaryPerLevel = parseFloat(heroInfo.AttributeIntelligenceGain);\r\n                break;\r\n            }\r\n        default:\r\n            console.error(`Unable to get attribute stats because of unknown specific attribute '${specificAttribute}'`);\r\n    }\r\n    \r\n    return {\r\n        base: basePrimary,\r\n        perLevel: primaryPerLevel,\r\n    };\r\n}\r\n\r\n/// Gets all hero talents from a hero info\r\nexport function getHeroTalents (heroInfo) {\r\n    // Get simple array of all talents from npc_heroes.json\r\n    // All abilities are stored in npc_heroes.json as \"Ability?\", where ? is a number. \r\n    // Not always in numberical order like 1, 2, 3\r\n\r\n    var keys = Object.keys(heroInfo);\r\n    var talents = [];\r\n    for(var i = 0; i < keys.length; i++) {\r\n        if (keys[i].includes(\"Ability\") && !keys[i].includes(\"AbilityDraft\")) {\r\n            var ability = heroInfo[keys[i]];\r\n            if (ability && typeof ability === \"string\") {\r\n                if (ability !== \"generic_hidden\" && ability.includes(\"special_bonus\")) {\r\n                    talents.push(ability);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // sort into nice list\r\n    var mappedTalents = [];\r\n    var lvlRow = 0;\r\n    for (i = 0 ; i < talents.length; i += 2) {\r\n        mappedTalents.push({\r\n            lvl: 10 + (5 * lvlRow),\r\n            rightTalent: talents[i],\r\n            leftTalent: talents[i + 1]\r\n        });\r\n\r\n        lvlRow++;\r\n    }\r\n\r\n    // Sort by lvl 25 talents first\r\n    mappedTalents.sort((a, b) => a.lvl < b.lvl ? 1 : -1);\r\n\r\n    return mappedTalents;\r\n}\r\n\r\n/// Gets all hero abilities from a hero info\r\nexport function getAllHeroAbilities (heroInfo) {\r\n    var keys = Object.keys(heroInfo);\r\n    var abilities = [];\r\n    for(var i = 0; i < keys.length; i++) {\r\n        if (keys[i].includes(\"Ability\") && !keys[i].includes(\"AbilityDraft\")) {\r\n            var ability = heroInfo[keys[i]];\r\n            if (ability && typeof ability === \"string\") {\r\n                if (ability !== \"generic_hidden\" && !ability.includes(\"special_bonus\")) {\r\n                    abilities.push(ability);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return abilities;\r\n}\r\n\r\n/// Returns the base hero information that all heroes are based on\r\nexport function getDotaBaseHero () {\r\n    return DOTAHeroes?.npc_dota_hero_base;\r\n}\r\n\r\n/// Gets the hero's primary attribute as the EAttribute enum\r\nexport function getPrimaryAttribute (hero) {\r\n    switch(hero.AttributePrimary) {\r\n        case EAttributes.ATTR_STRENGTH:\r\n            return EAttributes.ATTR_STRENGTH;\r\n        case EAttributes.ATTR_AGILITY:\r\n            return EAttributes.ATTR_AGILITY;\r\n        case EAttributes.ATTR_INTELLIGENCE:\r\n            return EAttributes.ATTR_INTELLIGENCE;\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\nexport function getAllPlayableHeroes() {\r\n    // Filter and remove any unwanted heroes\r\n    let selectableHeroes = Object.keys(DOTAHeroes).filter((value) => {\r\n        var key = value.toLowerCase();\r\n        if (key !== \"version\" && key !== \"npc_dota_hero_base\" && key !== \"npc_dota_hero_target_dummy\") {\r\n            return true;\r\n        }\r\n        return false;\r\n    })\r\n    // Map only necessary data\r\n    selectableHeroes = selectableHeroes.map((key) => {\r\n        return {\r\n            name: key,\r\n            heroInfo: DOTAHeroes[key],\r\n        };\r\n    });\r\n    // sort by name property\r\n    selectableHeroes.sort((a, b) => (a.name > b.name) ? 1 : -1);\r\n    return selectableHeroes;\r\n}\r\n\r\n/// Checks a hero's attack capability for the specific capability\r\nexport function isHeroAttackCapability (heroInfo, atkCapability) {\r\n    if ( heroInfo && atkCapability) {\r\n        return heroInfo.AttackCapabilities && heroInfo.AttackCapabilities.split(\" | \").includes(atkCapability);\r\n    }\r\n    return false;\r\n}","import { DOTAHeroes } from \"../data/dota2/json/npc_heroes.json\";\r\nimport { lang as EngAbilStrings } from \"../data/dota2/languages/abilities_english.json\";\r\nimport { lang as EngDotaStrings } from \"../data/dota2/languages/dota_english.json\";\r\n\r\nimport {\r\n    parseNameFromModel,\r\n} from \"../utils\";\r\nimport {\r\n    getAllHeroAbilities,\r\n    getHeroTalents,\r\n} from \"../utility/dataHelperHero\";\r\n\r\nconst initialState = {\r\n    /// Current selected hero info by the user\r\n    selectedHero: DOTAHeroes.npc_dota_hero_abaddon,\r\n    /// Internal string name of the hero\r\n    selectedHeroName: \"npc_dota_hero_abaddon\",\r\n    /// Array of abilities of the selectedHero\r\n    heroAbilities: getAllHeroAbilities(DOTAHeroes.npc_dota_hero_abaddon),\r\n    heroAbilityLevels: getAllHeroAbilities(DOTAHeroes.npc_dota_hero_abaddon).map((val, index) => {\r\n        return {\r\n            ability: index,\r\n            level: 1,\r\n        };\r\n    }),\r\n    /// Array of talents of the selectedHero\r\n    heroTalents: getHeroTalents(DOTAHeroes.npc_dota_hero_abaddon),\r\n    /// Array of talents selected by the user\r\n    selectedTalents: [ ],\r\n    /// Current level of the hero set by the user\r\n    heroLevel: 1,\r\n\r\n    /// Current items that have been selected\r\n    items: [\r\n        { slot: 0, item: \"\" },\r\n        { slot: 1, item: \"\" },\r\n        { slot: 2, item: \"\" },\r\n        { slot: 3, item: \"\" },\r\n        { slot: 4, item: \"\" },\r\n        { slot: 5, item: \"\" },\r\n    ],\r\n    /// Current backpack selected by user\r\n    backpack: [\r\n        { slot: 0, item: \"\" },\r\n        { slot: 1, item: \"\" },\r\n        { slot: 2, item: \"\" },\r\n    ],\r\n    /// Current neutral item selected by user\r\n    neutralItem: { item: \"\" },\r\n\r\n    // Current code of the selected UI language\r\n    lang: \"en\",\r\n    stringsAbilities: EngAbilStrings,\r\n    stringsDota: EngDotaStrings,\r\n\r\n    /// Selected enemy hero \r\n    selectedEnemyHero: DOTAHeroes.npc_dota_hero_target_dummy,\r\n    selectedEnemyHeroName: parseNameFromModel(DOTAHeroes.npc_dota_hero_target_dummy.Model[1]),\r\n    enemyHeroTalents: getHeroTalents(DOTAHeroes.npc_dota_hero_target_dummy),\r\n    enemyHeroAbilities: getAllHeroAbilities(DOTAHeroes.npc_dota_hero_target_dummy),\r\n    selectedEnemyTalents: [ ],\r\n    enemyHeroItems: [\r\n        { slot: 0, item: \"ultimate_scepter\" },\r\n        { slot: 1, item: \"\" },\r\n        { slot: 2, item: \"\" },\r\n        { slot: 3, item: \"\" },\r\n        { slot: 4, item: \"\" },\r\n        { slot: 5, item: \"\" },\r\n    ],\r\n};\r\n\r\nexport default initialState;","/// Parses a display name from a hero info Model string\r\nexport function parseNameFromModel (modelString) {\r\n    let dashSplit = modelString.split('.')[0].split('/');\r\n    return dashSplit[dashSplit.length - 1];\r\n};","import initialState from \"./initialState\";\r\n\r\nimport {\r\n    SELECTED_HERO,\r\n    SELECTED_ITEM,\r\n    SELECTED_BACKPACK_ITEM,\r\n    SELECTED_NEUTRAL,\r\n    SELECTED_TALENT,\r\n    UNSELECTED_TALENT,\r\n    NEW_HERO_LEVEL,\r\n    SELECTED_ABILITY_LEVEL\r\n} from \"../constants/actionTypes\";\r\n\r\nimport {\r\n    parseNameFromModel,\r\n} from \"../utils\";\r\n\r\nimport {\r\n    getAllHeroAbilities,\r\n    getHeroAbilityLevels,\r\n    getHeroTalents,\r\n} from \"../utility/dataHelperHero\";\r\n\r\n/* DotA 2 Import Data */\r\nimport { DOTAHeroes } from \"../data/dota2/json/npc_heroes.json\";\r\n\r\nfunction replaceUpdatedAbilityLevel (abilityLevelArray, newAbilityLevel) {\r\n    let newArray = abilityLevelArray.filter((val) => {\r\n        if (val.ability !== newAbilityLevel.ability) {\r\n            return val;\r\n        }\r\n    });\r\n    newArray.push({\r\n        ability: newAbilityLevel.ability,\r\n        level: newAbilityLevel.level,\r\n    });\r\n    newArray.sort((a, b) => (a.ability > b.ability) ? 1 : -1);\r\n    return newArray;\r\n}\r\n\r\n/// Takes the existing itemArray and removes the current slot item and\r\n/// replaces with the newItem\r\nfunction replaceUpdatedItem(itemArray, newItem) {\r\n    /// Remove old slot insert new and sort by Slot\r\n    let newArray = itemArray.filter((val) => {\r\n        if (val.slot !== newItem.slot) {\r\n            return val;\r\n        }\r\n    })\r\n    newArray.push({ \r\n        slot: newItem.slot,\r\n        item: newItem.item,\r\n        extra: newItem.extra,\r\n    });\r\n    /// Sort by slot order 0 - 5\r\n    newArray.sort((a, b) => (a.slot > b.slot) ? 1 : -1);\r\n    return newArray;\r\n}\r\n\r\nfunction getNewTalentArray(talentArray, newTalent) {\r\n    let newArray = talentArray.map((value => { return value }));\r\n    newArray.push(newTalent);\r\n    return newArray;\r\n}\r\n\r\nfunction removeTalent (talentArray, unselectedTalent) {\r\n    /// Filter to get all but the unselectedTalent\r\n    var array = talentArray.filter((talent) => {\r\n        if (talent && talent !== unselectedTalent) {\r\n            return talent;\r\n        }\r\n    });\r\n    return array;\r\n}\r\n\r\nfunction reducer(state = initialState, action) {\r\n    switch(action.type)\r\n    {\r\n        case SELECTED_HERO:\r\n            let heroInfo = DOTAHeroes[action.value];\r\n            let allHeroAbilities = getAllHeroAbilities(heroInfo)\r\n            return {\r\n                ...state,\r\n                selectedHero: heroInfo,\r\n                selectedHeroName: action.value,\r\n                heroAbilities: allHeroAbilities,\r\n                heroTalents: getHeroTalents(heroInfo),\r\n                heroAbilityLevels: allHeroAbilities.map((abil, index) => {\r\n                    return {\r\n                        ability: index,\r\n                        level: 1,\r\n                    };\r\n                }),\r\n\r\n                // reset selected talents when new hero selected\r\n                selectedTalents: [ ],\r\n            };\r\n        case SELECTED_ITEM:\r\n            return {\r\n                ...state,\r\n                items: replaceUpdatedItem(state.items, action.value),\r\n            };\r\n        case SELECTED_BACKPACK_ITEM:\r\n            return {\r\n                ...state,\r\n                backpack: replaceUpdatedItem(state.backpack, action.value),\r\n            }\r\n        case SELECTED_NEUTRAL:\r\n            return {\r\n                ...state,\r\n                neutralItem: action.value,\r\n            };\r\n        case SELECTED_TALENT:\r\n            return {\r\n                ...state,\r\n               selectedTalents: getNewTalentArray(state.selectedTalents, action.value),\r\n            }\r\n        case UNSELECTED_TALENT:\r\n            return {\r\n                ...state,\r\n                selectedTalents: removeTalent(state.selectedTalents, action.value),\r\n            }\r\n        case NEW_HERO_LEVEL:\r\n            return {\r\n                ...state,\r\n                heroLevel: action.value,\r\n            };\r\n        case SELECTED_ABILITY_LEVEL:\r\n            return {\r\n                ...state,\r\n                heroAbilityLevels: replaceUpdatedAbilityLevel(state.heroAbilityLevels, action.value),\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","export const SELECTED_HERO = \"SELECT_HERO\";\r\nexport const SELECTED_NEUTRAL = \"SELECTED_NEUTRAL\";\r\nexport const SELECTED_ITEM = \"SELECTED_ITEM\";\r\nexport const SELECTED_BACKPACK_ITEM = \"SELECTED_BACKPACK_ITEM\";\r\nexport const SELECTED_TALENT = \"SELECTED_TALENT\";\r\nexport const UNSELECTED_TALENT = \"UNSELECTED_TALENT\";\r\nexport const NEW_HERO_LEVEL = \"NEW_HERO_LEVEL\";\r\nexport const ITEM_EXTRAS_CHANGED = \"ITEM_EXTRAS_CHANGED\";\r\nexport const SELECTED_ABILITY_LEVEL = \"SELECTED_ABILITY_LEVEL\";\r\n\r\nexport const LANGUAGE_CHANGED = \"LANGUAGE_CHANGED\";\r\n\r\nexport const ENEMY_SELECTED = \"ENEMY_SELECTED\";\r\nexport const ENEMY_SELECTED_TALENT = \"ENEMY_SELECTED_TALENT\";\r\n","/// Enum of all supported languages\r\nexport const ELanguages = {\r\n    SCHINESE: \"szh\",\r\n    ENGLISH: \"en\",\r\n    //RUSSIAN: \"ru\",\r\n};","import {\r\n    LANGUAGE_CHANGED\r\n} from \"../constants/actionTypes\";\r\nimport { ELanguages } from \"../enums/languages\";\r\nimport initialState from \"./initialState\";\r\n\r\nimport { lang as EngAbilStrings } from \"../data/dota2/languages/abilities_english.json\";\r\nimport { lang as EngDotaStrings } from \"../data/dota2/languages/dota_english.json\";\r\n\r\nimport { lang as SChineseAbilStrings } from \"../data/dota2/languages/abilities_schinese.json\";\r\nimport { lang as SChineseDotaStrings } from \"../data/dota2/languages/dota_schinese.json\";\r\n\r\nfunction getAbilityStrings(langCode) {\r\n    switch(langCode) {\r\n        case ELanguages.ENGLISH:\r\n            return EngAbilStrings;\r\n        case ELanguages.SCHINESE:\r\n            return SChineseAbilStrings;\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\nfunction getGeneralStrings(langCode) {\r\n    switch(langCode) {\r\n        case ELanguages.ENGLISH:\r\n            return EngDotaStrings;\r\n        case ELanguages.SCHINESE:\r\n            return SChineseDotaStrings;\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\nexport default (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case LANGUAGE_CHANGED:\r\n            console.log(`${LANGUAGE_CHANGED}: ${action.value}`);\r\n            return {\r\n                ...state,\r\n                lang: action.value,\r\n\r\n                stringsAbilities: getAbilityStrings(action.value),\r\n                stringsDota: getGeneralStrings(action.value),\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import { createStore, combineReducers } from \"redux\";\r\nimport hero from \"../reducers/hero\";\r\nimport language from \"../reducers/language\";\r\nimport enemy from \"../reducers/enemy\";\r\n\r\nconst allReducers = combineReducers({\r\n    language,\r\n    hero,\r\n    enemy,\r\n});\r\n\r\nconst store = createStore(allReducers);\r\n\r\nexport default store;","import initialState from \"./initialState\";\r\n\r\nimport {\r\n    ENEMY_SELECTED,\r\n    ENEMY_SELECTED_TALENT\r\n} from \"../constants/actionTypes\";\r\n\r\nexport default (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case ENEMY_SELECTED:\r\n            return {\r\n                ...state,\r\n\r\n                enemy: action.value,\r\n            };\r\n        case ENEMY_SELECTED_TALENT:\r\n            return {\r\n                ...state,\r\n\r\n                selectedEnemyTalents: [ ],\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Form } from 'react-bootstrap';\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { LANGUAGE_CHANGED } from \"../../constants/actionTypes\";\r\nimport { ELanguages } from \"../../enums/languages\";\r\n\r\nfunction getSupportedLanguages() {\r\n    let langs = Object.values(ELanguages);\r\n    return langs.map((value) => {\r\n        return (\r\n            <option value={value} key={value}>{value}</option>\r\n        )\r\n    });\r\n}\r\n\r\nclass LanguageSelect extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.onLanguageChanged = this.onLanguageChanged.bind(this);\r\n    }\r\n\r\n    onLanguageChanged(event) {\r\n        let newLanguage = event.target.value;\r\n        this.props.dispatch({ type: LANGUAGE_CHANGED, value: newLanguage });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Form.Control \r\n                    className=\"foresight-dropdown\"\r\n                    as=\"select\" \r\n                    onChange={this.onLanguageChanged} \r\n                    defaultValue={this.props.lang}>\r\n                    { getSupportedLanguages() }\r\n                </Form.Control>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    lang: state.language.lang,\r\n});\r\n\r\nexport default connect(mapStateToProps)(LanguageSelect);","import LanguageSelect from \"./LanguageSelect\";\r\n\r\nexport default LanguageSelect;","import React, { Component } from 'react';\r\nimport { \r\n    Nav,\r\n    Navbar,\r\n    Container,\r\n    Button,\r\n}from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\r\n\r\nimport LanguageSelect from '../LanguageSelect';\r\n\r\nimport \"./Navigation.css\";\r\n\r\nlet pkg = require('../../../package.json');\r\n\r\nclass Navigation extends Component {\r\n    render() {\r\n        return (\r\n            <Navbar className=\"foresite-navbar\">\r\n                <Container>\r\n                    <Navbar.Brand \r\n                        className=\"navbar-brand-name\"\r\n                        to=\"/\" as={Link}>\r\n                        { pkg ? pkg.name : \"?\" }\r\n                    </Navbar.Brand>\r\n                    <Nav.Link \r\n                        className=\"px-1 align-bottom mr-2\"\r\n                        style={{ fontSize: \"0.85rem\" }}\r\n                        eventKey=\"disabled\" \r\n                        disabled>\r\n                            {\r\n                                pkg ? \"v\" + pkg.version : \"v0.0.0\"\r\n                            }\r\n                    </Nav.Link>\r\n                    <Nav.Link\r\n                        className=\"px-1 align-bottom mr-2\"\r\n                        style={{ fontSize: \"0.85rem\" }}\r\n                        eventKey=\"disabled\"\r\n                        disabled>\r\n                        {\r\n                            pkg ? pkg.dotaVersion : \"Unknown\"\r\n                        }\r\n                    </Nav.Link>\r\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                        <Nav className=\"mr-auto\">\r\n                            <Nav.Link to=\"/\" as={Link}>home</Nav.Link>\r\n                            <Nav.Link to=\"/app\" as={Link}>app</Nav.Link>\r\n                        </Nav>\r\n                        <div className=\"mr-2\">\r\n                            <LanguageSelect/>\r\n                        </div>\r\n                        <a href=\"https://github.com/JoshLmao/foresight\">\r\n                            <Button variant=\"outline-secondary\">\r\n                                <FontAwesomeIcon icon={faGithub} />\r\n                            </Button>\r\n                        </a>\r\n                    </Navbar.Collapse>\r\n                </Container>\r\n            </Navbar>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Navigation;","import Navigation from \"./Navigation\";\r\n\r\nexport default Navigation;","import FourOhFour from \"./FourOhFour\";\r\n\r\nexport default FourOhFour;","import React, { Component } from 'react';\r\n\r\nclass FourOhFour extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                404 page\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FourOhFour;","export const EDamageType = {\r\n    MAGICAL: \"DAMAGE_TYPE_MAGICAL\",\r\n    PURE: \"DAMAGE_TYPE_PURE\",\r\n    PHYSICAL: \"DAMAGE_TYPE_PHYSICAL\",\r\n};\r\n\r\n/// All Ability Behaviour types\r\nexport const EAbilityBehaviour = {\r\n    UNIT_TARGET: \"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET\",\r\n    POINT: \"DOTA_ABILITY_BEHAVIOR_POINT\",\r\n    AOE: \"DOTA_ABILITY_BEHAVIOR_AOE\",\r\n    HIDDEN: \"DOTA_ABILITY_BEHAVIOR_HIDDEN\",\r\n    PASSIVE: \"DOTA_ABILITY_BEHAVIOR_PASSIVE\",\r\n    NO_TARGET: \"DOTA_ABILITY_BEHAVIOR_NO_TARGET\",\r\n    IMMEDIATE: \"DOTA_ABILITY_BEHAVIOR_IMMEDIATE\",\r\n    IGNORE_CHANNEL: \"DOTA_ABILITY_BEHAVIOR_IGNORE_CHANNEL\",\r\n    SHOW_IN_GUIDES: \"DOTA_ABILITY_BEHAVIOR_SHOW_IN_GUIDES\",\r\n    AURA: \"DOTA_ABILITY_BEHAVIOR_AURA\",\r\n}\r\n\r\n/// Enum of all spell immune types, if the ability pierces spell immunity\r\nexport const ESpellImmunityType = {\r\n    YES: \"SPELL_IMMUNITY_ENEMIES_YES\",\r\n    NO: \"SPELL_IMMUNITY_ENEMIES_NO\",\r\n    ALLIES_YES_ENEMIES_NO: \"SPELL_IMMUNITY_ALLIES_YES_ENEMIES_NO\",\r\n    ALLIES_NO: \"SPELL_IMMUNITY_ALLIES_NO\",\r\n}\r\n\r\n// Enum of all special bonus operations inside AbilityInfo AbilitySpecials\r\nexport const ESpecialBonusOperation = {\r\n    MULTIPLY: \"SPECIAL_BONUS_MULTIPLY\",\r\n    SUBTRACT: \"SPECIAL_BONUS_SUBTRACT\",\r\n    PERCENT_ADD: \"SPECIAL_BONUS_PERCENTAGE_ADD\",\r\n}","import { DOTAAbilities } from \"../data/dota2/json/npc_abilities.json\";\r\nimport {\r\n    getAbilityInfoFromName,\r\n    getAbilitySpecialAbilityValue\r\n} from \"./dataHelperAbilities\";\r\n\r\n/// Gets info and formattable display name of a talent\r\n/// Returns both display name of talent and it's info in an object\r\nexport function getTalentInfoFromName(talent) {\r\n    if (talent) {\r\n        var talentInfo = DOTAAbilities[talent];\r\n        return talentInfo;    \r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport function tryGetTalentSpecialAbilityValue (talent, specialValueKey) {\r\n    let talentInfo = getAbilityInfoFromName(talent);\r\n    if(talentInfo) {\r\n        let specialValue = getAbilitySpecialAbilityValue(talentInfo, specialValueKey);\r\n        if (specialValue) {\r\n            return specialValue;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/// Checks the selected talents array to see if the targetTalent has been selected\r\nexport function talentsInclude(selectedTalents, targetTalent) {\r\n    if (!selectedTalents) {\r\n        return null;\r\n    }\r\n\r\n    for (let talent of selectedTalents) {\r\n        if (talent === targetTalent) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}","// * Helper and utility functions to provide for retrieving data from \"npc_abilities.json\"\r\n// * \r\n\r\nimport { DOTAAbilities } from \"../data/dota2/json/npc_abilities.json\";\r\nimport { \r\n    EAbilityBehaviour, \r\n    EDamageType, \r\n    ESpellImmunityType,\r\n    ESpecialBonusOperation\r\n} from \"../enums/abilities\";\r\n\r\nimport {\r\n    lang as DOTAEngAbilityStrings\r\n} from \"../data/dota2/languages/abilities_english.json\";\r\nimport { containsLocalizedString } from \"./data-helpers/language\";\r\nimport { itemsContainsScepter } from \"./dataHelperItems\";\r\nimport { \r\n    tryGetTalentSpecialAbilityValue,\r\n    talentsInclude\r\n} from \"./dataHelperTalents\";\r\n\r\nexport function getAbilityInfoFromName(abilityName) {\r\n    if (abilityName) {\r\n        return DOTAAbilities[abilityName];\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport function tryGetAbilitySpecialAbilityValue (ability, specialValueKey, abilityLevel = 1) {\r\n    let abilityInfo = getAbilityInfoFromName(ability);\r\n    if (abilityInfo) {\r\n        let specialValue = getAbilitySpecialAbilityValue(abilityInfo, specialValueKey, abilityLevel);\r\n        if (specialValue) {\r\n            return specialValue;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nexport function getAbilitySpecialAbilityValue(abilityInfo, specialAbilityKey, abilityLevel = 1) {\r\n    if (abilityInfo && abilityInfo.AbilitySpecial) {\r\n        for(let i = 0; i < abilityInfo.AbilitySpecial.length; i++) {\r\n            let keys = Object.keys(abilityInfo.AbilitySpecial[i]);\r\n            let matchingKey = keys.find(element => {\r\n                return element === specialAbilityKey;\r\n            });\r\n\r\n            if (matchingKey) {\r\n                let specialAbilityInfo = abilityInfo.AbilitySpecial[i];\r\n\r\n                // If value contains a space, it can be levelled up needs to be split up\r\n                let dataValue = specialAbilityInfo[matchingKey];\r\n                if (typeof dataValue === \"string\" && dataValue.includes(' ')) {\r\n                    let split = specialAbilityInfo[matchingKey].split(' ');\r\n                    dataValue = split[abilityLevel - 1];\r\n                }\r\n\r\n                /// If wanting it for it's value, correctly convert and return\r\n                if (matchingKey.includes(\"value\") || specialAbilityInfo.var_type) {\r\n                    if (specialAbilityInfo.var_type === \"FIELD_INTEGER\") {\r\n                        return parseInt(dataValue);\r\n                    } \r\n                    else if(specialAbilityInfo.var_type === \"FIELD_FLOAT\") {\r\n                        return parseFloat(dataValue);\r\n                    }\r\n                } \r\n                /// else return whatever the value is\r\n                else {\r\n                    return dataValue;\r\n                }\r\n                \r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/// Gets \r\nexport function getAbilitySpecialCastRangeValue (abilityInfo, includePhrase, abilityLevel = 1) {\r\n    if (abilityInfo && abilityInfo.AbilitySpecial) {\r\n        for(let i = 0; i < abilityInfo.AbilitySpecial.length; i++) {\r\n            let keys = Object.keys(abilityInfo.AbilitySpecial[i]);\r\n            let matchingKey = keys.find(element => {\r\n                return element.includes(includePhrase) && !element.includes(\"scepter\");\r\n            });\r\n\r\n            if (matchingKey) {\r\n                let specialAbilityInfo = abilityInfo.AbilitySpecial[i];\r\n\r\n                /// ignore if scepter \r\n                if (specialAbilityInfo.RequiresScepter) {\r\n                    return null;\r\n                }\r\n\r\n                // If value contains a space, it can be levelled up needs to be split up\r\n                let dataValue = specialAbilityInfo[matchingKey];\r\n                \r\n                /// Return dataValue in format\r\n                return tryParseAbilitySpecialValue(specialAbilityInfo, dataValue, abilityLevel)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/// Searches an AbilityInfo's AbilitySpecial array for a property that includes the the \"includePhrase\"\r\n/// in it's key. For example includePhrase = \"charges\" would return value of voice spirit's \"max_charges\"\r\nexport function getIncludesAbilitySpecialAbilityValue(abilityInfo, includePhrase, abilityLevel) {\r\n    if (abilityInfo && abilityInfo.AbilitySpecial) {\r\n        for(let i = 0; i < abilityInfo.AbilitySpecial.length; i++) {\r\n            let keys = Object.keys(abilityInfo.AbilitySpecial[i]);\r\n            let matchingKey = keys.find(element => {\r\n                return element.includes(includePhrase);\r\n            });\r\n\r\n            if (matchingKey) {\r\n                let specialAbilityInfo = abilityInfo.AbilitySpecial[i];\r\n                let dataValue = specialAbilityInfo[matchingKey];\r\n\r\n                /// Return dataValue in format\r\n                return tryParseAbilitySpecialValue(specialAbilityInfo, dataValue, abilityLevel);\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/// Gets the standard output damage of an ability from its level\r\nexport function getAbilityOutputDamage(abilityInfo, abilityLevel) {\r\n    let abilityDmg = {\r\n        min: null,\r\n        max: null,\r\n        damage: null,\r\n        isPercent: null,\r\n    };\r\n\r\n    if (abilityInfo && abilityLevel) {\r\n        if (abilityInfo.AbilityDamage) {\r\n            let dmgValue = abilityInfo.AbilityDamage.split(' ')[abilityLevel - 1];\r\n            abilityDmg = {\r\n                ...abilityDmg,\r\n                damage: parseFloat(dmgValue),\r\n            };\r\n        }\r\n        else if (abilityInfo.AbilitySpecial) \r\n        {\r\n            for (let i = 0; i < abilityInfo.AbilitySpecial.length; i++) {\r\n                let specialAbilityElement = abilityInfo.AbilitySpecial[i];\r\n                \r\n                let abilSpecKeys = Object.keys(specialAbilityElement);\r\n                for(let key of abilSpecKeys) {\r\n                    // AbilitySpecial contains damage under a property\r\n                    let lowerKey = key.toLowerCase();\r\n                    \r\n                    // Includes dmg & not scepter\r\n                    if (lowerKey.includes(\"damage\") && !lowerKey.includes(\"scepter\")) \r\n                    {\r\n                        let value = parseAbilityValueByLevel(specialAbilityElement[key], abilityLevel);\r\n                        let dmgValue = parseFloat(value);\r\n\r\n                        if (lowerKey.includes(\"min\")) {\r\n                            //min_damage\r\n                            abilityDmg.min =  dmgValue;\r\n                        }\r\n                        if (lowerKey.includes(\"max\")) {\r\n                            abilityDmg.max = dmgValue;\r\n                        } \r\n                        if (lowerKey.includes(\"pct\")) {\r\n                            abilityDmg.isPercent = true;\r\n                        }\r\n\r\n                        if (!abilityDmg.min && !abilityDmg.max) {\r\n                            abilityDmg.damage = dmgValue;\r\n                        }\r\n                    }\r\n\r\n                    // Stop iterate if have min&max or dmg\r\n                    if (abilityDmg.min && abilityDmg.max || abilityDmg.damage) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return abilityDmg;\r\n}\r\n\r\n/// Gets all behaviour options of an ability such as if it goes through BKB, damage type, etc\r\nexport function getAbilityBehaviours(abilityInfo) {\r\n    if (!abilityInfo) {\r\n        return null;\r\n    }\r\n\r\n    let behaviours = [];\r\n\r\n    if (abilityInfo.AbilityBehavior) {\r\n        let targeting = [];\r\n        let splitBehaviours = abilityInfo.AbilityBehavior.split(' | ');\r\n        for(let b of splitBehaviours) {\r\n            switch(b) {\r\n                case EAbilityBehaviour.UNIT_TARGET:\r\n                    targeting.push(\"DOTA_ToolTip_Ability_Target\");\r\n                    break;\r\n                case EAbilityBehaviour.POINT:\r\n                    targeting.push(\"DOTA_ToolTip_Ability_Point\");\r\n                    break;\r\n                case EAbilityBehaviour.PASSIVE:\r\n                    targeting.push(\"DOTA_ToolTip_Ability_Passive\");\r\n                    break;\r\n                case EAbilityBehaviour.NO_TARGET:\r\n                    targeting.push(\"DOTA_ToolTip_Ability_NoTarget\");\r\n                    break;\r\n            }\r\n        }\r\n    \r\n        behaviours.push({\r\n            key: \"DOTA_ToolTip_Ability\",\r\n            value: targeting,\r\n        });\r\n    }\r\n\r\n    if (abilityInfo.AbilityUnitDamageType) {\r\n        let dmgTypeVal = \"\";\r\n        let splitDmgTypes = abilityInfo.AbilityUnitDamageType.split(\" | \");\r\n        for(let type of splitDmgTypes) {\r\n            switch(type) {\r\n                case EDamageType.MAGICAL:\r\n                    dmgTypeVal = \"DOTA_Plus_Death_Screen_MagicalDamage\";\r\n                    break;\r\n                case EDamageType.PURE:\r\n                    dmgTypeVal = \"DOTA_Plus_Death_Screen_PureDamage\";\r\n                    break;\r\n                case EDamageType.PHYSICAL:\r\n                    dmgTypeVal = \"DOTA_Plus_Death_Screen_PhysicalDamage\";\r\n                    break;\r\n                default:\r\n                    dmgTypeVal = \"Not Implemented\";\r\n                    break;\r\n            }\r\n        }\r\n\r\n        behaviours.push({\r\n            key: \"DOTA_ToolTip_Damage\",\r\n            value: dmgTypeVal,\r\n        });\r\n    }\r\n\r\n    if (abilityInfo.SpellImmunityType) {\r\n        let pierceValue = \"\";\r\n        switch(abilityInfo.SpellImmunityType) {\r\n            case ESpellImmunityType.YES:\r\n                pierceValue = \"DOTA_ToolTip_PiercesSpellImmunity_Yes\";\r\n                break;\r\n            case ESpellImmunityType.NO:\r\n            case ESpellImmunityType.ALLIES_NO:\r\n                pierceValue = \"DOTA_ToolTip_PiercesSpellImmunity_No\";\r\n                break;\r\n            case ESpellImmunityType.ALLIES_YES_ENEMIES_NO:\r\n                pierceValue = \"DOTA_ToolTip_PiercesSpellImmunity_AlliesYesEnemiesNo\";\r\n                break;\r\n            default:\r\n                pierceValue = \"Unknown\";\r\n                break;\r\n        }\r\n\r\n        behaviours.push({\r\n            key: \"DOTA_ToolTip_PiercesSpellImmunity\",\r\n            value: pierceValue,\r\n        });\r\n    }\r\n\r\n    return behaviours;\r\n}\r\n\r\n/// Parses an AbilitySpecial\r\nexport function parseAbilitySpecialValueByLevel (abilitySpecials, key, level = 1) {\r\n    let valuesSplit = abilitySpecials[key].split(' ');\r\n    if (valuesSplit.length > 1) {\r\n        return valuesSplit[level - 1];\r\n    } else {\r\n        return abilitySpecials[key];\r\n    }\r\n}\r\n\r\n/// Parses a value in an abilityInfo that could be alone or have multiple values per level\r\nexport function parseAbilityValueByLevel (value, level = 1) {\r\n    if (level < 1) {\r\n        return null;\r\n    }\r\n    \r\n    let abilValue = 0;\r\n    if (typeof value === \"string\") {\r\n        let splitValues = value.split(\" \");\r\n        if (splitValues.length > 1) {\r\n            abilValue = splitValues[level - 1];\r\n        } else {\r\n            abilValue = value;\r\n        }\r\n\r\n        abilValue = parseFloat(abilValue);\r\n    } else {\r\n        abilValue = value;\r\n    }\r\n\r\n    return abilValue;\r\n}\r\n\r\nexport function isCooldownTalent (talent) {\r\n    return isTalent(talent, \"cooldown\");\r\n}\r\n\r\nexport function isDamageTalent (talent) {\r\n    return isTalent(talent, \"damage\");\r\n}\r\n\r\nexport function isCastRangeTalent (talent) {\r\n    return isTalent(talent, \"cast range\");\r\n}\r\n\r\nexport function isTalent (talent, lowerCasePhrase) {\r\n    let abilityString = DOTAEngAbilityStrings.Tokens[\"DOTA_Tooltip_ability_\" + talent];\r\n    return abilityString && abilityString.toLowerCase().includes(lowerCasePhrase);\r\n}\r\n\r\n/// Checks the AbilityBehavior string on an AbilityInfo to\r\n/// see if it contains all EBehaviours in array\r\nexport function isAbilityBehaviour (abilityBehaviour, ebehaviours) {\r\n    if (abilityBehaviour) {\r\n        let splitBehaviours = abilityBehaviour.split(' | ');\r\n        \r\n        let contains = splitBehaviours.some((b) => ebehaviours.includes(b));\r\n        return contains;\r\n    }\r\n    return false;\r\n}\r\n\r\n/// Gets all AbilitySpecial extra information values with it's translation key \r\nexport function getAbilitySpecialExtraValues (abilityName, abilityInfo, abilityLevel, items, selectedTalents) {\r\n    if (!abilityInfo || (abilityInfo && !abilityInfo.AbilitySpecial)) {\r\n        return null;\r\n    }\r\n\r\n    let abilitySpecials = [];\r\n    let containsScepter = itemsContainsScepter(items);\r\n\r\n    for (let specialInfo of abilityInfo.AbilitySpecial) {\r\n        let abilitySpecialKeys = Object.keys(specialInfo);\r\n        let currentAbilitySpecialObject = null;\r\n        for (let key of abilitySpecialKeys) {\r\n\r\n            // Store specific properties inside object for later\r\n            if (key === \"LinkedSpecialBonus\") {\r\n                currentAbilitySpecialObject = {\r\n                    ...currentAbilitySpecialObject,\r\n                    specialBonus: specialInfo[key],\r\n                };\r\n            } else if (key === \"LinkedSpecialBonusOperation\") {\r\n                currentAbilitySpecialObject = {\r\n                    ...currentAbilitySpecialObject,\r\n                    specialBonusOperation: specialInfo[key],\r\n                };\r\n            }\r\n\r\n            // Skip specific properties we don't need\r\n            if (key.includes(\"var_type\") || key.includes(\"RequiresScepter\") || key === \"damage\") {\r\n                continue;\r\n            }\r\n            \r\n            // Ignore scepter info if no aghs in inventory\r\n            if (key.includes(\"scepter\") && !containsScepter) {\r\n                continue;\r\n            }\r\n\r\n            // Create key for indexing inside locale files\r\n            let translationKey = `DOTA_Tooltip_ability_${abilityName}_${key}`;\r\n\r\n            let abilityValue = null;\r\n            // if AbilitySpecial key doesn't contain an underscore, it references property on master AbilityInfo object\r\n            if (!key.includes(\"_\") && !key.includes(\"Linked\")) {\r\n                let containsKey = tryGetAbilityInfoValueFromKey(abilityInfo, key);\r\n                if (containsKey) {\r\n                    abilityValue = tryParseAbilitySpecialValue(abilityInfo, abilityInfo[containsKey], abilityLevel);\r\n                }\r\n            } else {\r\n                abilityValue = tryParseAbilitySpecialValue(specialInfo, specialInfo[key], abilityLevel);\r\n            }\r\n            \r\n            if (translationKey && abilityValue) {\r\n                currentAbilitySpecialObject = {\r\n                    ...currentAbilitySpecialObject,\r\n                    key: translationKey,\r\n                    value: abilityValue,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (currentAbilitySpecialObject && currentAbilitySpecialObject.value) {\r\n            let value = currentAbilitySpecialObject.value;\r\n\r\n            // If AbilitySpecial has special bonus modifier and is selected\r\n            if ( talentsInclude(selectedTalents, currentAbilitySpecialObject.specialBonus) ) {\r\n                let specialBonusValue = tryGetTalentSpecialAbilityValue(currentAbilitySpecialObject.specialBonus, \"value\");\r\n               \r\n                /// Apply bonus operation to value\r\n                if (currentAbilitySpecialObject.specialBonusOperation) {\r\n                    switch (currentAbilitySpecialObject.specialBonusOperation) {\r\n                        case ESpecialBonusOperation.SUBTRACT:\r\n                            value -= specialBonusValue;\r\n                            break;\r\n                        case ESpecialBonusOperation.MULTIPLY:\r\n                            value *= specialBonusValue;\r\n                            break;\r\n                        case ESpecialBonusOperation.PERCENT_ADD:\r\n                            let percentBonus = (value / 100) * specialBonusValue;\r\n                            value += percentBonus;\r\n                            break;\r\n                        default:\r\n                            console.log(`Unknown SpecialBonusOperation: ${currentAbilitySpecialObject.specialBonusOperation}`);\r\n                            break;\r\n                    };\r\n                } else {\r\n                    /// If no special bonus operation, just replace new values on original\r\n                    if (specialBonusValue) {\r\n                        value = specialBonusValue;\r\n                    }\r\n                }\r\n            }\r\n\r\n            abilitySpecials.push({\r\n                key: currentAbilitySpecialObject.key,\r\n                value: value,\r\n            });\r\n        }\r\n    }\r\n\r\n    return abilitySpecials;\r\n}\r\n\r\nexport function tryParseAbilitySpecialValue (abilSpecialinfo, value, abilityLevel = 1) {\r\n    if (typeof value === \"string\" && value.includes(' ')) {\r\n        let split = value.split(' ');\r\n        value = split[abilityLevel - 1];\r\n    }\r\n\r\n    if (abilSpecialinfo) {\r\n        if (abilSpecialinfo.var_type === \"FIELD_INTEGER\") {\r\n            return parseInt(value);\r\n        } \r\n        else if(abilSpecialinfo.var_type === \"FIELD_FLOAT\") {\r\n            return parseFloat(value);\r\n        }\r\n    }\r\n    return value;\r\n}\r\n\r\n/// Try get's a value on an AbilityInfo object from it's key, which can be upper/lower/CamelCase\r\nexport function tryGetAbilityInfoValueFromKey (abilityInfo, key) {\r\n    let abilInfoKeys = Object.keys(abilityInfo);\r\n    for(let abilInfoKey of abilInfoKeys) {\r\n        if (abilInfoKey.toLowerCase() === key.toLowerCase()) {\r\n            return  abilInfoKey;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n","\r\n// * Helper and utility functions to provide for retrieving data from \"npc_items.json\"\r\n// * \r\nimport { DOTAAbilities as DOTAItems } from \"../data/dota2/json/items.json\";\r\nimport { neutral_items as DOTANeutralsTierList } from \"../data/dota2/json/neutral_items.json\";\r\nimport { EAttributes } from \"../enums/attributes\";\r\nimport React from \"react\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faClock } from '@fortawesome/free-solid-svg-icons';\r\nimport { tryParseAbilitySpecialValue } from \"./dataHelperAbilities\";\r\nimport { \r\n    getLocalizedString, \r\n    getFuzzyEngAbilityLocalizedString \r\n} from \"./data-helpers/language\";\r\n\r\nexport function getItemInfoFromName (itemName) {\r\n    if (itemName)\r\n        return DOTAItems[itemName];\r\n    else\r\n        return null;\r\n}\r\n\r\n/// Gets the value of an item's AbilitySpecial array\r\nexport function getItemSpecialAbilityValue (itemInfo, specialAbilityValueKey) {\r\n    if (itemInfo && itemInfo.AbilitySpecial) {\r\n        for(let i = 0; i < itemInfo.AbilitySpecial.length; i++) {\r\n            let keys = Object.keys(itemInfo.AbilitySpecial[i]);\r\n            let matchingKey = keys.find(element => {\r\n                return element === specialAbilityValueKey;\r\n            });\r\n\r\n            if (matchingKey) {\r\n                let specialAbilityInfo = itemInfo.AbilitySpecial[i];\r\n                return tryParseAbilitySpecialValue(specialAbilityInfo, specialAbilityInfo[matchingKey], 1);\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/// Try Gets a item info and sepcial value from it's item's Ability Special array\r\nexport function tryGetItemSpecialValue (item, specialAbilityValueKey) {\r\n    let itemInfo = getItemInfoFromName(item.item);\r\n    if (itemInfo) {\r\n        var specialValue = getItemSpecialAbilityValue(itemInfo, specialAbilityValueKey);\r\n        if (specialValue) {\r\n            return specialValue;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/// Try Gets a neutral item info and special value from it's items' AbilitySpecial array\r\nexport function tryGetNeutralSpecialValue (neutral, specialValueKey) {\r\n    let foundNeutralInfo = getItemInfoFromName(neutral.item);\r\n    if (foundNeutralInfo) {\r\n        var specialValue = getItemSpecialAbilityValue(foundNeutralInfo, specialValueKey);\r\n        if (specialValue) {\r\n            return specialValue;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/// Gets all normal items in dota\r\nexport function getAllItems () {\r\n    let selectableItems = Object.keys(DOTAItems).filter((value) => {\r\n        let key = value.toLowerCase();\r\n        let ability = DOTAItems[value];\r\n        if (key !== \"version\" && !key.includes(\"recipe\") && !ability.ItemIsNeutralDrop && !ability.IsObsolete) {\r\n            return true;\r\n        }\r\n        return false;\r\n    });\r\n\r\n    // Convert keys to item data\r\n    selectableItems = selectableItems.map((key) => {\r\n        return {\r\n            item:  DOTAItems[key],\r\n            name: key,\r\n        };\r\n    })\r\n    selectableItems.sort();\r\n\r\n    return selectableItems;\r\n}\r\n\r\n/// Returns all neutral items\r\nexport function getAllNeutrals() {\r\n     /// Filter out unused or unnecessary keys in items.json\r\n     let selectableNeutrals = Object.keys(DOTAItems).filter((value, index, array) => {\r\n        let key = value.toLowerCase();\r\n        let ability = DOTAItems[value];\r\n        \r\n        // Make sure it's a neutral\r\n        if (ability.ItemIsNeutralDrop === \"1\") {\r\n            // Filter irrelevant results, ignore any neutral recipes and return full item\r\n            if (key !== \"version\" && !ability.IsObsolete && !key.includes(\"recipe\")) {\r\n                return true;\r\n            }    \r\n        }\r\n        \r\n        return false;\r\n    });\r\n    selectableNeutrals.sort();\r\n\r\n    // Map to an object\r\n    selectableNeutrals = selectableNeutrals.map((key) => {\r\n        let itemKey = key;\r\n        if (itemKey.includes(\"recipe\")) {\r\n            // remove recipe and retrieve item version\r\n            itemKey = itemKey.replace(\"_recipe\", \"\");\r\n        }\r\n\r\n        let itemInfo = DOTAItems[itemKey];\r\n        if (itemInfo.ItemIsNeutralDrop === \"1\") {\r\n            return {\r\n                item: itemKey,\r\n                itemInfo: itemInfo,\r\n            };\r\n        }\r\n    });\r\n\r\n    return selectableNeutrals;\r\n}\r\n\r\n/// Gets the correct key inside items.json for the hero's primary attribute\r\nexport function primaryAttributeToItemBonusKey(primaryAttr) {\r\n    switch(primaryAttr) {\r\n        case EAttributes.ATTR_STRENGTH:\r\n            return [ \"bonus_strength\" ];\r\n        case EAttributes.ATTR_AGILITY:\r\n            return [ \"bonus_agility\" ];\r\n        case EAttributes.ATTR_INTELLIGENCE:\r\n            return [ \"bonus_intellect\", \"bonus_intelligence\" ];\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\n/// Checks if the items array contains an aghanims scepter\r\nexport function itemsContainsScepter (allItems) {\r\n    for (let item of allItems) {\r\n        if (item.item && item.item.includes(\"ultimate_scepter\")) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n/// Replaces a localized string with it's data values found inside AbilitySpecial \r\n/// or on ItemInfo object\r\nexport function replaceStringWithDataValues (string, itemInfo) {\r\n    if (!string) {\r\n        return null;\r\n    }\r\n\r\n    let replaceRegex = /%\\w*?%/;\r\n    // special character to use in placeholder of replacing in final string with ?\r\n    let REPLACE_CHAR = \"~\";\r\n\r\n    while (string.match(replaceRegex)?.length > 0) {\r\n        let phrase = string.match(replaceRegex)[0];\r\n        if (phrase) {\r\n            let infoKey = phrase.split(\"%\").join(\"\");\r\n            let specialAbilityValue = null;\r\n            // no characters inbetween, needs to be a normal percentage sign\r\n            if (infoKey === \"\") {\r\n                /// use the special REPLACE_CHAR\r\n                specialAbilityValue = REPLACE_CHAR;\r\n            }\r\n            // if is an AbilitySpecial key as all contain a '_' \r\n            else if (infoKey.includes(\"_\")) {\r\n                specialAbilityValue = getItemSpecialAbilityValue(itemInfo, infoKey);\r\n            }\r\n            else {\r\n                // Check if infoKey is a key on the main itemInfo object\r\n                specialAbilityValue = tryGetItemInfoValue(itemInfo, infoKey);\r\n\r\n                // could be AbilitySpecial key that contains no _\r\n                if (!specialAbilityValue) {\r\n                    specialAbilityValue = getItemSpecialAbilityValue(itemInfo, infoKey);\r\n                }\r\n            }\r\n            \r\n            // If not able to find a data value, use a question mark\r\n            if (!specialAbilityValue) {\r\n                specialAbilityValue = \"?\";\r\n            }\r\n            // Replace and set\r\n            string = string.replace(phrase, specialAbilityValue);\r\n        }\r\n    }\r\n\r\n\r\n    /// replace REPLACE_CHAR with actual percentage sign\r\n    let regexExp = new RegExp(REPLACE_CHAR, \"g\");\r\n    string = string.replace(regexExp, \"%\");\r\n    \r\n    return string;\r\n}\r\n\r\n/// Try Get's a ItemInfo value on the original object from a key\r\nexport function tryGetItemInfoValue (itemInfo, itemInfoKey) {\r\n    if (itemInfo) {\r\n        let keys = Object.keys(itemInfo);\r\n        let matchingKey = keys.find(element => {\r\n            return element.toLowerCase() === itemInfoKey.toLowerCase();\r\n        });\r\n\r\n        if (matchingKey) {\r\n            let infoValue = itemInfo[matchingKey];\r\n            if (infoValue.includes(\".\")) {\r\n                return parseFloat(infoValue);\r\n            } else {\r\n                return parseInt(infoValue);\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/// Converts a item description localized string into the correct displayable HTML\r\nexport function convertItemDescToHtml(itemDescString, itemName, itemInfo) {\r\n    /// Replace active/passive item ability with the data values inside the itemInfo\r\n    let dataString = replaceStringWithDataValues(itemDescString, itemInfo);\r\n    if (!dataString) {\r\n        return null;\r\n    }\r\n\r\n    /// Get english string to be able to check for \"Active:\" phrase\r\n    let engDataString = getFuzzyEngAbilityLocalizedString(`${itemName}_Description`);\r\n    let engSplitString = engDataString.split(\"\\\\n\");\r\n\r\n    /// Also split localized string to iterate over\r\n    let localizedSplit = dataString.split(\"\\\\n\");\r\n\r\n    let totalHtmlSections = [];\r\n    for(let i = 0; i < localizedSplit.length; i++) {\r\n        let section = localizedSplit[i];\r\n        let isActive = engSplitString[i].includes(\"Active:\");\r\n        if (isActive) {\r\n            // Return HTML for an active ability on item\r\n            totalHtmlSections.push(\r\n                <div className=\"my-3 item-active\" key={i}>\r\n                    <div\r\n                        className=\"d-flex justify-content-between align-items-center\" \r\n                        style={{ position: \"absolute\", right: \"1rem\" }}>\r\n                        {\r\n                            itemInfo && itemInfo.AbilityManaCost &&\r\n                            <div className=\"d-flex\">\r\n                                <div className=\"mx-1 my-1 mana-cost-box-icon\" />\r\n                                <div>\r\n                                    { parseInt(itemInfo.AbilityManaCost) }\r\n                                </div>\r\n                            </div>\r\n                        }\r\n                        <div className=\"px-1\" />\r\n                        {\r\n                            itemInfo && itemInfo.AbilityCooldown &&\r\n                            <div className=\"d-flex\">\r\n                                <FontAwesomeIcon \r\n                                    className=\"mx-1 my-1\" \r\n                                    icon={faClock} />\r\n                                <div>\r\n                                    { parseFloat(itemInfo.AbilityCooldown)  }\r\n                                </div>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                    <div dangerouslySetInnerHTML={{ __html: section }}>\r\n                    </div>\r\n                </div>\r\n            )\r\n        } else {\r\n            /// HTML for passive ability on item\r\n            totalHtmlSections.push(\r\n                <div\r\n                    key={i} \r\n                    className={`my-3 ${itemInfo.ItemQuality === \"consumable\" ? \"item-consumable\" : \"item-passive\"}`} \r\n                    dangerouslySetInnerHTML={{ __html: section }}>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    return totalHtmlSections;\r\n}\r\n\r\n/// Gets all bonuses the item provides, returning a key value list\r\nexport function getItemStatistics (itemInfo) {\r\n    if (!itemInfo || !itemInfo?.AbilitySpecial) {\r\n        return null;\r\n    }\r\n\r\n    let statistics = [];\r\n    // Array of phrases/keys to include check on AbilitySpecial keys\r\n    let itemStatIncludePhrases = [\r\n        \"bonus\", \"spell\", \"attack\", \"multiplier\", \"regen\",\r\n        \"resistance\", \"night_vision\"\r\n    ];\r\n\r\n    for (let i = 0; i < itemInfo.AbilitySpecial.length; i++) {\r\n        let keys = Object.keys(itemInfo.AbilitySpecial[i]);\r\n        // Iterate over each AbilitySpecial key and take \r\n        // matching keys in phrase array\r\n        for(let key of keys) {\r\n            for(let phrase of itemStatIncludePhrases) {\r\n                if (key.includes(phrase)) {\r\n                    let val = tryParseAbilitySpecialValue(itemInfo.AbilitySpecial[i], itemInfo.AbilitySpecial[i][key]);\r\n                    statistics.push({\r\n                        key: key,\r\n                        value: val,\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return statistics;\r\n}\r\n\r\n/// Checks an ItemInfo Disassemble rule if it matches the given rule\r\nexport function isDissassembleRule(itemInfo, eDisassembleRule) {\r\n    if (itemInfo && itemInfo.ItemDisassembleRule) {\r\n        let split = itemInfo.ItemDisassembleRule.split(\" | \");\r\n        for(let rule of split) {\r\n            if (rule === eDisassembleRule) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n/// Checks if an item requires charges to function\r\nexport function itemRequiresCharges (itemName) {\r\n    let itemInfo = getItemInfoFromName(itemName);\r\n    if (itemInfo) {\r\n        return itemInfo.ItemRequiresCharges === \"1\";\r\n    }\r\n    return false;\r\n}\r\n\r\n/// Checks an item alias from an ItemInfo to see if the phrase is included\r\nexport function itemAliasIncludes (itemAlias, includePhrase) {\r\n    if (itemAlias && includePhrase) {\r\n        let split = itemAlias.split(\";\");\r\n        for (let alias of split) {\r\n            if (alias.toLowerCase().indexOf(includePhrase.toLowerCase()) !== -1) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n/// Gets the list of enabled/disabled Neutrals in their tiers\r\nexport function getNeutralTierLayout () {\r\n    if (DOTANeutralsTierList) {\r\n        return DOTANeutralsTierList;\r\n    }\r\n    return null;\r\n}\r\n\r\n/// Attempts to get a DOTA_Tooltip_[Aa]bility_{tooltipKey} string in the \r\nexport function getFuzzyTooltipAbilityString (abilityStrings, key) {\r\n    let str = getLocalizedString(abilityStrings, `DOTA_Tooltip_ability_${key}`);\r\n    if (!str) {\r\n        str = getLocalizedString(abilityStrings, `DOTA_Tooltip_Ability_${key}`);\r\n    }\r\n    return str;\r\n}","import { lang as DOTAEngAbilityStrings } from \"../../data/dota2/languages/abilities_english.json\";\r\nimport { getFuzzyTooltipAbilityString } from \"../dataHelperItems\";\r\n\r\n/// Searches the passed strings file for the related string\r\n/// Very resource intensive\r\nexport function tryGetLocalizedString(languageStrings, stringKey) {\r\n    if (!languageStrings || !stringKey) {\r\n        return null;\r\n    }\r\n\r\n    let languageKeys = Object.keys(languageStrings.Tokens);\r\n    let matchingKeys = languageKeys.filter((key) => {\r\n        if (key.toLowerCase() === stringKey.toLowerCase()) {\r\n            return key;\r\n        } else {\r\n            return null;\r\n        }\r\n    });\r\n\r\n    if (matchingKeys && matchingKeys.length > 0) {\r\n        let displayName = languageStrings.Tokens[matchingKeys[0]];\r\n        return displayName;\r\n    } else {\r\n        return \"?\";\r\n    }\r\n}\r\n\r\nexport function tryGetTalentLocalizedString(languageStrings, stringKey) {\r\n    if (!languageStrings || !stringKey) {\r\n        return null;\r\n    }\r\n\r\n    let languageKeys = Object.keys(languageStrings.Tokens);\r\n    let matchingKeys = languageKeys.filter((key) => {\r\n        if (key.includes(stringKey)) {\r\n            return key;\r\n        } else {\r\n            return null;\r\n        }\r\n    });\r\n\r\n    if (matchingKeys && matchingKeys.length > 0) {\r\n        let displayName = languageStrings.Tokens[matchingKeys[0]];\r\n        return displayName;\r\n    } else {\r\n        return \"?\";\r\n    }\r\n}\r\n\r\n/// Quick method for retrieving localized string\r\n/// Main fast method to retrieve an exact key from strings\r\nexport function getLocalizedString(localeStrings, key) {\r\n    let string = localeStrings.Tokens[key];\r\n    return string ?? null;\r\n}\r\n\r\n/// Check if the localeStrings contains the key\r\nexport function containsLocalizedString (localeStrings, key) {\r\n    let containsVal = localeStrings.Tokens[key];\r\n    return containsVal != null;\r\n}\r\n\r\n/// Gets a string from the dota strings that contain the prefix \"DOTA_Toolip_\"\r\n/// Useful for getting general tooltip UI strings\r\nexport function getTooltipString(dotaStrings, tooltipKey) {\r\n    if (!dotaStrings || !tooltipKey) {\r\n        return null;\r\n    }\r\n\r\n    if (!tooltipKey.includes(\"DOTA_ToolTip_\")) {\r\n        tooltipKey = \"DOTA_ToolTip_\" + tooltipKey;\r\n    }\r\n    var match = dotaStrings.Tokens[tooltipKey];\r\n    return match;\r\n}\r\n\r\n/// Gets a string from the abilities strings that contain the prefix \"DOTA_Tooltip_ability\"\r\n/// Useful for retrieving localized strings of ability names\r\nexport function getTooltipAbilityString(abilityStrings, abilityKey) {\r\n    if (!abilityStrings || !abilityKey) {\r\n        return null;\r\n    }\r\n    if (!abilityKey.includes(\"DOTA_Tooltip_ability\")) {\r\n        abilityKey = \"DOTA_Tooltip_ability_\" + abilityKey;\r\n    }\r\n    var match = abilityStrings.Tokens[abilityKey];\r\n    return match;\r\n}\r\n\r\n/// Places a value in a translation string that contains a \"{s:value}\" inside\r\nexport function replaceStringValue(string, value) {\r\n    if (!string || value === undefined || value === null) {\r\n        return \"?\";\r\n    }\r\n\r\n    string = string.replace(/{.*}/, value);\r\n    return string;\r\n}\r\n\r\n/// Gets the english localized ability string\r\nexport function getEngAbilityLocalizedString (key) {\r\n    return getLocalizedString(DOTAEngAbilityStrings, key);\r\n}\r\n\r\n/// Gets the english localized DOTA_Tooltip_[Aa]bility_{key} string\r\nexport function getFuzzyEngAbilityLocalizedString (key) {\r\n    return getFuzzyTooltipAbilityString(DOTAEngAbilityStrings, key);\r\n}","/// Adds together stacked multiple sources as percentages to get their actual total as a percent\r\n/// Also known as multiplicative stacking\r\n/// 1 - (1 - sourceOne) * (1 - sourceTwo) * (1 - sourceThree) ...etc\r\nexport function calculateMultiplicativeStackingTotal(allStackedSources) {\r\n    if (!allStackedSources || (allStackedSources && allStackedSources.length <= 0)) {\r\n        return 0;\r\n    }\r\n\r\n    // Divide original value into 0.x and minus from 1 to get the reverse\r\n    let decimals = []\r\n    for(let source of allStackedSources) {\r\n        decimals.push(1 - (source / 100));\r\n    }\r\n\r\n    // multiply them all together \r\n    let total = decimals[0];\r\n    for(let i = 1; i < decimals.length; i++) {\r\n        total *= decimals[i];\r\n    }\r\n \r\n    // then minus from 1, and multiply by 100 to get value as a percentage\r\n    let percent = (1 - total) * 100;\r\n    return percent;\r\n}","// Enum for all Attack types\r\nexport const EAttackCapabilities = {\r\n    MELEE: \"DOTA_UNIT_CAP_MELEE_ATTACK\",\r\n    RANGED: \"DOTA_UNIT_CAP_RANGED_ATTACK\",\r\n};","import { \r\n    getItemInfoFromName,\r\n    getItemSpecialAbilityValue,\r\n    tryGetItemSpecialValue,\r\n    tryGetNeutralSpecialValue,\r\n    primaryAttributeToItemBonusKey,\r\n    itemsContainsScepter\r\n} from \"./dataHelperItems\";\r\n\r\nimport {\r\n    getAbilityInfoFromName,\r\n    getAbilitySpecialAbilityValue,\r\n    getAbilityOutputDamage,\r\n    tryGetAbilitySpecialAbilityValue,\r\n    parseAbilityValueByLevel,\r\n    isCooldownTalent,\r\n    isDamageTalent,\r\n    isCastRangeTalent,\r\n    getAbilitySpecialCastRangeValue,\r\n    getIncludesAbilitySpecialAbilityValue,\r\n    isAbilityBehaviour\r\n} from \"./dataHelperAbilities\";\r\n\r\nimport {\r\n    getTalentInfoFromName,\r\n    tryGetTalentSpecialAbilityValue,\r\n} from \"./dataHelperTalents\";\r\n\r\nimport {\r\n    getDotaBaseHero,\r\n    getSpecificAttributeStats,\r\n    getPrimaryAttributeStats,\r\n    getPrimaryAttribute,\r\n    isHeroAttackCapability\r\n} from \"./dataHelperHero\";\r\n\r\nimport {\r\n    calculateMultiplicativeStackingTotal\r\n} from \"./generalMath\";\r\n\r\nimport { EAttributes } from \"../enums/attributes\";\r\nimport { EAttackCapabilities } from \"../enums/hero\";\r\nimport { EAbilityBehaviour } from \"../enums/abilities\";\r\n\r\nimport { DOTAHeroes } from \"../data/dota2/json/npc_heroes.json\";\r\nimport { DOTAAbilities } from \"../data/dota2/json/npc_abilities.json\";\r\n\r\n/// Calculates the health of a hero\r\n/// https://dota2.gamepedia.com/Health\r\nexport function calculateHealth(hero, heroLevel, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }\r\n    \r\n    let HEALTH_PER_STRENGTH_POINT = 20;\r\n    let baseStrength = parseInt(hero.AttributeBaseStrength)\r\n    let strengthGain = parseFloat(hero.AttributeStrengthGain);\r\n\r\n    let baseHealth = 0;\r\n    if (DOTAHeroes && DOTAHeroes.npc_dota_hero_base && DOTAHeroes.npc_dota_hero_base.StatusHealth) {\r\n        baseHealth = parseInt(DOTAHeroes.npc_dota_hero_base.StatusHealth);\r\n    } else {\r\n        console.error(\"Can't add baseHealth to heroes health pool\");\r\n    }\r\n\r\n    let totalStr = baseStrength + (strengthGain * (heroLevel - 1));\r\n    let totalHealth = baseHealth + (totalStr * HEALTH_PER_STRENGTH_POINT);\r\n\r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            let bonusHealth = tryGetItemSpecialValue(item, \"bonus_health\");\r\n            if (bonusHealth) {\r\n                totalHealth += bonusHealth;\r\n            }\r\n\r\n            let bonusStr = tryGetItemSpecialValue(item, \"bonus_strength\");\r\n            if (bonusStr) {\r\n                totalHealth += bonusStr * HEALTH_PER_STRENGTH_POINT;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalHealth += bonusAllStats * HEALTH_PER_STRENGTH_POINT;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let bonusHealth = tryGetNeutralSpecialValue(neutral, \"bonus_health\");\r\n        if (bonusHealth) {\r\n            totalHealth += bonusHealth;\r\n        }\r\n\r\n        let bonusStr = tryGetNeutralSpecialValue(neutral, \"bonus_strength\");\r\n        if (bonusStr) {\r\n            totalHealth += bonusStr * HEALTH_PER_STRENGTH_POINT;\r\n        }\r\n\r\n        let bonusAllStats = tryGetNeutralSpecialValue(neutral, \"bonus_all_stats\");\r\n        if (bonusAllStats) {\r\n            totalHealth += bonusAllStats * HEALTH_PER_STRENGTH_POINT;\r\n        }\r\n\r\n        let maxHealth = tryGetNeutralSpecialValue(neutral, \"max_health\");\r\n        if (maxHealth) {\r\n            totalHealth += maxHealth;\r\n        }\r\n    }\r\n\r\n    if (abilities && abilities.length > 0) {\r\n        \r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            if (talent.includes(\"bonus_hp\")) {\r\n                let bonusHealth = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusHealth) {\r\n                    totalHealth += bonusHealth;\r\n                }\r\n            } else if (talent.includes(\"bonus_strength\")) {\r\n                let bonusStr = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusStr) {\r\n                    totalHealth += bonusStr * HEALTH_PER_STRENGTH_POINT;\r\n                }\r\n            } else if (talent.includes(\"bonus_all_stats\")) {\r\n                let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAllStats) {\r\n                    totalHealth += bonusAllStats * HEALTH_PER_STRENGTH_POINT;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return totalHealth.toFixed(0);\r\n}\r\n\r\n/// Calculates the mana pool of a hero\r\n/// https://dota2.gamepedia.com/Mana\r\nexport function calculateMana(hero, heroLevel, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }    \r\n\r\n    let MANA_PER_INT_POINT = 12;\r\n    let baseInt = parseInt(hero.AttributeBaseIntelligence);\r\n    let intGain = parseFloat(hero.AttributeIntelligenceGain);\r\n\r\n    let baseMana = 0;\r\n    if (DOTAHeroes && DOTAHeroes.npc_dota_hero_base && DOTAHeroes.npc_dota_hero_base.StatusMana) {\r\n        baseMana = parseInt(DOTAHeroes.npc_dota_hero_base.StatusMana);\r\n    } else {\r\n        console.error(\"Can't add baseMana to heroes mana pool\");\r\n    }\r\n\r\n    let totalInt = baseInt + (intGain * (heroLevel - 1));\r\n    let totalMana = baseMana + (totalInt * MANA_PER_INT_POINT);\r\n\r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            let bonusMana = tryGetItemSpecialValue(item, \"bonus_mana\");\r\n            if (bonusMana) {\r\n                totalMana += bonusMana;\r\n            }\r\n\r\n            let bonusInt = tryGetItemSpecialValue(item, \"bonus_intellect\");\r\n            if (bonusInt) {\r\n                totalMana += bonusInt * MANA_PER_INT_POINT;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalMana += bonusAllStats * MANA_PER_INT_POINT;\r\n            }\r\n        }\r\n    }\r\n    \r\n    if (neutral) {\r\n        let bonusMana = tryGetNeutralSpecialValue(neutral, \"bonus_mana\");\r\n        if (bonusMana) {\r\n            totalMana += bonusMana;\r\n        }\r\n\r\n        let bonusInt = tryGetNeutralSpecialValue(neutral, \"bonus_intellect\");\r\n        if (bonusInt) {\r\n            totalMana += bonusInt * MANA_PER_INT_POINT;\r\n        }\r\n\r\n        let bonusAllStats = tryGetNeutralSpecialValue(neutral, \"bonus_all_stats\");\r\n        if (bonusAllStats) {\r\n            totalMana += bonusAllStats * MANA_PER_INT_POINT;\r\n        }\r\n\r\n        // If witless shako, remove from total mana pool\r\n        if (neutral.item === \"item_witless_shako\") {\r\n            let maxMana = tryGetNeutralSpecialValue(neutral, \"max_mana\");\r\n            if (maxMana) {\r\n                totalMana -= maxMana;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (abilities && abilities.length > 0) {\r\n        for(let ability of abilities) {\r\n            let bonusMana = tryGetAbilitySpecialAbilityValue(ability, \"bonus_mana\");\r\n            if (bonusMana) {\r\n                totalMana += bonusMana;\r\n            }\r\n\r\n            let bonusInt = tryGetAbilitySpecialAbilityValue(ability, \"bonus_intellect\");\r\n            if (bonusInt) {\r\n                totalMana += bonusInt * MANA_PER_INT_POINT;\r\n            }\r\n\r\n            let bonusAllStats = tryGetAbilitySpecialAbilityValue(ability, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalMana += bonusAllStats * MANA_PER_INT_POINT;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            if (talent.includes(\"bonus_mp\")) {\r\n                let bonusMana = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusMana) {\r\n                    totalMana += bonusMana;\r\n                }\r\n            } else if (talent.includes(\"bonus_intelligence\")) {\r\n                let bonusInt = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusInt) {\r\n                    totalMana += bonusInt * MANA_PER_INT_POINT;\r\n                }\r\n            } else if (talent.includes(\"bonus_all_stats\")) {\r\n                let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAllStats) {\r\n                    totalMana += bonusAllStats * MANA_PER_INT_POINT;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return totalMana.toFixed(0);\r\n}\r\n\r\n/* Hero gains +0.1 regen per each point of strength\r\n* https://dota2.gamepedia.com/Health_regeneration */\r\nexport function calculateHealthRegen(hero, heroLevel, items, neutral, abilities, talents) {\r\n    if(!hero) {\r\n        return \"?\";\r\n    }\r\n\r\n    let HP_REGEN_PER_STRENGTH = 0.1;\r\n    let baseStr = parseInt(hero.AttributeBaseStrength);\r\n    let strPerLvl = parseFloat(hero.AttributeStrengthGain);\r\n\r\n    let totalHpRegen = (baseStr + (strPerLvl * (heroLevel - 1))) * HP_REGEN_PER_STRENGTH;\r\n    if (hero.StatusHealthRegen) {\r\n        totalHpRegen += parseFloat(hero.StatusHealthRegen);\r\n    }\r\n\r\n    // total additional hp regen from sources that provide flat hp regen\r\n    let additionalHpRegen = 0;\r\n    // total from sources that give hp regen amplification\r\n    let allHpRegenAmpSources = [];\r\n    // total from sources that provide max health regen\r\n    let totalMaxHealthRegenPercent = 0;\r\n\r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            let regenAmt = tryGetItemSpecialValue(item, \"bonus_health_regen\");\r\n            if (regenAmt) {\r\n                additionalHpRegen += regenAmt;\r\n            }\r\n\r\n            let bonusRegen = tryGetItemSpecialValue(item, \"bonus_regen\");\r\n            if (bonusRegen) {\r\n                additionalHpRegen += bonusRegen;\r\n            }\r\n\r\n            let healthRegen = tryGetNeutralSpecialValue(item, \"hp_regen\");\r\n            if (healthRegen) {\r\n                additionalHpRegen += healthRegen;\r\n            }\r\n\r\n            let bonusStr = tryGetItemSpecialValue(item, \"bonus_strength\");\r\n            if(bonusStr) {\r\n                totalHpRegen += bonusStr * HP_REGEN_PER_STRENGTH;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalHpRegen += bonusAllStats * HP_REGEN_PER_STRENGTH;\r\n            }\r\n\r\n            let regenAmp = tryGetItemSpecialValue(item, \"hp_regen_amp\");\r\n            if (regenAmp) {\r\n                allHpRegenAmpSources.push(regenAmp);\r\n            }\r\n\r\n            let healthRegenPct = tryGetItemSpecialValue(item, \"health_regen_pct\");\r\n            if (healthRegenPct) {\r\n                totalMaxHealthRegenPercent = healthRegenPct;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let healthRegen = tryGetNeutralSpecialValue(neutral, \"hp_regen\");\r\n        if (healthRegen) {\r\n            additionalHpRegen += healthRegen;\r\n        }\r\n\r\n        let bonusHealthRegen = tryGetNeutralSpecialValue(neutral, \"bonus_health_regen\");\r\n        if (bonusHealthRegen) {\r\n            additionalHpRegen += bonusHealthRegen;\r\n        }\r\n\r\n        let bonusHpRegen = tryGetNeutralSpecialValue(neutral, \"bonus_hp_regen\");\r\n        if (bonusHpRegen) {\r\n            additionalHpRegen += bonusHpRegen;\r\n        }\r\n\r\n        let bonusStr = tryGetNeutralSpecialValue(neutral, \"bonus_strength\");\r\n        if (bonusStr) {\r\n            totalHpRegen += bonusStr * HP_REGEN_PER_STRENGTH;\r\n        }\r\n        \r\n        let bonusAllStats = tryGetNeutralSpecialValue(neutral, \"bonus_all_stats\");\r\n        if (bonusAllStats) {\r\n            totalHpRegen += bonusAllStats * HP_REGEN_PER_STRENGTH;\r\n        }\r\n\r\n        let regenAmp = tryGetNeutralSpecialValue(neutral, \"hp_regen_amp\");\r\n        if (regenAmp) {\r\n            allHpRegenAmpSources.push(regenAmp);\r\n        }\r\n    } \r\n\r\n    // if (abilities && abilities.length > 0) {\r\n    //     for (let ability of abilities) {\r\n    //         let bonusRegen = tryGetAbilitySpecialAbilityValue(ability, \"bonus_health_regen\", 1);\r\n    //         if (bonusRegen) {\r\n    //             totalHpRegen += bonusRegen;\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for (let talent of talents) {\r\n            // Only get bonus_hp_regen talents\r\n            if (talent.includes(\"bonus_hp_regen\")) {\r\n                let bonusRegen = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusRegen) {\r\n                    additionalHpRegen += bonusRegen;\r\n                }\r\n            } else if(talent.includes(\"bonus_strength\")) {\r\n                let bonusStr = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusStr) {\r\n                    totalHpRegen += bonusStr * HP_REGEN_PER_STRENGTH;\r\n                }\r\n            } else if (talent.includes(\"bonus_all_stats\")) {\r\n                let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAllStats) {\r\n                    totalHpRegen += bonusAllStats * HP_REGEN_PER_STRENGTH;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    let totalMaxHpRegen = 0;\r\n    if (totalMaxHealthRegenPercent > 0) {\r\n        let totalHealth = parseFloat(calculateHealth(hero, heroLevel, items, neutral, abilities, talents));\r\n        totalMaxHpRegen = (totalHealth / 100) * totalMaxHealthRegenPercent;\r\n    }\r\n\r\n    // Merge all stacked amp sources\r\n    let regenAmpTotalPercent = calculateMultiplicativeStackingTotal(allHpRegenAmpSources);\r\n\r\n    // Finally apply hp regen amp to total and additional\r\n    let ampedHpRegen = 0;\r\n    if (regenAmpTotalPercent > 0) {\r\n        ampedHpRegen = ((totalHpRegen + totalMaxHpRegen) / 100) * regenAmpTotalPercent;\r\n    }\r\n\r\n    // Add up additional sources from item hp regen, max hp regen & hp regen amp\r\n    let finalAdditional = additionalHpRegen + totalMaxHpRegen + ampedHpRegen;\r\n    return {\r\n        total: totalHpRegen,\r\n        additional: finalAdditional,\r\n    };\r\n}\r\n\r\n/* Each point of intelligence increases the hero's mana regeneration by 0.05.\r\n * https://dota2.gamepedia.com/Mana_regeneration */\r\nexport function calculateManaRegen(hero, heroLevel, items, neutral, abilities, talents) {\r\n    if(!hero) {\r\n        return \"?\";\r\n    }\r\n    let MANA_REGEN_PER_INT = 0.05;\r\n    let baseInt = parseInt(hero.AttributeBaseIntelligence);\r\n    let intGain = parseFloat(hero.AttributeIntelligenceGain);\r\n\r\n    let totalManaRegen = (baseInt + (intGain * (heroLevel - 1))) * MANA_REGEN_PER_INT;\r\n    if (hero.StatusManaRegen) {\r\n        totalManaRegen += parseFloat(hero.StatusManaRegen);\r\n    }\r\n\r\n    let totalManaRegenPercentAmp = 100;\r\n\r\n    if(items && items.length > 0) {\r\n        for(let item of items) {\r\n            let bonusManaRegen = tryGetItemSpecialValue(item, \"bonus_mana_regen\");\r\n            if (bonusManaRegen) {\r\n                totalManaRegen += bonusManaRegen;\r\n            }\r\n\r\n            let bonusInt = tryGetItemSpecialValue(item, \"bonus_intelligence\");\r\n            if(bonusInt) {\r\n                let regen = bonusInt * MANA_REGEN_PER_INT; \r\n                totalManaRegen += regen;\r\n            }\r\n\r\n            let bonusIntellect = tryGetItemSpecialValue(item, \"bonus_intellect\");\r\n            if (bonusIntellect) {\r\n                let regen = bonusIntellect * MANA_REGEN_PER_INT; \r\n                totalManaRegen += regen;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalManaRegen += bonusAllStats * MANA_REGEN_PER_INT;\r\n            }\r\n\r\n            // If bloodstone mp regen per charge\r\n            let regenPerCharge = tryGetItemSpecialValue(item, \"regen_per_charge\");\r\n            if (item.extra?.charges && regenPerCharge) {\r\n                let bloodstoneCharges = item.extra.charges;\r\n                totalManaRegen += regenPerCharge * bloodstoneCharges;\r\n            }\r\n\r\n            /// any mana regen percentage multiplier\r\n            let manaRegenAmp = tryGetItemSpecialValue(item, \"mana_regen_multiplier\");\r\n            if (manaRegenAmp) {\r\n                totalManaRegenPercentAmp += manaRegenAmp;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let bonusInt = tryGetNeutralSpecialValue(neutral, \"bonus_intelligence\");\r\n        if (bonusInt) {\r\n            let manaRegen = bonusInt * MANA_REGEN_PER_INT;\r\n            totalManaRegen += manaRegen;\r\n        }\r\n\r\n        let bonusIntellect = tryGetNeutralSpecialValue(neutral, \"bonus_intellect\");\r\n        if (bonusIntellect) {\r\n            let regen = bonusIntellect * MANA_REGEN_PER_INT; \r\n            totalManaRegen += regen;\r\n        }\r\n\r\n        let bonusAllStats = tryGetNeutralSpecialValue(neutral, \"bonus_all_stats\");\r\n        if (bonusAllStats) {\r\n            totalManaRegen += bonusAllStats * MANA_REGEN_PER_INT;\r\n        }\r\n\r\n        let bonusRegen = tryGetNeutralSpecialValue(neutral, \"mana_regen\");\r\n        if (bonusRegen) {\r\n            totalManaRegen += bonusRegen;\r\n        }\r\n    }\r\n\r\n    if(abilities && abilities.length > 0) {\r\n        for (let ability of abilities) {\r\n            let manaRegen = tryGetAbilitySpecialAbilityValue(ability, \"mana_regen\", 1);\r\n            if (manaRegen) {\r\n                totalManaRegen += manaRegen;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            // Only includes bonus mana point regen talents\r\n            if(talent.includes(\"bonus_mp_regen\")) {\r\n                let value = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (value) {\r\n                    totalManaRegen += parseFloat(value);\r\n                }\r\n            } else if (talent.includes(\"bonus_intelligence\")) {\r\n                let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAllStats) {\r\n                    totalManaRegen += bonusAllStats * MANA_REGEN_PER_INT;\r\n                }\r\n            } else if (talent.includes(\"bonus_all_stats\")) {\r\n                let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAllStats) {\r\n                    totalManaRegen += bonusAllStats * MANA_REGEN_PER_INT;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    let totalMP = totalManaRegen * (totalManaRegenPercentAmp / 100);\r\n    return totalMP.toFixed(1);\r\n}\r\n\r\n// Calculates the main armor of the hero\r\n// Each point of agility increases a hero's armor by 0.167 (1/6) https://dota2.gamepedia.com/Armor\r\nexport function calculateMainArmor(hero, level, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }\r\n\r\n    let ARMOR_PER_AGI = 0.167;\r\n    let baseArmor = parseInt(hero.ArmorPhysical);\r\n    let baseAgility = parseInt(hero.AttributeBaseAgility);\r\n    let agiPerLevel = parseFloat(hero.AttributeAgilityGain);\r\n\r\n    // Determine bonus agility from perLevel. Then work out main armor\r\n    let agiPer = (agiPerLevel * (level - 1));\r\n    let totalArmor = baseArmor + ((baseAgility + agiPer) * ARMOR_PER_AGI);\r\n    let totalBonusArmor = 0;\r\n    \r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            let bonusArmor = tryGetItemSpecialValue(item, \"bonus_armor\");\r\n            if (bonusArmor) {\r\n                totalBonusArmor += bonusArmor;\r\n            }\r\n\r\n            let bonusAgility = tryGetItemSpecialValue(item, \"bonus_agility\");\r\n            if (bonusAgility) {\r\n                let armor = bonusAgility * ARMOR_PER_AGI;\r\n                totalArmor += armor;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                let armor = bonusAllStats * ARMOR_PER_AGI;\r\n                totalArmor += armor;\r\n            }\r\n        }\r\n    }\r\n    \r\n    if(neutral) {\r\n        /// If item is nether_shawl, armor needs to be removed\r\n        if (neutral.item === \"item_nether_shawl\") {\r\n            let bonusArmor = tryGetNeutralSpecialValue(neutral, \"bonus_armor\");\r\n            if (bonusArmor) {\r\n                totalBonusArmor -= bonusArmor;\r\n            }\r\n        } else {\r\n            let bonusArmor = tryGetNeutralSpecialValue(neutral, \"bonus_armor\");\r\n            if (bonusArmor) {\r\n                totalBonusArmor += bonusArmor;\r\n            }\r\n        }\r\n        \r\n\r\n        let armorBonus = tryGetNeutralSpecialValue(neutral, \"armor_bonus\");\r\n        if (armorBonus) {\r\n            totalBonusArmor += armorBonus;\r\n        }\r\n\r\n        let bonusAgi = tryGetNeutralSpecialValue(neutral, \"bonus_agility\");\r\n        if (bonusAgi) {\r\n            totalArmor += bonusAgi * ARMOR_PER_AGI;\r\n        }\r\n\r\n        let bonusAllStats = tryGetNeutralSpecialValue(neutral, \"bonus_all_stats\");\r\n        if (bonusAllStats) {\r\n            let armor = bonusAllStats * ARMOR_PER_AGI;\r\n            totalArmor += armor;\r\n        }\r\n    }\r\n\r\n    /// ToDo: If abilities active, add active ability armor\r\n    /// or if ability is passive, apply bonus\r\n    // if (abilities && abilities.length > 0) {\r\n    //     for(let ability of abilities) {\r\n    //         /// if a passive, add armor depending on ability level\r\n    //         let abilInfo = getAbilityInfoFromName(ability);\r\n    //         if (isAbilityBehaviour(abilInfo.AbilityBehavior, [ EAbilityBehaviour.PASSIVE ])) {\r\n    //             let bonusArmor = tryGetAbilitySpecialAbilityValue(ability, \"bonus_armor\");\r\n    //             if (bonusArmor) {\r\n    //                 totalArmor += bonusArmor;\r\n    //             }\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    if(talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            if (talent.includes(\"bonus_armor\")) {\r\n                let bonusArmor = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusArmor) {\r\n                    totalBonusArmor += bonusArmor;\r\n                }\r\n            } else if (talent.includes(\"bonus_agility\")) {\r\n                let bonusAgility = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAgility) {\r\n                    totalArmor += bonusAgility * ARMOR_PER_AGI;\r\n                }\r\n            } else if (talent.includes(\"bonus_all_stats\")) {\r\n                let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAllStats) {\r\n                    totalArmor += bonusAllStats * ARMOR_PER_AGI;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Round to one decimal place\r\n    return {\r\n        armor: totalArmor,\r\n        additional: totalBonusArmor,\r\n    };\r\n}\r\n\r\n/// Returns the total amount of spell amplification as a percentage applied to the hero\r\nexport function calculateTotalSpellAmp (talents, items, neutral) {\r\n    let totalSpellAmp = 0;\r\n    \r\n    // Determine if any talents provide spell amp\r\n    if (talents && talents.length > 0) {\r\n        let ampTalent = talents.find(element => element.includes(\"spell_amplify\"));\r\n        if (ampTalent) {\r\n            let talentInfo = DOTAAbilities[ampTalent.name];\r\n            if (talentInfo) {\r\n                let spellAmpInfo = talentInfo.AbilitySpecial.find(element => element.value);\r\n                if (spellAmpInfo) {\r\n                    let spellAmpAmt = parseInt(spellAmpInfo.value);\r\n                    totalSpellAmp += spellAmpAmt;\r\n\r\n                    //console.log(`Talent ${ampTalent.name} provides ${spellAmpAmt}% spell amp`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Determine if current neutral item provides any spell amplification\r\n    if (neutral) {\r\n        let foundNeutral = getItemInfoFromName(neutral.item);\r\n        if (foundNeutral) {\r\n            let spellAmpAmount = getItemSpecialAbilityValue(foundNeutral, \"spell_amp\");\r\n            if (spellAmpAmount) {\r\n                totalSpellAmp += spellAmpAmount;\r\n                //console.log(`Neutral ${neutral.item} provides ${spellAmpAmount}% spell amp`);\r\n            }\r\n        }\r\n    }\r\n\r\n    /// Determine if any items provide spell amp\r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            let spellAmpAmount = tryGetItemSpecialValue(item, \"spell_amp\");\r\n            if (spellAmpAmount) {\r\n                totalSpellAmp += spellAmpAmount;\r\n                //console.log(`Item ${items[i].item} provides ${spellAmpAmt}% spell amp`);\r\n            }\r\n\r\n            let bonusSpellAmp = tryGetItemSpecialValue(item, \"bonus_spell_amp\");\r\n            if (bonusSpellAmp) {\r\n                totalSpellAmp += bonusSpellAmp;\r\n            }\r\n\r\n            let ampPerCharge = tryGetItemSpecialValue(item, \"amp_per_charge\");\r\n            if (item.extra?.charges && ampPerCharge) {\r\n                let bloodstoneCharges = item.extra.charges;\r\n                totalSpellAmp += ampPerCharge * bloodstoneCharges;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    return totalSpellAmp.toFixed(1);\r\n}\r\n\r\nexport function calculateStatusResist(items, neutral) {\r\n    let totalStatusResist = 0.0;\r\n\r\n    if (items && items.length > 0) {\r\n        for(let i = 0; i < items.length; i++) {\r\n            if (items[i].item) {\r\n                let itemInfo = getItemInfoFromName(items[i].item);\r\n                if (itemInfo) {\r\n                    let statusResistAmount = getItemSpecialAbilityValue(itemInfo, \"status_resistance\");\r\n                    if (statusResistAmount) {\r\n                        totalStatusResist += statusResistAmount;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let statusResistAmount = tryGetNeutralSpecialValue(neutral, \"status_resistance\");\r\n        if (statusResistAmount) {\r\n            totalStatusResist += statusResistAmount;\r\n        }\r\n    }\r\n\r\n    return totalStatusResist;\r\n}\r\n\r\nexport function calculateMagicResist (items, neutral, abilities) {\r\n    // Formula from Wiki\r\n    // Total magic resistance = 1 − ((1 − natural resistance) × (1 − first resistance bonus) × (1 − second resistance bonus) × (1 + first resistance reduction) × (1 + second resistance reduction))\r\n    \r\n    // Array of magic resistance values\r\n    let resistanceBonuses = [ ];\r\n    \r\n    if (DOTAHeroes && DOTAHeroes?.npc_dota_hero_base?.MagicalResistance) {\r\n        let baseResist = parseInt(DOTAHeroes.npc_dota_hero_base.MagicalResistance);\r\n        resistanceBonuses.push(baseResist);\r\n    }\r\n\r\n    if (items && items.length > 0) {\r\n        for(let i = 0; i < items.length; i++) {\r\n            let itemInfo = getItemInfoFromName(items[i].item);\r\n            if (itemInfo) {\r\n                let magicResistAmount = getItemSpecialAbilityValue(itemInfo, \"bonus_magic_resistance\");\r\n                if (magicResistAmount) {\r\n                    resistanceBonuses.push(magicResistAmount);\r\n                }\r\n\r\n                magicResistAmount = getItemSpecialAbilityValue(itemInfo, \"magic_resistance\");\r\n                if (magicResistAmount) {\r\n                    resistanceBonuses.push(magicResistAmount);\r\n                }\r\n\r\n                magicResistAmount = getItemSpecialAbilityValue(itemInfo, \"bonus_magical_armor\");\r\n                if (magicResistAmount) {\r\n                    resistanceBonuses.push(magicResistAmount);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let magicResistAmount = tryGetNeutralSpecialValue(neutral, \"magic_resistance\");\r\n        if (magicResistAmount) {\r\n            resistanceBonuses.push(magicResistAmount);\r\n        }\r\n    }\r\n\r\n    if (abilities && abilities.length > 0) { \r\n        for(let ability of abilities) {\r\n            // let magicResistAmount = tryGetAbilitySpecialAbilityValue(ability, \"magic_resistance\");\r\n            // if (magicResistAmount) {\r\n            //     resistanceBonuses.push(magicResistAmount);\r\n            // }\r\n            \r\n            let magicResistAmount = tryGetAbilitySpecialAbilityValue(ability, \"bonus_magic_resistance\");\r\n            if (magicResistAmount) {\r\n                resistanceBonuses.push(magicResistAmount);\r\n            }\r\n        }\r\n    }\r\n\r\n    // magic resistance stacks multiplicatively\r\n    let percent = calculateMultiplicativeStackingTotal(resistanceBonuses);\r\n    return percent.toFixed(2);\r\n}\r\n\r\n/// Calculates the total magic resistance of the hero\r\n/// https://dota2.gamepedia.com/Magic_resistance\r\nexport function calculatePhysicalResist (totalArmor) {\r\n    // Formula from https://www.dotabuff.com/blog/2018-11-30-understanding-720-armor-changes\r\n    //( 0.052 * armor ) ÷ ( 0.9 + 0.048 * |armor|)\r\n    let physResist = (0.052 * totalArmor) / (0.9 + 0.048 * Math.abs(totalArmor));\r\n    let percent = physResist * 100;\r\n    return percent < 0 ? 0 : percent.toFixed(0);\r\n}\r\n\r\n/// Calculates evasion\r\nexport function calculateEvasion(items, neutral, abilities, talents) {\r\n    let totalEvasion = 0.0;\r\n\r\n    if (abilities && abilities.length > 0) {\r\n        for(let ability of abilities) {\r\n            let bonusEvasion = tryGetAbilitySpecialAbilityValue(ability, \"bonus_evasion\");\r\n            if (bonusEvasion) {\r\n                totalEvasion += bonusEvasion;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            if (talent.includes(\"bonus_evasion\")) {\r\n                let bonusEvasion = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusEvasion) {\r\n                    totalEvasion += bonusEvasion;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (items && items.length > 0) {\r\n        for(let i = 0; i < items.length; i++) {\r\n            if (items[i].item) {\r\n                let itemInfo = getItemInfoFromName(items[i].item);\r\n                if (itemInfo) {\r\n                    let evasionAmount = getItemSpecialAbilityValue(itemInfo, \"bonus_evasion\");\r\n                    if (evasionAmount) {\r\n                        totalEvasion += evasionAmount;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return totalEvasion;\r\n}\r\n\r\n/// Returns the minimum and maximum right click damage of a hero\r\n// atkMin, atkMax, primaryAttributeStats, heroLevel = 1\r\nexport function calculateRightClickDamage(hero, level, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }\r\n    \r\n    let heroMainAttribute = getPrimaryAttribute(hero);\r\n    let atkMin = parseInt(hero.AttackDamageMin);\r\n    let atkMax = parseInt(hero.AttackDamageMax);\r\n    let primaryAttributeStats = getPrimaryAttributeStats(hero);\r\n\r\n    // Check if the hero attack is melee or ranged\r\n    let heroIsMelee = isHeroAttackCapability(hero, EAttackCapabilities.MELEE);\r\n\r\n    // Work out how much bonus attack hero recieves from their primary attribute\r\n    let totalPrimaryAttribute = primaryAttributeStats.base + (primaryAttributeStats.perLevel * (level - 1));\r\n    // Calc additional damage from sources\r\n    let totalAdditional = 0;\r\n\r\n    /* Iterate over all items, neutral, abilities and talents to\r\n        get all primary attribute and all stat bonuses\r\n        */\r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            let allAttrKeys = primaryAttributeToItemBonusKey(heroMainAttribute);\r\n            for(let key of allAttrKeys) {\r\n                let bonusPrimaryAttr = tryGetItemSpecialValue(item, key);\r\n                if (bonusPrimaryAttr) {\r\n                    totalPrimaryAttribute += bonusPrimaryAttr;\r\n                }\r\n            }\r\n\r\n            let bonusPrimaryStat = tryGetItemSpecialValue(item, \"bonus_primary_stat\");\r\n            if (bonusPrimaryStat) {\r\n                totalPrimaryAttribute += bonusPrimaryStat;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalPrimaryAttribute += bonusAllStats;\r\n            }\r\n\r\n            let bonusDmg = tryGetItemSpecialValue(item, \"bonus_damage\");\r\n            if (bonusDmg) {\r\n                totalAdditional += bonusDmg;\r\n            }\r\n\r\n            if (heroIsMelee) {\r\n                let bonusMeleeDmg = tryGetItemSpecialValue(item, \"bonus_damage_melee\");\r\n                if (bonusMeleeDmg) {\r\n                    totalAdditional += bonusMeleeDmg;\r\n                }\r\n            } else {\r\n                let bonusRangedDmg = tryGetItemSpecialValue(item, \"bonus_damage_ranged\");\r\n                if (bonusRangedDmg) {\r\n                    totalAdditional += bonusRangedDmg;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let allAttrKeys = primaryAttributeToItemBonusKey(heroMainAttribute);\r\n        for(let key of allAttrKeys) {\r\n            let bonusPrimaryAttr = tryGetNeutralSpecialValue(neutral, key);\r\n            if (bonusPrimaryAttr) {\r\n                totalPrimaryAttribute += bonusPrimaryAttr;\r\n            }\r\n        }\r\n\r\n        let bonusPrimaryStat = tryGetNeutralSpecialValue(neutral, \"primary_stat\");\r\n        if (bonusPrimaryStat) {\r\n            totalPrimaryAttribute += bonusPrimaryStat;\r\n        }\r\n\r\n        let bonusAllStats = tryGetNeutralSpecialValue(neutral, \"bonus_all_stats\");\r\n        if (bonusAllStats) {\r\n            totalPrimaryAttribute += bonusAllStats;\r\n        }\r\n\r\n        let bonusDmg = tryGetNeutralSpecialValue(neutral, \"bonus_damage\");\r\n        if (bonusDmg) {\r\n            totalAdditional += bonusDmg;\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            let allAttrKeys = primaryAttributeToItemBonusKey(heroMainAttribute);\r\n            for(let key of allAttrKeys) {\r\n                if (talent.includes(key)) {\r\n                    let bonusPrimaryAttr = tryGetNeutralSpecialValue(talent, \"value\");\r\n                    if (bonusPrimaryAttr) {\r\n                        totalPrimaryAttribute += bonusPrimaryAttr;\r\n                    }\r\n                }\r\n            }\r\n            \r\n            if (talent.includes(\"bonus_all_stats\")) {\r\n                let allStats = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (allStats) {\r\n                    totalPrimaryAttribute += allStats;\r\n                }\r\n            } else if (talent.includes(\"bonus_attack_damage\")) {\r\n                let bonusDmg = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusDmg) {\r\n                    totalAdditional += bonusDmg;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /// Damage from primary attribute counts as part of the Min-Max\r\n    /// whereas bonus damage (+5 damage) from sources count as additional\r\n\r\n    let min = atkMin + totalPrimaryAttribute;\r\n    let max = atkMax + totalPrimaryAttribute;\r\n\r\n    return {\r\n        /// minimum attack damage of the hero\r\n        min: Math.floor(min),\r\n        /// maximum attack damage of the hero\r\n        max: Math.floor(max),\r\n        additional: totalAdditional,\r\n    };\r\n}\r\n\r\n/// Returns info on the attack time of the hero\r\nexport function calculateAttackTime(hero, level, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }\r\n    \r\n    let MAX_ATTACK_SPEED = 700;\r\n\r\n    // Check if hero has different attack rate or attack speed than base hero\r\n    let totalAttackSpeed = parseInt(getDotaBaseHero()?.BaseAttackSpeed);\r\n\r\n    /// Get base agi stats\r\n    let agiStats = getSpecificAttributeStats(EAttributes.ATTR_AGILITY, hero);\r\n    let baseAgi = agiStats.base;\r\n    let agiPerLevel = agiStats.perLevel;\r\n\r\n    let totalAgi = baseAgi + (agiPerLevel * (level - 1));\r\n\r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            let bonusAttackSpeed = tryGetItemSpecialValue(item, \"bonus_attack_speed\");\r\n            if (bonusAttackSpeed) {\r\n                totalAttackSpeed += bonusAttackSpeed;\r\n            }\r\n\r\n            let bonusAgility = tryGetItemSpecialValue(item, \"bonus_agility\");\r\n            if (bonusAgility) {\r\n                totalAgi += bonusAgility;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalAgi += bonusAllStats;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let bonusAttackSpeed = tryGetNeutralSpecialValue(neutral, \"bonus_attack_speed\");\r\n        if (bonusAttackSpeed) {\r\n            totalAttackSpeed += bonusAttackSpeed;\r\n        }\r\n\r\n        let attackSpeed = tryGetNeutralSpecialValue(neutral, \"attack_speed\");\r\n        if (attackSpeed) {\r\n            totalAttackSpeed += attackSpeed;\r\n        }\r\n    }\r\n\r\n    // Only actives that gives attack speed bonuses\r\n    // if (abilities && abilities.length > 0) {\r\n    // }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            let bonusAttackSpeed = tryGetTalentSpecialAbilityValue(talent, \"bonus_attack_speed\");\r\n            if (bonusAttackSpeed) {\r\n                totalAttackSpeed += bonusAttackSpeed;\r\n            }\r\n\r\n            let bonusAgility = tryGetTalentSpecialAbilityValue(talent, \"bonus_agility\");\r\n            if (bonusAgility) {\r\n                totalAgi += bonusAgility;\r\n            }\r\n\r\n            let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalAgi += bonusAllStats;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// Check that max atk speed hasn't been reached\r\n    if ((totalAttackSpeed + totalAgi) > MAX_ATTACK_SPEED) {\r\n        // Use totalAttackSpeed at max if so, reset agi since 1 agi = 1 atk speed\r\n        totalAttackSpeed = MAX_ATTACK_SPEED;\r\n        totalAgi = 0;\r\n    }\r\n\r\n    let attacksPerSec = ((totalAttackSpeed + totalAgi) * 0.01) / 1.7;\r\n    let attackTime = 1.7 / ((totalAttackSpeed + totalAgi) * 0.01);\r\n    attackTime = 1 / attacksPerSec;\r\n\r\n    let atkSpeed = totalAttackSpeed + totalAgi;\r\n\r\n    return {\r\n        /// Amount of seconds inbetween attacks\r\n        attackTime: attackTime.toFixed(2),\r\n        /// Amount of attacks per second\r\n        attacksPerSecond: attacksPerSec.toFixed(2),\r\n        /// Attack speed value shown in UI of dota\r\n        attackSpeed: atkSpeed.toFixed(0),\r\n    };\r\n}\r\n\r\n/// Calculates how much output damage an ability will do to an enemy, factoring in any items\r\nexport function calculateSpellDamage(abilityName, abilityInfo, abilityLevel, items, neutral, talents) {\r\n    if (!abilityLevel || !abilityInfo) {\r\n        return -1;\r\n    }\r\n\r\n    // Get normal dmg output of ability\r\n    let abilityDamageInfo = getAbilityOutputDamage(abilityInfo, abilityLevel);\r\n    \r\n    // Add up spellAmp from all bonuses to calculate at end\r\n    let totalSpellAmpPercent = 0;\r\n\r\n    /// Value bonus from talent\r\n    let talentBonus = 0;\r\n\r\n    if (items) {\r\n        // Add item spell damage increase\r\n        for(let item of items) {\r\n            let spellAmp = tryGetItemSpecialValue(item, \"spell_amp\");\r\n            if (spellAmp) {\r\n                totalSpellAmpPercent += spellAmp;\r\n            }\r\n\r\n            let bonusSpellAmp = tryGetItemSpecialValue(item, \"bonus_spell_amp\");\r\n            if (bonusSpellAmp) {\r\n                totalSpellAmpPercent += bonusSpellAmp;\r\n            }\r\n\r\n            // get current bloodstone charges and amp correctly\r\n            let chargeCount = item.extra?.charges;\r\n            let ampPerCharge = tryGetItemSpecialValue(item, \"amp_per_charge\");\r\n            if (ampPerCharge && chargeCount) {\r\n                totalSpellAmpPercent += (ampPerCharge * chargeCount);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        //Add neutral item spell dmg\r\n        let neutralInfo = getItemInfoFromName(neutral.item);\r\n        if (neutralInfo && neutralInfo.AbilitySpecial) {\r\n            for (let i = 0; i < neutralInfo.AbilitySpecial.length; i++) {\r\n                let special = neutralInfo.AbilitySpecial[i];\r\n                // Spell amp\r\n                if (special.bonus_spell_amp) {\r\n                    let bonusSpellAmp = parseInt(special.bonus_spell_amp);\r\n                    totalSpellAmpPercent += bonusSpellAmp; \r\n                }\r\n\r\n                if (special.spell_amp) {\r\n                    let bonusSpellAmp = parseInt(special.spell_amp);\r\n                    totalSpellAmpPercent += bonusSpellAmp;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        // Add spell amplify from any selected talents\r\n        for(let talent of talents) {\r\n            if (talent.includes(\"spell_amplify\")) {\r\n                let ampTalentValue = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (ampTalentValue) {\r\n                    totalSpellAmpPercent += ampTalentValue;\r\n                }\r\n            } \r\n            /// if a unique talent specific to a hero ability\r\n            else if (talent.includes(\"special_bonus_unique\")) {\r\n                /// Search Abilities_English.json for string of talent to \r\n                /// check if it is a damage talent modifier and apply\r\n                if (isDamageTalent(talent)) {\r\n                    let linkedAbility = tryGetTalentSpecialAbilityValue(talent, \"ad_linked_ability\");\r\n\r\n                    // if linked ability is equal to current one\r\n                    if (linkedAbility && linkedAbility === abilityName) {\r\n                        let value = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                        if (value) {\r\n                            talentBonus = value;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    let totalAbilDmg = abilityDamageInfo.damage + talentBonus;\r\n    let abilityDamage = calculateSpellAmp(totalAbilDmg, totalSpellAmpPercent);\r\n\r\n    return {\r\n        damage: abilityDamage === 0 ? null : abilityDamage,\r\n        isPercent: abilityDamageInfo.isPercent,\r\n    };\r\n}\r\n\r\n/// Calculates and applies spell amp to the spell damage and returns the result\r\nexport function calculateSpellAmp (spellDamage, spellAmpPercent) {\r\n    return spellDamage + ((spellDamage / 100) * spellAmpPercent);\r\n}\r\n\r\n/// Calculates ability mana cost with items, neutrals and talents that contain reductions\r\nexport function calculateManaCost(abilityInfo, abilityLevel, items, neutral, talents) {\r\n    if (abilityLevel <= 0) {\r\n        return null;\r\n    }\r\n    \r\n    let manaCost = null;\r\n\r\n    // Get inital mana cost amount\r\n    if (abilityInfo && abilityInfo.AbilityManaCost) {\r\n        manaCost = parseAbilityValueByLevel(abilityInfo.AbilityManaCost, abilityLevel);\r\n    }\r\n\r\n    // Determine mana reductions from items, neutral, talents\r\n    // Take all percentages and calculate at end\r\n    let totalManaCostReducePercent = 0;\r\n\r\n    if (items) {\r\n        for(let item of items) {\r\n            let itemInfo = getItemInfoFromName(item.item);\r\n            if(itemInfo) {\r\n                let manaCostReduceAmount = getItemSpecialAbilityValue(itemInfo, \"manacost_reduction\");\r\n                if(manaCostReduceAmount) {\r\n                    totalManaCostReducePercent += manaCostReduceAmount;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let neutralInfo = getItemInfoFromName(neutral.item);\r\n        if (neutralInfo) {\r\n            let costReductionAmount = getItemSpecialAbilityValue(neutralInfo, \"manacost_reduction\");\r\n            if (costReductionAmount) {\r\n                totalManaCostReducePercent += costReductionAmount;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (talents) {\r\n        for(let talent of talents) {\r\n            // Only apply mana reducing talents\r\n            if (talent.includes(\"mana_reduction\")) {\r\n                let reduceAmount = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (reduceAmount) {\r\n                    totalManaCostReducePercent += reduceAmount;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // If ability has a mana value and has mana reductions\r\n    if (manaCost && totalManaCostReducePercent > 0) {\r\n        let removeManaAmt = (manaCost / 100) * totalManaCostReducePercent;\r\n        manaCost -= removeManaAmt;\r\n    }\r\n\r\n    return manaCost;\r\n}\r\n\r\n/// Calculates ability cooldown with items, neutrals, talents and abilities\r\n/// https://liquipedia.net/dota2/Cooldown_Reduction\r\nexport function calculateAbilityCooldown(abilityName, abilityInfo, abilityLevel, items, neutral, talents) {\r\n    if (abilityLevel <= 0) {\r\n        return null;\r\n    }\r\n    \r\n    let cooldown = null;\r\n    let charges = null;\r\n    let fixedAmtReductionSeconds = 0;\r\n\r\n    if (abilityInfo && abilityInfo.AbilityCooldown) {\r\n        cooldown = parseAbilityValueByLevel(abilityInfo.AbilityCooldown, abilityLevel);\r\n\r\n        /// if ability uses charges, use charge cooldown\r\n        if (cooldown === 0 && abilityInfo.AbilityCharges && abilityInfo.AbilityChargeRestoreTime) {\r\n            cooldown = parseInt(abilityInfo.AbilityChargeRestoreTime);\r\n            charges = parseInt(abilityInfo.AbilityCharges);\r\n        }\r\n\r\n        // if AbilityInfo has a Scepter upgrade and items contains scepter\r\n        let requiresScepter = getAbilitySpecialAbilityValue(abilityInfo, \"RequiresScepter\") === \"1\";\r\n        if (requiresScepter && itemsContainsScepter(items)) {\r\n            let scepterCharges = getIncludesAbilitySpecialAbilityValue(abilityInfo, \"charges\", abilityLevel);\r\n            charges = scepterCharges;\r\n        }\r\n    }\r\n\r\n    let allReductions = [];\r\n    if (items) {\r\n        for (let item of items) {\r\n            if (item && item.item) {\r\n                let itemInfo = getItemInfoFromName(item.item);\r\n                if (itemInfo) {\r\n                    let bonusCooldown = getItemSpecialAbilityValue(itemInfo, \"bonus_cooldown\");\r\n                    if (bonusCooldown) {\r\n                        allReductions.push(bonusCooldown);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let neutralInfo = getItemInfoFromName(neutral.item);\r\n        if (neutralInfo) {\r\n            let bonusCooldown = getItemSpecialAbilityValue(neutralInfo, \"bonus_cooldown\");\r\n            if (bonusCooldown) {\r\n                allReductions.push(bonusCooldown);\r\n            } \r\n        }\r\n    }\r\n\r\n    if (talents) {\r\n        for(let talent of talents) {\r\n            // Ignore talent if it isn't a cd reduction one\r\n            if (talent.includes(\"cooldown_reduction\")) {\r\n                let reduction = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (reduction) {\r\n                    allReductions.push(reduction);\r\n                }\r\n            }\r\n            else if (talent.includes(\"special_bonus_unique\")) {\r\n                if (isCooldownTalent(talent)) {\r\n                    let linkedAbility = tryGetTalentSpecialAbilityValue(talent, \"ad_linked_ability\");\r\n                    if (linkedAbility === abilityName) {\r\n                        let value = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                        if (value) {\r\n                            fixedAmtReductionSeconds += value;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /// Remove any fixed amount cooldown reductions first before\r\n    /// applying any other reductions\r\n    let totalCooldown = cooldown - fixedAmtReductionSeconds;\r\n\r\n    let sourceOfReductions = [];\r\n    for(let reduction of allReductions) {\r\n        let decimal = reduction / 100;\r\n        sourceOfReductions.push((1 - decimal));\r\n    }\r\n\r\n    for(let reduce of sourceOfReductions) {\r\n        totalCooldown *= reduce;\r\n    }\r\n\r\n    return {\r\n        charges: charges,\r\n        cooldown: totalCooldown > 0 ? totalCooldown.toFixed(2) : null,\r\n    };\r\n}\r\n\r\n/// Calculates the movement speed of the hero, factoring in their items, neutral, abilities and talents\r\nexport function calculateMoveSpeed (hero, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }\r\n\r\n    let baseSpeed = parseInt(hero.MovementSpeed);\r\n    let flatBonus = 0;\r\n    let percentageBasedBonuses = 0;\r\n\r\n    if (items && items.length > 0) {\r\n        for (let item of items) {\r\n            let moveSpeed = tryGetItemSpecialValue(item, \"bonus_movement_speed\");\r\n            if (moveSpeed) {\r\n                flatBonus += moveSpeed;\r\n            }\r\n            \r\n            let bonusMovement = tryGetItemSpecialValue(item, \"bonus_movement\");\r\n            if (bonusMovement) {\r\n                flatBonus += bonusMovement;\r\n            }\r\n\r\n            let moveSpeedPercentBonus = tryGetItemSpecialValue(item, \"movement_speed_percent_bonus\");\r\n            if (moveSpeedPercentBonus) {\r\n                percentageBasedBonuses += moveSpeedPercentBonus;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let bonusMoveSpeed = tryGetNeutralSpecialValue(neutral, \"bonus_movement_speed\");\r\n        if (bonusMoveSpeed) {\r\n            flatBonus += bonusMoveSpeed;\r\n        }\r\n\r\n        let moveSpeedPercentBonus = tryGetNeutralSpecialValue(neutral, \"movement_speed_percent_bonus\");\r\n        if (moveSpeedPercentBonus) {\r\n            percentageBasedBonuses += moveSpeedPercentBonus;\r\n        }\r\n    }\r\n\r\n    /// Abilities are actives so dont include since no way in UI to activate an ability yet\r\n    // if (abilities && abilities.length > 0) {\r\n    //     for(let ability of abilities) {\r\n    //         let bonusMoveSpeed = tryGetAbilitySpecialAbilityValue(ability, \"bonus_movespeed\");\r\n    //         if (bonusMoveSpeed) {\r\n    //             flatBonus += bonusMoveSpeed;\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            if (talent.includes(\"bonus_movement_speed\")) {\r\n                let bonusSpeed = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusSpeed) {\r\n                    flatBonus += bonusSpeed;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    let total = baseSpeed + flatBonus;\r\n    return total;\r\n}\r\n\r\nexport function calculateAttackRange (hero, level, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }\r\n\r\n    let isHeroRanged = isHeroAttackCapability(hero, EAttackCapabilities.RANGED);\r\n\r\n    let baseRange = parseInt(hero.AttackRange);\r\n    let totalAttackRange = baseRange;\r\n\r\n    // Dont add bonuses if hero isn't ranged\r\n    if (isHeroRanged) {\r\n        if (items && items.length > 0) {\r\n            for(let item of items) {\r\n                let baseRange = tryGetItemSpecialValue(item, \"base_attack_range\");\r\n                if (baseRange) {\r\n                    totalAttackRange += baseRange;\r\n                }\r\n            }\r\n        }\r\n    \r\n        if (neutral) {\r\n            let rangeBonus = tryGetNeutralSpecialValue(neutral, \"attack_range_bonus\");\r\n            if (rangeBonus) {\r\n                totalAttackRange += rangeBonus;\r\n            }\r\n    \r\n            let bonusAttackRange = tryGetNeutralSpecialValue(neutral, \"bonus_attack_range\");\r\n            if (bonusAttackRange) {\r\n                totalAttackRange += bonusAttackRange;\r\n            }\r\n        }\r\n\r\n        if (abilities && abilities.length > 0) {\r\n            for(let ability of abilities) {\r\n                let bonusAttackRange = tryGetAbilitySpecialAbilityValue(ability, \"bonus_attack_range\", 1);\r\n                if (bonusAttackRange) {\r\n                    totalAttackRange += bonusAttackRange;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (talents && talents.length > 0) {\r\n            for(let talent of talents) {\r\n                if (talent.includes(\"bonus_attack_range\")) {\r\n                    let bonusAttackRange = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                    if (bonusAttackRange) {\r\n                        totalAttackRange += bonusAttackRange;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        // Melee units, apply any melee attack range bonuses\r\n        if (neutral) {\r\n            let bonusMeleeAttackRange = tryGetNeutralSpecialValue(neutral, \"melee_attack_range\");\r\n            if (bonusMeleeAttackRange) {\r\n                totalAttackRange += bonusMeleeAttackRange;\r\n            }\r\n        }\r\n    }\r\n\r\n    return totalAttackRange;\r\n}\r\n\r\n/// Calculates the correct attribute stats for a given hero\r\nexport function calculateAttribute(attribute, hero, level, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }\r\n\r\n    let attributeStats = getSpecificAttributeStats(attribute, hero);\r\n    let baseAttribute = attributeStats.base;\r\n    let attributePerLevel = attributeStats.perLevel;\r\n\r\n    let totalAttribute = baseAttribute + (attributePerLevel * (level - 1));\r\n    let additionalAttribute = 0;\r\n\r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            switch(attribute) {\r\n                case EAttributes.ATTR_STRENGTH:\r\n                    {\r\n                        let bonusStr = tryGetItemSpecialValue(item, \"bonus_strength\");\r\n                        if (bonusStr) {\r\n                            additionalAttribute += bonusStr;\r\n                        }\r\n                        break;\r\n                    }\r\n                case EAttributes.ATTR_AGILITY:\r\n                    {\r\n                        let bonusAgi = tryGetItemSpecialValue(item, \"bonus_agility\");\r\n                        if (bonusAgi) {\r\n                            additionalAttribute += bonusAgi;\r\n                        }\r\n                        break;\r\n                    }\r\n                case EAttributes.ATTR_INTELLIGENCE:\r\n                    {\r\n                        let bonusIntellect = tryGetItemSpecialValue(item, \"bonus_intellect\");\r\n                        if (bonusIntellect) {\r\n                            additionalAttribute += bonusIntellect;\r\n                        }\r\n\r\n                        let bonusInt = tryGetItemSpecialValue(item, \"bonus_intelligence\");\r\n                        if (bonusInt) {\r\n                            additionalAttribute += bonusInt;\r\n                        }\r\n                        break;    \r\n                    }\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                additionalAttribute += bonusAllStats;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        switch(attribute) {\r\n            case EAttributes.ATTR_STRENGTH:\r\n                    {\r\n                        let bonusStr = tryGetNeutralSpecialValue(neutral, \"bonus_strength\");\r\n                        if (bonusStr) {\r\n                            additionalAttribute += bonusStr;\r\n                        }\r\n                        break;\r\n                    }\r\n            case EAttributes.ATTR_AGILITY:\r\n                {\r\n                    let bonusAgi = tryGetNeutralSpecialValue(neutral, \"bonus_agility\");\r\n                    if (bonusAgi) {\r\n                        additionalAttribute += bonusAgi;\r\n                    }\r\n                    break;\r\n                }\r\n            case EAttributes.ATTR_INTELLIGENCE:\r\n                {\r\n                    let bonusInt = tryGetNeutralSpecialValue(neutral, \"bonus_intelligence\");\r\n                    if (bonusInt) {\r\n                        additionalAttribute += bonusInt;\r\n                    }\r\n\r\n                    let bonusIntellect = tryGetNeutralSpecialValue(neutral, \"bonus_intellect\");\r\n                    if (bonusIntellect) {\r\n                        additionalAttribute += bonusIntellect;\r\n                    }\r\n                    break;    \r\n                }\r\n            default:\r\n                break;\r\n        }\r\n\r\n        let bonusAllStats = tryGetNeutralSpecialValue(neutral, \"bonus_all_stats\");\r\n        if (bonusAllStats) {\r\n            additionalAttribute += bonusAllStats;\r\n        }\r\n\r\n        /// Add primary stat bonus if current attribute matches hero's primary\r\n        if (attribute == hero.AttributePrimary) {\r\n            let primaryStat = tryGetNeutralSpecialValue(neutral, \"primary_stat\");\r\n            if (primaryStat) {\r\n                additionalAttribute += primaryStat;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            switch(attribute) {\r\n                case EAttributes.ATTR_STRENGTH:\r\n                        {\r\n                            if (talent.includes(\"bonus_strength\")) {\r\n                                let bonusStr = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                                if (bonusStr) {\r\n                                    additionalAttribute += bonusStr;\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                case EAttributes.ATTR_AGILITY:\r\n                    {\r\n                        if (talent.includes(\"bonus_agility\")) {\r\n                            let bonusAgi = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                            if (bonusAgi) {\r\n                                additionalAttribute += bonusAgi;\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                case EAttributes.ATTR_INTELLIGENCE:\r\n                    {\r\n                        if (talent.includes(\"bonus_intelligence\")) {\r\n                            let bonusInt = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                            if (bonusInt) {\r\n                                additionalAttribute += bonusInt;\r\n                            }\r\n                        }\r\n                        break;    \r\n                    }\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            if (talent.includes(\"all_stats\")) {\r\n                let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAllStats) {\r\n                    additionalAttribute += bonusAllStats;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // If primary attribute, round down else us normal rounding\r\n    let isPrimaryAttr = getPrimaryAttribute(hero) === attribute;\r\n    if (isPrimaryAttr) {\r\n        totalAttribute = Math.floor(totalAttribute)\r\n    } else {\r\n        totalAttribute = parseInt(totalAttribute.toFixed(0));\r\n    }\r\n\r\n    return {\r\n        /// Base attribute amount, includes per level\r\n        attribute: totalAttribute,\r\n        /// Additional attribute amount, from items/neutral/abils/talents\r\n        additionalAttribute: additionalAttribute.toFixed(0),\r\n        /// Amount of attribute per level\r\n        perLevel: attributePerLevel,\r\n    };\r\n}\r\n\r\nexport function calculateAbilityCastRange (abilityName, abilityInfo, abilityLevel, items, neutral, talents) {\r\n    if (!abilityInfo) {\r\n        return \"?\";\r\n    }\r\n\r\n    /// Use CastRange or find range inside AbilitySpecial\r\n    let baseCastRange = parseInt(abilityInfo.AbilityCastRange);\r\n    if (!baseCastRange) {\r\n        let foundRange = getAbilitySpecialCastRangeValue(abilityInfo, \"_range\", abilityLevel.level);\r\n        if (foundRange) {\r\n            baseCastRange = foundRange;\r\n        } else {\r\n            // Cant determine a cast range, none\r\n            return null;\r\n        }\r\n    }\r\n\r\n    let totalBonusRange = 0;\r\n\r\n    if (items && items.length > 0) {\r\n        for (let item of items) {\r\n            let rangeBonus = tryGetItemSpecialValue(item, \"cast_range_bonus\");\r\n            if (rangeBonus) {\r\n                totalBonusRange += rangeBonus;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let rangeBonus = tryGetNeutralSpecialValue(neutral, \"cast_range_bonus\");\r\n        if (rangeBonus) {\r\n            totalBonusRange += rangeBonus;\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for (let talent of talents) {\r\n            if (talent.includes(\"bonus_cast_range\")) {\r\n                let rangeBonus = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (rangeBonus) {\r\n                    totalBonusRange += rangeBonus;\r\n                }\r\n            }\r\n            else if (talent.includes(\"special_bonus_unique\")) {\r\n                if (isCastRangeTalent(talent)) {\r\n                    let linkedAbility = tryGetTalentSpecialAbilityValue(talent, \"ad_linked_ability\");\r\n                    if (linkedAbility === abilityName) {\r\n                        let value = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                        if (value) {\r\n                            totalBonusRange += value;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return baseCastRange + totalBonusRange;\r\n}\r\n\r\n/// Calculates the normal sell price of an item from it's ItemInfo\r\nexport function calculateItemSellCost (itemInfo) {\r\n    if (itemInfo && itemInfo.ItemCost) {\r\n        let cost = parseInt(itemInfo.ItemCost);\r\n        // value rounded down\r\n        return Math.floor(cost / 2);\r\n    }\r\n    return 0;\r\n}\r\n\r\nexport function calculateTotalLifesteal (items, neutral, abilities, talents) {\r\n    \r\n    let totalLifestealPercent = 0;\r\n    let totalLifestealAmp = 0;\r\n\r\n    if (items && items.length > 0) {\r\n        for (let item of items) {\r\n            let lifestealPercent = tryGetItemSpecialValue(item, \"lifesteal_percent\");\r\n            if (lifestealPercent) {\r\n                totalLifestealPercent += lifestealPercent;\r\n            }\r\n\r\n            let lifestealAmp = tryGetItemSpecialValue(item, \"hp_regen_amp\");\r\n            if (lifestealAmp) {\r\n                totalLifestealAmp += lifestealAmp;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let bonusLifesteal = tryGetNeutralSpecialValue(neutral, \"bonus_lifesteal\");\r\n        if (bonusLifesteal) {\r\n            totalLifestealPercent += bonusLifesteal;\r\n        }\r\n    }\r\n\r\n    // if (abilities && abilities.length > 0) {\r\n    //     for (let ability of abilities) {\r\n    //         let abilityInfo = getAbilityInfoFromName(ability);\r\n    //         // If ability is passive, add lifesteal depending on lvl\r\n    //         if (isAbilityBehaviour(abilityInfo.isAbilityBehaviour, EAbilityBehaviour.PASSIVE)) {\r\n                \r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            if (talent.includes(\"lifesteal\")) {\r\n                let bonusLifesteal = tryGetNeutralSpecialValue(neutral, \"value\");\r\n                if (bonusLifesteal) {\r\n                    totalLifestealPercent += bonusLifesteal;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    // Take total amp by the total lifesteal % to get actual amp percentage\r\n    let lifestealPercentAmp = totalLifestealPercent / 100 * totalLifestealAmp;\r\n    return totalLifestealPercent + lifestealPercentAmp;\r\n}\r\n\r\n/// Calculates the total cleave damage percentage\r\nexport function calculateTotalCleaveDmgPercent(heroInfo, items, neutral, abilities, talents) {\r\n    if (!heroInfo) {\r\n        return 0;\r\n    }\r\n\r\n    // No cleave on ranged heroes\r\n    if ( isHeroAttackCapability(heroInfo, EAttackCapabilities.RANGED) ) {\r\n        return 0;\r\n    }\r\n\r\n    let totalCleaveDmgPercent = 0;\r\n\r\n    if (items && items.length > 0) {\r\n        for (let item of items) {\r\n            let cleaveDmgPercent = tryGetItemSpecialValue(item, \"cleave_damage_percent\");\r\n            if (cleaveDmgPercent) {\r\n                totalCleaveDmgPercent += cleaveDmgPercent;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (abilities && abilities.length > 0) {\r\n        for (let ability of abilities) {\r\n            let cleaveDmg = tryGetAbilitySpecialAbilityValue(ability, \"cleave_damage\");\r\n            if (cleaveDmg) {\r\n                totalCleaveDmgPercent += cleaveDmg;\r\n            }\r\n\r\n            let greatCleaveDmg = tryGetAbilitySpecialAbilityValue(ability, \"great_cleave_damage\", 1);\r\n            if (greatCleaveDmg) {\r\n                totalCleaveDmgPercent += greatCleaveDmg;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for (let talent of talents) {\r\n            if (talent.includes(\"cleave\")) {\r\n                let cleavePercent = tryGetTalentSpecialAbilityValue(talent,  \"value\");\r\n                if (cleavePercent) {\r\n                    totalCleaveDmgPercent += cleavePercent;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return totalCleaveDmgPercent;\r\n}\r\n\r\n/// Calculates the current highest crit percent the hero can do\r\n/// Crit will only take the highest crit damage percent\r\nexport function calculateCritPercent (items, neutral, abilities, talents) {\r\n    let highestCritPercent = 0;\r\n    \r\n    if (items && items.length > 0) {\r\n        for (let item of items) {\r\n            let critMultiplier = tryGetItemSpecialValue(item, \"crit_multiplier\");\r\n            if (critMultiplier && critMultiplier > highestCritPercent) {\r\n                highestCritPercent = critMultiplier;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (abilities && abilities.length > 0) {\r\n        for (let ability of abilities) {\r\n            let abilityLevel = 1;\r\n            let critBonus = tryGetAbilitySpecialAbilityValue(ability, \"crit_bonus\", abilityLevel);\r\n            if (critBonus && critBonus > highestCritPercent) {\r\n                highestCritPercent = critBonus;\r\n            }\r\n\r\n            let bladeDanceCrit = tryGetAbilitySpecialAbilityValue(ability, \"blade_dance_crit_mult\", abilityLevel);\r\n            if (bladeDanceCrit && bladeDanceCrit > highestCritPercent) {\r\n                highestCritPercent = bladeDanceCrit;\r\n            }\r\n        }\r\n    }\r\n\r\n    // if (talents && talents.length > 0) {\r\n    //     for (let talent of talents) {\r\n    //         if (talent.includes(\"pl crit talent\")) {\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    return highestCritPercent;\r\n}\r\n\r\n/// Calculates the percent chance to crit on attack, stacks with other crit chances\r\nexport function calculateCritChancePercent (items, neutral, abilities, talents) {\r\n    let totalCritChancePercent = 0;\r\n\r\n    if (items && items.length > 0) {\r\n        for (let item of items) {\r\n            let critChance = tryGetItemSpecialValue(item, \"crit_chance\");\r\n            if (critChance) {\r\n                totalCritChancePercent += critChance;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (abilities && abilities.length > 0) {\r\n        for (let ability of abilities) {\r\n            let abilityLevel = 1;\r\n            let critChance = tryGetAbilitySpecialAbilityValue(ability, \"crit_chance\", abilityLevel);\r\n            if (critChance) {\r\n                totalCritChancePercent += critChance;\r\n            }\r\n\r\n            let bladeDanceCritChance = tryGetAbilitySpecialAbilityValue(ability, \"blade_dance_crit_chance\", abilityLevel);\r\n            if (bladeDanceCritChance) {\r\n                totalCritChancePercent += bladeDanceCritChance;\r\n            }\r\n        }\r\n    }\r\n\r\n    return totalCritChancePercent;\r\n}\r\n\r\nexport function calculateTotalSpellLifesteal (items, neutral, abilities, talents) {\r\n    let totalAllPercent = 0;\r\n    let totalHeroLsPerc = 0;\r\n    let totalCreepLsPerc = 0;\r\n\r\n    let octarineCount = 0;\r\n    if (items && items.length > 0) {\r\n        for (let item of items) {\r\n            //Check for multiple octarines and only add one\r\n            if (item.item === \"item_octarine_core\") {\r\n                octarineCount++;\r\n                if (octarineCount > 1) {\r\n                    continue;\r\n                }\r\n            }\r\n\r\n            let heroLifesteal = tryGetItemSpecialValue(item, \"hero_lifesteal\");\r\n            if (heroLifesteal) {\r\n                totalHeroLsPerc += heroLifesteal;\r\n            }\r\n\r\n            let creepLifesteal = tryGetItemSpecialValue(item, \"creep_lifesteal\");\r\n            if (creepLifesteal) {\r\n                totalCreepLsPerc += creepLifesteal;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let spellLifesteal = tryGetNeutralSpecialValue(neutral, \"spell_lifesteal\");\r\n        if (spellLifesteal) {\r\n            totalAllPercent += spellLifesteal;\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for (let talent of talents) {\r\n            if (talent.includes(\"spell_lifesteal\")) {\r\n                let spellLifesteal = tryGetNeutralSpecialValue(neutral, \"value\");\r\n                if (spellLifesteal) {\r\n                    totalAllPercent += spellLifesteal;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return {\r\n        heroLifesteal: totalAllPercent + totalHeroLsPerc,\r\n        creepLifesteal: totalAllPercent + totalCreepLsPerc,\r\n    };\r\n}","import React, { Component } from 'react';\r\n\r\nimport {\r\n    calculateSpellDamage\r\n} from \"../../utility/calculate\";\r\nimport { \r\n    tryGetLocalizedString, \r\n    getTooltipAbilityString,\r\n} from \"../../utility/data-helpers/language\";\r\n\r\n/// Retrieves ability damage and returns display value\r\nfunction parseDamage(abilityName, abilInfo, abilLvl, items, neutral, talents) {\r\n    let abilityDamage = calculateSpellDamage(abilityName, abilInfo, abilLvl, items, neutral, talents);\r\n    if (abilityDamage && abilityDamage.damage) {\r\n        // force to be to two decimal places\r\n        let damage = abilityDamage.damage.toFixed(2);\r\n        if (abilityDamage.isPercent) {\r\n            damage += \"%\";\r\n        }\r\n        return damage;\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nfunction getAbilityNameFromStrings(strings, key) {\r\n    if (strings && key) {\r\n        return tryGetLocalizedString(strings, key);\r\n    } else {\r\n        return \"?\";\r\n    }\r\n}\r\n\r\nclass DamageOutput extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            ability: props.ability,\r\n            abilityInfo: props.abilityInfo,\r\n            levelInfo: props.levelInfo,\r\n\r\n            items: props.items,\r\n            neutral: props.neutral,\r\n            selectedTalents: props.selectedTalents,\r\n\r\n            abilityStrings: props.abilityStrings,\r\n            dotaStrings: props.dotaStrings,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(prevProps.abilityInfo !== this.props.abilityInfo) {\r\n            this.setState({ abilityInfo: this.props.abilityInfo });\r\n        }\r\n\r\n        if (prevProps.levelInfo !== this.props.levelInfo) {\r\n            this.setState({ levelInfo: this.props.levelInfo });\r\n        }\r\n\r\n        if (prevProps.items !== this.props.items) {\r\n            this.setState({ items: this.props.items });\r\n        }\r\n\r\n        if (prevProps.neutral !== this.props.neutral) {\r\n            this.setState({ neutral: this.props.neutral });\r\n        }\r\n\r\n        if (prevProps.selectedTalents !== this.props.selectedTalents) {\r\n            this.setState({ selectedTalents: this.props.selectedTalents });\r\n        }\r\n\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ abilityStrings: this.props.abilityStrings });\r\n        }\r\n        if (prevProps.dotaStrings !== this.props.dotaStrings) {\r\n            this.setState({ dotaStrings: this.props.dotaStrings });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let abilityDamage = parseDamage(this.state.ability, this.state.abilityInfo, this.state.levelInfo?.level, this.state.items, this.state.neutral, this.state.selectedTalents);\r\n        return (\r\n            <div className=\"w-100 h-100\">\r\n                <h5>{getTooltipAbilityString(this.state.abilityStrings, this.state.ability)}</h5>\r\n                {\r\n                    abilityDamage && \r\n                    <h6>\r\n                        { (getAbilityNameFromStrings(this.state.abilityStrings, \"dota_ability_variable_damage\") + \":\")}\r\n                        {' '}\r\n                        { abilityDamage }\r\n                    </h6>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DamageOutput;","import React, { Component } from 'react';\r\nimport {\r\n    calculateAbilityCooldown\r\n} from \"../../utility/calculate\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faClock, faCircle }from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nclass Cooldown extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            abilityLevel: props.abilityLevel,\r\n            abilityCooldown: props.cooldown,\r\n\r\n            ability: props.ability,\r\n            abilityInfo: props.abilityInfo,\r\n            items: props.items,\r\n            neutral: props.neutral,\r\n            selectedTalents: props.selectedTalents,\r\n\r\n            cooldown: null,\r\n            charges: null,\r\n        };\r\n\r\n        this.updateCooldown = this.updateCooldown.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateCooldown();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                abilityLevel: this.props.abilityLevel,\r\n                abilityCooldown: this.props.cooldown,\r\n\r\n                ability: this.props.ability,\r\n                items: this.props.items,\r\n                neutral: this.props.neutral,\r\n                selectedTalents: this.props.selectedTalents,\r\n            }, () => this.updateCooldown() );\r\n        }\r\n    }\r\n\r\n    updateCooldown() {\r\n        let currentCooldownInfo = calculateAbilityCooldown(this.state.ability, this.state.abilityInfo, this.state.abilityLevel, this.state.items, this.state.neutral, this.state.selectedTalents);\r\n        \r\n        this.setState({\r\n            cooldown: currentCooldownInfo?.cooldown,\r\n            charges: currentCooldownInfo?.charges,\r\n        });\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                {\r\n                    this.state.cooldown &&\r\n                        <div className=\"d-flex\" title=\"cooldown\">\r\n                            <FontAwesomeIcon className=\"my-auto mr-1\" icon={faClock} />\r\n                            <div>\r\n                                { this.state.cooldown }\r\n                            </div>\r\n                        </div>\r\n                }\r\n                {\r\n                    this.state.charges &&\r\n                        <div className=\"d-flex\" title=\"charges\">\r\n                            <FontAwesomeIcon className=\"my-auto mr-1\" icon={faCircle} />\r\n                            <div>\r\n                                { this.state.charges }\r\n                            </div>\r\n                        </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Cooldown;","import React, { Component } from 'react';\r\nimport { \r\n    calculateManaCost \r\n} from '../../utility/calculate';\r\n\r\nclass ManaCost extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            ability: props.ability,\r\n            abilityLevel: props.abilityLevel,\r\n\r\n            items: props.items,\r\n            neutral: props.neutral,\r\n            selectedTalents: props.selectedTalents,\r\n        };\r\n\r\n        this.updateMana = this.updateMana.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                ability: this.props.ability,\r\n                abilityLevel: this.props.abilityLevel,\r\n\r\n                items: this.props.items,\r\n                neutral: this.props.neutral,\r\n                selectedTalents: this.props.selectedTalents,\r\n            });\r\n        }\r\n    }\r\n\r\n    updateMana() {\r\n        let manaCost = -1;\r\n        if (this.state.ability) {\r\n            manaCost = calculateManaCost(this.state.ability, this.state.abilityLevel, this.state.items, this.state.neutral, this.state.selectedTalents);\r\n        }\r\n        \r\n        // this.setState({\r\n        //     abilityManaCost: manaCost,\r\n        // });\r\n        return manaCost;\r\n    }\r\n\r\n    render() {\r\n        let manaCost = this.updateMana();\r\n        return (\r\n            <div>\r\n                { \r\n                    manaCost &&\r\n                        <div className=\"mana-cost d-flex\" title=\"mana cost\">\r\n                            <div className=\"my-auto mr-1\" style={{ \r\n                                height: \"10px\",\r\n                                width: \"10px\",\r\n                                backgroundColor: \"rgb(69, 148, 207)\",\r\n                            }}/>\r\n                            <div>{ manaCost }</div>\r\n                        </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ManaCost;","import React, { Component } from 'react';\r\nimport { \r\n    getAbilityBehaviours,\r\n    getAbilitySpecialExtraValues\r\n\r\n} from \"../../utility/dataHelperAbilities\";\r\nimport { \r\n    getTooltipString,\r\n    getLocalizedString,\r\n    containsLocalizedString\r\n} from \"../../utility/data-helpers/language\";\r\nimport {\r\n    calculateAbilityCastRange\r\n} from \"../../utility/calculate\";\r\n\r\nfunction stringContainsHtml (str) {\r\n    return typeof(str) === \"string\" && str.includes(\"</font>\");\r\n}\r\n\r\n/// Displays a Type/Value props used inside Ability descriptions\r\nfunction TypeValueUI (props) {\r\n    /// Check if localized type value contains percent and remove\r\n    let isPercentage = false;\r\n    let typeStr = props.type;\r\n    let valueStr = props.value;\r\n    if (props.type.includes(\"%\")) {\r\n        typeStr = typeStr.replace(\"%\", \"\");\r\n        isPercentage = true;\r\n    }\r\n\r\n    return (\r\n        <div className=\"d-flex\" style={{ fontSize: \"0.85rem\"}}>\r\n            {/* Type Key */}\r\n            {\r\n                stringContainsHtml(typeStr) ?\r\n                <div dangerouslySetInnerHTML={{ __html: typeStr.replace(\"\\\\\", \"\") }}></div>\r\n                :\r\n                <div>{ typeStr }</div>\r\n            }\r\n            <div className=\"mx-1\" />\r\n            {/* Value */}\r\n            {\r\n                stringContainsHtml(valueStr) ?    \r\n                <div dangerouslySetInnerHTML={{ __html: valueStr.replace(\"\\\\\", \"\") }}></div>\r\n                :\r\n                <div>{ valueStr }</div>\r\n            }\r\n            {\r\n                // Give percent sign after value if isPercent\r\n                isPercentage && \"%\"\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nclass AbilityDetails extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            ability: props.ability,\r\n            abilityInfo: props.abilityInfo,\r\n            levelInfo: props.levelInfo,\r\n\r\n            items: props.items,\r\n            neutral: props.neutral,\r\n            selectedTalents: props.selectedTalents,\r\n\r\n            abilityBehaviours: null,\r\n            castRange: 0,\r\n\r\n            abilityStrings: props.abilityStrings,\r\n            dotaStrings: props.dotaStrings,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(prevProps.abilityInfo !== this.props.abilityInfo) {\r\n            this.setState({ \r\n                abilityInfo: this.props.abilityInfo,\r\n            });\r\n        }\r\n\r\n        if (prevProps.levelInfo !== this.props.levelInfo) {\r\n            this.setState({ \r\n                levelInfo: this.props.levelInfo \r\n            });\r\n        }\r\n\r\n        if (prevProps.items !== this.props.items) {\r\n            this.setState({ \r\n                items: this.props.items \r\n            });\r\n        }\r\n\r\n        if (prevProps.neutral !== this.props.neutral) {\r\n            this.setState({ \r\n                neutral: this.props.neutral \r\n            });\r\n        }\r\n\r\n        if (prevProps.selectedTalents !== this.props.selectedTalents) {\r\n            this.setState({ \r\n                selectedTalents: this.props.selectedTalents \r\n            });\r\n        }\r\n\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ \r\n                abilityStrings: this.props.abilityStrings \r\n            });\r\n        }\r\n        if (prevProps.dotaStrings !== this.props.dotaStrings) {\r\n            this.setState({ \r\n                dotaStrings: this.props.dotaStrings \r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let castRangeAmt = calculateAbilityCastRange(this.state.ability, this.state.abilityInfo, this.state.levelInfo, this.state.items, this.state.neutral, this.state.selectedTalents);\r\n        let valuesInformation = getAbilitySpecialExtraValues(this.state.ability, this.state.abilityInfo, this.state.levelInfo.level, this.state.items, this.state.selectedTalents);\r\n        let abilityBehaviours = getAbilityBehaviours(this.state.abilityInfo);\r\n        return (\r\n            <div className=\"mb-2\">\r\n                {\r\n                    abilityBehaviours && abilityBehaviours.map((value, index) => {\r\n                        return (\r\n                            <TypeValueUI \r\n                                key={index}\r\n                                type={ getLocalizedString(this.state.dotaStrings, value.key) } \r\n                                value={ typeof value.value === \"object\" ? value.value.map((val) => {\r\n                                        return getLocalizedString(this.state.dotaStrings, val)\r\n                                    }).join(', ') : getLocalizedString(this.state.dotaStrings, value.value) \r\n                                } />\r\n                        );\r\n                    })\r\n                }\r\n                <div className=\"py-1\" />\r\n                {\r\n                    castRangeAmt &&\r\n                        <TypeValueUI \r\n                            type={getLocalizedString(this.state.abilityStrings, \"dota_ability_variable_cast_range\").toUpperCase() + \":\"}\r\n                            value={castRangeAmt} />\r\n                }\r\n                <div className=\"py-1\" />\r\n                {\r\n                    valuesInformation && valuesInformation.map((value, index) => {\r\n                        if (containsLocalizedString(this.state.abilityStrings, value.key)) {\r\n                            return (\r\n                                <TypeValueUI \r\n                                    key={ `${value.key}-${index}` }\r\n                                    type={ getLocalizedString(this.state.abilityStrings, value.key) }\r\n                                    value={ value.value } />\r\n                            );   \r\n                        }\r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AbilityDetails;","import React, { Component } from 'react';\r\nimport {\r\n    Row, \r\n    Col,\r\n    Button\r\n} from \"react-bootstrap\";\r\n\r\nimport { DOTAAbilities } from \"../../data/dota2/json/npc_abilities.json\";\r\n\r\nimport {\r\n    itemsContainsScepter\r\n} from \"../../utility/dataHelperItems\";\r\n\r\nimport DamageOutput from \"./DamageOutput\";\r\nimport Cooldown from \"./Cooldown\";\r\nimport ManaCost from \"./ManaCost\";\r\nimport AbilityDetails from \"./AbilityDetails\";\r\nimport \"./Abilities.css\";\r\n\r\n/// Returns array of html elements to represent the levels of the ability\r\nfunction getAbilityLevelHtml (levelInfo, abilityIndex, abilityInfo, onLevelChanged) {\r\n    if (levelInfo && abilityInfo)\r\n    {\r\n        /// Determine max level of ability\r\n        let maxLvl = abilityInfo.AbilityType === \"DOTA_ABILITY_TYPE_ULTIMATE\" ? 3 : 4;\r\n        if (abilityInfo.MaxLevel)\r\n            maxLvl = parseInt(abilityInfo.MaxLevel);\r\n        \r\n        let html = [];\r\n        for(let i = 0; i < maxLvl; i++) {\r\n            html.push(\r\n                <Button \r\n                    key={i} \r\n                    variant=\"outline-secondary\"\r\n                    className=\"p-1\"\r\n                    onClick={(e) => onLevelChanged(e)}\r\n                    data-lvlindex={abilityIndex}\r\n                    data-btnindex={i}>\r\n                    <div className={ i < levelInfo.level ? \"levelled\" : \"unlevelled\"}></div>\r\n                </Button>\r\n            );\r\n        }\r\n        return html;\r\n    }\r\n    else\r\n    {\r\n        return <div>?</div>\r\n    }\r\n}\r\n\r\nfunction getLevelInfo (abilities) {\r\n    if (abilities) {\r\n        return abilities.map((abil, index) => {\r\n            return { ability: index, level: 1 };\r\n        });\r\n    }\r\n    return null;\r\n}\r\n\r\n/// Max amount of abilities to show in one row\r\nconst ABILITY_ROW_MAX = 6;\r\n\r\nclass Abilities extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            heroName: props.heroName,\r\n            items: props.items,\r\n            neutral: props.neutral,\r\n            selectedTalents: props.selectedTalents,\r\n            displayDamage: props.displayDamage,\r\n\r\n            abilityStrings: props.abilityStrings,\r\n            dotaStrings: props.dotaStrings,\r\n\r\n            abilities: props.abilities,\r\n            abilityLevels: props.abilityLevels,\r\n\r\n            onAbilityLevelChanged: props.onAbilityLevelChanged,\r\n        };\r\n\r\n        this.onLevelChanged = this.onLevelChanged.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.heroName !== this.props.heroName) {\r\n            this.setState({ heroName: this.props.heroName });\r\n        }\r\n\r\n        if (prevProps.abilities !== this.props.abilities) {\r\n            this.setState({ abilities: this.props.abilities });\r\n        }\r\n        if (prevProps.abilityLevels !== this.props.abilityLevels) {\r\n            this.setState({ abilityLevels: this.props.abilityLevels });\r\n        }\r\n\r\n        if (prevProps.items !== this.props.items) {\r\n            this.setState({ items: this.props.items });\r\n        }\r\n        if (prevProps.neutral !== this.props.neutral) {\r\n            this.setState({ neutral: this.props.neutral });\r\n        }\r\n        if (prevProps.selectedTalents !== this.props.selectedTalents) {\r\n            this.setState({ selectedTalents: this.props.selectedTalents });\r\n        }\r\n\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ abilityStrings: this.props.abilityStrings });\r\n        }\r\n        if (prevProps.dotaStrings !== this.props.dotaStrings) {\r\n            this.setState({ dotaStrings: this.props.dotaStrings });\r\n        }\r\n    }\r\n\r\n    onLevelChanged(e) {\r\n        // If click on inner element\r\n        if (e.target.tagName.toLowerCase() !== \"button\") {\r\n            e.target = e.target.parentElement;\r\n        }\r\n\r\n        let abilityIndex = parseInt(e.target.dataset.lvlindex);\r\n        let abilities = this.state.abilityLevels;\r\n        let targetLevel = parseInt(e.target.dataset.btnindex) + 1;\r\n        // Clicked same level, set to 0\r\n        if (abilities[abilityIndex].level === targetLevel) {\r\n            targetLevel = 0;\r\n        }\r\n\r\n        this.state.onAbilityLevelChanged({\r\n            ability: abilityIndex,\r\n            level: targetLevel\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Row \r\n                md={this.state.abilities?.length > ABILITY_ROW_MAX ? ABILITY_ROW_MAX : 0}>\r\n                {\r\n                    this.state.abilities && this.state.abilityLevels && this.state.abilities.map((value, index) => {\r\n                        // Info about the ability\r\n                        let ability = DOTAAbilities[value];\r\n                        if (!ability) {\r\n                            console.log(`Unable to find info on ability '${value}'`);\r\n                        }\r\n                        // Current level of the ability\r\n                        let levelInfo = this.state.abilityLevels.find(abilVal => abilVal.ability === index);\r\n                        if (!ability && value) {\r\n                            return <div key={value}>?</div>\r\n                        }\r\n\r\n                        // Dont add any scepter abilities unless hero has scepter\r\n                        if (ability && ability.IsGrantedByScepter && !itemsContainsScepter(this.state.items)) {\r\n                            return;\r\n                        }\r\n                        return (\r\n                            <Col key={ability.ID} className=\"d-flex flex-column justify-content-top\">\r\n                                <img\r\n                                    className=\"h-100 align-self-center\"\r\n                                    style={{ maxWidth: \"90px\", maxHeight: \"90px\" }}\r\n                                    src={`http://cdn.dota2.com/apps/dota2/images/abilities/${value}_hp1.png`} \r\n                                    alt={ `${ability.ID}-${value}` } />\r\n                                <Row className=\"px-4\">\r\n                                    <Col md={6}>\r\n                                        {/* Cooldown */}\r\n                                        <Cooldown \r\n                                            ability={value} \r\n                                            abilityInfo={ability}\r\n                                            abilityLevel={levelInfo.level} \r\n                                            cooldown={ability.AbilityCooldown}\r\n                                            items={this.state.items}\r\n                                            neutral={this.state.neutral}\r\n                                            selectedTalents={this.state.selectedTalents} />\r\n                                    </Col>\r\n                                    <Col md={6}>\r\n                                        {/* Mana Cost */}\r\n                                        <ManaCost \r\n                                            ability={ability}\r\n                                            abilityLevel={levelInfo.level} \r\n                                            items={this.state.items}\r\n                                            neutral={this.state.neutral}\r\n                                            selectedTalents={this.state.selectedTalents} />\r\n                                    </Col>\r\n                                </Row>\r\n                                <div className=\"align-self-center pt-2 d-flex\">\r\n                                    {\r\n                                        this.state.abilityLevels && !ability.IsGrantedByScepter && \r\n                                            getAbilityLevelHtml(levelInfo, index, ability, this.onLevelChanged)\r\n                                    }\r\n                                </div>\r\n                                <div className=\"py-1\">\r\n                                    {\r\n                                        this.state.displayDamage && \r\n                                            <DamageOutput \r\n                                                ability={value}\r\n                                                abilityInfo={ability} \r\n                                                levelInfo={levelInfo}\r\n                                                items={this.state.items}\r\n                                                neutral={this.state.neutral} \r\n                                                selectedTalents={this.state.selectedTalents} \r\n                                                abilityStrings={this.state.abilityStrings} \r\n                                                dotaStrings={this.state.dotaStrings} />\r\n                                    }\r\n                                </div>\r\n                                <div className=\"py-1\">\r\n                                    <AbilityDetails \r\n                                        ability={value}\r\n                                        abilityInfo={ability} \r\n                                        levelInfo={levelInfo}\r\n                                        items={this.state.items}\r\n                                        neutral={this.state.neutral} \r\n                                        selectedTalents={this.state.selectedTalents}\r\n                                        abilityStrings={this.state.abilityStrings} \r\n                                        dotaStrings={this.state.dotaStrings} />\r\n                                </div>\r\n                            </Col>\r\n                        );\r\n                    })\r\n                }\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Abilities;","import Abilities from \"./Abilities\";\r\n\r\nexport default Abilities;","import React from \"react\";\r\n\r\nexport function filterItemName (name) {\r\n    if (name) {\r\n        let item = name.split('_');\r\n        item.shift();\r\n        item = item.join('_');\r\n        return item;\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\n/// Gets an item icon from it's name. For exmaple \"item_mango_tree\"\r\nexport function getItemIcon (itemName, width, height, scale) {\r\n    // Remove 'item_' prefix, split by _, remove \"item\" and join again\r\n    let item = filterItemName(itemName);\r\n\r\n    // Width and height of each item in item_stylesheet\r\n    if (item) {\r\n        return <span \r\n                    className={ 'sprite sprite-' + item + '_png '} \r\n                    alt={item} \r\n                    data-item={itemName} \r\n                    style={{ transform: `scale(${scale}, ${scale})`, transformOrigin: \"top left\" }} />\r\n    } else {\r\n        return <span \r\n                style={{ backgroundColor: \"#212121\", width: width, height: height, transform: `scale(${scale}, ${scale})`, display: \"block\", transformOrigin: \"top left\" }} />\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport {\r\n    Tabs,\r\n    Tab,\r\n    Button,\r\n    Form,\r\n    ListGroup\r\n} from \"react-bootstrap\";\r\nimport { getLocalizedString } from '../../utility/data-helpers/language';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faMinus } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport {\r\n    getItemIcon\r\n} from \"../../utility/spriteHelper\";\r\n\r\nimport \"../../css/dota_items.css\";\r\nimport { \r\n    itemAliasIncludes, \r\n    getAllItems \r\n} from '../../utility/dataHelperItems';\r\n\r\nfunction getItemsByQuality(itemsArray, matchArray) {\r\n    return itemsArray.filter((itemInfo) => {\r\n        let quality = itemInfo.item.ItemQuality;\r\n        if (quality) { //(quality === \"consumable\" || quality === \"component\" || quality === \"secret_shop\")) {\r\n            for(let i = 0; i < matchArray.length; i++) {\r\n                if (quality === matchArray[i]) {\r\n                    return itemInfo;\r\n                }\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction ItemIcon(props) {\r\n    return (\r\n            <div \r\n                key={props.keyName} \r\n                title={props.localizedName} \r\n                onClick={props.onClick}\r\n                data-item={props.itemName}\r\n                className=\"m-1\" \r\n                style={{ width: `calc(88px * ${props.scale})`, height: `calc(64px * ${props.scale})` }}>\r\n                { \r\n                    getItemIcon(props.itemName, \"88px\", \"64px\", props.scale) \r\n                }\r\n            </div>\r\n    );\r\n}\r\n\r\nfunction TabHeading(props) {\r\n    return (\r\n        <h6 className=\"px-3 mb-0\">{props.text}</h6>\r\n    );\r\n}\r\n\r\nclass ItemSelector extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // Get all selectable items in dota\r\n        let allItems = getAllItems();\r\n        // Split into basic and upgrade items to sort into tabs\r\n        let basicItems = getItemsByQuality(allItems, [\"consumable\", \"component\", \"secret_shop\"]);\r\n        let upgradesItems = getItemsByQuality(allItems, [\"common\", \"rare\", \"epic\", \"artifact\"]);\r\n\r\n        this.state = {\r\n            allItems: allItems,\r\n            queryItems: null,\r\n\r\n            onSelectedItem: props.onSelectedItem,\r\n            dotaStrings: props.dotaStrings,\r\n            abilityStrings: props.abilityStrings,\r\n\r\n            basicItems: basicItems,\r\n            upgradesItems: upgradesItems,\r\n        };\r\n\r\n        this.onSearchChanged = this.onSearchChanged.bind(this);\r\n        this.onSearchItemSelected = this.onSearchItemSelected.bind(this);\r\n        this.onShopItemSelected = this.onShopItemSelected.bind(this);\r\n        this.onRemoveItemSelected = this.onRemoveItemSelected.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(prevProps !== this.props) {\r\n            this.setState({\r\n                dotaStrings: this.props.dotaStrings,\r\n                abilityStrings: this.props.abilityStrings,\r\n                onSelectedItem: this.props.onSelectedItem,\r\n            });\r\n        }\r\n    }\r\n\r\n    onSearchChanged(e) {\r\n        let query = e.target.value;\r\n        let filteredItems = null;\r\n        if (query) {\r\n            filteredItems = this.state.allItems.filter((item) => {\r\n                // Check query for match in localized string, should work most of the time\r\n                let localizedName = getLocalizedString(this.state.abilityStrings, `DOTA_Tooltip_Ability_${item.name}`)?.toLowerCase();\r\n                if (localizedName && localizedName.indexOf(query.toLowerCase()) !== -1) {\r\n                    return true;\r\n                }\r\n\r\n                // Match query with any item aliases (only works for english)\r\n                let aliasMatch = itemAliasIncludes(item.item.ItemAliases, query);\r\n                if (aliasMatch) {\r\n                    return true;\r\n                }\r\n            });\r\n        }\r\n\r\n        this.setState({\r\n            queryItems: filteredItems,\r\n        });\r\n    }\r\n\r\n    onSearchItemSelected(e) {\r\n        let val = e.target.dataset?.item;\r\n        this.state.onSelectedItem(val);\r\n    }\r\n\r\n    onShopItemSelected (e) {\r\n        let item = e.target.dataset?.item;\r\n        this.state.onSelectedItem(item);\r\n    }\r\n\r\n    onRemoveItemSelected(e) {\r\n        let item = null;\r\n        this.state.onSelectedItem(item);\r\n    }\r\n\r\n    render() {\r\n        let scale = 0.5;\r\n        let searchIconScale = 0.45;\r\n        return (\r\n            <div className=\"item-card\">\r\n                <div className=\"item-card header d-flex p-2\">\r\n                    <div>\r\n                        <Form.Control \r\n                            className=\"foresight-input-control\"\r\n                            type=\"text\" \r\n                            placeholder=\"Search...\" \r\n                            onChange={this.onSearchChanged}/>\r\n                    </div>\r\n                    <div className=\"ml-auto\">\r\n                        <Button variant=\"outline-danger\" onClick={this.onRemoveItemSelected}>\r\n                            <FontAwesomeIcon icon={faMinus} />\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"item-card content\">\r\n                    <div className=\"p-1\">\r\n                        {\r\n                            this.state.queryItems && \r\n                            <div style={{ color: \"white\" }}>\r\n                                <h5 >\r\n                                    { getLocalizedString(this.state.dotaStrings, \"DOTA_Shop_Search_Results_Title\") }\r\n                                </h5>\r\n                                <ListGroup className=\"foresight-list-group\">\r\n                                    {\r\n                                        // Query search term\r\n                                        this.state.queryItems.map((item) => {\r\n                                            // Add L char at end of dagons to show their level\r\n                                            let itmName = item.name;\r\n                                            if (item.name.includes(\"item_dagon_\")) {\r\n                                                itmName += \"L\";\r\n                                            }\r\n                                            \r\n                                            let localizedName = getLocalizedString(this.state.abilityStrings, `DOTA_Tooltip_Ability_${itmName}`);\r\n                                            return (\r\n                                                <ListGroup.Item \r\n                                                    key={item.name} \r\n                                                    data-item={item.name} \r\n                                                    onClick={this.onSearchItemSelected} \r\n                                                    action>\r\n                                                    <div className=\"d-flex\" data-item={item.name}>\r\n                                                        <ItemIcon \r\n                                                            itemName={item.name}\r\n                                                            localizedName={localizedName}\r\n                                                            onClick={this.onSearchItemSelected} \r\n                                                            scale={searchIconScale}/>\r\n\r\n                                                        <h6 className=\"mx-1 my-auto\" data-item={item.name}>\r\n                                                            { localizedName ?? itmName }\r\n                                                        </h6>\r\n                                                    </div>\r\n                                                </ListGroup.Item>\r\n                                            )\r\n                                        })\r\n                                    }   \r\n                                </ListGroup>\r\n                                {\r\n                                    this.state.queryItems && this.state.queryItems.length <= 0 &&\r\n                                        <h6>\r\n                                            { getLocalizedString(this.state.dotaStrings, \"DOTA_Shop_Search_No_Results\") }\r\n                                        </h6>\r\n                                }\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                    {/* Regular view */}\r\n                    {\r\n                        !this.state.queryItems && \r\n                            <div>\r\n                                <Tabs\r\n                                    className=\"foresight-tabs\"\r\n                                    defaultActiveKey=\"basic\" \r\n                                    transition={false} \r\n                                    id=\"shop-tabs\">\r\n                                    <Tab \r\n                                        eventKey=\"basic\" \r\n                                        title={<TabHeading text={getLocalizedString(this.state.dotaStrings, \"DOTA_Shop_Category_Basics\")} />} >\r\n                                        <div className=\"d-flex flex-wrap\">\r\n                                            {\r\n                                                this.state.basicItems && this.state.basicItems.map((item) => {\r\n                                                    let localizedName = getLocalizedString(this.state.abilityStrings, `DOTA_Tooltip_Ability_${item.name}`);\r\n                                                    return (\r\n                                                        <ItemIcon \r\n                                                            key={item.item.ID}\r\n                                                            itemName={item.name}\r\n                                                            localizedName={localizedName}\r\n                                                            onClick={this.onShopItemSelected} \r\n                                                            scale={scale} />\r\n                                                    )\r\n                                                })\r\n                                            }\r\n                                        </div>\r\n                                    </Tab>\r\n                                    <Tab \r\n                                        eventKey=\"upgrades\" \r\n                                        title={<TabHeading text={getLocalizedString(this.state.dotaStrings, \"DOTA_Shop_Category_Upgrades\")} />} >\r\n                                        <div className=\"d-flex flex-wrap\">\r\n                                            {\r\n                                                this.state.upgradesItems && this.state.upgradesItems.map((item) => {\r\n                                                    let localizedName = getLocalizedString(this.state.abilityStrings, `DOTA_Tooltip_Ability_${item.name}`);\r\n                                                    return (\r\n                                                        <ItemIcon \r\n                                                            key={item.item.ID}\r\n                                                            itemName={item.name}\r\n                                                            localizedName={localizedName}\r\n                                                            onClick={this.onShopItemSelected} \r\n                                                            scale={scale} />\r\n                                                    );\r\n                                                })\r\n                                            }\r\n                                        </div>\r\n                                    </Tab>\r\n                                </Tabs>\r\n                            </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ItemSelector;","/// All Disassemble rules of an item\r\nexport const EDisassembleRule = {\r\n    ALWAYS: \"DOTA_ITEM_DISASSEMBLE_ALWAYS\",\r\n    NEVER: \"DOTA_ITEM_DISASSEMBLE_NEVER\",\r\n};\r\n\r\n/// All ItemQuality properties on ItemInfo's\r\nexport const EItemQuality = {\r\n    SECRET_SHOP: \"secret_shop\",\r\n    COMPONENT: \"component\",\r\n};","import React, { Component } from 'react';\r\n\r\nimport {\r\n    getItemInfoFromName, \r\n    convertItemDescToHtml,\r\n    getItemStatistics,\r\n    isDissassembleRule,\r\n    getFuzzyTooltipAbilityString\r\n} from \"../../utility/dataHelperItems\";\r\nimport { \r\n    getLocalizedString\r\n} from '../../utility/data-helpers/language';\r\nimport { calculateItemSellCost } from \"../../utility/calculate\";\r\nimport {\r\n    EDisassembleRule, EItemQuality\r\n} from \"../../enums/items\";\r\n\r\nimport \"./ItemTooltip.css\";\r\nimport { getItemIcon } from '../../utility/spriteHelper';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faHome, faCampground } from '@fortawesome/free-solid-svg-icons';\r\n\r\nfunction replaceItemStatLocalizeString (localizeString, value) {\r\n    // If generic one tha contains $value, split and insert value\r\n    if(localizeString.includes(\"$\")) {\r\n        let split = localizeString.split('$');\r\n        split.splice(1, 0, value);\r\n        return split.join(\" \");\r\n    } \r\n    // If contains %, arrange it correctly\r\n    else if (localizeString.includes(\"%\")) {\r\n        return localizeString.replace(\"%+\", `+ ${value}% `);\r\n    }\r\n    /// If negative value\r\n    else if (localizeString.includes(\"-\")) {\r\n        return localizeString.replace(\"-\", `- ${Math.abs(value)} `);\r\n    }\r\n    /// If fallen this far and contains a + value, just split and give the value\r\n    else if (localizeString.includes(\"+\")) {\r\n        return localizeString.replace(\"+\", `+ ${Math.abs(value)} `);\r\n    }\r\n    return localizeString;\r\n}\r\n\r\nclass ItemTooltip extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            itemName: props.itemName,\r\n            dotaStrings: props.dotaStrings,\r\n            abilityStrings: props.abilityStrings,\r\n\r\n            itemInfo: getItemInfoFromName(props.itemName),  \r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                itemName: this.props.itemName,\r\n                dotaStrings: this.props.dotaStrings,\r\n                abilityStrings: this.props.abilityStrings,\r\n                itemInfo: getItemInfoFromName(this.props.itemName),  \r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let scale = 0.7;\r\n        let width = \"88px\";\r\n        let height = \"64px\";\r\n        let goldIconSize = 20;\r\n\r\n        let itemStats = getItemStatistics(this.state.itemInfo);\r\n        let loreString = getFuzzyTooltipAbilityString(this.state.abilityStrings, `${this.state.itemName}_Lore`);\r\n        /// Get localized string and filter it to correct html\r\n        let descString = getFuzzyTooltipAbilityString(this.state.abilityStrings, `${this.state.itemName}_Description`);\r\n        let descFiltered = convertItemDescToHtml(descString, this.state.itemName, this.state.itemInfo);\r\n        return (\r\n            <div className=\"item-tooltip\">\r\n                <div className=\"d-flex p-1\">\r\n                    <div className=\"m-2\" style={{ width: `calc(${width} * ${scale})`, height: `calc(${height} * ${scale})` }}>\r\n                        {  \r\n                            getItemIcon(this.state.itemName, width, height, 0.7) \r\n                        }\r\n                    </div>\r\n                    <div>\r\n                        <h4>\r\n                            { getFuzzyTooltipAbilityString(this.state.abilityStrings, `${this.state.itemName}`) }\r\n                        </h4>\r\n                        {\r\n                            //If has an item cost and is more than 0\r\n                            this.state.itemInfo?.ItemCost && this.state.itemInfo?.ItemCost > 0 &&\r\n                            <div className=\"d-flex\">\r\n                                {\r\n                                    this.state.itemInfo?.ItemQuality &&\r\n                                        <FontAwesomeIcon icon={this.state.itemInfo?.ItemQuality == EItemQuality.SECRET_SHOP ? faCampground : faHome } className=\"align-item-center\" />\r\n                                }\r\n                                <img \r\n                                    className=\"mx-1\"\r\n                                    src={process.env.PUBLIC_URL + \"/images/dota2/gold_icon_ui.png\"} \r\n                                    height={goldIconSize}\r\n                                    width={goldIconSize} />\r\n                                <h6 className=\"gold-amount\">\r\n                                    { parseInt(this.state.itemInfo?.ItemCost) }\r\n                                </h6>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <div className=\"item-content p-2\">\r\n                    {/* item stat info */}\r\n                    {\r\n                        itemStats &&\r\n                            <div className=\"pb-1\">\r\n                                { \r\n                                    itemStats.map((value) => {\r\n                                        /// attempt to get localized string and display\r\n                                        let string = getFuzzyTooltipAbilityString(this.state.abilityStrings, `${this.state.itemName}_${value.key}`);\r\n                                        \r\n                                        if (string) {\r\n                                            /// Check if item stat is a generic one that can be applied to most items and replace variable with localized string\r\n                                            let genericKeys = [\r\n                                                \"health\", \"mana\", \"armor\", \"damage\", \"str\", \"int\", \"agi\", \"all\", \"attack\", \"hp_regen\",\r\n                                                \"mana_regen\", \"spell_amp\", \"move_speed\", \"evasion\", \"spell_resist\", \"selected_attrib\",\r\n                                                \"attack_range\", \"attack_range_melee\", \"cast_range\", \"status_resist\"\r\n                                            ];\r\n                                            // split and use variable to compare\r\n                                            let splitCompare = string.split(\"$\")[1];\r\n                                            for (let key of genericKeys) {\r\n                                                if (splitCompare === key) {\r\n                                                    /// get localized generic and replace variable in existing string\r\n                                                    let localized = getLocalizedString(this.state.abilityStrings, `dota_ability_variable_${key}`);\r\n                                                    string = string.replace(key.toString(), localized);\r\n                                                    break;\r\n                                                }\r\n                                            }\r\n                                            \r\n                                            return (\r\n                                                <div key={value.key} dangerouslySetInnerHTML={{ __html: replaceItemStatLocalizeString(string, value.value) }}>\r\n                                                </div>\r\n                                            );\r\n                                        }\r\n                                    })\r\n                                }\r\n                            </div>\r\n                    }\r\n\r\n                    {/* abilities */}\r\n                    {\r\n                        descString && descString != \"?\" &&\r\n                            <div className=\"p-1\">\r\n                                { descFiltered }\r\n                            </div>\r\n                    }\r\n\r\n                    {/* lore */}\r\n                    {\r\n                        loreString && loreString != \"?\" &&   \r\n                            <div className=\"p-1 m-1 lore\">\r\n                                { loreString }\r\n                            </div>\r\n                    }\r\n\r\n                    {/* sell price */}\r\n                    {\r\n                        this.state.itemInfo?.ItemCost && !this.state.itemInfo?.ItemIsNeutralDrop &&\r\n                            <div className=\"px-1\"> \r\n                                {\r\n                                    getLocalizedString(this.state.dotaStrings, \"DOTA_Item_Tooltip_Sell_Price\")\r\n                                    .replace(\"%s1\", calculateItemSellCost(this.state.itemInfo))\r\n                                }\r\n                            </div>\r\n                    }\r\n\r\n                    {/* dissassemble */}\r\n                    {\r\n                        isDissassembleRule(this.state.itemInfo, EDisassembleRule.ALWAYS) && \r\n                            <div className=\"px-1\">\r\n                                { getLocalizedString(this.state.dotaStrings, \"DOTA_Item_Tooltip_Disassemble\") }\r\n                            </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ItemTooltip;","import ItemTooltip from \"./ItemTooltip\";\r\n\r\nexport default ItemTooltip;","import React, { Component } from 'react';\r\nimport Popup from 'reactjs-popup';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { \r\n    faInfo, \r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport {\r\n    Form\r\n} from \"react-bootstrap\";\r\n\r\nimport { getItemIcon } from \"../../utility/spriteHelper\"\r\nimport { \r\n    getItemInfoFromName,\r\n    itemRequiresCharges\r\n} from '../../utility/dataHelperItems';\r\n\r\nimport ItemSelector from \"./ItemSelector\";\r\nimport ItemTooltip from '../ItemTooltip';\r\nimport \"../../css/dota_hero_icons_big.css\";\r\n\r\n/// Single item that contains a popup to change the item\r\nclass Item extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            item: props.item,\r\n            slot: props.slot, \r\n            isBackpack: props.isBackpack,\r\n\r\n            onItemChanged: props.onItemChanged,\r\n            onItemExtraChanged: props.onItemExtraChanged,\r\n\r\n            dotaStrings: props.dotaStrings,\r\n            abilityStrings: props.abilityStrings,\r\n\r\n            itemExtra: { },\r\n\r\n            itemSelectorDisabled: false,\r\n        };\r\n\r\n        //console.log(`slot: ${this.state.slot} - item: ${this.state.item}`);\r\n        this.onSelectedItem = this.onSelectedItem.bind(this);\r\n        this.onBloodstoneChargesChanged = this.onBloodstoneChargesChanged.bind(this);\r\n        this.setCharges = this.setCharges.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.state.item === \"item_bloodstone\") {\r\n            /// Set inital charges of bloodstone\r\n            let itemInfo = getItemInfoFromName(this.state.item);\r\n            this.setState({\r\n                itemExtra: {\r\n                    ...this.state.itemExtra,\r\n                    charges: itemInfo?.ItemInitialCharges ?? 0,\r\n                },\r\n            }, () => {\r\n                /// Update state to new init value\r\n                this.setCharges(this.state.itemExtra.charges);\r\n            });\r\n        }\r\n    }\r\n\r\n    onSelectedItem (item) {\r\n        // Close item selector popup by disabling\r\n        this.setState({\r\n            itemSelectorDisabled: true,\r\n        });\r\n        \r\n        // Trigger onItemChanged event\r\n        this.state.onItemChanged({ \r\n            slot: this.state.slot, \r\n            item: item,\r\n            extra: this.state.itemExtra,\r\n            isBackpack: this.state.isBackpack ? true : false,\r\n        });\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.item !== this.props.item) {\r\n            this.setState({ item: this.props.item, });\r\n        }\r\n\r\n        if (prevProps.slot !== this.props.slot) {\r\n            this.setState({ slot: this.props.slot });\r\n        }\r\n\r\n        if (prevProps.isBackpack !== this.props.isBackpack) {\r\n            this.setState({ isBackpack: this.props.isBackpack });\r\n        }\r\n\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ abilityStrings: this.props.abilityStrings });\r\n        }\r\n\r\n        if (prevProps.dotaStrings !== this.props.dotaStrings) {\r\n            this.setState({ dotaStrings: this.props.dotaStrings });\r\n        }\r\n    }\r\n\r\n    onBloodstoneChargesChanged (e) {\r\n        let newVal = parseInt(e.target.value);\r\n        this.setCharges(newVal);\r\n    }\r\n\r\n    setCharges(newChargeAmt) {\r\n        // If null or not exist, set to 0\r\n        if (!newChargeAmt) {\r\n            newChargeAmt = 0;\r\n        }\r\n\r\n        // Value must be more than 0 and less than 999\r\n        if (newChargeAmt < 0) {\r\n            newChargeAmt = 0;\r\n        } else if (newChargeAmt > 999) {\r\n            newChargeAmt = 999;\r\n        }\r\n        \r\n        this.setState({\r\n            itemExtra: {\r\n                ...this.state.itemExtra,\r\n                charges: newChargeAmt,\r\n            },\r\n        }, () => {\r\n            this.state.onItemChanged({\r\n                slot: this.state.slot, \r\n                item: this.state.item,\r\n                extra: this.state.itemExtra,\r\n                isBackpack: this.state.isBackpack ? true : false,\r\n            });\r\n        });\r\n    }\r\n\r\n    render() {\r\n        // If last render was disabled, enable again\r\n        if (this.state.itemSelectorDisabled) {\r\n            this.setState({ itemSelectorDisabled: false });\r\n        }\r\n\r\n        let scale = 0.7;\r\n        let width = \"88px\";\r\n        let height = \"64px\";\r\n        return (\r\n            // Relative to make positioning work on children\r\n            <div style={{ position:\"relative\" }}>\r\n                {\r\n                    // Hover popup for Item information tooltip\r\n                    this.state.item &&\r\n                        <Popup\r\n                            trigger={isOpen => (\r\n                                // Info icon on item to display tooltip\r\n                                <div\r\n                                    className=\"ml-2 mt-1\" \r\n                                    style={{ position:\"absolute\", zIndex: 1 }}>\r\n                                    <FontAwesomeIcon icon={faInfo} />\r\n                                </div>\r\n                            )}\r\n                            position=\"right center\"\r\n                            on=\"hover\"\r\n                            className=\"foresight-tooltip\"\r\n                            contentStyle={{ width: \"350px\" }}>\r\n                                <ItemTooltip\r\n                                    itemName={this.state.item}\r\n                                    dotaStrings={this.state.dotaStrings}\r\n                                    abilityStrings={this.state.abilityStrings}\r\n                                    />\r\n                        </Popup>\r\n                }\r\n                {/* Item selector popup to allow for changing to new item */}\r\n                <Popup\r\n                    trigger={isOpen => (\r\n                        // Item icon\r\n                        <div className=\"m-1\">\r\n                            <div style={{ width: `calc(${width} * ${scale})`, height: `calc(${height} * ${scale})` }}>\r\n                                {  getItemIcon(this.state.item, width, height, 0.7) }\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                    closeOnDocumentClick \r\n                    disabled={this.state.itemSelectorDisabled}\r\n                    position=\"right center\"\r\n                    on=\"click\"\r\n                    className=\"foresight-tooltip\"\r\n                    contentStyle={{ \r\n                        width: \"350px\", \r\n                        height: \"450px\",\r\n                    }}>\r\n                        <ItemSelector \r\n                            onSelectedItem={this.onSelectedItem}\r\n                            dotaStrings={this.state.dotaStrings}\r\n                            abilityStrings={this.state.abilityStrings} />\r\n                </Popup>\r\n                {\r\n                    // Charge counter UI for bloodstone or charge based items\r\n                    (this.state.item === \"item_bloodstone\" || itemRequiresCharges(this.state.item)) &&\r\n                    <div style={{ \r\n                        position: \"absolute\", \r\n                        zIndex: 1, \r\n                        width: `calc(${width} * ${scale})`, \r\n                        height: `calc(${height} * ${scale})`,\r\n                        top: `calc(${height} * ${scale} - 17px)`,\r\n                        left: `calc(${width} * ${scale} - 27px)`, \r\n                    }}>\r\n                        <Form.Control \r\n                            size=\"sm\" \r\n                            value={ this.state.itemExtra?.charges ?? 0 } \r\n                            onChange={this.onBloodstoneChargesChanged} \r\n                            style={{ \r\n                                width: \"30px\",\r\n                                height: \"20px\",\r\n                                padding: 0,\r\n                                textAlign: \"center\",\r\n                                background: \"rgba(0, 0, 0, 0.5)\",\r\n                                border: 0,\r\n                                color: \"white\"\r\n                            }} />\r\n                    </div>\r\n                }\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default Item;","import React, { Component } from 'react';\r\nimport {\r\n    Button,\r\n    Form,\r\n    ListGroup\r\n} from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faMinus } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport {\r\n    getAllNeutrals, getItemInfoFromName, getNeutralTierLayout, itemAliasIncludes,\r\n} from \"../../utility/dataHelperItems\";\r\n\r\nimport { getItemIcon } from '../../utility/spriteHelper';\r\nimport { \r\n    getLocalizedString, \r\n    replaceStringValue,\r\n} from '../../utility/data-helpers/language';\r\n\r\nfunction ItemIcon(props) {\r\n    let searchIconScale = 0.45;\r\n    return (\r\n        <div \r\n            key={props.keyName} \r\n            title={props.itemName} \r\n            onClick={props.onClick}\r\n            data-item={props.itemName}\r\n            className=\"m-1\" \r\n            style={{ width: `calc(88px * ${searchIconScale})`, height: `calc(64px * ${searchIconScale})` }}>\r\n            { \r\n                getItemIcon(props.itemName, \"88px\", \"64px\", searchIconScale) \r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\n/// HTML for one level of tiered neutral items\r\nfunction NeutralTier (props) {\r\n    return (\r\n        <div>\r\n            <div className=\"d-flex\" style={{ color:\"white\" }}>\r\n                <h6>\r\n                    { replaceStringValue( getLocalizedString(props.dotaStrings, \"DOTA_Shop_NeutralTier\"), props.tier) } \r\n                </h6>\r\n                <h6 className=\"ml-auto text-muted\">\r\n                    { props.time + \"+\" }\r\n                </h6>\r\n            </div>\r\n            <div className=\"d-flex flex-wrap\">\r\n                {\r\n                    props.neutrals && Object.keys(props.neutrals).map((neutralKey, index) => {\r\n                        // Replace any recipes with actual item\r\n                        let neutral = neutralKey;\r\n                        if (neutral.includes(\"_recipe\")) {\r\n                            neutral = neutral.replace(\"_recipe\", \"\");\r\n                        }\r\n\r\n                        let localizedName = getLocalizedString(props.abilityStrings, `DOTA_Tooltip_Ability_${neutral}`);\r\n                        return (\r\n                            <div \r\n                                className=\"m-1\" \r\n                                key={ `${neutral}-${index}` } \r\n                                title={ localizedName }\r\n                                onClick={ props.onNeutralSelected }\r\n                                data-neutral={ neutral }\r\n                                style={{ width: `calc(88px * ${props.iconScale})`, height: `calc(64px * ${props.iconScale})` }}>\r\n                                { \r\n                                    getItemIcon(neutral, \"88px\", \"64px\", props.iconScale)\r\n                                }\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nclass NeutralItemSelector extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let allNeutrals = getAllNeutrals();\r\n        let neutralTierList = getNeutralTierLayout();\r\n        this.state = {\r\n            allNeutrals: allNeutrals,\r\n            queryNeutrals: null,\r\n            neutralTierList: neutralTierList,\r\n\r\n            iconScale: 0.49,\r\n            onNewNeutralSelected: props.onNeutralSelected,\r\n\r\n            dotaStrings: props.dotaStrings,\r\n            abilityStrings: props.abilityStrings,\r\n        };\r\n\r\n        this.onNeutralSelected = this.onNeutralSelected.bind(this);\r\n        this.onSearchChanged = this.onSearchChanged.bind(this);\r\n    }\r\n\r\n    onNeutralSelected(e) {\r\n        let neutral = e.target.parentElement.dataset.neutral;\r\n        this.state.onNewNeutralSelected({ item: neutral });\r\n    }\r\n\r\n    onSearchChanged (e) {\r\n        let query = e.target.value;\r\n        let filteredNeutrals = null;\r\n        if (query) {\r\n            filteredNeutrals = this.state.allNeutrals.filter((neutral, index) => {\r\n                // Check query for match in localized string, should work most of the time\r\n                let localizedName = getLocalizedString(this.state.abilityStrings, `DOTA_Tooltip_Ability_${neutral.item}`)?.toLowerCase();\r\n                if (localizedName && localizedName.indexOf(query.toLowerCase()) !== -1) {\r\n                    return true;\r\n                }\r\n\r\n                // Match query with any item aliases (only works for english)\r\n                let aliasMatch = itemAliasIncludes(neutral.itemInfo.ItemAliases, query);\r\n                if (aliasMatch) {\r\n                    return true;\r\n                }\r\n            });\r\n        }\r\n\r\n        /// If no query, show all neutrals\r\n        this.setState({\r\n            queryNeutrals: filteredNeutrals,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"neutral-item-card\" style={{ color: \"black\" }}>\r\n                <div className=\"neutral-item-card header d-flex p-2\">\r\n                    <div>\r\n                        <Form.Control \r\n                            className=\"foresight-input-control\"\r\n                            type=\"text\" \r\n                            placeholder=\"Search...\" \r\n                            onChange={this.onSearchChanged}/>\r\n                    </div>\r\n                    <Button className=\"ml-auto\" variant=\"outline-danger\" onClick={this.onNeutralSelected} data-neutral={null}>\r\n                        <FontAwesomeIcon icon={faMinus} data-neutral={null} />\r\n                    </Button>\r\n                </div>\r\n                <div className=\"neutral-item-card content p-2\">\r\n                    {/* Query search term UI */}\r\n                    {\r\n                        this.state.queryNeutrals && \r\n                            <ListGroup className=\"foresight-list-group\">\r\n                                {\r\n                                    <h6>\r\n                                        { getLocalizedString(this.state.dotaStrings, \"DOTA_Shop_Search_Results_Title\") }\r\n                                    </h6>\r\n                                }\r\n                                {\r\n                                    this.state.queryNeutrals.map((itemInfo, index) => {\r\n                                        let localizedName = getLocalizedString(this.state.abilityStrings, `DOTA_Tooltip_Ability_${itemInfo.item}`);\r\n                                        return ( \r\n                                            <ListGroup.Item\r\n                                                key={ `${itemInfo.item}-${index}`}\r\n                                                onClick={this.onNeutralSelected}\r\n                                                title={localizedName}\r\n                                                data-neutral={itemInfo.item}\r\n                                                action>\r\n                                                <div className=\"d-flex\" data-neutral={itemInfo.item}>\r\n                                                    <ItemIcon \r\n                                                        itemName={itemInfo.item}\r\n                                                        onClick={this.onNeutralSelected}  />\r\n                                                    <h6 className=\"mx-1 my-auto\" data-neutral={itemInfo.item}>\r\n                                                        { localizedName ?? itemInfo.item }\r\n                                                    </h6>\r\n                                                </div>\r\n                                            </ListGroup.Item>\r\n                                        )\r\n                                    })\r\n                                }\r\n                                {\r\n                                    this.state.queryNeutrals.length <= 0 &&\r\n                                        <h6>\r\n                                            { \r\n                                                getLocalizedString(this.state.dotaStrings, \"DOTA_Shop_Search_No_Results\")\r\n                                            }\r\n                                        </h6>\r\n                                }\r\n                            </ListGroup>\r\n                    }\r\n                    \r\n                    <div>\r\n                        {\r\n                            !this.state.queryNeutrals && this.state.neutralTierList && this.state.neutralTierList.map((tier, index) => {\r\n                                let time = Object.keys(tier.drop_rates).filter((key) => {\r\n                                    if (key.includes(\":\")) {\r\n                                        return true;\r\n                                    }\r\n                                });\r\n                                let array = tier.drop_rates[time[0]];\r\n                                let tierDropAmt = Object.keys(array).length;\r\n\r\n                                return (\r\n                                    <NeutralTier \r\n                                        tier={index + 1}\r\n                                        neutrals={tier.items}\r\n                                        time={time}\r\n                                        dropAmount={tierDropAmt}\r\n                                        iconScale={this.state.iconScale}\r\n                                        onNeutralSelected={this.onNeutralSelected}\r\n                                        dotaStrings={this.state.dotaStrings}\r\n                                        abilityStrings={this.state.abilityStrings}\r\n                                        />\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NeutralItemSelector;","import Neutral from \"./Neutral\";\r\n\r\nexport default Neutral;","import React, { Component } from 'react';\r\nimport Popup from \"reactjs-popup\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faInfo } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport NeutralItemSelector from \"./NeutralItemSelector\";\r\nimport ItemTooltip from '../ItemTooltip';\r\n\r\nimport { itemNameToElement } from \"../../utils\";\r\nimport { getItemIcon } from '../../utility/spriteHelper';\r\n\r\nclass Neutral extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            neutralItem: props.neutralItem,\r\n            onNewNeutralSelected: props.onNewNeutralSelected,\r\n            dotaStrings: props.dotaStrings,\r\n            abilityStrings: props.abilityStrings,\r\n\r\n            iconScale: 0.7,\r\n            neutralSelectorDisabled: false,\r\n        };\r\n\r\n        this.onNeutralSelected = this.onNeutralSelected.bind(this);\r\n    }\r\n\r\n    componentDidUpdate (prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                neutralItem: this.props.neutralItem,\r\n                dotaStrings: this.props.dotaStrings,\r\n                abilityStrings: this.props.abilityStrings,\r\n                onNewNeutralSelected: this.props.onNewNeutralSelected,\r\n            });\r\n        }\r\n    }\r\n\r\n    onNeutralSelected (neutral) {\r\n        this.setState({\r\n            neutralSelectorDisabled: true,\r\n        });\r\n\r\n        if (this.state.onNewNeutralSelected) {\r\n            this.state.onNewNeutralSelected(neutral);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if(this.state.neutralSelectorDisabled) {\r\n            this.setState({ neutralSelectorDisabled: false });\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                {\r\n                    this.state.neutralItem && this.state.neutralItem.item &&\r\n                        <Popup\r\n                            trigger={isOpen => (\r\n                                <div\r\n                                    className=\"ml-2 mt-1\" \r\n                                    style={{ position:\"absolute\", zIndex: 1 }}>\r\n                                    <FontAwesomeIcon icon={faInfo} />\r\n                                </div>\r\n                            )}\r\n                            position=\"right center\"\r\n                            on=\"hover\"\r\n                            className=\"foresight-tooltip\"\r\n                            contentStyle={{\r\n                                width: \"350px\",\r\n                            }}>\r\n                                <ItemTooltip\r\n                                    itemName={this.state.neutralItem.item}\r\n                                    dotaStrings={this.state.dotaStrings}\r\n                                    abilityStrings={this.state.abilityStrings}\r\n                                    />\r\n                        </Popup>\r\n                }\r\n                <Popup\r\n                    trigger={isOpen => {\r\n                        return getItemIcon(this.state.neutralItem.item, \"88px\", \"64px\", this.state.iconScale);\r\n                    }}\r\n                    position=\"right center\"\r\n                    disabled={this.state.neutralSelectorDisabled}\r\n                    className=\"foresight-tooltip\"\r\n                    contentStyle={{\r\n                        width: \"350px\",\r\n                        height: \"450px\"\r\n                    }}>\r\n                        <NeutralItemSelector \r\n                            onNeutralSelected={this.onNeutralSelected}\r\n                            dotaStrings={this.state.dotaStrings} \r\n                            abilityStrings={this.state.abilityStrings}\r\n                            />\r\n                </Popup>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Neutral;","import React, { Component } from 'react';\r\nimport {\r\n    Row, \r\n    Col\r\n} from \"react-bootstrap\";\r\n\r\nimport { \r\n    getLocalizedString\r\n} from '../../utility/data-helpers/language';\r\n\r\nimport Item from \"./Item\";\r\nimport Neutral from \"../Neutral\";\r\n\r\nclass ItemsBar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            items: props.items,\r\n            backpack: props.backpack,\r\n            neutral: props.neutral,\r\n            iconScale: 0.7,\r\n\r\n            onNeutralChanged: props.onNeutralChanged,\r\n            onItemChanged: props.onItemChanged,\r\n\r\n            dotaStrings: props.dotaStrings,\r\n            abilityStrings: props.abilityStrings,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        //Update if previous props have changed\r\n        if (prevProps.items !== this.props.items) {\r\n            this.setState({\r\n                items: this.props.items,\r\n            });\r\n        }\r\n\r\n        if (prevProps.backpack !== this.props.backpack) {\r\n            this.setState({\r\n                backpack: this.props.backpack,\r\n            });\r\n        }\r\n\r\n        if (prevProps.neutral !== this.props.neutral) {\r\n            this.setState({\r\n                neutral: this.props.neutral,\r\n            });\r\n        }\r\n\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ abilityStrings: this.props.abilityStrings });\r\n        }\r\n        if (prevProps.dotaStrings !== this.props.dotaStrings) {\r\n            this.setState({ dotaStrings: this.props.dotaStrings });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let itemsColWidth = 5;\r\n        let backpackColWidth = 5;\r\n        let neutralColWidth = 2;\r\n        return (\r\n            <div>\r\n                <Row>\r\n                    <Col md={itemsColWidth}>\r\n                        <h6>{ getLocalizedString(this.state.dotaStrings, \"DOTA_SHOP_ITEMS\") }</h6>\r\n                        <Row md={3} className=\"m-0 p-0\">\r\n                            {\r\n                                this.state.items && this.state.items.map((value) => {\r\n                                    return (\r\n                                        <Item \r\n                                            key={value.slot}\r\n                                            slot={value.slot}\r\n                                            item={value.item} \r\n                                            onItemChanged={this.state.onItemChanged}\r\n                                            onItemExtraChnaged={this.state.onItem}\r\n                                            dotaStrings={this.state.dotaStrings} \r\n                                            abilityStrings={this.state.abilityStrings} />\r\n                                    )\r\n                                })\r\n                            }\r\n                        </Row>\r\n                    </Col>\r\n                    <Col md={backpackColWidth}>\r\n                        <h6>{ getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_BackpackHintTitle\").toUpperCase() }</h6>\r\n                        <div className=\"d-flex flex-wrap\">\r\n                            {\r\n                                this.state.backpack && this.state.backpack.map((value) => {\r\n                                    return (\r\n                                        <Item\r\n                                            key={value.slot}\r\n                                            slot={value.slot}\r\n                                            item={value.item}\r\n\r\n                                            isBackpack={true}\r\n                                            onItemChanged={this.state.onItemChanged}\r\n                                            dotaStrings={this.state.dotaStrings}\r\n                                            abilityStrings={this.state.abilityStrings} />\r\n                                    )\r\n                                })\r\n                            }\r\n                        </div>\r\n                    </Col>\r\n                    <Col md={neutralColWidth}>\r\n                        <h6>{ getLocalizedString(this.state.dotaStrings, \"UI_NEUTRALS\") }</h6>\r\n                        {/* Neutral Item */}\r\n                        <div>\r\n                            <Neutral \r\n                                neutralItem={this.state.neutral} \r\n                                onNewNeutralSelected={this.state.onNeutralChanged}\r\n                                dotaStrings={this.state.dotaStrings}\r\n                                abilityStrings={this.state.abilityStrings} />\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ItemsBar;","import ItemsBar from \"./ItemsBar\";\r\n\r\nexport default ItemsBar;","import React, { Component } from 'react';\r\n\r\nimport { EAttributes } from \"../../enums/attributes.js\";\r\n\r\nimport \"./Attributes.css\";\r\nimport { getLocalizedString, replaceStringValue } from '../../utility/data-helpers/language.js';\r\nimport { calculateAttribute } from '../../utility/calculate.js';\r\n\r\nfunction Attribute(props) {\r\n    return (\r\n        <div className=\"d-flex my-2 align-items-center\">\r\n            <div className={props.isPrimaryAttribute ? \" primary-attribute\" : \"\"}>\r\n                <span className={'attribute ' + props.type} alt=\"attribute\" />\r\n            </div>\r\n            <div className=\"ml-2\">{props.value}</div>\r\n            {\r\n                props.additional && props.additional > 0 &&\r\n                <div   \r\n                    className=\"mx-1\" \r\n                    style={{ color: \"green\" }}>\r\n                    {\"+\" + props.additional}\r\n                </div>\r\n            }\r\n            <div\r\n                className=\"ml-3\"\r\n                style={{ fontSize: \"0.75rem\" }}>\r\n                {\r\n                    replaceStringValue(props.perLevelString, props.per)\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nclass Attributes extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            hero: props.hero,\r\n            level: props.heroLevel,\r\n            items: props.items,\r\n            talents: props.talents,\r\n            neutral: props.neutral,\r\n            abilities: props.abilities,\r\n\r\n            dotaStrings: props.dotaStrings,\r\n            abilityStrings: props.abilityStrings,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                hero: this.props.hero,\r\n                level: this.props.heroLevel,\r\n                items: this.props.items,\r\n                talents: this.props.talents,\r\n                neutral: this.props.neutral,\r\n                abilities: this.props.abilities,\r\n\r\n                dotaStrings: this.props.dotaStrings,\r\n                abilityStrings: this.props.abilityStrings,\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let strengthStats = calculateAttribute(EAttributes.ATTR_STRENGTH, this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents);\r\n        let agilityStats = calculateAttribute(EAttributes.ATTR_AGILITY, this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents);\r\n        let intStats = calculateAttribute(EAttributes.ATTR_INTELLIGENCE, this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents);\r\n        return (\r\n            <div>\r\n                <h5>{getLocalizedString(this.state.dotaStrings, \"DOTA_Tooltip_topbar_stats\")}</h5>\r\n                <h6>{getLocalizedString(this.state.dotaStrings, \"DOTA_Attributes\")}</h6>\r\n                <Attribute \r\n                    type=\"strength\" \r\n                    value={ strengthStats.attribute }\r\n                    additional= { strengthStats.additionalAttribute }\r\n                    per={ strengthStats.perLevel } \r\n                    isPrimaryAttribute={this.state.hero?.AttributePrimary === EAttributes.ATTR_STRENGTH}\r\n                    perLevelString={ getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_StrengthGain\") } />\r\n\r\n                <Attribute \r\n                    type=\"agility\"\r\n                    value={ agilityStats.attribute }\r\n                    additional= { agilityStats.additionalAttribute }\r\n                    per={ agilityStats.perLevel } \r\n                    isPrimaryAttribute={this.state.hero?.AttributePrimary === EAttributes.ATTR_AGILITY} \r\n                    perLevelString={ getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_AgilityGain\") } />\r\n\r\n                <Attribute \r\n                    type=\"intelligence\" \r\n                    value={ intStats.attribute }\r\n                    additional= { intStats.additionalAttribute }\r\n                    per={ intStats.perLevel } \r\n                    isPrimaryAttribute={this.state.hero?.AttributePrimary === EAttributes.ATTR_INTELLIGENCE} \r\n                    perLevelString={ getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_IntelligenceGain\") } />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Attributes;","import Attributes from \"./Attributes\";\r\n\r\nexport default Attributes;","import React, { Component } from 'react';\r\nimport {\r\n    Row, Col\r\n} from \"react-bootstrap\";\r\nimport { faEye, faEyeSlash } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport {\r\n    calculateHealthRegen,\r\n    calculateManaRegen,\r\n    calculateMainArmor,\r\n    calculateTotalSpellAmp,\r\n    calculateStatusResist,\r\n    calculateMagicResist,\r\n    calculatePhysicalResist,\r\n    calculateEvasion,\r\n    calculateRightClickDamage,\r\n    calculateAttackTime,\r\n    calculateMoveSpeed,\r\n    calculateAttackRange,\r\n    calculateTotalLifesteal,\r\n    calculateTotalCleaveDmgPercent,\r\n    calculateCritPercent,\r\n    calculateTotalSpellLifesteal,\r\n    calculateCritChancePercent\r\n} from \"../../utility/calculate\";\r\nimport {\r\n    getLocalizedString\r\n} from \"../../utility/data-helpers/language\";\r\n\r\nfunction StatArray(props) {\r\n    return (\r\n        <div style={{ backgroundColor: \"#171717\", color: \"white\", fontSize: \"0.8rem\" }} className=\"p-2 h-100\">\r\n            <h6 className=\"ml-auto\">{props.title}</h6>\r\n            {\r\n                props.stats &&\r\n                    props.stats.map((value) => {\r\n                        return (\r\n                        <Row \r\n                            key={value.name}\r\n                            className=\"mx-0\">\r\n                            <Col \r\n                                md={6}\r\n                                className=\"px-0\">\r\n                                {value.name}\r\n                            </Col>\r\n                            <Col \r\n                                md={6}\r\n                                className=\"px-0\">\r\n                                {value.value}\r\n                            </Col>\r\n                        </Row>\r\n                        );\r\n                    })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\n/// Gets the attack min/max and formats it for display in UI\r\nfunction formatAttackMinMax(hero, lvl, items, neutral, abilities, talents) {\r\n    let standardAtkDmg = calculateRightClickDamage(hero, lvl, items, neutral, abilities, talents);\r\n    \r\n    // Range string\r\n    //let dmgString = `${standardAtkDmg.min} - ${standardAtkDmg.max}`;\r\n    // Average damage inbetween range value\r\n    let dmgString = standardAtkDmg.min + ((standardAtkDmg.max - standardAtkDmg.min) / 2);\r\n    if (standardAtkDmg.additional) {\r\n        dmgString += \" \";\r\n        dmgString += `${ standardAtkDmg.additional >= 0 ? \"+\" : \"-\" } ${Math.abs(standardAtkDmg.additional)}`;\r\n    }\r\n    return dmgString;\r\n}\r\n\r\n/// Gets the atk time and formats it to display in UI\r\nfunction formatAttackTime(hero, lvl, items, neutral, abilities, talents) {\r\n    let attackInfo = calculateAttackTime(hero, lvl, items, neutral, abilities, talents);\r\n    return `${attackInfo.attackSpeed} (${attackInfo.attackTime} s)`;\r\n}\r\n\r\n/// Format a total value and additional value into a string,\r\n/// hiding and displaying the correct sign if additional value is +/- or 0\r\nfunction formatTotalAdditional (total, additional, toFixedAmt = 2) {\r\n    if (total == null || additional == null) {\r\n        return null;\r\n    }\r\n\r\n    let val = total.toFixed(toFixedAmt);\r\n    if (additional) {\r\n        val += \" \";\r\n        val += `${additional > 0 ? \"+\" : \"-\"} ${Math.abs(additional.toFixed(toFixedAmt))}`;\r\n    }\r\n\r\n    return val;\r\n}\r\n\r\nclass Statistics extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            hero: props.hero,\r\n            level: props.heroLevel,\r\n            talents: props.talents,\r\n            items: props.items,\r\n            neutral: props.neutral,\r\n            abilities: props.abilities,\r\n\r\n            dotaStrings: props.dotaStrings,\r\n            abilityStrings: props.abilityStrings,\r\n\r\n            otherOpen: false,\r\n        };\r\n\r\n        this.updateStatistics = this.updateStatistics.bind(this);\r\n        this.onToggleOtherDetails = this.onToggleOtherDetails.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateStatistics();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.hero !== this.props.hero) {\r\n            this.setState({ \r\n                hero: this.props.hero \r\n            }, () => {\r\n                this.updateStatistics();\r\n            });\r\n        }\r\n        if (prevProps.items !== this.props.items) {\r\n            this.setState({ \r\n                items: this.props.items \r\n            }, () => {\r\n                this.updateStatistics();\r\n            });\r\n        }\r\n        if (prevProps.neutral !== this.props.neutral) {\r\n            this.setState({ \r\n                neutral: this.props.neutral, \r\n            }, () => {\r\n                this.updateStatistics();\r\n            });\r\n        }\r\n        if (prevProps.talents !== this.props.talents) {\r\n            this.setState({ \r\n                talents: this.props.talents \r\n            }, () => {\r\n                this.updateStatistics();\r\n            });\r\n        }\r\n        if (prevProps.abilities !== this.props.abilities) {\r\n            this.setState({ \r\n                abilities: this.props.abilities \r\n            }, () => {\r\n                this.updateStatistics();\r\n            });\r\n        }\r\n        if (prevProps.heroLevel !== this.props.heroLevel) {\r\n            this.setState({ \r\n                level: this.props.heroLevel \r\n            }, () => {\r\n                this.updateStatistics();\r\n            });\r\n        }\r\n        if (prevProps.dotaStrings !== this.props.dotaStrings) {\r\n            this.setState({ dotaStrings: this.props.dotaStrings });\r\n        }\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ abilityStrings: this.props.abilityStrings });\r\n        }\r\n    }\r\n\r\n    onToggleOtherDetails () {\r\n        this.setState({\r\n            otherOpen: !this.state.otherOpen,\r\n        });\r\n    }\r\n\r\n    updateStatistics() {\r\n        let armorInfo =  calculateMainArmor(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents);\r\n        let physResist = calculatePhysicalResist(armorInfo.armor + armorInfo.additional);\r\n        this.setState({\r\n            // Attack\r\n            attackSpeed: formatAttackTime(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n            damage: formatAttackMinMax(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n            attackRange: calculateAttackRange(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n            moveSpeed: calculateMoveSpeed(this.state.hero, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n            spellAmp: calculateTotalSpellAmp(this.state.talents, this.state.items, this.state.neutral),\r\n            manaRegen: calculateManaRegen(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n\r\n            // Defence\r\n            armor: formatTotalAdditional(armorInfo?.armor, armorInfo?.additional),\r\n            physicalResist: physResist,\r\n            magicResist: calculateMagicResist(this.state.items, this.state.neutral, this.state.abilities),\r\n            statusResist: calculateStatusResist(this.state.items, this.state.neutral),\r\n            evasion: calculateEvasion(this.state.items, this.state.neutral, this.state.abilities , this.state.talents),\r\n            healthRegen: calculateHealthRegen(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n\r\n            // Other\r\n            totalLifesteal: calculateTotalLifesteal(this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n            totalSpellLifesteal: calculateTotalSpellLifesteal(this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n            totalCleaveAmount: calculateTotalCleaveDmgPercent(this.state.hero, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n            totalCritPercent: calculateCritPercent(this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n            totalCritChancePercent: calculateCritChancePercent(this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n            totalCooldownAmount: 0,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Row>\r\n                    {\r\n                        this.state.hero &&\r\n                        <Col md={6}>\r\n                            <StatArray title={getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_Attack\")} stats={[\r\n                                { \r\n                                    name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_AttackSpeed\"),\r\n                                    value: this.state.attackSpeed\r\n                                },\r\n                                { \r\n                                    name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_Damage\"), \r\n                                    value: this.state.damage \r\n                                },\r\n                                { \r\n                                    name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_AttackRange\"), \r\n                                    value: this.state.attackRange \r\n                                },\r\n                                { \r\n                                    name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_MoveSpeed\"), \r\n                                    value: this.state.moveSpeed \r\n                                },\r\n                                { \r\n                                    name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_SpellAmp\"), \r\n                                    value: this.state.spellAmp + \"%\" \r\n                                },\r\n                                { \r\n                                    name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_ManaRegenDetail\"), \r\n                                    value: this.state.manaRegen \r\n                                },\r\n                            ]} />\r\n                        </Col>\r\n                    }   \r\n                    {\r\n                        this.state.hero &&\r\n                        <Col md={6}>\r\n                            <StatArray title={getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_Defense\")} stats={[\r\n                                { \r\n                                    name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_Armor\"), \r\n                                    value: this.state.armor,\r\n                                },\r\n                                { \r\n                                    name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_PhysicalResist\"), \r\n                                    value: this.state.physicalResist + \"%\" \r\n                                },\r\n                                { \r\n                                    name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_MagicResist\"), \r\n                                    value: this.state.magicResist + \"%\" \r\n                                },\r\n                                { \r\n                                    name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_StatusResist\"), \r\n                                    value: this.state.statusResist + \"%\" \r\n                                },\r\n                                { \r\n                                    name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_Evasion\"), \r\n                                    value: this.state.evasion + \"%\" \r\n                                },\r\n                                { \r\n                                    name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_HealthRegenDetail\"), \r\n                                    value: formatTotalAdditional(this.state.healthRegen?.total, this.state.healthRegen?.additional, 2),\r\n                                },\r\n                            ]}/>\r\n                        </Col>\r\n                    }\r\n                </Row>\r\n                <FontAwesomeIcon \r\n                        icon={this.state.otherOpen ? faEyeSlash : faEye} \r\n                        onClick={this.onToggleOtherDetails} />\r\n                <Row className=\"my-1\">\r\n                    <Col className={!this.state.otherOpen ? \"collapse\" : \"\"}>\r\n                        <StatArray title={getLocalizedString(this.state.dotaStrings, \"DOTA_OtherType\").toUpperCase()} stats={[\r\n                            {\r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_SHOP_TAG_LIFESTEAL\"),\r\n                                value: this.state.totalLifesteal + \"%\",\r\n                            },\r\n                            {\r\n                                name: getLocalizedString(this.state.abilityStrings, \"DOTA_Tooltip_ability_special_bonus_spell_lifesteal_6\").split(\"% \")[1],\r\n                                value: `${getLocalizedString(this.state.dotaStrings, \"DOTA_Scoreboard_Header_Hero\")}: ${this.state.totalSpellLifesteal?.heroLifesteal + \"%\"}\r\n                                        ${getLocalizedString(this.state.dotaStrings, \"npc_dota_creep\")}: ${this.state.totalSpellLifesteal?.creepLifesteal + \"%\"}`,\r\n                            },\r\n                            {\r\n                                name: \"Critical Strike Amount\",\r\n                                value: this.state.totalCritPercent + \"%\",\r\n                            },\r\n                            {\r\n                                name: \"Critical Strike Chance\",\r\n                                value: this.state.totalCritChancePercent + \"%\",\r\n                            },\r\n                            {\r\n                                name: \"Cleave Damage Amount\",\r\n                                value: this.state.totalCleaveAmount + \"%\",\r\n                            },\r\n                            // {\r\n                            //     name: \"Total Cooldown Amount\",\r\n                            //     value: this.state.totalCooldownAmount + \"%\",\r\n                            // }\r\n                        ]} \r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Statistics;","import Statistics from \"./Statistics\";\r\n\r\nexport default Statistics;","import React, { Component } from 'react';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport {  faSearch } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { getLocalizedString } from '../../utility/data-helpers/language';\r\nimport { getAllPlayableHeroes } from '../../utility/dataHelperHero';\r\n\r\nimport \"./HeroSelector.css\";\r\nimport { itemAliasIncludes } from '../../utility/dataHelperItems';\r\n\r\nclass HeroSelector extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let selectableHeroes = getAllPlayableHeroes();\r\n        this.state = {\r\n            filteredHeroes: selectableHeroes,\r\n            allHeroes: selectableHeroes,\r\n\r\n            onSelectedHero: props.onSelectedHero,\r\n            dotaStrings: props.dotaStrings,\r\n        };\r\n\r\n        this.onSearchChanged = this.onSearchChanged.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                onSelectedHero: this.props.onSelectedHero,\r\n                dotaStrings: this.props.dotaStrings,\r\n            });\r\n        }\r\n    }\r\n\r\n    onSearchChanged(e) {\r\n        let searchTerm = e.target.value;\r\n        let filteredHeroes = this.state.allHeroes;\r\n        if (searchTerm) {\r\n            filteredHeroes = this.state.allHeroes.filter((hero) => {\r\n                /// Match against localized string\r\n                let localizedHeroName = getLocalizedString(this.state.dotaStrings, hero.name)?.toLowerCase();\r\n                if (localizedHeroName && localizedHeroName.indexOf(searchTerm.toLowerCase()) !== -1) {\r\n                    return true;\r\n                }\r\n\r\n                // Alias if localized string hasnt got a match, only works in english\r\n                let aliasMatch = itemAliasIncludes(hero.heroInfo.NameAliases, searchTerm);\r\n                if (aliasMatch) {\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n            });\r\n        }\r\n\r\n        this.setState({\r\n            filteredHeroes: filteredHeroes,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let iconScale = 0.5;\r\n        return (\r\n            <div className=\"hero-card\">\r\n                <div className=\"hero-card header d-flex p-2\">\r\n                    <div className=\"d-flex\">\r\n                        <h5 className=\"my-auto ml-2\">{ getLocalizedString(this.state.dotaStrings, \"DOTA_Hero_Selection_Intro_Header\") }</h5>\r\n                        <div className=\"ml-auto p-1\">\r\n                            <Form.Control \r\n                                className=\"foresight-input-control\"\r\n                                type=\"text\"\r\n                                placeholder=\"Search...\" \r\n                                onChange={this.onSearchChanged} />\r\n                        </div>\r\n                        <FontAwesomeIcon \r\n                            className=\"my-auto mx-2\"\r\n                            icon={faSearch} />\r\n                    </div>\r\n                </div>\r\n                <div className=\"hero-card content p-2\">\r\n                    <div className=\"d-flex flex-wrap\">\r\n                        {\r\n                            this.state.filteredHeroes && this.state.filteredHeroes.map((value) => {\r\n                                let localizedName = getLocalizedString(this.state.dotaStrings, `npc_dota_hero_${value.name}`)\r\n                                return (\r\n                                    <div\r\n                                        key={value.name}  \r\n                                        title={localizedName}\r\n                                        onClick={this.state.onSelectedHero}\r\n                                        className=\"m-1\"\r\n                                        style={{ \r\n                                            height: `calc(72px * ${iconScale})`, \r\n                                            width: `calc(128px * ${iconScale})` \r\n                                        }}>\r\n                                        <span \r\n                                            className={`hero-icon-big hero-icon-big-${value.name}_png`} \r\n                                            style={{ transformOrigin: \"top left\", transform: `scale(${iconScale}, ${iconScale})` }}\r\n                                            data-heroname={value.displayName}\r\n                                            data-hero={value.name} />\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n                        {\r\n                            this.state.filteredHeroes && this.state.filteredHeroes.length <= 0 &&\r\n                                <h6 className=\"p-1\">\r\n                                    { getLocalizedString(this.state.dotaStrings, \"DOTA_Shop_Search_No_Results\") }\r\n                                </h6>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HeroSelector;","import ChangeHeroBtn from \"./ChangeHeroBtn\";\r\n\r\nexport default ChangeHeroBtn;","import React, { Component } from 'react';\r\nimport {\r\n    Button\r\n} from \"react-bootstrap\";\r\nimport Popup from \"reactjs-popup\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport HeroSelector from \"./HeroSelector\";\r\n\r\nclass ChangeHeroBtn extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            onSelectHero: props.onSelectHero,\r\n            dotaStrings: props.dotaStrings,\r\n\r\n            heroSelectorDisabled: false,\r\n        };\r\n\r\n        this.onSelectHero = this.onSelectHero.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                dotaStrings: this.props.dotaStrings,\r\n                onSelectHero: this.props.onSelectHero,\r\n            });\r\n        }\r\n    }\r\n\r\n    onSelectHero (e) {\r\n        // Disable popup to force close\r\n        this.setState({\r\n            heroSelectorDisabled: true,\r\n        });\r\n\r\n        let hero = e.target.dataset.hero;\r\n        this.state.onSelectHero(hero);\r\n    }\r\n\r\n    render() {\r\n        // If last render popup was force disabled to close, then flip to false\r\n        // to allow reopening \r\n        if (this.state.heroSelectorDisabled) {\r\n            this.setState({ heroSelectorDisabled: false });\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <Popup \r\n                    trigger={isOpen => (\r\n                        <Button onClick={this.onToggleHeroSelect}><FontAwesomeIcon icon={faPencilAlt} /></Button>\r\n                    )} \r\n                    position=\"right top\"\r\n                    closeOnDocumentClick\r\n                    closeOnEscape\r\n                    disabled={this.state.heroSelectorDisabled}\r\n                    className=\"foresight-tooltip\"\r\n                    contentStyle={{ \r\n                        width: \"750px\"\r\n                    }}>\r\n                     <HeroSelector \r\n                        onSelectedHero={this.onSelectHero} \r\n                        dotaStrings={this.state.dotaStrings}\r\n                         />\r\n                </Popup>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChangeHeroBtn;","import React, { Component } from 'react';\r\nimport {\r\n    Row,\r\n    Col\r\n} from \"react-bootstrap\";\r\n\r\nimport {\r\n    getTalentInfoFromName,\r\n} from \"../../utility/dataHelperTalents\";\r\nimport { \r\n    tryGetTalentLocalizedString,\r\n    replaceStringValue,\r\n    getLocalizedString\r\n} from \"../../utility/data-helpers/language\";\r\n\r\nfunction isTalentSelected (selectedTalents, talent) {\r\n    return selectedTalents?.includes(talent);\r\n}\r\n\r\nclass TalentRow extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            leftTalent: props.leftTalent,\r\n            rightTalent: props.rightTalent,\r\n            level: props.lvl,\r\n\r\n            selectedTalents: this.props.selectedTalents,\r\n            onTalentSelected: this.props.onTalentSelected,\r\n            onTalentUnselected: this.props.onTalentUnselected,\r\n\r\n            abilityStrings: this.props.abilityStrings,\r\n        };\r\n\r\n        this.onSelectTalent = this.onSelectTalent.bind(this);\r\n        this.getTalentDisplayName = this.getTalentDisplayName.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.leftTalent !== this.props.leftTalent) {\r\n            this.setState({ leftTalent: this.props.leftTalent });\r\n        }\r\n\r\n        if(prevProps.rightTalent !== this.props.rightTalent) {\r\n            this.setState({ rightTalent: this.props.rightTalent });\r\n        }\r\n\r\n        if (prevProps.lvl !== this.props.lvl) {\r\n            this.setState({ level: this.props.lvl });\r\n        }\r\n\r\n        if (prevProps.selectedTalents !== this.props.selectedTalents) {\r\n            this.setState({ selectedTalents: this.props.selectedTalents });\r\n        }\r\n\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ abilityStrings: this.props.abilityStrings });\r\n        }\r\n    }\r\n\r\n    onSelectTalent(e) {\r\n        let selectedTalent = e.target.dataset.talent;\r\n        // if clicked twice, unselect the talent\r\n        if (isTalentSelected(this.state.selectedTalents, selectedTalent)) {\r\n            this.state.onTalentUnselected(selectedTalent);\r\n        } else {\r\n            this.state.onTalentSelected(selectedTalent);\r\n        }\r\n    }\r\n\r\n    getTalentDisplayName (talent) {\r\n        let talentInfo = getTalentInfoFromName(talent);\r\n        if (!talentInfo) {\r\n            return \"Unknown Talent\";\r\n        }\r\n\r\n        let displayName = getLocalizedString(this.state.abilityStrings, \"DOTA_Tooltip_ability_\" + talent); \r\n        if (displayName && talentInfo && talentInfo.AbilitySpecial) {\r\n            displayName = replaceStringValue(displayName, talentInfo.AbilitySpecial[0].value)\r\n        }\r\n\r\n        return displayName;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Row className=\"my-1 py-2\" style={{ backgroundColor: \"rgb(24, 30, 33)\"}}>\r\n                {/* Left Talent */}\r\n                <Col \r\n                    md={5}\r\n                    className=\"text-center\"\r\n                    style={{ \r\n                        color: isTalentSelected(this.state.selectedTalents, this.state.leftTalent) ? \"#c4a66f\" : \"white\",\r\n                        userSelect: \"none\",\r\n                    }}>\r\n                    <div onClick={this.onSelectTalent} data-talent={this.state.leftTalent}>\r\n                        {\r\n                            this.getTalentDisplayName(this.state.leftTalent)\r\n                        }\r\n                    </div>\r\n                </Col>\r\n                {/* Talent Level */}\r\n                <Col md={2}>\r\n                    <h6 \r\n                        className=\"text-center\"\r\n                        style={{ color: \"#e7d291\"}}>\r\n                        {this.state.level}\r\n                    </h6>\r\n                </Col>\r\n                {/* Right Talent */}\r\n                <Col \r\n                    md={5}\r\n                    className=\"text-center\"\r\n                    style={{ \r\n                        color: isTalentSelected(this.state.selectedTalents, this.state.rightTalent) ? \"#c4a66f\" : \"white\",\r\n                        userSelect: \"none\",\r\n                    }}>\r\n                    <div onClick={this.onSelectTalent} data-talent={this.state.rightTalent}>\r\n                        {\r\n                            this.getTalentDisplayName(this.state.rightTalent)\r\n                        }\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TalentRow;\r\n","import TalentTree from \"./TalentTree\";\r\n\r\nexport default TalentTree;","import React, { Component } from 'react';\r\n\r\nimport TalentRow from \"./TalentRow\";\r\nimport { getLocalizedString } from '../../utility/data-helpers/language';\r\n\r\nclass TalentTree extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            talents: this.props.talents,\r\n            selectedTalents: this.props.selectedTalents,\r\n\r\n            onTalentSelected: this.props.onTalentSelected,\r\n            onTalentUnselected: this.props.onTalentUnselected,\r\n\r\n            dotaStrings: this.props.dotaStrings,\r\n            abilityStrings: this.props.abilityStrings,\r\n        };\r\n        this.findSelectedTalent = this.findSelectedTalent.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(prevProps.talents !== this.props.talents) {\r\n            this.setState({ talents: this.props.talents });\r\n        }\r\n        if (prevProps.selectedTalents !== this.props.selectedTalents) {\r\n            this.setState({ selectedTalents: this.props.selectedTalents });\r\n        }\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ abilityStrings: this.props.abilityStrings });\r\n        }\r\n        if (prevProps.dotaStrings !== this.props.dotaStrings) {\r\n            this.setState({ dotaStrings: this.props.dotaStrings });\r\n        }\r\n    }\r\n\r\n    findSelectedTalent(leftTalent, rightTalent) {\r\n        if (this.state.selectedTalents && this.state.selectedTalents.length > 0) {\r\n            let matchTalent = this.state.selectedTalents.find((val) => {\r\n                if (val.name === leftTalent) {\r\n                    return leftTalent;\r\n                } else if (val.name === rightTalent) {\r\n                    return rightTalent;\r\n                }\r\n                return null;\r\n            });\r\n            return matchTalent?.name;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h6 className=\"text-center\">{ getLocalizedString(this.state.dotaStrings, \"DOTA_StatBranch_TooltipTitle\") }</h6>\r\n                {/* <img src=\"/images/dota2/talent.jpg\" alt=\"talent tree\" /> */}\r\n                <div \r\n                    className=\"mr-2\"\r\n                    style={{ fontSize: \"0.8rem\" }}>\r\n                        {\r\n                            this.state.talents && this.state.talents.map((talentInfo) => {\r\n                                return <TalentRow \r\n                                                key={talentInfo.lvl}\r\n                                                lvl={talentInfo.lvl}\r\n                                                leftTalent={talentInfo.leftTalent} \r\n                                                rightTalent={talentInfo.rightTalent} \r\n                                                selectedTalents={this.state.selectedTalents}\r\n                                                onTalentSelected={this.state.onTalentSelected}\r\n                                                onTalentUnselected={this.state.onTalentUnselected} \r\n                                                \r\n                                                abilityStrings={this.state.abilityStrings} />\r\n                            })\r\n                        }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TalentTree;","import HealthManaBar from \"./HealthManaBar\";\r\n\r\nexport default HealthManaBar;","import React, { Component } from 'react';\r\n\r\nimport {\r\n    calculateHealth,\r\n    calculateMana,\r\n    calculateHealthRegen,\r\n    calculateManaRegen,\r\n} from \"../../utility/calculate\";\r\nimport { EAttributes } from \"../../enums/attributes\";\r\n\r\nimport \"./style.css\";\r\n\r\nclass HealthManaBar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            hero: props.hero,\r\n            level: props.heroLevel,\r\n            items: props.items,\r\n            talents: props.talents,\r\n            neutral: props.neutral,\r\n            abilities: props.abilities,\r\n\r\n            maxHealth: 0,\r\n            maxMana: 0,\r\n        }\r\n\r\n        this.updateBar = this.updateBar.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateBar();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                hero: this.props.hero,\r\n                level: this.props.heroLevel,\r\n                items: this.props.items,\r\n                talents: this.props.talents,\r\n                neutral: this.props.neutral,\r\n                abilities: this.props.abilities,\r\n\r\n                maxHealth: 0,\r\n                maxMana: 0,\r\n            }, () => this.updateBar());\r\n        }\r\n    }\r\n\r\n    updateBar() {\r\n        this.setState({\r\n            maxHealth: calculateHealth(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n            maxMana: calculateMana(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let healthRegenInfo = calculateHealthRegen(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents);\r\n        return (\r\n            <div>\r\n                <div className=\"bar health d-flex\">\r\n                    <h6 className=\"max-health-text my-auto mx-auto\">{this.state.maxHealth} / {this.state.maxHealth}</h6>\r\n                    <div className=\"health-bar-regen my-auto mr-1\">\r\n                        { \"+\" + (healthRegenInfo.total + healthRegenInfo.additional).toFixed(1) }\r\n                    </div>\r\n                </div>\r\n                <div className=\"bar mana d-flex\">\r\n                    <h6 className=\"max-mana-text my-auto mx-auto\">{this.state.maxMana} / {this.state.maxMana}</h6>\r\n                    <div className=\"mana-bar-regen my-auto mr-1\">\r\n                        { \"+\" + calculateManaRegen(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents) }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HealthManaBar;","import React, { Component } from 'react';\r\nimport { \r\n    Button, \r\n    Form\r\n} from 'react-bootstrap';\r\nimport { getLocalizedString } from '../../utility/data-helpers/language';\r\n\r\nconst MAX_LEVEL = 30;\r\nconst MIN_LEVEL = 1;\r\n\r\nfunction ModifyBtn (props) {\r\n    return (\r\n        <Button \r\n            className=\"py-1\"\r\n            variant=\"outline-secondary\" \r\n            onClick={props.onClick}>\r\n            { props.text }\r\n        </Button>\r\n    );\r\n}\r\n\r\nclass LevelSelector extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            level: props.heroLevel,\r\n            onHeroLevelChanged: props.onHeroLevelChanged,\r\n            dotaStrings: props.dotaStrings,\r\n        };\r\n\r\n        this.onIncrementHeroLevel = this.onIncrementHeroLevel.bind(this);\r\n        this.onDecrementHeroLevel = this.onDecrementHeroLevel.bind(this);\r\n        this.onLvlInputChanged = this.onLvlInputChanged.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.heroLevel !== this.props.heroLevel) {\r\n            this.setState({\r\n                level: this.props.heroLevel,\r\n            });\r\n        }\r\n        if (prevProps.dotaStrings !== this.props.dotaStrings) {\r\n            this.setState({ dotaStrings: this.props.dotaStrings });\r\n        }\r\n    }\r\n\r\n    onIncrementHeroLevel() {\r\n        let newLevel = this.state.level;\r\n        newLevel += 1;\r\n\r\n        if (newLevel >= MAX_LEVEL) {\r\n            newLevel = MAX_LEVEL;\r\n        }\r\n\r\n        this.state.onHeroLevelChanged(newLevel);\r\n    }\r\n\r\n    onDecrementHeroLevel() {\r\n        let newLevel = this.state.level;\r\n        newLevel -= 1;\r\n\r\n        if (newLevel < MIN_LEVEL) {\r\n            newLevel = MIN_LEVEL;\r\n        }\r\n\r\n        this.state.onHeroLevelChanged(newLevel);\r\n    }\r\n\r\n    onLvlInputChanged(e) {\r\n        let lvl = parseInt(e.target.value);\r\n        if (lvl) {\r\n            if (lvl > MAX_LEVEL) {\r\n                lvl = MAX_LEVEL;\r\n            }\r\n            else if (lvl < MIN_LEVEL) {\r\n                lvl = MIN_LEVEL;\r\n            }\r\n        } else {\r\n            lvl = MIN_LEVEL;\r\n        }\r\n\r\n        this.state.onHeroLevelChanged(lvl);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"mx-5\">\r\n                <h6>{ getLocalizedString(this.state.dotaStrings, \"dota_stat_dropdown_level\") }</h6>\r\n                <div className=\"d-flex\">\r\n                    <ModifyBtn \r\n                        onClick={this.onDecrementHeroLevel} \r\n                        text=\"-\" />\r\n                    <Form.Control\r\n                        className=\"foresight-input-control mx-3\" \r\n                        style={{ width: \"75px\" }}\r\n                        placeholder=\"lvl\" \r\n                        type=\"number\" \r\n                        value={this.state.level} \r\n                        onChange={this.onLvlInputChanged} />\r\n                    <ModifyBtn \r\n                        onClick={this.onIncrementHeroLevel} \r\n                        text=\"+\" />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LevelSelector;","import LevelSelector from \"./LevelSelector\";\r\n\r\nexport default LevelSelector;","import React, { Component } from 'react';\r\nimport { Redirect, Link } from 'react-router-dom';\r\nimport {\r\n    Container,\r\n    Row,\r\n    Col,\r\n    Button,\r\n    Form,\r\n} from 'react-bootstrap';\r\nimport { connect } from \"react-redux\";\r\nimport copy from \"copy-to-clipboard\";\r\nimport { Base64 } from \"js-base64\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCopy, faFile, faChevronUp, faChevronDown, faShare } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport {\r\n    SELECTED_HERO,\r\n    SELECTED_ITEM,\r\n    SELECTED_NEUTRAL,\r\n    SELECTED_BACKPACK_ITEM,\r\n    SELECTED_TALENT,\r\n    UNSELECTED_TALENT,\r\n    NEW_HERO_LEVEL,\r\n    ENEMY_SELECTED_TALENT, SELECTED_ABILITY_LEVEL\r\n} from \"../../constants/actionTypes\";\r\n\r\nimport { \r\n    getLocalizedString\r\n} from '../../utility/data-helpers/language';\r\n\r\nimport Abilities from \"../Abilities\";\r\nimport ItemsBar from \"../ItemsBar\";\r\nimport Attributes from \"../Attributes\";\r\nimport Statistics from \"../Statistics\";\r\nimport ChangeHeroBtn from \"../ChangeHeroBtn\";\r\nimport TalentTree from \"../TalentTree\";\r\nimport HealthManaBar from \"../HealthManaBar\";\r\nimport LevelSelector from \"../LevelSelector\";\r\nimport EnemyHero from '../EnemyHero';\r\n\r\nimport \"../../css/dota_hero_icons.css\";\r\nimport \"../../css/dota_attributes.css\";\r\nimport \"../../css/dota_items.css\";\r\nimport \"../../css/dota_hero_icons_big.css\";\r\nimport \"./Calculator.css\";\r\n\r\nclass Calculator extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            buildName: \"\",\r\n            buildCreator: \"\",\r\n            openBuildShare: false,\r\n            loadedFromParams: false,\r\n        };\r\n\r\n        this.onHeroSelected = this.onHeroSelected.bind(this);\r\n        this.onItemSelected = this.onItemSelected.bind(this);\r\n        this.onNeutralSelected = this.onNeutralSelected.bind(this);\r\n        this.onTalentSelected = this.onTalentSelected.bind(this);\r\n        this.onTalentUnselected = this.onTalentUnselected.bind(this);\r\n        this.onHeroLevelChanged = this.onHeroLevelChanged.bind(this);\r\n        this.onAbilityLevelChanged = this.onAbilityLevelChanged.bind(this);\r\n\r\n        this.onShareBuild = this.onShareBuild.bind(this);\r\n        this.onBuildNameChanged = this.onBuildNameChanged.bind(this);\r\n        this.onBuildCreatorChanged = this.onBuildCreatorChanged.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        /// Parse build data from url on start and set app state\r\n        if (this.props.location.search) {\r\n            let params = new URLSearchParams(this.props.location.search);\r\n            let buildData = params.get(\"build\");\r\n            if (buildData) {\r\n                let decoded = Base64.decode(buildData);\r\n                let buildObject = null;\r\n                try {\r\n                    buildObject = JSON.parse(decoded);\r\n                } catch(e) {\r\n                    console.error(\"Unable to parse build object\");\r\n                }\r\n\r\n                if (buildObject) {\r\n                    this.setState({\r\n                        buildCreator: buildObject.creator,\r\n                        buildName: buildObject.name,\r\n                        openBuildShare: true,\r\n                        loadedFromParams: true,\r\n                    });\r\n                    \r\n                    let build = buildObject.build;\r\n                    if (build?.selectedHeroName)\r\n                        this.props.dispatch({ type: SELECTED_HERO, value: build.selectedHeroName });\r\n                    if (build?.heroLevel)\r\n                        this.props.dispatch({ type: NEW_HERO_LEVEL, value: build.heroLevel });\r\n                    if (build?.selectedTalents) {\r\n                        for(let talent of  build.selectedTalents) {\r\n                            this.props.dispatch({ type: SELECTED_TALENT, value: talent });\r\n                        }\r\n                    }\r\n                    if (build?.heroAbilityLevels) {\r\n                        for (let abilLevel of build.heroAbilityLevels) {\r\n                            this.props.dispatch({ type: SELECTED_ABILITY_LEVEL, value: abilLevel });\r\n                        }\r\n                    }\r\n                    if (build?.items) {\r\n                        for (let item of build.items) {\r\n                            if (item.item) {\r\n                                this.props.dispatch({ type: SELECTED_ITEM, value: item });\r\n                            }\r\n                        }\r\n                    }\r\n                    if (build?.neutralItem) {\r\n                        this.props.dispatch({ type: SELECTED_NEUTRAL, value: build.neutralItem });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    onShareBuild() {\r\n        let buildObject = {\r\n            name: this.state.buildName ?? \"Unknown\",\r\n            creator: this.state.buildCreator ?? \"Unknown\",\r\n            build: {\r\n                selectedHeroName: this.props.selectedHeroName,\r\n                heroAbilities: this.props.heroAbilities,\r\n                heroAbilityLevels: this.props.heroAbilityLevels,\r\n                heroTalents: this.props.heroTalents,\r\n                heroLevel: this.props.heroLevel,\r\n\r\n                items: this.props.items,\r\n                backpack: this.props.backpack,\r\n                neutralItem: this.props.neutralItem,\r\n                selectedTalents: this.props.selectedTalents,\r\n            },\r\n        };\r\n        let str = JSON.stringify(buildObject);\r\n        let encoded = Base64.encode(str);\r\n        // set clipboard\r\n        copy(`${window.location.href}?build=${encoded}`);\r\n    }\r\n\r\n    onHeroSelected(heroName) {\r\n        console.log(`${SELECTED_HERO}: ${heroName}`);\r\n        this.props.dispatch({ type: SELECTED_HERO, value: heroName });\r\n    }\r\n\r\n    onItemSelected (item) {\r\n        if (item.isBackpack) \r\n        {\r\n            console.log(`${SELECTED_BACKPACK_ITEM}: Slot: ${item.slot} Item: ${item.item}`);\r\n            this.props.dispatch({ type: SELECTED_BACKPACK_ITEM, value: item });\r\n        }\r\n        else\r\n        {\r\n            console.log(`${SELECTED_ITEM}: Slot: ${item.slot} Item: ${item.item}`);\r\n            this.props.dispatch({ type: SELECTED_ITEM, value: item });\r\n        }\r\n    }\r\n\r\n    onNeutralSelected(neutralItem) {\r\n        console.log(`${SELECTED_NEUTRAL}: ${neutralItem.item}`);\r\n        this.props.dispatch({ type: SELECTED_NEUTRAL, value: neutralItem });\r\n    }\r\n\r\n    onTalentSelected (talent) {\r\n        console.log(`${SELECTED_TALENT}: ${talent}`);\r\n        this.props.dispatch({ type: SELECTED_TALENT, value: talent });\r\n    }\r\n\r\n    onTalentUnselected (talent) {\r\n        console.log(`${UNSELECTED_TALENT}: ${talent}`);\r\n        this.props.dispatch({ type: UNSELECTED_TALENT, value: talent });\r\n    }\r\n\r\n    onEnemyTalentSelected (enemy, talent) {\r\n        console.log(`${ENEMY_SELECTED_TALENT}: ${enemy}, ${talent}`);\r\n        this.props.dispatch({ type: ENEMY_SELECTED_TALENT, value: talent });\r\n    }\r\n\r\n    onHeroLevelChanged(newLevel) {\r\n        //console.log(`${NEW_HERO_LEVEL}: ${newLevel}`);\r\n        this.props.dispatch({ type: NEW_HERO_LEVEL, value: newLevel });\r\n    }\r\n\r\n    onAbilityLevelChanged (abilLvlInfo) {\r\n        console.log(`${SELECTED_ABILITY_LEVEL}: Ability: ${abilLvlInfo.ability} Level: ${abilLvlInfo.level}`);\r\n        this.props.dispatch({ type: SELECTED_ABILITY_LEVEL, value: abilLvlInfo });\r\n    }\r\n\r\n    onBuildNameChanged(e) {\r\n        this.setState({ buildName: e.target.value });\r\n    }\r\n\r\n    onBuildCreatorChanged(e) {\r\n        this.setState({ buildCreator: e.target.value });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"foresite-app-container\">\r\n                <Container className=\"app-main-content py-3\" fluid=\"md\">\r\n                    {/* Top row, Inital Hero Information */}\r\n                    <Row>\r\n                        {/* Main Hero Info */}\r\n                        <Col className=\"my-auto\" md={3}>\r\n                            <span \r\n                                className={`hero-icon-big hero-icon-big-${this.props.selectedHeroName}_png mx-3`}\r\n                                height={50}\r\n                                alt=\"hero banner\" />\r\n                            <div className=\"d-flex mt-3\">\r\n                                <h5 className=\"my-auto px-3\">\r\n                                    { getLocalizedString(this.props.dotaStrings, this.props.selectedHeroName) }\r\n                                </h5>\r\n                                <ChangeHeroBtn \r\n                                    onSelectHero={this.onHeroSelected}\r\n                                    dotaStrings={this.props.dotaStrings} />\r\n                            </div>\r\n                        </Col>\r\n                        {/* Small Stats */}\r\n                        <Col md={3}>\r\n                            <Attributes \r\n                                hero={this.props.selectedHero} \r\n                                heroLevel={this.props.heroLevel}\r\n                                talents={this.props.selectedTalents}\r\n                                items={this.props.items}\r\n                                neutral={this.props.neutralItem} \r\n                                abilities={this.props.heroAbilities} \r\n                                abilityStrings={this.props.abilityStrings}\r\n                                dotaStrings={this.props.dotaStrings}/>\r\n                        </Col>\r\n                        {/* Final Attack/Defence Stats */}\r\n                        <Col md={5}>\r\n                            <Statistics \r\n                                hero={this.props.selectedHero} \r\n                                heroLevel={this.props.heroLevel}\r\n                                talents={this.props.selectedTalents}\r\n                                items={this.props.items}\r\n                                neutral={this.props.neutralItem} \r\n                                abilities={this.props.heroAbilities} \r\n                                abilityStrings={this.props.abilityStrings}\r\n                                dotaStrings={this.props.dotaStrings}  />\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    {/* Health/Mana and Hero Lvl  */}\r\n                    <Row className=\"my-2 py-2\">\r\n                        <Col md={8}>\r\n                            <HealthManaBar \r\n                                hero={this.props.selectedHero} \r\n                                heroLevel={this.props.heroLevel}\r\n                                talents={this.props.selectedTalents}\r\n                                items={this.props.items}\r\n                                neutral={this.props.neutralItem} \r\n                                abilities={this.props.heroAbilities} />\r\n                        </Col>\r\n                        <Col md={4}>\r\n                            <LevelSelector \r\n                                heroLevel={ this.props.heroLevel } \r\n                                onHeroLevelChanged={ this.onHeroLevelChanged }\r\n                                dotaStrings={this.props.dotaStrings} />\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    {/* Items/Talent */}\r\n                    <Row className=\"items-row my-4\">\r\n                        <Col md={7}>\r\n                            <ItemsBar\r\n                                items={this.props.items} \r\n                                backpack={this.props.backpack} \r\n                                neutral={this.props.neutralItem} \r\n                                onItemChanged={this.onItemSelected}\r\n                                onNeutralChanged={this.onNeutralSelected} \r\n                                dotaStrings={this.props.dotaStrings}\r\n                                abilityStrings={this.props.abilityStrings} />\r\n                        </Col>\r\n                        <Col md={5}>\r\n                            <TalentTree\r\n                                talents={this.props.heroTalents} \r\n                                selectedTalents={this.props.selectedTalents}\r\n                                onTalentSelected={this.onTalentSelected} \r\n                                onTalentUnselected={this.onTalentUnselected} \r\n                                dotaStrings={this.props.dotaStrings}\r\n                                abilityStrings={this.props.abilityStrings} />\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    {/* Abilities */}\r\n                    <Abilities \r\n                        onAbilityLevelChanged={this.onAbilityLevelChanged}\r\n                        heroName={this.props.selectedHeroName}\r\n                        abilities={this.props.heroAbilities}\r\n                        abilityLevels={this.props.heroAbilityLevels}\r\n                        items={this.props.items}\r\n                        neutral={this.props.neutralItem} \r\n                        selectedTalents={this.props.selectedTalents} \r\n                        abilityStrings={this.props.abilityStrings}\r\n                        dotaStrings={this.props.dotaStrings} \r\n                        displayDamage={true} />\r\n\r\n                    <div className=\"pb-4\">\r\n                        <Button \r\n                            className=\"d-flex py-2\"\r\n                            onClick={() => this.setState({ openBuildShare: !this.state.openBuildShare })}>\r\n                            <h6 className=\"mx-1 mr-2 mb-0\">Share</h6>\r\n                            <FontAwesomeIcon className=\"my-auto\" icon={this.state.openBuildShare ? faChevronUp : faChevronDown} />\r\n                        </Button>\r\n                        {\r\n                            this.state.openBuildShare &&\r\n                                <Row>\r\n                                    <Col md={4}>\r\n                                        <h4>Build Name</h4>\r\n                                        {\r\n                                            this.state.buildName && this.state.loadedFromParams \r\n                                            ?\r\n                                            <Form.Control \r\n                                                className=\"foresight-input-control mr-2 ml-0\"\r\n                                                type=\"text\" \r\n                                                placeholder=\"Build Name\" \r\n                                                value={this.state.buildName} \r\n                                                plaintext\r\n                                                readonly />\r\n                                            :\r\n                                            <Form.Control \r\n                                                className=\"foresight-input-control mr-2 ml-0\"\r\n                                                type=\"text\" \r\n                                                placeholder=\"Build Name\" \r\n                                                onChange={this.onBuildNameChanged} />\r\n                                        }\r\n                                    </Col>\r\n                                    <Col md={4}>\r\n                                        <h4>Creator</h4>\r\n                                        {\r\n                                            this.state.buildCreator && this.state.loadedFromParams\r\n                                            ?\r\n                                            <Form.Control \r\n                                                className=\"foresight-input-control mr-2 ml-0\"\r\n                                                type=\"text\" \r\n                                                placeholder=\"Creator\" \r\n                                                value={this.state.buildCreator} \r\n                                                plaintext\r\n                                                readonly />\r\n                                            :\r\n                                            <Form.Control \r\n                                                className=\"foresight-input-control mr-2 ml-0\"\r\n                                                type=\"text\" \r\n                                                placeholder=\"Creator\" \r\n                                                onChange={this.onBuildCreatorChanged} />\r\n                                        }\r\n                                    </Col>\r\n                                    <Col md={4}>\r\n                                        <div className=\"d-flex my-auto h-100\">\r\n                                            <Button className=\"mr-1 my-auto\" onClick={this.onShareBuild}>\r\n                                                <FontAwesomeIcon icon={faShare} />\r\n                                            </Button>\r\n                                            <div className=\"my-auto\">Share this build!</div>\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                        }\r\n                    </div>\r\n\r\n                    {/* Padding Separator */}\r\n                    {/* <div className=\"py-5\" /> */}\r\n                    \r\n                    {/* Enemy Hero */}\r\n                    {/* <EnemyHero \r\n                        hero={this.props.selectedEnemyHero}\r\n                        heroName={this.props.selectedEnemyHeroName} \r\n                        heroAbilities={this.props.enemyHeroAbilities} \r\n                        heroItems={this.props.enemyHeroItems}\r\n                        heroTalents={this.props.enemyHeroTalents} \r\n                        selectedTalents={this.props.selectedEnemyTalents}\r\n                        neutral={this.props.enemyNeutralItem}\r\n                        abilityStrings={this.props.abilityStrings} \r\n                        dotaStrings={this.props.dotaStrings} /> */}\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    selectedHero: state.hero.selectedHero,\r\n    selectedHeroName: state.hero.selectedHeroName,\r\n    \r\n    heroAbilities: state.hero.heroAbilities,\r\n    heroAbilityLevels: state.hero.heroAbilityLevels,\r\n\r\n    heroTalents: state.hero.heroTalents,\r\n    heroLevel: state.hero.heroLevel,\r\n\r\n    items: state.hero.items,\r\n    backpack: state.hero.backpack,\r\n    neutralItem: state.hero.neutralItem,\r\n    selectedTalents: state.hero.selectedTalents,\r\n\r\n    abilityStrings: state.language.stringsAbilities,\r\n    dotaStrings: state.language.stringsDota,\r\n\r\n    selectedEnemyHero: state.enemy.selectedEnemyHero,\r\n    selectedEnemyHeroName: state.enemy.selectedEnemyHeroName,\r\n    enemyHeroTalents: state.enemy.enemyHeroTalents,\r\n    enemyHeroAbilities: state.enemy.enemyHeroAbilities,\r\n    selectedEnemyTalents: state.enemy.selectedEnemyTalents,\r\n    enemyHeroItems: state.enemy.enemyHeroItems,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Calculator);","import React, { Component } from 'react';\r\nimport {\r\n    Row,\r\n    Col,\r\n} from 'react-bootstrap';\r\n\r\nimport TalentTree from \"../TalentTree\";\r\nimport ItemsBar from '../ItemsBar/ItemsBar';\r\nimport Abilities from '../Abilities';\r\nimport HealthManaBar from \"../HealthManaBar\";\r\n\r\nclass EnemyHero extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            enemyHero: this.props.hero,\r\n            enemyHeroName: this.props.heroName,\r\n            heroTalents: this.props.heroTalents,\r\n            heroAbilities: this.props.heroAbilities,\r\n            selectedTalents: this.props.selectedTalents,\r\n            heroItems: this.props.heroItems,\r\n            heroNeutral: this.props.neutral,\r\n\r\n            abilityStrings: this.props.abilityStrings,\r\n            dotaStrings: this.props.dotaStrings,\r\n\r\n            heroLevel: 0,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.hero !== this.props.hero) {\r\n            this.setState({ enemyHero: this.props.hero });\r\n        }\r\n        if (prevProps.heroName !== this.props.heroName) {\r\n            this.setState({ enemyHeroName: this.props.heroName });\r\n        }\r\n        if (prevProps.heroTalents !== this.props.heroTalents) {\r\n            this.setState({ heroTalents: this.props.heroTalents });\r\n        }\r\n        if (prevProps.heroAbilities !== this.props.heroAbilities) {\r\n            this.setState({ heroAbilities: this.props.heroAbilities });\r\n        }\r\n        if (prevProps.selectedTalents !== this.props.selectedTalents) {\r\n            this.setState({ selectedTalents: this.props.selectedTalents });\r\n        }\r\n        if (prevProps.heroItems !== this.props.heroItems) {\r\n            this.setState({ heroItems: this.props.heroItems });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Row>\r\n                    <Col md={4}>\r\n                        {this.state.enemyHeroName}\r\n                    </Col>\r\n                    <Col md={8}>\r\n                        <HealthManaBar \r\n                                baseStrength ={ this.state.enemyHero?.AttributeBaseStrength }\r\n                                strengthGain={ this.state.enemyHero?.AttributeStrengthGain } \r\n                                baseIntelligence={this.state.enemyHero?.AttributeBaseIntelligence }\r\n                                intelligenceGain={ this.state.enemyHero?.AttributeIntelligenceGain }\r\n                                heroLevel={ this.state.heroLevel } \r\n                                primaryAttribute={ this.state.enemyHero?.AttributePrimary }\r\n                                bonusHealthRegen={ this.state.enemyHero?.StatusHealthRegen }\r\n                                bonusManaRegen={ this.state.enemyHero?.StatusManaRegen } />\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"\">\r\n                    {/* Talents */}\r\n                    <Col md={5}>\r\n                        <TalentTree\r\n                            talents={this.state.heroTalents} \r\n                            selectedTalents={this.state.selectedTalents}\r\n                            onTalentSelected={this.onTalentSelected} \r\n                            onTalentUnselected={this.onTalentUnselected} \r\n                            abilityStrings={this.state.abilityStrings} />\r\n                    </Col>\r\n                    {/* Abilities */}\r\n                    \r\n                    {/* Items */}\r\n                    <Col md={5}>\r\n                        <ItemsBar\r\n                            items={this.state.heroItems}  \r\n                            neutral={this.props.neutralItem}\r\n                            onItemChanged={this.onItemSelected}\r\n                            onNeutralChanged={this.onNeutralSelected} />\r\n                    </Col>\r\n                </Row>\r\n                <Abilities \r\n                        abilities={this.state.heroAbilities}\r\n                        items={this.state.heroItems}\r\n                        neutral={this.props.neutralItem} \r\n                        selectedTalents={this.props.selectedTalents} \r\n                        abilityStrings={this.props.abilityStrings}\r\n                        dotaStrings={this.state.dotaStrings} \r\n                        displayDamage={false} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EnemyHero;","import Calculator from \"./Calculator\";\r\n\r\nexport default Calculator;","import Home from \"./Home\";\r\n\r\nexport default Home;","import { faTwitter } from '@fortawesome/free-brands-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { Component } from 'react';\r\nimport {\r\n    Container,\r\n    Button,\r\n    Col, \r\n    Row,\r\n} from \"react-bootstrap\";\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport \"./Home.css\";\r\n\r\nclass Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            redirect: \"\",\r\n        };\r\n\r\n        this.onGoToApp = this.onGoToApp.bind(this);\r\n    }\r\n\r\n    onGoToApp() {\r\n        this.setState({ \r\n            redirect: \"/app\"\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                className=\"bg-master\">\r\n                {/* Primary Title Container */}\r\n                <div className=\"primary-home-container py-5\">\r\n                    <div className=\"home-bg-image\" />\r\n                    <Container \r\n                        className=\"faded-background\"\r\n                        style={{\r\n                            height: \"auto\",\r\n                            paddingTop: \"7rem\",\r\n                            paddingBottom: \"7rem\",\r\n                        }}>\r\n                        <div className=\"text-center\">\r\n                            {/* App title */}\r\n                            <h1>\r\n                                foresight\r\n                            </h1>\r\n                            {/* Sub text & action */}\r\n                            <div>\r\n                                <h6 className=\"py-2\">\r\n                                    app for calculating damage output for heroes in DotA 2 \r\n                                </h6>\r\n                                <Button\r\n                                    className=\"mx-auto mt-2\"\r\n                                    variant=\"primary\"\r\n                                    onClick={this.onGoToApp}>\r\n                                    <h5 className=\"m-0 px-5 py-2\">Get Started!</h5>\r\n                                </Button>\r\n                            </div>\r\n                            <div className=\"d-flex justify-content-center mt-3\">\r\n                                <a \r\n                                    className=\"px-2 mr-1\"\r\n                                    href=\"https://joshlmao.com\" \r\n                                    style={{ color: \"white\" }}>\r\n                                    <h6 className=\"my-auto\">JoshLmao</h6>\r\n                                </a>\r\n                                <a href=\"https://twitter.com/JoshLmao\">\r\n                                    <FontAwesomeIcon icon={faTwitter} />\r\n                                </a>\r\n                            </div>\r\n                        </div>\r\n                    </Container>\r\n                    <div className=\"py-3\" />\r\n                    <Container className=\"\">\r\n                        <Row>\r\n                            <Col sm \r\n                                className=\"p-3 mr-3 faded-background\">\r\n                                <h3>Experiment</h3>\r\n                                <p>\r\n                                    Gaze into the future and see how much an item effects your overall build and view the raw numbers behind the game\r\n                                </p>\r\n                            </Col>\r\n                            <Col sm\r\n                                className=\"p-3 mx-3 faded-background\">\r\n                                <h3>Share</h3>\r\n                                <p>\r\n                                    Share your item and ability builds to get an in depth look at the statistics and numbers, all in one handy and sharable link.\r\n                                </p>\r\n                            </Col>\r\n                            <Col sm\r\n                                className=\"p-3 ml-3 faded-background\">\r\n                                <h3>Open Source</h3>\r\n                                <p>\r\n                                    The site is completly open source and available to view on Github. Created by JoshLmao <span>😊</span>\r\n                                </p>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </div>\r\n                {\r\n                    this.state.redirect && <Redirect to={this.state.redirect} />\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import App from \"./App\";\r\n\r\nexport default App;","import React, { Component } from 'react';\nimport { \n    HashRouter,\n    Route,\n    Switch\n} from 'react-router-dom';\n\nimport Navigation from \"../Navigation\";\nimport FourOhFour from \"../FourOhFour\";\nimport Calculator from \"../Calculator\";\nimport Home from \"../Home\";\n\nimport \"../../css/foresight-bs-styling.css\";\nimport \"../../css/foresight-generic.css\";\n\nclass App extends Component {\n    render() {\n        return (\n            <HashRouter>\n                <Navigation />\n\n                <Switch>\n                    <Route exact path=\"/\" component={Home} />\n\n                    <Route exact path=\"/app\" component={Calculator} />\n\n                    <Route component={FourOhFour} />\n                </Switch>\n            </HashRouter>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./store\";\n\nimport App from './components/App/';\n\n// Import Bootstrap component styles\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst app = (\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>\n);\n\nReactDOM.render(app, document.getElementById('root') );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}