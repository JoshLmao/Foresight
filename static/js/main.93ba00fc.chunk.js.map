{"version":3,"sources":["serviceWorker.js","utils.js","enums/attributes.js","utility/dataHelperHero.js","reducers/initialState.js","reducers/hero.js","constants/actionTypes.js","enums/languages.js","reducers/language.js","store/index.js","reducers/enemy.js","components/LanguageSelect/LanguageSelect.jsx","components/LanguageSelect/index.js","components/Navigation/Navigation.jsx","components/Navigation/index.js","components/FourOhFour/index.js","components/FourOhFour/FourOhFour.jsx","utility/dataHelperItems.js","utility/dataHelperAbilities.js","utility/dataHelperTalents.js","utility/calculate.js","utility/data-helpers/language.js","components/Abilities/DamageOutput.jsx","components/Abilities/Cooldown.jsx","components/Abilities/ManaCost.jsx","components/Abilities/Abilities.jsx","components/Abilities/index.js","components/ItemsBar/ItemSelector.jsx","components/ItemsBar/Item.jsx","components/Neutral/NeutralItemSelector.jsx","components/Neutral/index.js","components/Neutral/Neutral.jsx","components/ItemsBar/ItemsBar.jsx","components/ItemsBar/index.js","components/Attributes/Attributes.jsx","components/Attributes/index.js","components/Statistics/Statistics.jsx","components/Statistics/index.js","components/ChangeHeroBtn/HeroSelector.jsx","components/ChangeHeroBtn/index.js","components/ChangeHeroBtn/ChangeHeroBtn.jsx","components/TalentTree/TalentRow.jsx","components/TalentTree/index.js","components/TalentTree/TalentTree.jsx","components/HealthManaBar/index.js","components/HealthManaBar/HealthManaBar.jsx","components/LevelSelector/LevelSelector.jsx","components/LevelSelector/index.js","components/Calculator/Calculator.jsx","components/EnemyHero/EnemyHero.jsx","components/Calculator/index.js","components/Home/index.js","components/Home/Home.jsx","components/App/index.js","components/App/App.jsx","index.js"],"names":["Boolean","window","location","hostname","match","itemNameToElement","itemInfo","scale","item","className","style","width","height","alt","transform","transformOrigin","backgroundColor","display","parseNameFromModel","modelString","dashSplit","split","length","EAttributes","EDamageType","EAbilityBehaviour","ESpellImmunityType","getSpecificAttributeStats","specificAttribute","heroInfo","basePrimary","primaryPerLevel","parseInt","AttributeBaseStrength","parseFloat","AttributeStrengthGain","AttributeBaseAgility","AttributeAgilityGain","AttributeBaseIntelligence","AttributeIntelligenceGain","console","error","base","perLevel","getHeroTalents","keys","Object","talents","i","includes","ability","push","mappedTalents","lvlRow","lvl","rightTalent","leftTalent","sort","a","b","getAllHeroAbilities","abilities","getDotaBaseHero","DOTAHeroes","npc_dota_hero_base","initialState","selectedHero","npc_dota_hero_zuus","selectedHeroName","Model","heroAbilities","heroTalents","selectedTalents","heroLevel","items","slot","backpack","neutralItem","lang","stringsAbilities","EngAbilStrings","stringsDota","EngDotaStrings","selectedEnemyHero","npc_dota_hero_target_dummy","selectedEnemyHeroName","enemyHeroTalents","enemyHeroAbilities","selectedEnemyTalents","enemyHeroItems","getNewItemArray","itemArray","newItem","newArray","filter","val","getNewTalentArray","talentArray","newTalent","map","value","removeTalent","unselectedTalent","talent","reducer","state","action","type","ELanguages","SCHINESE","ENGLISH","getAbilityStrings","langCode","SChineseAbilStrings","getGeneralStrings","SChineseDotaStrings","allReducers","combineReducers","language","log","hero","enemy","store","createStore","LanguageSelect","props","onLanguageChanged","bind","event","newLanguage","target","this","dispatch","Form","Control","as","onChange","defaultValue","values","key","Component","connect","pkg","require","Navigation","Navbar","Container","Brand","to","Link","Nav","fontSize","eventKey","disabled","version","dotaVersion","Toggle","aria-controls","Collapse","id","href","Button","variant","icon","faGithub","FourOhFour","getItemInfoFromName","itemName","DOTAItems","getItemSpecialAbilityValue","specialAbilityValueKey","AbilitySpecial","matchingKey","find","element","specialAbilityInfo","var_type","tryGetItemSpecialValue","specialValue","tryGetNeutralSpecialValue","neutral","specialValueKey","foundNeutralInfo","getAllNeutrals","selectableNeutrals","toLowerCase","IsObsolete","ItemIsNeutralDrop","itemKey","replace","name","shift","join","primaryAttributeToItemBonusKey","primaryAttr","getAbilityInfoFromName","abilityName","DOTAAbilities","tryGetAbilitySpecialAbilityValue","abilityLevel","abilityInfo","getAbilitySpecialAbilityValue","specialAbilityKey","dataValue","getAbilityBehaviours","behaviours","AbilityBehavior","targeting","splitBehaviours","AbilityUnitDamageType","dmgTypeVal","splitDmgTypes","SpellImmunityType","pierceValue","tryGetTalentSpecialAbilityValue","talentInfo","calculateHealth","baseStrength","strengthGain","baseHealth","StatusHealth","totalHealth","bonusHealth","bonusStr","bonusAllStats","toFixed","calculateMana","baseInt","intGain","baseMana","StatusMana","totalMana","bonusMana","bonusInt","calculateHealthRegen","totalHpRegen","StatusHealthRegen","regenAmt","bonusHealthRegen","bonusRegen","calculateManaRegen","totalManaRegen","StatusManaRegen","bonusManaRegen","bonusIntellect","manaRegen","calculateTotalSpellAmp","totalSpellAmp","ampTalent","spellAmpInfo","foundNeutral","spellAmpAmount","calculateStatusResist","totalStatusResist","statusResistAmount","calculateMagicResist","resistanceBonuses","MagicalResistance","baseResist","magicResistAmount","edited","total","calculateEvasion","totalEvasion","bonusEvasion","evasionAmount","calculateRightClickDamage","level","heroMainAttribute","AttributePrimary","getPrimaryAttribute","atkMin","AttackDamageMin","atkMax","AttackDamageMax","primaryAttributeStats","totalPrimaryAttribute","allAttrKeys","bonusPrimaryAttr","bonusPrimaryStat","allStats","min","max","Math","floor","calculateSpellDamage","spellDamage","abilityDamage","dmgVals","AbilityDamage","specAbil","specialAbilityDamageKeys","j","getAbilityOutputDamage","totalSpellAmpPercent","spellAmp","bonusSpellAmp","chargeCount","ampPerCharge","neutralInfo","special","bonus_spell_amp","spell_amp","ampTalentValue","damage","calculateMoveSpeed","baseSpeed","MovementSpeed","flatBonus","moveSpeed","moveSpeedPercentBonus","bonusMoveSpeed","bonusSpeed","calculateAttackRange","isHeroRanged","AttackCapabilities","totalAttackRange","AttackRange","baseRange","rangeBonus","bonusAttackRange","tryGetAbilityLocalizedString","abilityStrings","stringKey","matchingKeys","Tokens","TypeValueUI","DamageOutput","levelInfo","abilityBehaviours","dotaStrings","updateAbilityBehaviours","prevProps","setState","allBehaviours","abilityKey","index","tooltipKey","abilInfo","abilLvl","abilDmg","parseDamage","Cooldown","abilityCooldown","cooldown","updateCooldown","currentCooldown","AbilityCooldown","infoCooldown","allReductions","bonusCooldown","amount","source","reduction","sourceOfReductions","decimal","reductionTotal","calculateAbilityCooldown","faClock","ManaCost","updateMana","manaCost","AbilityManaCost","infoManaCost","totalManaCostReducePercent","manaCostReduceAmount","costReductionAmount","reduceAmount","calculateManaCost","getLevelInfo","abil","Abilities","abils","filterAbilities","abilLevels","abilityLevels","displayDamage","onLevelChanged","e","tagName","parentElement","levelIndex","dataset","lvlindex","targetLevel","btnindex","Row","abilVal","IsGrantedByScepter","Col","ID","maxWidth","maxHeight","src","md","abilityIndex","maxLvl","AbilityType","MaxLevel","html","onClick","data-lvlindex","data-btnindex","getAbilityLevel","getItemsByQuality","itemsArray","matchArray","quality","ItemQuality","filterItemName","ItemFromInfo","keyName","title","data-item","TabHeading","text","ItemSelector","selectableItems","basicItems","upgradesItems","allItems","queryItems","onSelectedItem","onSearchChanged","onSearchItemSelected","onShopItemSelected","onRemoveItemSelected","query","filteredItems","indexOf","placeholder","faMinus","ListGroup","itemNameDisplay","Item","Tabs","defaultActiveKey","transition","Tab","isBackpack","onItemChanged","getItemIcon","open","trigger","isOpen","position","contentStyle","overflowY","NeutralItemSelector","allNeutrals","iconScale","onNewNeutralSelected","onNeutralSelected","color","data-neutral","Neutral","ItemsBar","onNeutralChanged","parse","Attribute","isPrimaryAttribute","per","Attributes","StatArray","stats","formatAttackMinMax","standardAtkDmg","formatAttackTime","attackInfo","totalAttackSpeed","BaseAttackSpeed","AttackRate","AttackSpeed","agiStats","totalAgi","bonusAttackSpeed","bonusAgility","attacksPerSec","atkSpeed","attackTime","attacksPerSecond","attackSpeed","calculateAttackTime","Statistics","updateStatistics","totalArmor","armor","baseArmor","ArmorPhysical","baseAgility","agiPerLevel","agiPer","bonusArmor","bonusAgi","calculateMainArmor","physResist","abs","attackRange","physicalResist","magicResist","statusResist","evasion","neutrak","healthRegen","HeroSelector","heroes","filteredHeroes","onSelectedHero","searchTerm","filtered","faSearch","data-heroname","displayName","data-hero","ChangeHeroBtn","selectableHeroes","workshop_guide_name","alias","NameAliases","onSelectHero","onToggleHeroSelect","faPencilAlt","isTalentSelected","TalentRow","onTalentSelected","onTalentUnselected","onSelectTalent","getTalentDisplayName","selectedTalent","getTalentInfoFromName","data-talent","TalentTree","findSelectedTalent","matchTalent","HealthManaBar","maxHealth","maxMana","updateBar","ModifyBtn","LevelSelector","onHeroLevelChanged","onIncrementHeroLevel","onDecrementHeroLevel","onLvlInputChanged","newLevel","Calculator","onHeroSelected","onItemSelected","heroName","targetHero","fluid","Home","redirect","onGoToCalc","App","exact","path","component","app","StrictMode","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.93ba00fc.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\n\r\n/// Returns a HTML element of a DotA item from it's info \r\nexport function itemNameToElement (itemInfo, scale) {\r\n    // Width and height of each item in item_stylesheet\r\n    var width, height;\r\n    width = \"88px\";\r\n    height = \"64px\";\r\n    if (itemInfo && itemInfo.item) {\r\n        // Return item icon\r\n        return (\r\n            <div \r\n                className=\"m-1\"\r\n                style={{ \r\n                    width: `calc(${width} * ${scale})`, \r\n                    height: `calc(${height} * ${scale})`}}>\r\n                <span \r\n                    className={ 'sprite sprite-' + itemInfo.item + '_png '} \r\n                    alt={itemInfo.item} \r\n                    style={{ \r\n                        transform: `scale(${scale}, ${scale})`, \r\n                        transformOrigin: \"top left\" \r\n                    }} />\r\n            </div>\r\n        );\r\n    } else {\r\n        // Return empty inventory slot since item is null/empty\r\n        return (\r\n            <div \r\n                style={{ \r\n                    width: `calc(${width} * ${scale})`, \r\n                    height: `calc(${height} * ${scale})` }}>\r\n                <span \r\n                    style={{ \r\n                        backgroundColor: \"#212121\", \r\n                        width: width, \r\n                        height: height, \r\n                        transform: `scale(${scale}, ${scale})`, \r\n                        display: \"block\", \r\n                        transformOrigin: \"top left\" \r\n                    }} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n/// Parses a display name from a hero info Model string\r\nexport function parseNameFromModel (modelString) {\r\n    var dashSplit = modelString.split('.')[0].split('/');\r\n    return dashSplit[dashSplit.length - 1];\r\n};","// Enum of all attributes contained within npc_heroes\r\nexport const EAttributes = {\r\n    ATTR_STRENGTH: \"DOTA_ATTRIBUTE_STRENGTH\",\r\n    ATTR_AGILITY: \"DOTA_ATTRIBUTE_AGILITY\",\r\n    ATTR_INTELLIGENCE: \"DOTA_ATTRIBUTE_INTELLECT\"\r\n};\r\n\r\nexport const EDamageType = {\r\n    MAGICAL: \"DAMAGE_TYPE_MAGICAL\",\r\n    PURE: \"DAMAGE_TYPE_PURE\",\r\n    PHYSICAL: \"DAMAGE_TYPE_PHYSICAL\",\r\n};\r\n\r\n/// All Ability Behaviour types\r\nexport const EAbilityBehaviour = {\r\n    UNIT_TARGET: \"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET\",\r\n    POINT: \"DOTA_ABILITY_BEHAVIOR_POINT\",\r\n    AOE: \"DOTA_ABILITY_BEHAVIOR_AOE\",\r\n    HIDDEN: \"DOTA_ABILITY_BEHAVIOR_HIDDEN\",\r\n    PASSIVE: \"DOTA_ABILITY_BEHAVIOR_PASSIVE\",\r\n    NO_TARGET: \"DOTA_ABILITY_BEHAVIOR_NO_TARGET\",\r\n    IMMEDIATE: \"DOTA_ABILITY_BEHAVIOR_IMMEDIATE\",\r\n    IGNORE_CHANNEL: \"DOTA_ABILITY_BEHAVIOR_IGNORE_CHANNEL\",\r\n    SHOW_IN_GUIDES: \"DOTA_ABILITY_BEHAVIOR_SHOW_IN_GUIDES\",\r\n    AURA: \"DOTA_ABILITY_BEHAVIOR_AURA\",\r\n}\r\n\r\n/// Enum of all spell immune types, if the ability pierces spell immunity\r\nexport const ESpellImmunityType = {\r\n    YES: \"SPELL_IMMUNITY_ENEMIES_YES\",\r\n    NO: \"SPELL_IMMUNITY_ENEMIES_NO\",\r\n}","// * Helper and utility functions to provide for retrieving data from \"npc_heroes.json\"\r\n// * \r\n\r\nimport { EAttributes } from \"../enums/attributes\";\r\n\r\nimport { DOTAHeroes } from \"../data/dota2/json/npc_heroes.json\";\r\n\r\n/// Get the base and per level stats of a heroes primary attribute\r\nexport function getPrimaryAttributeStats(heroInfo) {\r\n    if (heroInfo && heroInfo.AttributePrimary) {\r\n        return getSpecificAttributeStats(heroInfo.AttributePrimary, heroInfo);\r\n    } else{\r\n        return null;\r\n    }\r\n}\r\n\r\n/// Get the base and per level stats of a specific attribute\r\nexport function getSpecificAttributeStats(specificAttribute, heroInfo) {\r\n    var basePrimary = 0;\r\n    var primaryPerLevel = 0;\r\n\r\n    switch(specificAttribute) {\r\n        case EAttributes.ATTR_STRENGTH:\r\n            {\r\n                basePrimary = parseInt(heroInfo.AttributeBaseStrength);\r\n                primaryPerLevel = parseFloat(heroInfo.AttributeStrengthGain);\r\n                break;\r\n            }\r\n        case EAttributes.ATTR_AGILITY:\r\n            {\r\n                basePrimary = parseInt(heroInfo.AttributeBaseAgility);\r\n                primaryPerLevel = parseFloat(heroInfo.AttributeAgilityGain);\r\n                break;\r\n            }\r\n        case EAttributes.ATTR_INTELLIGENCE:\r\n            {\r\n                basePrimary = parseInt(heroInfo.AttributeBaseIntelligence);\r\n                primaryPerLevel = parseFloat(heroInfo.AttributeIntelligenceGain);\r\n                break;\r\n            }\r\n        default:\r\n            console.error(`Unable to get attribute stats because of unknown specific attribute '${specificAttribute}'`);\r\n    }\r\n    \r\n    return {\r\n        base: basePrimary,\r\n        perLevel: primaryPerLevel,\r\n    };\r\n}\r\n\r\n/// Gets all hero talents from a hero info\r\nexport function getHeroTalents (heroInfo) {\r\n    // Get simple array of all talents from npc_heroes.json\r\n    // All abilities are stored in npc_heroes.json as \"Ability?\", where ? is a number. \r\n    // Not always in numberical order like 1, 2, 3\r\n\r\n    var keys = Object.keys(heroInfo);\r\n    var talents = [];\r\n    for(var i = 0; i < keys.length; i++) {\r\n        if (keys[i].includes(\"Ability\") && !keys[i].includes(\"AbilityDraft\")) {\r\n            var ability = heroInfo[keys[i]];\r\n            if (ability && typeof ability === \"string\") {\r\n                if (ability !== \"generic_hidden\" && ability.includes(\"special_bonus\")) {\r\n                    talents.push(ability);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // sort into nice list\r\n    var mappedTalents = [];\r\n    var lvlRow = 0;\r\n    for (i = 0 ; i < talents.length; i += 2) {\r\n        mappedTalents.push({\r\n            lvl: 10 + (5 * lvlRow),\r\n            rightTalent: talents[i],\r\n            leftTalent: talents[i + 1]\r\n        });\r\n\r\n        lvlRow++;\r\n    }\r\n\r\n    // Sort by lvl 25 talents first\r\n    mappedTalents.sort((a, b) => a.lvl < b.lvl ? 1 : -1);\r\n\r\n    return mappedTalents;\r\n}\r\n\r\n/// Gets all hero abilities from a hero info\r\nexport function getAllHeroAbilities (heroInfo) {\r\n    var keys = Object.keys(heroInfo);\r\n    var abilities = [];\r\n    for(var i = 0; i < keys.length; i++) {\r\n        if (keys[i].includes(\"Ability\") && !keys[i].includes(\"AbilityDraft\")) {\r\n            var ability = heroInfo[keys[i]];\r\n            if (ability && typeof ability === \"string\") {\r\n                if (ability !== \"generic_hidden\" && !ability.includes(\"special_bonus\")) {\r\n                    abilities.push(ability);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return abilities;\r\n}\r\n\r\n/// Returns the base hero information that all heroes are based on\r\nexport function getDotaBaseHero () {\r\n    return DOTAHeroes?.npc_dota_hero_base;\r\n}\r\n\r\n/// Gets the hero's primary attribute as the EAttribute enum\r\nexport function getPrimaryAttribute (hero) {\r\n    switch(hero.AttributePrimary) {\r\n        case EAttributes.ATTR_STRENGTH:\r\n            return EAttributes.ATTR_STRENGTH;\r\n        case EAttributes.ATTR_AGILITY:\r\n            return EAttributes.ATTR_AGILITY;\r\n        case EAttributes.ATTR_INTELLIGENCE:\r\n            return EAttributes.ATTR_INTELLIGENCE;\r\n        default:\r\n            return null;\r\n    }\r\n}","import { DOTAHeroes } from \"../data/dota2/json/npc_heroes.json\";\r\nimport { lang as EngAbilStrings } from \"../data/dota2/languages/abilities_english.json\";\r\nimport { lang as EngDotaStrings } from \"../data/dota2/languages/dota_english.json\";\r\n\r\nimport {\r\n    parseNameFromModel,\r\n} from \"../utils\";\r\nimport {\r\n    getAllHeroAbilities,\r\n    getHeroTalents,\r\n} from \"../utility/dataHelperHero\";\r\n\r\nconst initialState = {\r\n    /// Current selected hero by the user\r\n    selectedHero: DOTAHeroes.npc_dota_hero_zuus,\r\n    /// display name of the selectedHero\r\n    selectedHeroName: parseNameFromModel(DOTAHeroes.npc_dota_hero_zuus.Model),\r\n    /// Array of abilities of the selectedHero\r\n    heroAbilities: getAllHeroAbilities(DOTAHeroes.npc_dota_hero_zuus),\r\n    /// Array of talents of the selectedHero\r\n    heroTalents: getHeroTalents(DOTAHeroes.npc_dota_hero_zuus),\r\n    /// Array of talents selected by the user\r\n    selectedTalents: [ ],\r\n    /// Current level of the hero set by the user\r\n    heroLevel: 1,\r\n\r\n    /// Current items that have been selected\r\n    items: [\r\n        { slot: 0, item: \"abyssal_blade\" },\r\n        { slot: 1, item: \"\" },\r\n        { slot: 2, item: \"\" },\r\n        { slot: 3, item: \"\" },\r\n        { slot: 4, item: \"\" },\r\n        { slot: 5, item: \"\" },\r\n    ],\r\n    /// Current backpack selected by user\r\n    backpack: [\r\n        { slot: 0, item: \"\" },\r\n        { slot: 1, item: \"\" },\r\n        { slot: 2, item: \"\" },\r\n    ],\r\n    /// Current neutral item selected by user\r\n    neutralItem: { item: \"orb_of_destruction\" },\r\n\r\n    // Current code of the selected UI language\r\n    lang: \"en\",\r\n    stringsAbilities: EngAbilStrings,\r\n    stringsDota: EngDotaStrings,\r\n\r\n    /// Selected enemy hero \r\n    selectedEnemyHero: DOTAHeroes.npc_dota_hero_target_dummy,\r\n    selectedEnemyHeroName: parseNameFromModel(DOTAHeroes.npc_dota_hero_target_dummy.Model[1]),\r\n    enemyHeroTalents: getHeroTalents(DOTAHeroes.npc_dota_hero_target_dummy),\r\n    enemyHeroAbilities: getAllHeroAbilities(DOTAHeroes.npc_dota_hero_target_dummy),\r\n    selectedEnemyTalents: [ ],\r\n    enemyHeroItems: [\r\n        { slot: 0, item: \"ultimate_scepter\" },\r\n        { slot: 1, item: \"\" },\r\n        { slot: 2, item: \"\" },\r\n        { slot: 3, item: \"\" },\r\n        { slot: 4, item: \"\" },\r\n        { slot: 5, item: \"\" },\r\n    ],\r\n};\r\n\r\nexport default initialState;","import initialState from \"./initialState\";\r\n\r\nimport {\r\n    SELECTED_HERO,\r\n    SELECTED_ITEM,\r\n    SELECTED_BACKPACK_ITEM,\r\n    SELECTED_NEUTRAL,\r\n    SELECTED_TALENT,\r\n    UNSELECTED_TALENT,\r\n    NEW_HERO_LEVEL,\r\n} from \"../constants/actionTypes\";\r\n\r\nimport {\r\n    parseNameFromModel,\r\n} from \"../utils\";\r\n\r\nimport {\r\n    getAllHeroAbilities,\r\n    getHeroTalents,\r\n} from \"../utility/dataHelperHero\";\r\n\r\nfunction getNewItemArray(itemArray, newItem) {\r\n    /// Remove old slot insert new and sort by Slot\r\n    var newArray = itemArray.filter((val) => {\r\n        if (val.slot !== newItem.slot) {\r\n            return val;\r\n        }\r\n    })\r\n    newArray.push({ slot: newItem.slot, item: newItem.item });\r\n    newArray.sort((a, b) => (a.slot > b.slot) ? 1 : -1);\r\n    return newArray;\r\n}\r\n\r\nfunction getNewTalentArray(talentArray, newTalent) {\r\n    var newArray = talentArray.map((value => { return value }));\r\n    newArray.push(newTalent);\r\n    return newArray;\r\n}\r\n\r\nfunction removeTalent (talentArray, unselectedTalent) {\r\n    /// Filter to get all but the unselectedTalent\r\n    var array = talentArray.filter((talent) => {\r\n        if (talent && talent !== unselectedTalent) {\r\n            return talent;\r\n        }\r\n    });\r\n    return array;\r\n}\r\n\r\nfunction reducer(state = initialState, action) {\r\n    switch(action.type)\r\n    {\r\n        case SELECTED_HERO:\r\n            return {\r\n                ...state,\r\n                selectedHero: action.value,\r\n                selectedHeroName: parseNameFromModel(action.value.Model),\r\n                heroAbilities: getAllHeroAbilities(action.value),\r\n                heroTalents: getHeroTalents(action.value),\r\n                \r\n                // reset selected talents when new hero selected\r\n                selectedTalents: [ ],\r\n            };\r\n        case SELECTED_ITEM:\r\n            return {\r\n                ...state,\r\n                items: getNewItemArray(state.items, action.value),\r\n            };\r\n        case SELECTED_BACKPACK_ITEM:\r\n            return {\r\n                ...state,\r\n                backpack: getNewItemArray(state.backpack, action.value),\r\n            }\r\n        case SELECTED_NEUTRAL:\r\n            return {\r\n                ...state,\r\n                neutralItem: action.value,\r\n            };\r\n        case SELECTED_TALENT:\r\n            return {\r\n                ...state,\r\n               selectedTalents: getNewTalentArray(state.selectedTalents, action.value),\r\n            }\r\n            case UNSELECTED_TALENT:\r\n                return {\r\n                    ...state,\r\n                    selectedTalents: removeTalent(state.selectedTalents, action.value),\r\n                }\r\n        case NEW_HERO_LEVEL:\r\n            return {\r\n                ...state,\r\n                heroLevel: action.value,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","export const SELECTED_HERO = \"SELECT_HERO\";\r\nexport const SELECTED_NEUTRAL = \"SELECTED_NEUTRAL\";\r\nexport const SELECTED_ITEM = \"SELECTED_ITEM\";\r\nexport const SELECTED_BACKPACK_ITEM = \"SELECTED_BACKPACK_ITEM\";\r\nexport const SELECTED_TALENT = \"SELECTED_TALENT\";\r\nexport const UNSELECTED_TALENT = \"UNSELECTED_TALENT\";\r\nexport const NEW_HERO_LEVEL = \"NEW_HERO_LEVEL\";\r\n\r\nexport const LANGUAGE_CHANGED = \"LANGUAGE_CHANGED\";\r\n\r\nexport const ENEMY_SELECTED = \"ENEMY_SELECTED\";\r\nexport const ENEMY_SELECTED_TALENT = \"ENEMY_SELECTED_TALENT\";","/// Enum of all supported languages\r\nexport const ELanguages = {\r\n    SCHINESE: \"szh\",\r\n    ENGLISH: \"en\",\r\n    //RUSSIAN: \"ru\",\r\n};","import {\r\n    LANGUAGE_CHANGED\r\n} from \"../constants/actionTypes\";\r\nimport { ELanguages } from \"../enums/languages\";\r\nimport initialState from \"./initialState\";\r\n\r\nimport { lang as EngAbilStrings } from \"../data/dota2/languages/abilities_english.json\";\r\nimport { lang as EngDotaStrings } from \"../data/dota2/languages/dota_english.json\";\r\n\r\nimport { lang as SChineseAbilStrings } from \"../data/dota2/languages/abilities_schinese.json\";\r\nimport { lang as SChineseDotaStrings } from \"../data/dota2/languages/dota_schinese.json\";\r\n\r\nfunction getAbilityStrings(langCode) {\r\n    switch(langCode) {\r\n        case ELanguages.ENGLISH:\r\n            return EngAbilStrings;\r\n        case ELanguages.SCHINESE:\r\n            return SChineseAbilStrings;\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\nfunction getGeneralStrings(langCode) {\r\n    switch(langCode) {\r\n        case ELanguages.ENGLISH:\r\n            return EngDotaStrings;\r\n        case ELanguages.SCHINESE:\r\n            return SChineseDotaStrings;\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\nexport default (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case LANGUAGE_CHANGED:\r\n            console.log(`${LANGUAGE_CHANGED}: ${action.value}`);\r\n            return {\r\n                ...state,\r\n                lang: action.value,\r\n\r\n                stringsAbilities: getAbilityStrings(action.value),\r\n                stringsDota: getGeneralStrings(action.value),\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import { createStore, combineReducers } from \"redux\";\r\nimport hero from \"../reducers/hero\";\r\nimport language from \"../reducers/language\";\r\nimport enemy from \"../reducers/enemy\";\r\n\r\nconst allReducers = combineReducers({\r\n    language,\r\n    hero,\r\n    enemy,\r\n});\r\n\r\nconst store = createStore(allReducers);\r\n\r\nexport default store;","import initialState from \"./initialState\";\r\n\r\nimport {\r\n    ENEMY_SELECTED,\r\n    ENEMY_SELECTED_TALENT\r\n} from \"../constants/actionTypes\";\r\n\r\nexport default (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case ENEMY_SELECTED:\r\n            return {\r\n                ...state,\r\n\r\n                enemy: action.value,\r\n            };\r\n        case ENEMY_SELECTED_TALENT:\r\n            return {\r\n                ...state,\r\n\r\n                selectedEnemyTalents: [ ],\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Form } from 'react-bootstrap';\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { LANGUAGE_CHANGED } from \"../../constants/actionTypes\";\r\nimport { ELanguages } from \"../../enums/languages\";\r\n\r\nfunction getSupportedLanguages() {\r\n    var langs = Object.values(ELanguages);\r\n    return langs.map((value) => {\r\n        return (\r\n            <option value={value} key={value}>{value}</option>\r\n        )\r\n    });\r\n}\r\n\r\nclass LanguageSelect extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.onLanguageChanged = this.onLanguageChanged.bind(this);\r\n    }\r\n\r\n    onLanguageChanged(event) {\r\n        let newLanguage = event.target.value;\r\n        this.props.dispatch({ type: LANGUAGE_CHANGED, value: newLanguage });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Form.Control as=\"select\" onChange={this.onLanguageChanged} defaultValue={this.props.lang}>\r\n                    { getSupportedLanguages() }\r\n                </Form.Control>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    lang: state.language.lang,\r\n});\r\n\r\nexport default connect(mapStateToProps)(LanguageSelect);","import LanguageSelect from \"./LanguageSelect\";\r\n\r\nexport default LanguageSelect;","import React, { Component } from 'react';\r\nimport { \r\n    Nav,\r\n    Navbar,\r\n    Container,\r\n    Button,\r\n}from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\r\n\r\nimport LanguageSelect from '../LanguageSelect';\r\n\r\nlet pkg = require('../../../package.json');\r\n\r\nclass Navigation extends Component {\r\n    render() {\r\n        return (\r\n            <Navbar>\r\n                <Container>\r\n                    <Navbar.Brand to=\"/\" as={Link}>foresight</Navbar.Brand>\r\n                    <Nav.Link \r\n                        className=\"px-1 align-bottom mr-2\"\r\n                        style={{ fontSize: \"0.85rem\" }}\r\n                        eventKey=\"disabled\" \r\n                        disabled>\r\n                            {\r\n                                pkg ? \"v\" + pkg.version : \"v0.0.0\"\r\n                            }\r\n                    </Nav.Link>\r\n                    <Nav.Link\r\n                        className=\"px-1 align-bottom mr-2\"\r\n                        style={{ fontSize: \"0.85rem\" }}\r\n                        eventKey=\"disabled\"\r\n                        disabled>\r\n                        {\r\n                            pkg ? pkg.dotaVersion : \"Unknown\"\r\n                        }\r\n                    </Nav.Link>\r\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                        <Nav className=\"mr-auto\">\r\n                            <Nav.Link to=\"/\" as={Link}>home</Nav.Link>\r\n                            <Nav.Link to=\"/app\" as={Link}>calculator</Nav.Link>\r\n                        </Nav>\r\n                        <div className=\"mr-2\">\r\n                            <LanguageSelect/>\r\n                        </div>\r\n                        <a href=\"https://github.com/JoshLmao/foresight\">\r\n                            <Button variant=\"outline-secondary\">\r\n                                <FontAwesomeIcon icon={faGithub} />\r\n                            </Button>\r\n                        </a>\r\n                    </Navbar.Collapse>\r\n                </Container>\r\n            </Navbar>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Navigation;","import Navigation from \"./Navigation\";\r\n\r\nexport default Navigation;","import FourOhFour from \"./FourOhFour\";\r\n\r\nexport default FourOhFour;","import React, { Component } from 'react';\r\n\r\nclass FourOhFour extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                404 page\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FourOhFour;","\r\n// * Helper and utility functions to provide for retrieving data from \"npc_items.json\"\r\n// * \r\nimport { DOTAAbilities as DOTAItems } from \"../data/dota2/json/items.json\";\r\nimport { EAttributes } from \"../enums/attributes\";\r\n\r\nexport function getItemInfoFromName (itemName) {\r\n    if (itemName)\r\n        return DOTAItems[\"item_\" + itemName];\r\n    else\r\n        return null;\r\n}\r\n\r\n/// Gets the value of an item's AbilitySpecial array\r\nexport function getItemSpecialAbilityValue (itemInfo, specialAbilityValueKey) {\r\n    if (itemInfo && itemInfo.AbilitySpecial) {\r\n        for(var i = 0; i < itemInfo.AbilitySpecial.length; i++) {\r\n            var keys = Object.keys(itemInfo.AbilitySpecial[i]);\r\n            var matchingKey = keys.find(element => {\r\n                return element === specialAbilityValueKey;\r\n            });\r\n\r\n            if (matchingKey) {\r\n                var specialAbilityInfo = itemInfo.AbilitySpecial[i];\r\n                if (specialAbilityInfo.var_type === \"FIELD_INTEGER\") {\r\n                    return parseInt(specialAbilityInfo[matchingKey]);\r\n                } \r\n                else if(specialAbilityInfo.var_type === \"FIELD_FLOAT\") {\r\n                    return parseFloat(specialAbilityInfo[matchingKey]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\n\r\n/// Try Gets a item info and sepcial value from it's item's Ability Special array\r\nexport function tryGetItemSpecialValue (item, specialAbilityValueKey) {\r\n    var itemInfo = getItemInfoFromName(item.item);\r\n    if (itemInfo) {\r\n        var specialValue = getItemSpecialAbilityValue(itemInfo, specialAbilityValueKey);\r\n        if (specialValue) {\r\n            return specialValue;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/// Try Gets a neutral item info and special value from it's items' AbilitySpecial array\r\nexport function tryGetNeutralSpecialValue (neutral, specialValueKey) {\r\n    var foundNeutralInfo = getItemInfoFromName(neutral.item);\r\n    if (foundNeutralInfo) {\r\n        var specialValue = getItemSpecialAbilityValue(foundNeutralInfo, specialValueKey);\r\n        if (specialValue) {\r\n            return specialValue;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/// Returns all neutral items\r\nexport function getAllNeutrals() {\r\n     /// Filter out unused or unnecessary keys in items.json\r\n     var selectableNeutrals = Object.keys(DOTAItems).filter((value) => {\r\n        var key = value.toLowerCase();\r\n        var ability = DOTAItems[value];\r\n        if (key !== \"version\" && !ability.IsObsolete) {\r\n            if (ability.ItemIsNeutralDrop === \"1\") {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    });\r\n    selectableNeutrals.sort();\r\n\r\n    // Map to an object\r\n    selectableNeutrals = selectableNeutrals.map((key) => {\r\n        let itemKey = key;\r\n        if (itemKey.includes(\"recipe\")) {\r\n            // remove recipe and retrieve item version\r\n            itemKey = itemKey.replace(\"_recipe\", \"\");\r\n        }\r\n\r\n        var itemInfo = DOTAItems[itemKey];\r\n        if (itemInfo.ItemIsNeutralDrop === \"1\") {\r\n            // Remove 'item_' prefix, split by _, remove \"item\" and join again\r\n            var name = itemKey.split('_');\r\n            name.shift();\r\n            name = name.join('_');\r\n\r\n            return {\r\n                item: name,\r\n                itemInfo: itemInfo,\r\n            };\r\n        }\r\n    });\r\n\r\n    return selectableNeutrals;\r\n}\r\n\r\n/// Gets the correct key inside items.json for the hero's primary attribute\r\nexport function primaryAttributeToItemBonusKey(primaryAttr) {\r\n    switch(primaryAttr) {\r\n        case EAttributes.ATTR_STRENGTH:\r\n            return [ \"bonus_strength\" ];\r\n        case EAttributes.ATTR_AGILITY:\r\n            return [ \"bonus_agility\" ];\r\n        case EAttributes.ATTR_INTELLIGENCE:\r\n            return [ \"bonus_intellect\", \"bonus_intelligence\" ];\r\n        default:\r\n            return null;\r\n    }\r\n}","// * Helper and utility functions to provide for retrieving data from \"npc_abilities.json\"\r\n// * \r\n\r\nimport { DOTAAbilities } from \"../data/dota2/json/npc_abilities.json\";\r\nimport { EAbilityBehaviour, EDamageType, ESpellImmunityType } from \"../enums/attributes\";\r\n\r\nexport function getAbilityInfoFromName(abilityName) {\r\n    if (abilityName) {\r\n        return DOTAAbilities[abilityName];\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport function tryGetAbilitySpecialAbilityValue (ability, specialValueKey, abilityLevel = 1) {\r\n    let abilityInfo = getAbilityInfoFromName(ability);\r\n    if (abilityInfo) {\r\n        let specialValue = getAbilitySpecialAbilityValue(abilityInfo, specialValueKey, abilityLevel);\r\n        if (specialValue) {\r\n            return specialValue;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nexport function getAbilitySpecialAbilityValue(abilityInfo, specialAbilityKey, abilityLevel = 1) {\r\n    if (abilityInfo && abilityInfo.AbilitySpecial) {\r\n        for(var i = 0; i < abilityInfo.AbilitySpecial.length; i++) {\r\n            var keys = Object.keys(abilityInfo.AbilitySpecial[i]);\r\n            var matchingKey = keys.find(element => {\r\n                return element === specialAbilityKey;\r\n            });\r\n\r\n            if (matchingKey) {\r\n                var specialAbilityInfo = abilityInfo.AbilitySpecial[i];\r\n\r\n                // If value contains a space, it can be levelled up needs to be split up\r\n                var dataValue = specialAbilityInfo[matchingKey];\r\n                if (typeof dataValue === \"string\" && dataValue.includes(' ')) {\r\n                    var split = specialAbilityInfo[matchingKey].split(' ');\r\n                    dataValue = split[abilityLevel - 1];\r\n                }\r\n\r\n                if (specialAbilityInfo.var_type === \"FIELD_INTEGER\") {\r\n                    return parseInt(dataValue);\r\n                } \r\n                else if(specialAbilityInfo.var_type === \"FIELD_FLOAT\") {\r\n                    return parseFloat(dataValue);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/// Gets the standard output damage of an ability from its level\r\nexport function getAbilityOutputDamage(abilityInfo, abilityLevel) {\r\n    if (abilityInfo && abilityLevel) {\r\n        var dmgVals = abilityInfo.AbilityDamage;\r\n        if(dmgVals) {\r\n            let value = dmgVals.split(' ')[abilityLevel - 1];\r\n            return parseInt(value);\r\n        }\r\n        else if (abilityInfo.AbilitySpecial) \r\n        {\r\n            //console.log(abilityInfo.AbilitySpecial);\r\n            for (var i = 0; i < abilityInfo.AbilitySpecial.length; i++) {\r\n                var specAbil = abilityInfo.AbilitySpecial[i];\r\n    \r\n                /// Array of AbilitySpecial keys that deal damage\r\n                var specialAbilityDamageKeys = [\r\n                    //Generic\r\n                    \"damage\",\r\n                    // Abaddon\r\n                    \"target_damage\", \"damage_absorb\", \r\n                    //Alchemist\r\n                    \"max_damage\",\r\n                    \r\n                    //zeus\r\n                    \"arc_damage\",\r\n                ];\r\n    \r\n                // Find matching key in AbilitySpecial\r\n                for(var j = 0; j < specialAbilityDamageKeys.length; j++) {\r\n                    if (specAbil[specialAbilityDamageKeys[j]]) {\r\n                        let value = specAbil[specialAbilityDamageKeys[j]].split(' ')[abilityLevel - 1];\r\n                        return parseInt(value);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return 0;\r\n}\r\n\r\n/// Gets all behaviour options of an ability such as if it goes through BKB, damage type, etc\r\nexport function getAbilityBehaviours(abilityInfo) {\r\n    if (!abilityInfo) {\r\n        return null;\r\n    }\r\n\r\n    let behaviours = [];\r\n\r\n    if (abilityInfo.AbilityBehavior) {\r\n        let targeting = [];\r\n        let splitBehaviours = abilityInfo.AbilityBehavior.split(' | ');\r\n        for(let b of splitBehaviours) {\r\n            switch(b) {\r\n                case EAbilityBehaviour.UNIT_TARGET:\r\n                    targeting.push(\"Unit\");\r\n                    break;\r\n                case EAbilityBehaviour.POINT:\r\n                    targeting.push(\"Point\");\r\n                    break;\r\n                case EAbilityBehaviour.PASSIVE:\r\n                    targeting.push(\"Passive\");\r\n                    break;\r\n                case EAbilityBehaviour.NO_TARGET:\r\n                    targeting.push(\"No Target\");\r\n                    break;\r\n            }\r\n        }\r\n    \r\n        behaviours.push({\r\n            key: \"DOTA_ToolTip_Ability\",\r\n            value: targeting.join(\", \"),\r\n        });\r\n    }\r\n\r\n    if (abilityInfo.AbilityUnitDamageType) {\r\n        let dmgTypeVal = \"\";\r\n        let splitDmgTypes = abilityInfo.AbilityUnitDamageType.split(\" | \");\r\n        for(let type of splitDmgTypes) {\r\n            switch(type) {\r\n                case EDamageType.MAGICAL:\r\n                    dmgTypeVal = \"Magical\";\r\n                    break;\r\n                case EDamageType.PURE:\r\n                    dmgTypeVal = \"Pure\";\r\n                    break;\r\n                case EDamageType.PHYSICAL:\r\n                    dmgTypeVal = \"Physical\";\r\n                    break;\r\n                default:\r\n                    dmgTypeVal = \"Not Implemented\";\r\n                    break;\r\n            }\r\n        }\r\n\r\n        behaviours.push({\r\n            key: \"DOTA_ToolTip_Damage\",\r\n            value: dmgTypeVal,\r\n        });\r\n    }\r\n\r\n    if (abilityInfo.SpellImmunityType) {\r\n        let pierceValue = \"\";\r\n        switch(abilityInfo.SpellImmunityType) {\r\n            case ESpellImmunityType.YES:\r\n                pierceValue = \"Yes\";\r\n                break;\r\n            case ESpellImmunityType.NO:\r\n                pierceValue = \"No\";\r\n                break;\r\n            default:\r\n                pierceValue = \"Unknown\";\r\n                break;\r\n        }\r\n\r\n        behaviours.push({\r\n            key: \"DOTA_ToolTip_PiercesSpellImmunity\",\r\n            value: pierceValue,\r\n        });\r\n    }\r\n\r\n    return behaviours;\r\n}","import { DOTAAbilities } from \"../data/dota2/json/npc_abilities.json\";\r\nimport {\r\n    getAbilityInfoFromName,\r\n    getAbilitySpecialAbilityValue\r\n} from \"./dataHelperAbilities\";\r\n\r\n/// Gets info and formattable display name of a talent\r\n/// Returns both display name of talent and it's info in an object\r\nexport function getTalentInfoFromName(talent) {\r\n    if (talent) {\r\n        var talentInfo = DOTAAbilities[talent];\r\n        return talentInfo;    \r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport function tryGetTalentSpecialAbilityValue (talent, specialValueKey) {\r\n    let talentInfo = getAbilityInfoFromName(talent);\r\n    if(talentInfo) {\r\n        let specialValue = getAbilitySpecialAbilityValue(talentInfo, specialValueKey);\r\n        if (specialValue) {\r\n            return specialValue;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n","import { \r\n    getItemInfoFromName,\r\n    getItemSpecialAbilityValue,\r\n    tryGetItemSpecialValue,\r\n    tryGetNeutralSpecialValue,\r\n    primaryAttributeToItemBonusKey\r\n} from \"./dataHelperItems\";\r\n\r\nimport {\r\n    getAbilityInfoFromName,\r\n    getAbilitySpecialAbilityValue,\r\n    getAbilityOutputDamage,\r\n    tryGetAbilitySpecialAbilityValue,\r\n} from \"./dataHelperAbilities\";\r\n\r\nimport {\r\n    getTalentInfoFromName,\r\n    tryGetTalentSpecialAbilityValue,\r\n} from \"./dataHelperTalents\";\r\n\r\nimport {\r\n    getDotaBaseHero,\r\n    getSpecificAttributeStats,\r\n    getPrimaryAttributeStats,\r\n    getPrimaryAttribute\r\n} from \"./dataHelperHero\";\r\n\r\nimport { EAttributes } from \"../enums/attributes\";\r\n\r\nimport { DOTAHeroes } from \"../data/dota2/json/npc_heroes.json\";\r\nimport { DOTAAbilities } from \"../data/dota2/json/npc_abilities.json\";\r\n\r\n/// Calculates the health of a hero\r\n/// https://dota2.gamepedia.com/Health\r\nexport function calculateHealth(hero, heroLevel, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }\r\n    \r\n    var HEALTH_PER_STRENGTH_POINT = 20;\r\n    let baseStrength = parseInt(hero.AttributeBaseStrength)\r\n    let strengthGain = parseFloat(hero.AttributeStrengthGain);\r\n\r\n    var baseHealth = 0;\r\n    if (DOTAHeroes && DOTAHeroes.npc_dota_hero_base && DOTAHeroes.npc_dota_hero_base.StatusHealth) {\r\n        baseHealth = parseInt(DOTAHeroes.npc_dota_hero_base.StatusHealth);\r\n    } else {\r\n        console.error(\"Can't add baseHealth to heroes health pool\");\r\n    }\r\n\r\n    var totalStr = baseStrength + (strengthGain * (heroLevel - 1));\r\n    let totalHealth = baseHealth + (totalStr * HEALTH_PER_STRENGTH_POINT);\r\n\r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            let bonusHealth = tryGetItemSpecialValue(item, \"bonus_health\");\r\n            if (bonusHealth) {\r\n                totalHealth += bonusHealth;\r\n            }\r\n\r\n            let bonusStr = tryGetItemSpecialValue(item, \"bonus_strength\");\r\n            if (bonusStr) {\r\n                totalHealth += bonusStr * HEALTH_PER_STRENGTH_POINT;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalHealth += bonusAllStats * HEALTH_PER_STRENGTH_POINT;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let bonusHealth = tryGetNeutralSpecialValue(neutral, \"bonus_health\");\r\n        if (bonusHealth) {\r\n            totalHealth += bonusHealth;\r\n        }\r\n\r\n        let bonusStr = tryGetNeutralSpecialValue(neutral, \"bonus_strength\");\r\n        if (bonusStr) {\r\n            totalHealth += bonusStr * HEALTH_PER_STRENGTH_POINT;\r\n        }\r\n\r\n        let bonusAllStats = tryGetNeutralSpecialValue(neutral, \"bonus_all_stats\");\r\n        if (bonusAllStats) {\r\n            totalHealth += bonusAllStats * HEALTH_PER_STRENGTH_POINT;\r\n        }\r\n    }\r\n\r\n    if (abilities && abilities.length > 0) {\r\n        \r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            if (talent.includes(\"bonus_hp\")) {\r\n                let bonusHealth = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusHealth) {\r\n                    totalHealth += bonusHealth;\r\n                }\r\n            } else if (talent.includes(\"bonus_strength\")) {\r\n                let bonusStr = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusStr) {\r\n                    totalHealth += bonusStr * HEALTH_PER_STRENGTH_POINT;\r\n                }\r\n            } else if (talent.includes(\"bonus_all_stats\")) {\r\n                let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAllStats) {\r\n                    totalHealth += bonusAllStats * HEALTH_PER_STRENGTH_POINT;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return totalHealth.toFixed(0);\r\n}\r\n\r\n/// Calculates the mana pool of a hero\r\n/// https://dota2.gamepedia.com/Mana\r\nexport function calculateMana(hero, heroLevel, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }    \r\n\r\n    let MANA_PER_INT_POINT = 12;\r\n    let baseInt = parseInt(hero.AttributeBaseIntelligence);\r\n    let intGain = parseFloat(hero.AttributeIntelligenceGain);\r\n\r\n    var baseMana = 0;\r\n    if (DOTAHeroes && DOTAHeroes.npc_dota_hero_base && DOTAHeroes.npc_dota_hero_base.StatusMana) {\r\n        baseMana = parseInt(DOTAHeroes.npc_dota_hero_base.StatusMana);\r\n    } else {\r\n        console.error(\"Can't add baseMana to heroes mana pool\");\r\n    }\r\n\r\n    var totalInt = baseInt + (intGain * (heroLevel - 1));\r\n    let totalMana = baseMana + (totalInt * MANA_PER_INT_POINT);\r\n\r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            let bonusMana = tryGetItemSpecialValue(item, \"bonus_mana\");\r\n            if (bonusMana) {\r\n                totalMana += bonusMana;\r\n            }\r\n\r\n            let bonusInt = tryGetItemSpecialValue(item, \"bonus_intellect\");\r\n            if (bonusInt) {\r\n                totalMana += bonusInt * MANA_PER_INT_POINT;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalMana += bonusAllStats * MANA_PER_INT_POINT;\r\n            }\r\n        }\r\n    }\r\n    \r\n    if (neutral) {\r\n        let bonusMana = tryGetNeutralSpecialValue(neutral, \"bonus_mana\");\r\n        if (bonusMana) {\r\n            totalMana += bonusMana;\r\n        }\r\n\r\n        let bonusInt = tryGetNeutralSpecialValue(neutral, \"bonus_intellect\");\r\n        if (bonusInt) {\r\n            totalMana += bonusInt * MANA_PER_INT_POINT;\r\n        }\r\n\r\n        let bonusAllStats = tryGetNeutralSpecialValue(neutral, \"bonus_all_stats\");\r\n        if (bonusAllStats) {\r\n            totalMana += bonusAllStats * MANA_PER_INT_POINT;\r\n        }\r\n    }\r\n\r\n    if (abilities && abilities.length > 0) {\r\n        for(let ability of abilities) {\r\n            let bonusMana = tryGetAbilitySpecialAbilityValue(ability, \"bonus_mana\");\r\n            if (bonusMana) {\r\n                totalMana += bonusMana;\r\n            }\r\n\r\n            let bonusInt = tryGetAbilitySpecialAbilityValue(ability, \"bonus_intellect\");\r\n            if (bonusInt) {\r\n                totalMana += bonusInt * MANA_PER_INT_POINT;\r\n            }\r\n\r\n            let bonusAllStats = tryGetAbilitySpecialAbilityValue(ability, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalMana += bonusAllStats * MANA_PER_INT_POINT;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            if (talent.includes(\"bonus_mp\")) {\r\n                let bonusMana = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusMana) {\r\n                    totalMana += bonusMana;\r\n                }\r\n            } else if (talent.includes(\"bonus_intelligence\")) {\r\n                let bonusInt = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusInt) {\r\n                    totalMana += bonusInt * MANA_PER_INT_POINT;\r\n                }\r\n            } else if (talent.includes(\"bonus_all_stats\")) {\r\n                let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAllStats) {\r\n                    totalMana += bonusAllStats * MANA_PER_INT_POINT;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return totalMana.toFixed(0);\r\n}\r\n\r\n/* Hero gains +0.1 regen per each point of strength\r\n* https://dota2.gamepedia.com/Health_regeneration */\r\nexport function calculateHealthRegen(hero, heroLevel, items, neutral, abilities, talents) {\r\n    if(!hero) {\r\n        return \"?\";\r\n    }\r\n\r\n    let HP_REGEN_PER_STRENGTH = 0.1;\r\n    let baseStr = parseInt(hero.AttributeBaseStrength);\r\n    let strPerLvl = parseFloat(hero.AttributeStrengthGain);\r\n\r\n    let totalHpRegen = (baseStr + (strPerLvl * (heroLevel - 1))) * HP_REGEN_PER_STRENGTH;\r\n    if (hero.StatusHealthRegen) {\r\n        totalHpRegen += parseFloat(hero.StatusHealthRegen);\r\n    }\r\n\r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            let regenAmt = tryGetItemSpecialValue(item, \"bonus_health_regen\");\r\n            if (regenAmt) {\r\n                totalHpRegen += regenAmt;\r\n            }\r\n\r\n            let bonusStr = tryGetItemSpecialValue(item, \"bonus_strength\");\r\n            if(bonusStr) {\r\n                totalHpRegen += bonusStr * HP_REGEN_PER_STRENGTH;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalHpRegen += bonusAllStats * HP_REGEN_PER_STRENGTH;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let bonusHealthRegen = tryGetNeutralSpecialValue(neutral, \"bonus_health_regen\");\r\n        if (bonusHealthRegen) {\r\n            totalHpRegen += bonusHealthRegen;\r\n        }\r\n\r\n        let bonusStr = tryGetNeutralSpecialValue(neutral, \"bonus_strength\");\r\n        if (bonusStr) {\r\n            totalHpRegen += bonusStr * HP_REGEN_PER_STRENGTH;\r\n        }\r\n        \r\n        let bonusAllStats = tryGetNeutralSpecialValue(neutral, \"bonus_all_stats\");\r\n        if (bonusAllStats) {\r\n            totalHpRegen += bonusAllStats * HP_REGEN_PER_STRENGTH;\r\n        }\r\n    } \r\n\r\n    if (abilities && abilities.length > 0) {\r\n        for (let ability of abilities) {\r\n            let bonusRegen = tryGetAbilitySpecialAbilityValue(ability, \"bonus_health_regen\", 1);\r\n            if (bonusRegen) {\r\n                totalHpRegen += bonusRegen;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for (let talent of talents) {\r\n            // Only get bonus_hp_regen talents\r\n            if (talent.includes(\"bonus_hp_regen\")) {\r\n                let bonusRegen = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusRegen) {\r\n                    totalHpRegen += bonusRegen;\r\n                }\r\n            } else if(talent.includes(\"bonus_strength\")) {\r\n                let bonusStr = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusStr) {\r\n                    totalHpRegen += bonusStr * HP_REGEN_PER_STRENGTH;\r\n                }\r\n            } else if (talent.includes(\"bonus_all_stats\")) {\r\n                let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAllStats) {\r\n                    totalHpRegen += bonusAllStats * HP_REGEN_PER_STRENGTH;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return totalHpRegen.toFixed(1);\r\n}\r\n\r\n/* Each point of intelligence increases the hero's mana regeneration by 0.05.\r\n * https://dota2.gamepedia.com/Mana_regeneration */\r\nexport function calculateManaRegen(hero, heroLevel, items, neutral, abilities, talents) {\r\n    if(!hero) {\r\n        return \"?\";\r\n    }\r\n    let MANA_REGEN_PER_INT = 0.05;\r\n    let baseInt = parseInt(hero.AttributeBaseIntelligence);\r\n    let intGain = parseFloat(hero.AttributeIntelligenceGain);\r\n\r\n    let totalManaRegen = (baseInt + (intGain * (heroLevel - 1))) * MANA_REGEN_PER_INT;\r\n    if (hero.StatusManaRegen) {\r\n        totalManaRegen += parseFloat(hero.StatusManaRegen);\r\n    }\r\n\r\n    if(items && items.length > 0) {\r\n        for(let item of items) {\r\n            let bonusManaRegen = tryGetItemSpecialValue(item, \"bonus_mana_regen\");\r\n            if (bonusManaRegen) {\r\n                totalManaRegen += bonusManaRegen;\r\n            }\r\n\r\n            let bonusInt = tryGetItemSpecialValue(item, \"bonus_intelligence\");\r\n            if(bonusInt) {\r\n                let regen = bonusInt * MANA_REGEN_PER_INT; \r\n                totalManaRegen += regen;\r\n            }\r\n\r\n            let bonusIntellect = tryGetItemSpecialValue(item, \"bonus_intellect\");\r\n            if (bonusIntellect) {\r\n                let regen = bonusIntellect * MANA_REGEN_PER_INT; \r\n                totalManaRegen += regen;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalManaRegen += bonusAllStats * MANA_REGEN_PER_INT;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let bonusInt = tryGetNeutralSpecialValue(neutral, \"bonus_intelligence\");\r\n        if (bonusInt) {\r\n            let manaRegen = bonusInt * MANA_REGEN_PER_INT;\r\n            totalManaRegen += manaRegen;\r\n        }\r\n\r\n        let bonusIntellect = tryGetNeutralSpecialValue(neutral, \"bonus_intellect\");\r\n        if (bonusIntellect) {\r\n            let regen = bonusIntellect * MANA_REGEN_PER_INT; \r\n            totalManaRegen += regen;\r\n        }\r\n\r\n        let bonusAllStats = tryGetNeutralSpecialValue(neutral, \"bonus_all_stats\");\r\n        if (bonusAllStats) {\r\n            totalManaRegen += bonusAllStats * MANA_REGEN_PER_INT;\r\n        }\r\n    }\r\n\r\n    if(abilities && abilities.length > 0) {\r\n        for (let ability of abilities) {\r\n            let manaRegen = tryGetAbilitySpecialAbilityValue(ability, \"mana_regen\", 1);\r\n            if (manaRegen) {\r\n                totalManaRegen += manaRegen;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            // Only includes bonus mana point regen talents\r\n            if(talent.includes(\"bonus_mp_regen\")) {\r\n                let value = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (value) {\r\n                    totalManaRegen += parseFloat(value);\r\n                }\r\n            } else if (talent.includes(\"bonus_intelligence\")) {\r\n                let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAllStats) {\r\n                    totalManaRegen += bonusAllStats * MANA_REGEN_PER_INT;\r\n                }\r\n            } else if (talent.includes(\"bonus_all_stats\")) {\r\n                let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAllStats) {\r\n                    totalManaRegen += bonusAllStats * MANA_REGEN_PER_INT;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return totalManaRegen.toFixed(1);\r\n}\r\n\r\n// Calculates the main armor of the hero\r\n// Each point of agility increases a hero's armor by 0.167 (1/6) https://dota2.gamepedia.com/Armor\r\nexport function calculateMainArmor(hero, level, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }\r\n\r\n    let ARMOR_PER_AGI = 0.167;\r\n    let baseArmor = hero.ArmorPhysical;\r\n    let baseAgility = hero.AttributeBaseAgility;\r\n    let agiPerLevel = hero.AttributeAgilityGain;\r\n\r\n    // Determine bonus agility from perLevel. Then work out main armor\r\n    var agiPer = (parseFloat(agiPerLevel) * (level - 1));\r\n    var totalArmor = parseInt(baseArmor) + ((parseInt(baseAgility) + agiPer) * ARMOR_PER_AGI);\r\n    \r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            let bonusArmor = tryGetItemSpecialValue(item, \"bonus_armor\");\r\n            if (bonusArmor) {\r\n                totalArmor += bonusArmor;\r\n            }\r\n\r\n            let bonusAgility = tryGetItemSpecialValue(item, \"bonus_agility\");\r\n            if (bonusAgility) {\r\n                let armor = bonusAgility * ARMOR_PER_AGI;\r\n                totalArmor += armor;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                let armor = bonusAllStats * ARMOR_PER_AGI;\r\n                totalArmor += armor;\r\n            }\r\n        }\r\n    }\r\n    \r\n    if(neutral) {\r\n        let bonusArmor = tryGetNeutralSpecialValue(neutral, \"bonus_armor\");\r\n        if (bonusArmor) {\r\n            totalArmor += bonusArmor;\r\n        }\r\n\r\n        let bonusAgi = tryGetNeutralSpecialValue(neutral, \"bonus_agility\");\r\n        if (bonusAgi) {\r\n            totalArmor += bonusAgi * ARMOR_PER_AGI;\r\n        }\r\n\r\n        let bonusAllStats = tryGetNeutralSpecialValue(neutral, \"bonus_all_stats\");\r\n        if (bonusAllStats) {\r\n            let armor = bonusAllStats * ARMOR_PER_AGI;\r\n            totalArmor += armor;\r\n        }\r\n    }\r\n\r\n    if (abilities && abilities.length > 0) {\r\n        for(let ability of abilities) {\r\n            let bonusArmor = tryGetAbilitySpecialAbilityValue(ability, \"bonus_armor\");\r\n            if (bonusArmor) {\r\n                totalArmor += bonusArmor;\r\n            }\r\n        }\r\n    }\r\n\r\n    if(talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            if (talent.includes(\"bonus_armor\")) {\r\n                let bonusArmor = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusArmor) {\r\n                    totalArmor += bonusArmor;\r\n                }\r\n            } else if (talent.includes(\"bonus_agility\")) {\r\n                let bonusAgility = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAgility) {\r\n                    totalArmor += bonusAgility * ARMOR_PER_AGI;\r\n                }\r\n            } else if (talent.includes(\"bonus_all_stats\")) {\r\n                let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAllStats) {\r\n                    totalArmor += bonusAllStats * ARMOR_PER_AGI;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Round to one decimal place\r\n    return totalArmor.toFixed(1);\r\n}\r\n\r\n/// Returns the total amount of spell amplification as a percentage applied to the hero\r\nexport function calculateTotalSpellAmp (talents, items, neutral) {\r\n    let totalSpellAmp = 0;\r\n    \r\n    // Determine if any talents provide spell amp\r\n    if (talents && talents.length > 0) {\r\n        let ampTalent = talents.find(element => element.includes(\"spell_amplify\"));\r\n        if (ampTalent) {\r\n            let talentInfo = DOTAAbilities[ampTalent.name];\r\n            if (talentInfo) {\r\n                let spellAmpInfo = talentInfo.AbilitySpecial.find(element => element.value);\r\n                if (spellAmpInfo) {\r\n                    let spellAmpAmt = parseInt(spellAmpInfo.value);\r\n                    totalSpellAmp += spellAmpAmt;\r\n\r\n                    //console.log(`Talent ${ampTalent.name} provides ${spellAmpAmt}% spell amp`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Determine if current neutral item provides any spell amplification\r\n    if (neutral) {\r\n        let foundNeutral = getItemInfoFromName(neutral.item);\r\n        if (foundNeutral) {\r\n            let spellAmpAmount = getItemSpecialAbilityValue(foundNeutral, \"spell_amp\");\r\n            if (spellAmpAmount) {\r\n                totalSpellAmp += spellAmpAmount;\r\n                //console.log(`Neutral ${neutral.item} provides ${spellAmpAmount}% spell amp`);\r\n            }\r\n        }\r\n    }\r\n\r\n    /// Determine if any items provide spell amp\r\n    if (items && items.length > 0) {\r\n        for(let i = 0; i < items.length; i++) {\r\n            if (items[i].item) {\r\n                let itemInfo = getItemInfoFromName(items[i].item);\r\n                if (itemInfo) {\r\n                    let spellAmpAmount = getItemSpecialAbilityValue(itemInfo, \"spell_amp\");\r\n                    if (spellAmpAmount) {\r\n                        totalSpellAmp += spellAmpAmount;\r\n                        //console.log(`Item ${items[i].item} provides ${spellAmpAmt}% spell amp`);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    return totalSpellAmp;\r\n}\r\n\r\nexport function calculateStatusResist(items, neutral) {\r\n    let totalStatusResist = 0.0;\r\n\r\n    if (items && items.length > 0) {\r\n        for(let i = 0; i < items.length; i++) {\r\n            if (items[i].item) {\r\n                let itemInfo = getItemInfoFromName(items[i].item);\r\n                if (itemInfo) {\r\n                    let statusResistAmount = getItemSpecialAbilityValue(itemInfo, \"status_resistance\");\r\n                    if (statusResistAmount) {\r\n                        totalStatusResist += statusResistAmount;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let statusResistAmount = tryGetNeutralSpecialValue(neutral, \"status_resistance\");\r\n        if (statusResistAmount) {\r\n            totalStatusResist += statusResistAmount;\r\n        }\r\n    }\r\n\r\n    return totalStatusResist;\r\n}\r\n\r\nexport function calculateMagicResist (items, neutral, abilities) {\r\n    // Formula from Wiki\r\n    // Total magic resistance = 1 − ((1 − natural resistance) × (1 − first resistance bonus) × (1 − second resistance bonus) × (1 + first resistance reduction) × (1 + second resistance reduction))\r\n    \r\n    // Array of magic resistance values\r\n    let resistanceBonuses = [ ];\r\n    \r\n    if (DOTAHeroes && DOTAHeroes?.npc_dota_hero_base?.MagicalResistance) {\r\n        let baseResist = parseInt(DOTAHeroes.npc_dota_hero_base.MagicalResistance);\r\n        resistanceBonuses.push(baseResist);\r\n    }\r\n\r\n    if (items && items.length > 0) {\r\n        for(let i = 0; i < items.length; i++) {\r\n            let itemInfo = getItemInfoFromName(items[i].item);\r\n            if (itemInfo) {\r\n                let magicResistAmount = getItemSpecialAbilityValue(itemInfo, \"bonus_magic_resistance\");\r\n                if (magicResistAmount) {\r\n                    resistanceBonuses.push(magicResistAmount);\r\n                }\r\n\r\n                magicResistAmount = getItemSpecialAbilityValue(itemInfo, \"magic_resistance\");\r\n                if (magicResistAmount) {\r\n                    resistanceBonuses.push(magicResistAmount);\r\n                }\r\n\r\n                magicResistAmount = getItemSpecialAbilityValue(itemInfo, \"bonus_magical_armor\");\r\n                if (magicResistAmount) {\r\n                    resistanceBonuses.push(magicResistAmount);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let magicResistAmount = tryGetNeutralSpecialValue(neutral, \"magic_resistance\");\r\n        if (magicResistAmount) {\r\n            resistanceBonuses.push(magicResistAmount);\r\n        }\r\n    }\r\n\r\n    if (abilities && abilities.length > 0) { \r\n        for(let ability of abilities) {\r\n            // let magicResistAmount = tryGetAbilitySpecialAbilityValue(ability, \"magic_resistance\");\r\n            // if (magicResistAmount) {\r\n            //     resistanceBonuses.push(magicResistAmount);\r\n            // }\r\n            \r\n            let magicResistAmount = tryGetAbilitySpecialAbilityValue(ability, \"bonus_magic_resistance\");\r\n            if (magicResistAmount) {\r\n                resistanceBonuses.push(magicResistAmount);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Divide original value into 0.x and minus from 1 to get the reverse\r\n    let edited = []\r\n    for(let i = 0; i < resistanceBonuses.length; i++) {\r\n        edited.push(1 - (resistanceBonuses[i] / 100));\r\n    }\r\n\r\n    // multiply them all together \r\n    let total = edited[0];\r\n    for(let i = 1; i < edited.length; i++) {\r\n        total *= edited[i];\r\n    }\r\n\r\n    // then minus from 1, and multiply by 100 to get value as a percentage\r\n    let percent = (1 - total) * 100;\r\n    return percent.toFixed(2);\r\n}\r\n\r\n/// Calculates the total magic resistance of the hero\r\n/// https://dota2.gamepedia.com/Magic_resistance\r\nexport function calculatePhysicalResist (totalArmor) {\r\n    // Formula from https://www.dotabuff.com/blog/2018-11-30-understanding-720-armor-changes\r\n    //( 0.052 * armor ) ÷ ( 0.9 + 0.048 * |armor|)\r\n    var physResist = (0.052 * totalArmor) / (0.9 + 0.048 * Math.abs(totalArmor));\r\n    var percent = physResist * 100;\r\n    return percent.toFixed(0);\r\n}\r\n\r\n/// Calculates evasion\r\nexport function calculateEvasion(items, neutral, abilities, talents) {\r\n    var totalEvasion = 0.0;\r\n\r\n    if (abilities && abilities.length > 0) {\r\n        for(let ability of abilities) {\r\n            let bonusEvasion = tryGetAbilitySpecialAbilityValue(ability, \"bonus_evasion\");\r\n            if (bonusEvasion) {\r\n                totalEvasion += bonusEvasion;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            if (talent.includes(\"bonus_evasion\")) {\r\n                let bonusEvasion = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusEvasion) {\r\n                    totalEvasion += bonusEvasion;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (items && items.length > 0) {\r\n        for(var i = 0; i < items.length; i++) {\r\n            if (items[i].item) {\r\n                var itemInfo = getItemInfoFromName(items[i].item);\r\n                if (itemInfo) {\r\n                    var evasionAmount = getItemSpecialAbilityValue(itemInfo, \"bonus_evasion\");\r\n                    if (evasionAmount) {\r\n                        totalEvasion += evasionAmount;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return totalEvasion;\r\n}\r\n\r\n/// Returns the minimum and maximum right click damage of a hero\r\n// atkMin, atkMax, primaryAttributeStats, heroLevel = 1\r\nexport function calculateRightClickDamage(hero, level, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }\r\n    \r\n    let heroMainAttribute = getPrimaryAttribute(hero);\r\n    let atkMin = parseInt(hero.AttackDamageMin);\r\n    let atkMax = parseInt(hero.AttackDamageMax);\r\n    let primaryAttributeStats = getPrimaryAttributeStats(hero);\r\n\r\n    // Work out how much bonus attack hero recieves from their primary attribute\r\n    let totalPrimaryAttribute = primaryAttributeStats.base + (primaryAttributeStats.perLevel * (level - 1));\r\n    \r\n    /* Iterate over all items, neutral, abilities and talents to\r\n        get all primary attribute and all stat bonuses\r\n        */\r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            let allAttrKeys = primaryAttributeToItemBonusKey(heroMainAttribute);\r\n            for(let key of allAttrKeys) {\r\n                let bonusPrimaryAttr = tryGetItemSpecialValue(item, key);\r\n                if (bonusPrimaryAttr) {\r\n                    totalPrimaryAttribute += bonusPrimaryAttr;\r\n                }\r\n            }\r\n\r\n            let bonusPrimaryStat = tryGetItemSpecialValue(item, \"bonus_primary_stat\");\r\n            if (bonusPrimaryStat) {\r\n                totalPrimaryAttribute += bonusPrimaryStat;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalPrimaryAttribute += bonusAllStats;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let allAttrKeys = primaryAttributeToItemBonusKey(heroMainAttribute);\r\n        for(let key of allAttrKeys) {\r\n            let bonusPrimaryAttr = tryGetNeutralSpecialValue(neutral, key);\r\n            if (bonusPrimaryAttr) {\r\n                totalPrimaryAttribute += bonusPrimaryAttr;\r\n            }\r\n        }\r\n\r\n        let bonusPrimaryStat = tryGetNeutralSpecialValue(neutral, \"primary_stat\");\r\n        if (bonusPrimaryStat) {\r\n            totalPrimaryAttribute += bonusPrimaryStat;\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            let allAttrKeys = primaryAttributeToItemBonusKey(heroMainAttribute);\r\n            for(let key of allAttrKeys) {\r\n                if (talent.includes(key)) {\r\n                    let bonusPrimaryAttr = tryGetNeutralSpecialValue(talent, \"value\");\r\n                    if (bonusPrimaryAttr) {\r\n                        totalPrimaryAttribute += bonusPrimaryAttr;\r\n                    }\r\n                }\r\n            }\r\n            \r\n            if (talent.includes(\"bonus_all_stats\")) {\r\n                let allStats = tryGetNeutralSpecialValue(talent, \"value\");\r\n                if (allStats) {\r\n                    totalPrimaryAttribute += allStats;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Add and return\r\n    let min = atkMin + totalPrimaryAttribute;\r\n    let max = atkMax + totalPrimaryAttribute;\r\n    return {\r\n        /// minimum attack damage of the hero\r\n        min: Math.floor(min).toFixed(0),\r\n        /// maximum attack damage of the hero\r\n        max: Math.floor(max).toFixed(0),\r\n    };\r\n}\r\n\r\n/// Returns info on the attack time of the hero\r\nexport function calculateAttackTime(hero, level, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }\r\n    \r\n    let MAX_ATTACK_SPEED = 700;\r\n\r\n    // Check if hero has different attack rate or attack speed than base hero\r\n    let totalAttackSpeed = getDotaBaseHero()?.BaseAttackSpeed;\r\n    let attackRate = getDotaBaseHero()?.AttackRate;\r\n    if (hero) {\r\n        \r\n        if (hero.BaseAttackSpeed) {\r\n            totalAttackSpeed = parseInt(hero.BaseAttackSpeed);\r\n        } \r\n        if (hero.AttackSpeed) {\r\n            attackRate = parseFloat(hero.AttackSpeed);\r\n        }\r\n    }\r\n\r\n    /// Get base agi stats\r\n    let agiStats = getSpecificAttributeStats(EAttributes.ATTR_AGILITY, hero);\r\n    let baseAgi = agiStats.base;\r\n    let agiPerLevel = agiStats.perLevel;\r\n\r\n    let totalAgi = baseAgi + (agiPerLevel * (level - 1));\r\n\r\n\r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            let bonusAttackSpeed = tryGetItemSpecialValue(item, \"bonus_attack_speed\");\r\n            if (bonusAttackSpeed) {\r\n                totalAttackSpeed += bonusAttackSpeed;\r\n            }\r\n\r\n            let bonusAgility = tryGetItemSpecialValue(item, \"bonus_agility\");\r\n            if (bonusAgility) {\r\n                totalAgi += bonusAgility;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalAgi += bonusAllStats;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let bonusAttackSpeed = tryGetNeutralSpecialValue(neutral, \"bonus_attack_speed\");\r\n        if (bonusAttackSpeed) {\r\n            totalAttackSpeed += bonusAttackSpeed;\r\n        }\r\n    }\r\n\r\n    // Only actives that gives attack speed bonuses\r\n    // if (abilities && abilities.length > 0) {\r\n    // }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            let bonusAttackSpeed = tryGetTalentSpecialAbilityValue(talent, \"bonus_attack_speed\");\r\n            if (bonusAttackSpeed) {\r\n                totalAttackSpeed += bonusAttackSpeed;\r\n            }\r\n\r\n            let bonusAgility = tryGetTalentSpecialAbilityValue(talent, \"bonus_agility\");\r\n            if (bonusAgility) {\r\n                totalAgi += bonusAgility;\r\n            }\r\n\r\n            let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalAgi += bonusAllStats;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// Check that max atk speed hasn't been reached\r\n    if ((totalAttackSpeed + totalAgi) > MAX_ATTACK_SPEED) {\r\n        // Use totalAttackSpeed at max if so, reset agi since 1 agi = 1 atk speed\r\n        totalAttackSpeed = MAX_ATTACK_SPEED;\r\n        totalAgi = 0;\r\n    }\r\n\r\n    let attacksPerSec = ((totalAttackSpeed + totalAgi) * 0.01) / 1.7;\r\n    let attackTime = 1.7 / ((totalAttackSpeed + totalAgi) * 0.01);\r\n    attackTime = 1 / attacksPerSec;\r\n\r\n    let atkSpeed = totalAttackSpeed + totalAgi;\r\n\r\n    return {\r\n        /// Amount of seconds inbetween attacks\r\n        attackTime: attackTime.toFixed(2),\r\n        /// Amount of attacks per second\r\n        attacksPerSecond: attacksPerSec.toFixed(2),\r\n        /// Attack speed value shown in UI of dota\r\n        attackSpeed: atkSpeed.toFixed(0),\r\n    };\r\n}\r\n\r\n/// Calculates how much output damage an ability will do to an enemy, factoring in any items\r\nexport function calculateSpellDamage(abilityInfo, abilityLevel, items, neutral, talents) {\r\n    if (!abilityLevel || !abilityInfo) {\r\n        return -1;\r\n    }\r\n\r\n    // Get normal dmg output of ability\r\n    let abilityDamage = getAbilityOutputDamage(abilityInfo, abilityLevel);\r\n    \r\n    // Add up spellAmp from all bonuses to calculate at end\r\n    let totalSpellAmpPercent = 0;\r\n\r\n    if (items) {\r\n        // Add item spell damage increase\r\n        for(let i = 0; i < items.length; i++) {\r\n            var itemInfo = getItemInfoFromName(items[i].item);\r\n            if (itemInfo) {\r\n                let spellAmp = getItemSpecialAbilityValue(itemInfo, \"spell_amp\");\r\n                if (spellAmp) {\r\n                    totalSpellAmpPercent += spellAmp;\r\n                }\r\n\r\n                let bonusSpellAmp = getItemSpecialAbilityValue(itemInfo, \"bonus_spell_amp\");\r\n                if (bonusSpellAmp) {\r\n                    totalSpellAmpPercent += bonusSpellAmp;\r\n                }\r\n\r\n                // Bloodstone, item specific\r\n                let chargeCount = getItemSpecialAbilityValue(itemInfo, \"initial_charges_tooltip\");\r\n                let ampPerCharge = getItemSpecialAbilityValue(itemInfo, \"amp_per_charge\");\r\n                if (ampPerCharge && chargeCount) {\r\n                    totalSpellAmpPercent += (ampPerCharge * chargeCount);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        //Add neutral item spell dmg\r\n        var neutralInfo = getItemInfoFromName(neutral.item);\r\n        if (neutralInfo && neutralInfo.AbilitySpecial) {\r\n            for (let i = 0; i < neutralInfo.AbilitySpecial.length; i++) {\r\n                let special = neutralInfo.AbilitySpecial[i];\r\n                // Spell amp\r\n                if (special.bonus_spell_amp) {\r\n                    let bonusSpellAmp = parseInt(special.bonus_spell_amp);\r\n                    totalSpellAmpPercent += bonusSpellAmp; \r\n                }\r\n\r\n                if (special.spell_amp) {\r\n                    let bonusSpellAmp = parseInt(special.spell_amp);\r\n                    totalSpellAmpPercent += bonusSpellAmp;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        // Add spell amplify from any selected talents\r\n        for(let talent of talents) {\r\n            if (talent.includes(\"spell_amplify\")) {\r\n                let ampTalentValue = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (ampTalentValue) {\r\n                    totalSpellAmpPercent += ampTalentValue;\r\n\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    abilityDamage = calculateSpellAmp(abilityDamage, totalSpellAmpPercent);\r\n    return {\r\n        damage: abilityDamage,\r\n    };\r\n}\r\n\r\n/// Calculates and applies spell amp to the spell damage and returns the result\r\nexport function calculateSpellAmp (spellDamage, spellAmpPercent) {\r\n    return spellDamage + ((spellDamage / 100) * spellAmpPercent);\r\n}\r\n\r\n/// Calculates ability mana cost with items, neutrals and talents that contain reductions\r\nexport function calculateManaCost(abilityInfo, abilityLevel, items, neutral, talents) {\r\n    let manaCost = null;\r\n\r\n    // Get inital mana cost amount\r\n    if (abilityInfo && abilityInfo.AbilityManaCost) {\r\n        let infoManaCost = abilityInfo.AbilityManaCost;\r\n        if (typeof infoManaCost === \"string\") {\r\n            let val = infoManaCost.split(\" \")[abilityLevel - 1];\r\n            manaCost = val;\r\n        } else {\r\n            manaCost = infoManaCost;\r\n        }\r\n    }\r\n\r\n    // Determine mana reductions from items, neutral, talents\r\n    // Take all percentages and calculate at end\r\n    let totalManaCostReducePercent = 0;\r\n\r\n    if (items) {\r\n        for(let item of items) {\r\n            var itemInfo = getItemInfoFromName(item.item);\r\n            if(itemInfo) {\r\n                var manaCostReduceAmount = getItemSpecialAbilityValue(itemInfo, \"manacost_reduction\");\r\n                if(manaCostReduceAmount) {\r\n                    totalManaCostReducePercent += manaCostReduceAmount;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let neutralInfo = getItemInfoFromName(neutral.item);\r\n        if (neutralInfo) {\r\n            let costReductionAmount = getItemSpecialAbilityValue(neutralInfo, \"manacost_reduction\");\r\n            if (costReductionAmount) {\r\n                totalManaCostReducePercent += costReductionAmount;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (talents) {\r\n        for(let talent of talents) {\r\n            // Only apply mana reducing talents\r\n            if (talent.includes(\"mana_reduction\")) {\r\n                let reduceAmount = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (reduceAmount) {\r\n                    totalManaCostReducePercent += reduceAmount;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // If ability has a mana value and has mana reductions\r\n    if (manaCost && totalManaCostReducePercent > 0) {\r\n        let removeManaAmt = (manaCost / 100) * totalManaCostReducePercent;\r\n        manaCost -= removeManaAmt;\r\n    }\r\n\r\n    return manaCost;\r\n}\r\n\r\n/// Calculates ability cooldown with items, neutrals, talents and abilities\r\n/// https://liquipedia.net/dota2/Cooldown_Reduction\r\nexport function calculateAbilityCooldown(abilityInfo, abilityLevel, items, neutral, talents) {\r\n    let cooldown = null;\r\n    \r\n    if (abilityInfo && abilityInfo.AbilityCooldown) {\r\n        let infoCooldown = abilityInfo.AbilityCooldown;\r\n        if (typeof infoCooldown === \"string\") {\r\n            let val = infoCooldown.split(\" \")[abilityLevel - 1];\r\n            cooldown = parseFloat(val);\r\n        } else {\r\n            cooldown = infoCooldown;\r\n        }\r\n    }\r\n\r\n    let allReductions = [];\r\n    if (items) {\r\n        for (let item of items) {\r\n            if (item && item.item) {\r\n                var itemInfo = getItemInfoFromName(item.item);\r\n                if (itemInfo) {\r\n                    var bonusCooldown = getItemSpecialAbilityValue(itemInfo, \"bonus_cooldown\");\r\n                    if (bonusCooldown) {\r\n                        allReductions.push({ amount: bonusCooldown, source: item.item });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let neutralInfo = getItemInfoFromName(neutral.item);\r\n        if (neutralInfo) {\r\n            let bonusCooldown = getItemSpecialAbilityValue(neutralInfo, \"bonus_cooldown\");\r\n            if (bonusCooldown) {\r\n                allReductions.push({ amount: bonusCooldown, source: neutral });\r\n            } \r\n        }\r\n    }\r\n\r\n    if (talents) {\r\n        for(let talent of talents) {\r\n            // Ignore talent if it isn't a cd reduction one\r\n            if (talent.includes(\"cooldown_reduction\")) {\r\n                let reduction = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (reduction) {\r\n                    allReductions.push({ amount: reduction, source: talent });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    let sourceOfReductions = [];\r\n    for(let reduction of allReductions) {\r\n        let decimal = reduction.amount / 100;\r\n        sourceOfReductions.push((1 - decimal));\r\n    }\r\n\r\n    let reductionTotal = cooldown;\r\n    for(let reduce of sourceOfReductions) {\r\n        reductionTotal *= reduce;\r\n    }\r\n\r\n    return reductionTotal.toFixed(2);\r\n}\r\n\r\n/// Calculates the movement speed of the hero, factoring in their items, neutral, abilities and talents\r\nexport function calculateMoveSpeed (hero, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }\r\n\r\n    let baseSpeed = hero.MovementSpeed;\r\n    let flatBonus = 0;\r\n    let percentageBasedBonuses = 0;\r\n\r\n    if (items && items.length > 0) {\r\n        for (let item of items) {\r\n            let moveSpeed = tryGetItemSpecialValue(item, \"bonus_movement_speed\");\r\n            if (moveSpeed) {\r\n                flatBonus += moveSpeed;\r\n            }\r\n\r\n            let moveSpeedPercentBonus = tryGetItemSpecialValue(item, \"movement_speed_percent_bonus\");\r\n            if (moveSpeedPercentBonus) {\r\n                percentageBasedBonuses += moveSpeedPercentBonus;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let bonusMoveSpeed = tryGetNeutralSpecialValue(neutral, \"bonus_movement_speed\");\r\n        if (bonusMoveSpeed) {\r\n            flatBonus += bonusMoveSpeed;\r\n        }\r\n\r\n        let moveSpeedPercentBonus = tryGetNeutralSpecialValue(neutral, \"movement_speed_percent_bonus\");\r\n        if (moveSpeedPercentBonus) {\r\n            percentageBasedBonuses += moveSpeedPercentBonus;\r\n        }\r\n    }\r\n\r\n    /// Abilities are actives so dont include since no way in UI to activate an ability yet\r\n    // if (abilities && abilities.length > 0) {\r\n    //     for(let ability of abilities) {\r\n    //         let bonusMoveSpeed = tryGetAbilitySpecialAbilityValue(ability, \"bonus_movespeed\");\r\n    //         if (bonusMoveSpeed) {\r\n    //             flatBonus += bonusMoveSpeed;\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            if (talent.includes(\"bonus_movement_speed\")) {\r\n                let bonusSpeed = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusSpeed) {\r\n                    flatBonus += bonusSpeed;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    let total = baseSpeed + flatBonus;\r\n    return total;\r\n}\r\n\r\nexport function calculateAttackRange (hero, level, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }\r\n\r\n    let isHeroRanged = hero.AttackCapabilities === \"DOTA_UNIT_CAP_RANGED_ATTACK\";\r\n\r\n    let baseRange = parseInt(hero.AttackRange);\r\n    let totalAttackRange = baseRange;\r\n\r\n    // Dont add bonuses if hero isn't ranged\r\n    if (isHeroRanged) {\r\n        if (items && items.length > 0) {\r\n            for(let item of items) {\r\n                let baseRange = tryGetItemSpecialValue(item, \"base_attack_range\");\r\n                if (baseRange) {\r\n                    totalAttackRange += baseRange;\r\n                }\r\n            }\r\n        }\r\n    \r\n        if (neutral) {\r\n            let rangeBonus = tryGetNeutralSpecialValue(neutral, \"attack_range_bonus\");\r\n            if (rangeBonus) {\r\n                totalAttackRange += rangeBonus;\r\n            }\r\n    \r\n            let bonusAttackRange = tryGetNeutralSpecialValue(neutral, \"bonus_attack_range\");\r\n            if (bonusAttackRange) {\r\n                totalAttackRange += bonusAttackRange;\r\n            }\r\n        }\r\n\r\n        if (abilities && abilities.length > 0) {\r\n            for(let ability of abilities) {\r\n                let bonusAttackRange = tryGetAbilitySpecialAbilityValue(ability, \"bonus_attack_range\", 1);\r\n                if (bonusAttackRange) {\r\n                    totalAttackRange += bonusAttackRange;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (talents && talents.length > 0) {\r\n            for(let talent of talents) {\r\n                if (talent.includes(\"bonus_attack_range\")) {\r\n                    let bonusAttackRange = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                    if (bonusAttackRange) {\r\n                        totalAttackRange += bonusAttackRange;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        // Melee units, apply any melee attack range bonuses\r\n        if (neutral) {\r\n            let bonusAttackRange = tryGetNeutralSpecialValue(neutral, \"melee_attack_range\");\r\n            if (bonusAttackRange) {\r\n                totalAttackRange += bonusAttackRange;\r\n            }\r\n        }\r\n    }\r\n\r\n    return totalAttackRange;\r\n}","/// Searches the ability_lang.json file for the related string\r\nexport function tryGetAbilityLocalizedString(abilityStrings, stringKey) {\r\n    if (!abilityStrings || !stringKey) {\r\n        return null;\r\n    }\r\n\r\n    var languageKeys = Object.keys(abilityStrings.Tokens);\r\n    var matchingKeys = languageKeys.filter((key) => {\r\n        if (key.includes(stringKey)) {\r\n            return key;\r\n        } else {\r\n            return null;\r\n        }\r\n    });\r\n\r\n    if (matchingKeys && matchingKeys.length > 0) {\r\n        var displayName = abilityStrings.Tokens[matchingKeys[0]];\r\n        return displayName;\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport function tryGetDotaLocalizedString(dotaStrings, stringKey) {\r\n    if (!dotaStrings || !stringKey) {\r\n        return null;\r\n    }\r\n\r\n    var languageKeys = Object.keys(dotaStrings.Tokens);\r\n    var matchingKeys = languageKeys.filter((key) => {\r\n        if (key.includes(stringKey)) {\r\n            return key;\r\n        } else {\r\n            return null;\r\n        }\r\n    });\r\n\r\n    if (matchingKeys && matchingKeys.length > 0) {\r\n        var displayName = dotaStrings.Tokens[matchingKeys[0]];\r\n        return displayName;\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\n/// Gets a string from the dota strings that contain the prefix \"DOTA_Toolip_\"\r\n/// Useful for getting general tooltip UI strings\r\nexport function getTooltipString(dotaStrings, tooltipKey) {\r\n    if (!dotaStrings || !tooltipKey) {\r\n        return null;\r\n    }\r\n\r\n    if (!tooltipKey.includes(\"DOTA_ToolTip_\")) {\r\n        tooltipKey = \"DOTA_ToolTip_\" + tooltipKey;\r\n    }\r\n    var match = dotaStrings.Tokens[tooltipKey];\r\n    return match;\r\n}\r\n\r\n/// Gets a string from the abilities strings that contain the prefix \"DOTA_Tooltip_ability\"\r\n/// Useful for retrieving localized strings of ability names\r\nexport function getTooltipAbilityString(abilityStrings, abilityKey) {\r\n    if (!abilityStrings || !abilityKey) {\r\n        return null;\r\n    }\r\n    if (!abilityKey.includes(\"DOTA_Tooltip_ability\")) {\r\n        abilityKey = \"DOTA_Tooltip_ability_\" + abilityKey;\r\n    }\r\n    var match = abilityStrings.Tokens[abilityKey];\r\n    return match;\r\n}","import React, { Component } from 'react';\r\n\r\nimport {\r\n    calculateSpellDamage\r\n} from \"../../utility/calculate\";\r\nimport { getAbilityBehaviours } from \"../../utility/dataHelperAbilities\";\r\nimport { \r\n    tryGetAbilityLocalizedString, \r\n    getTooltipString,\r\n    getTooltipAbilityString\r\n} from \"../../utility/data-helpers/language\";\r\n\r\n/// Retrieves ability damage and returns display value\r\nfunction parseDamage(abilInfo, abilLvl, items, neutral, talents) {\r\n    let abilDmg = calculateSpellDamage(abilInfo, abilLvl, items, neutral, talents);\r\n    if (abilDmg) {\r\n        return abilDmg.damage;\r\n    } else {\r\n        return \"Unable to find dmg\";\r\n    }\r\n}\r\n\r\nfunction getAbilityNameFromStrings(abilityStrings, abilityName) {\r\n    if (abilityStrings && abilityName) {\r\n        return tryGetAbilityLocalizedString(abilityStrings, abilityName);\r\n    } else {\r\n        return \"?\";\r\n    }\r\n}\r\n\r\nfunction TypeValueUI (props) {\r\n    return (\r\n        <div className=\"d-flex\" style={{ fontSize: \"0.85rem\"}}>\r\n            <div className=\"mr-2\">{props.type}</div>\r\n            <div>{props.value}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nclass DamageOutput extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            ability: props.ability,\r\n            abilityInfo: props.abilityInfo,\r\n            levelInfo: props.levelInfo,\r\n\r\n            items: props.items,\r\n            neutral: props.neutral,\r\n            selectedTalents: props.selectedTalents,\r\n\r\n            abilityBehaviours: getAbilityBehaviours(props.abilityInfo),\r\n\r\n            abilityStrings: props.abilityStrings,\r\n            dotaStrings: props.dotaStrings,\r\n        };\r\n\r\n        this.updateAbilityBehaviours = this.updateAbilityBehaviours.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(prevProps.abilityInfo !== this.props.abilityInfo) {\r\n            this.setState({ \r\n                abilityInfo: this.props.abilityInfo,\r\n                abilityBehaviours: getAbilityBehaviours(this.props.abilityInfo),\r\n            });\r\n        }\r\n\r\n        if (prevProps.levelInfo !== this.props.levelInfo) {\r\n            this.setState({ levelInfo: this.props.levelInfo });\r\n        }\r\n\r\n        if (prevProps.items !== this.props.items) {\r\n            this.setState({ items: this.props.items });\r\n        }\r\n\r\n        if (prevProps.neutral !== this.props.neutral) {\r\n            this.setState({ neutral: this.props.neutral });\r\n        }\r\n\r\n        if (prevProps.selectedTalents !== this.props.selectedTalents) {\r\n            this.setState({ selectedTalents: this.props.selectedTalents });\r\n        }\r\n\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ abilityStrings: this.props.abilityStrings });\r\n        }\r\n        if (prevProps.dotaStrings !== this.props.dotaStrings) {\r\n            this.setState({ dotaStrings: this.props.dotaStrings });\r\n        }\r\n    }\r\n\r\n    updateAbilityBehaviours() {\r\n        let allBehaviours = getAbilityBehaviours(this.state.abilityInfo);\r\n        this.setState({ abilityBehaviours: allBehaviours });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h5>{getTooltipAbilityString(this.state.abilityStrings, this.state.ability)}</h5>\r\n                <div className=\"mb-2\">\r\n                    {\r\n                        this.state.abilityBehaviours && this.state.abilityBehaviours.map((value, index) => {\r\n                            return (\r\n                                <TypeValueUI \r\n                                    key={index}\r\n                                    type={getTooltipString(this.state.dotaStrings, value.key)} \r\n                                    value={value.value} />\r\n                            );\r\n                        })\r\n                    }\r\n                </div>\r\n                <h6>\r\n                    Damage: {' '}\r\n                    { parseDamage(this.state.abilityInfo, this.state.levelInfo?.level, this.state.items, this.state.neutral, this.state.selectedTalents) }\r\n                </h6>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DamageOutput;","import React, { Component } from 'react';\r\nimport {\r\n    calculateAbilityCooldown\r\n} from \"../../utility/calculate\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faClock }from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nclass Cooldown extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            abilityLevel: props.abilityLevel,\r\n            abilityCooldown: props.cooldown,\r\n\r\n            ability: props.ability,\r\n            items: props.items,\r\n            neutral: props.neutral,\r\n            selectedTalents: props.selectedTalents,\r\n        };\r\n\r\n        this.updateCooldown = this.updateCooldown.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                abilityLevel: this.props.abilityLevel,\r\n                abilityCooldown: this.props.cooldown,\r\n\r\n                ability: this.props.ability,\r\n                items: this.props.items,\r\n                neutral: this.props.neutral,\r\n                selectedTalents: this.props.selectedTalents,\r\n            });\r\n        }\r\n    }\r\n\r\n    updateCooldown() {\r\n        let currentCooldown = null;\r\n        if (this.state.abilityCooldown) {\r\n            currentCooldown = calculateAbilityCooldown(this.state.ability, this.state.abilityLevel, this.state.items, this.state.neutral, this.state.selectedTalents);\r\n        }\r\n\r\n        return currentCooldown;\r\n    }\r\n    \r\n    render() {\r\n        let cooldown = this.updateCooldown();\r\n        return (\r\n            <div>\r\n                {\r\n                    cooldown &&\r\n                        <div className=\"d-flex\">\r\n                            <FontAwesomeIcon className=\"my-auto mr-1\" icon={faClock} />\r\n                            <div>{cooldown}</div>\r\n                        </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Cooldown;","import React, { Component } from 'react';\r\nimport { \r\n    calculateManaCost \r\n} from '../../utility/calculate';\r\n\r\nclass ManaCost extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            ability: props.ability,\r\n            abilityLevel: props.abilityLevel,\r\n\r\n            items: props.items,\r\n            neutral: props.neutral,\r\n            selectedTalents: props.selectedTalents,\r\n        };\r\n\r\n        this.updateMana = this.updateMana.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                ability: this.props.ability,\r\n                abilityLevel: this.props.abilityLevel,\r\n\r\n                items: this.props.items,\r\n                neutral: this.props.neutral,\r\n                selectedTalents: this.props.selectedTalents,\r\n            });\r\n        }\r\n    }\r\n\r\n    updateMana() {\r\n        let manaCost = -1;\r\n        if (this.state.ability) {\r\n            manaCost = calculateManaCost(this.state.ability, this.state.abilityLevel, this.state.items, this.state.neutral, this.state.selectedTalents);\r\n        }\r\n        \r\n        // this.setState({\r\n        //     abilityManaCost: manaCost,\r\n        // });\r\n        return manaCost;\r\n    }\r\n\r\n    render() {\r\n        let manaCost = this.updateMana();\r\n        return (\r\n            <div>\r\n                { \r\n                    manaCost &&\r\n                        <div className=\"mana-cost d-flex\">\r\n                            <div className=\"my-auto mr-1\" style={{ \r\n                                height: \"10px\",\r\n                                width: \"10px\",\r\n                                backgroundColor: \"rgb(69, 148, 207)\",\r\n                            }}/>\r\n                            <div>{ manaCost }</div>\r\n                        </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ManaCost;","import React, { Component } from 'react';\r\nimport {\r\n    Row, \r\n    Col,\r\n    Button\r\n} from \"react-bootstrap\";\r\n\r\nimport { DOTAAbilities } from \"../../data/dota2/json/npc_abilities.json\";\r\n\r\nimport DamageOutput from \"./DamageOutput\";\r\nimport Cooldown from \"./Cooldown\";\r\nimport ManaCost from \"./ManaCost\";\r\nimport \"./Abilities.css\";\r\n\r\nfunction getAbilityLevel (levelInfo, abilityIndex, abilityInfo, onLevelChanged) {\r\n    if (levelInfo && abilityInfo)\r\n    {\r\n        /// Determine max level of ability\r\n        var maxLvl = abilityInfo.AbilityType === \"DOTA_ABILITY_TYPE_ULTIMATE\" ? 3 : 4;\r\n        if (abilityInfo.MaxLevel)\r\n            maxLvl = parseInt(abilityInfo.MaxLevel);\r\n        \r\n        var html = [];\r\n        for(var i = 0; i < maxLvl; i++) {\r\n            html.push(\r\n                <Button \r\n                    key={i} \r\n                    variant=\"outline-secondary\"\r\n                    onClick={(e) => onLevelChanged(e)}\r\n                    data-lvlindex={abilityIndex}\r\n                    data-btnindex={i}>\r\n                    <div className={ i < levelInfo.level ? \"levelled\" : \"unlevelled\"}></div>\r\n                </Button>\r\n            );\r\n        }\r\n        return html;\r\n    }\r\n    else\r\n    {\r\n        return <div>?</div>\r\n    }\r\n}\r\n\r\nfunction getLevelInfo (abilities) {\r\n    if (abilities) {\r\n        return abilities.map((abil, index) => {\r\n            return { ability: index, level: 1 };\r\n        });\r\n    }\r\n    return [ ];\r\n}\r\n\r\nclass Abilities extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        var abils = this.filterAbilities(props.abilities);\r\n        var abilLevels = getLevelInfo(abils);\r\n\r\n        this.state = {\r\n            abilities: abils,\r\n            abilityLevels: abilLevels,\r\n            items: props.items,\r\n            neutral: props.neutral,\r\n            selectedTalents: props.selectedTalents,\r\n\r\n            abilityStrings: props.abilityStrings,\r\n            dotaStrings: props.dotaStrings,\r\n\r\n            displayDamage: props.displayDamage,\r\n        };\r\n        \r\n        this.onLevelChanged = this.onLevelChanged.bind(this);\r\n        this.filterAbilities = this.filterAbilities.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        //Update if previous props have changed\r\n        if (prevProps.abilities !== this.props.abilities) {\r\n            var abils = this.filterAbilities(this.props.abilities);\r\n            this.setState({\r\n                abilities: abils,\r\n                abilityLevels: getLevelInfo(abils),\r\n            });\r\n        }\r\n\r\n        if (prevProps.items !== this.props.items) {\r\n            this.setState({ items: this.props.items });\r\n        }\r\n        if (prevProps.neutral !== this.props.neutral) {\r\n            this.setState({ neutral: this.props.neutral });\r\n        }\r\n        if (prevProps.selectedTalents !== this.props.selectedTalents) {\r\n            this.setState({ selectedTalents: this.props.selectedTalents });\r\n        }\r\n\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ abilityStrings: this.props.abilityStrings });\r\n        }\r\n        if (prevProps.dotaStrings !== this.props.dotaStrings) {\r\n            this.setState({ dotaStrings: this.props.dotaStrings });\r\n        }\r\n    }\r\n    \r\n    // Remove any undefined, hidden abilities\r\n    filterAbilities(abils) {\r\n        if (abils) {\r\n            return abils.filter(function (val) {\r\n                return val && val !== \"generic_hidden\";\r\n            });\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    onLevelChanged(e) {\r\n        // If click on inner element\r\n        if (e.target.tagName.toLowerCase() !== \"button\") {\r\n            e.target = e.target.parentElement;\r\n        }\r\n\r\n        var levelIndex = parseInt(e.target.dataset.lvlindex);\r\n        var abilities = this.state.abilityLevels;\r\n        var targetLevel = parseInt(e.target.dataset.btnindex) + 1;\r\n        // Clicked same level, set to 0\r\n        if (abilities[levelIndex].level === targetLevel) {\r\n            abilities[levelIndex].level = 0;\r\n        } else {\r\n            // Set Level's new value to which btn was pressed\r\n            abilities[levelIndex].level = targetLevel;\r\n        }\r\n\r\n        this.setState({\r\n            abilityLevels: abilities,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Row>\r\n                {\r\n                    this.state.abilities && this.state.abilities.map((value, index) => {\r\n                        // Info about the ability\r\n                        var ability = DOTAAbilities[value];\r\n                        if (!ability) {\r\n                            console.log(`Unable to find info on ability '${value}'`);\r\n                        }\r\n                        // Current level of the ability\r\n                        var levelInfo = this.state.abilityLevels.find(abilVal => abilVal.ability === index);\r\n                        if (!levelInfo) {\r\n                            debugger;\r\n                        }\r\n\r\n                        //console.log(levelInfo);\r\n                        if (!ability && value) {\r\n                            return <div key={value}>?</div>\r\n                        }\r\n\r\n                        // Dont add any scepter abilities unless hero has scepter\r\n                        if (ability && ability.IsGrantedByScepter && this.state.items.filter(item => item.item === \"ultimate_scepter\").length <= 0) {\r\n                            return;\r\n                        }\r\n                        return (\r\n                            <Col key={ability.ID} className=\"d-flex flex-column justify-content-top\">\r\n                                <img\r\n                                    className=\"h-100 align-self-center\"\r\n                                    style={{ maxWidth: \"90px\", maxHeight: \"90px\" }}\r\n                                    src={`http://cdn.dota2.com/apps/dota2/images/abilities/${value}_hp1.png`} \r\n                                    alt={ability.ID} />\r\n                                <Row className=\"px-4\">\r\n                                    <Col md={6}>\r\n                                        {/* Cooldown */}\r\n                                        <Cooldown \r\n                                            ability={ability} \r\n                                            abilityLevel={levelInfo.level} \r\n                                            cooldown={ability.AbilityCooldown}\r\n                                            items={this.state.items}\r\n                                            neutral={this.state.neutral}\r\n                                            selectedTalents={this.state.selectedTalents} />\r\n                                    </Col>\r\n                                    <Col md={6}>\r\n                                        {/* Mana Cost */}\r\n                                        <ManaCost \r\n                                            ability={ability}\r\n                                            abilityLevel={levelInfo.level} \r\n                                            items={this.state.items}\r\n                                            neutral={this.state.neutral}\r\n                                            selectedTalents={this.state.selectedTalents} />\r\n                                    </Col>\r\n                                </Row>\r\n                                <div className=\"align-self-center pt-2 d-flex\">\r\n                                    {\r\n                                        this.state.abilityLevels && !ability.IsGrantedByScepter && getAbilityLevel(levelInfo, index, ability, this.onLevelChanged)\r\n                                    }\r\n                                </div>\r\n                                <div className=\"mx-auto mt-2\">\r\n                                        {\r\n                                            this.state.displayDamage && \r\n                                                <DamageOutput \r\n                                                    ability={value}\r\n                                                    abilityInfo={ability} \r\n                                                    levelInfo={levelInfo}\r\n                                                    items={this.state.items}\r\n                                                    neutral={this.state.neutral} \r\n                                                    selectedTalents={this.state.selectedTalents} \r\n                                                    abilityStrings={this.state.abilityStrings} \r\n                                                    dotaStrings={this.state.dotaStrings} />\r\n                                        }\r\n                                </div>\r\n                            </Col>\r\n                        );\r\n                    })\r\n                }\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Abilities;","import Abilities from \"./Abilities\";\r\n\r\nexport default Abilities;","import React, { Component } from 'react';\r\nimport {\r\n    Tabs,\r\n    Tab,\r\n    Button,\r\n    Form,\r\n    ListGroup\r\n} from \"react-bootstrap\";\r\nimport { DOTAAbilities } from \"../../data/dota2/json/items.json\";\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faMinus } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport {\r\n    itemNameToElement\r\n} from \"../../utils\";\r\n\r\nimport \"./ItemSelector.css\";\r\nimport \"../../css/dota_items.css\";\r\n\r\nfunction getItemsByQuality(itemsArray, matchArray) {\r\n    return itemsArray.filter((itemInfo) => {\r\n        var quality = itemInfo.item.ItemQuality;\r\n        if (quality) { //(quality === \"consumable\" || quality === \"component\" || quality === \"secret_shop\")) {\r\n            for(var i = 0; i < matchArray.length; i++) {\r\n                if (quality === matchArray[i]) {\r\n                    return itemInfo;\r\n                }\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction filterItemName (name) {\r\n    var item = name.split('_');\r\n    item.shift();\r\n    item = item.join('_');\r\n    return item;\r\n}\r\n\r\nfunction getItemIcon(item, width, height, scale) {\r\n    // Remove 'item_' prefix, split by _, remove \"item\" and join again\r\n    item = filterItemName(item);\r\n\r\n    // Width and height of each item in item_stylesheet\r\n    if (item) {\r\n        return <span className={ 'sprite sprite-' + item + '_png '} alt={item} data-item={item} style={{ transform: `scale(${scale}, ${scale})`, transformOrigin: \"top left\" }} />\r\n    } else {\r\n        return <span style={{ backgroundColor: \"#212121\", width: width, height: height, transform: `scale(${scale}, ${scale})`, display: \"block\", transformOrigin: \"top left\" }} />\r\n    }\r\n}\r\n\r\nfunction ItemFromInfo(props) {\r\n    return (\r\n            <div \r\n                key={props.keyName} \r\n                title={props.item.name} \r\n                onClick={props.onClick}\r\n                className=\"m-1\" \r\n                style={{ width: `calc(88px * ${props.scale})`, height: `calc(64px * ${props.scale})` }}>\r\n                { \r\n                    getItemIcon(props.item.name, \"88px\", \"64px\", props.scale) \r\n                }\r\n            </div>\r\n    );\r\n}\r\n\r\nfunction TabHeading(props) {\r\n    return (\r\n        <h6 className=\"px-3 mb-0\">{props.text}</h6>\r\n    );\r\n}\r\n\r\nclass ItemSelector extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        var selectableItems = Object.keys(DOTAAbilities).filter((value) => {\r\n            var key = value.toLowerCase();\r\n            var ability = DOTAAbilities[value];\r\n            if (key !== \"version\" && !key.includes(\"recipe\") && !ability.ItemIsNeutralDrop && !ability.IsObsolete) {\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n        // Convert keys to item data\r\n        selectableItems = selectableItems.map((key) => {\r\n            return {\r\n                item:  DOTAAbilities[key],\r\n                name: key,\r\n            };\r\n        })\r\n        selectableItems.sort();\r\n\r\n        var basicItems = getItemsByQuality(selectableItems, [\"consumable\", \"component\", \"secret_shop\"]);\r\n        var upgradesItems = getItemsByQuality(selectableItems, [\"common\", \"rare\", \"epic\", \"artifact\"]);\r\n\r\n        this.state = {\r\n            allItems: selectableItems,\r\n            queryItems: null,\r\n\r\n            onSelectedItem: props.onSelectedItem,\r\n\r\n            basicItems: basicItems,\r\n            upgradesItems: upgradesItems,\r\n        };\r\n\r\n        this.onSearchChanged = this.onSearchChanged.bind(this);\r\n        this.onSearchItemSelected = this.onSearchItemSelected.bind(this);\r\n        this.onShopItemSelected = this.onShopItemSelected.bind(this);\r\n        this.onRemoveItemSelected = this.onRemoveItemSelected.bind(this);\r\n    }\r\n\r\n    onSearchChanged(e) {\r\n        var query = e.target.value;\r\n        var filteredItems = null;\r\n        if (query) {\r\n            filteredItems = this.state.allItems.filter((item) => {\r\n                return item.name.indexOf(query.toLowerCase()) !== -1; \r\n            });\r\n        }\r\n\r\n        this.setState({\r\n            queryItems: filteredItems,\r\n        });\r\n    }\r\n\r\n    onSearchItemSelected(e) {\r\n        var val = e.target.dataset?.item;\r\n        this.state.onSelectedItem(val);\r\n    }\r\n\r\n    onShopItemSelected (e) {\r\n        var item = e.target.dataset?.item;\r\n        this.state.onSelectedItem(item);\r\n    }\r\n\r\n    onRemoveItemSelected(e) {\r\n        var item = null;\r\n        this.state.onSelectedItem(item);\r\n    }\r\n\r\n    render() {\r\n        var scale = 0.5;\r\n        var searchIconScale = 0.45;\r\n        return (\r\n            <div className=\"item-card\">\r\n                <div className=\"item-card header d-flex\">\r\n                    <div>\r\n                        <Form.Control type=\"text\" placeholder=\"Search...\" onChange={this.onSearchChanged}/>\r\n                    </div>\r\n                    <div className=\"ml-auto\">\r\n                        <Button variant=\"outline-danger\" onClick={this.onRemoveItemSelected}>\r\n                            <FontAwesomeIcon icon={faMinus} />\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"item-card content\">\r\n                    <div className=\"\">\r\n                        {\r\n                            this.state.queryItems && \r\n                            <div>\r\n                                <h6>SEARCH RESULTS</h6>\r\n                                <ListGroup>\r\n                                    {\r\n                                        // Query search term\r\n                                        this.state.queryItems.map((item) => {\r\n                                            var itemNameDisplay = filterItemName(item.name);\r\n                                            return (\r\n                                                <ListGroup.Item \r\n                                                    key={item.name} \r\n                                                    data-item={itemNameDisplay} \r\n                                                    className=\"py-1 px-3\"\r\n                                                    onClick={this.onSearchItemSelected} \r\n                                                    action>\r\n                                                    <div className=\"d-flex\" data-item={itemNameDisplay}>\r\n                                                        <ItemFromInfo \r\n                                                            item={item}\r\n                                                            onClick={this.onSearchItemSelected} \r\n                                                            scale={searchIconScale}/>\r\n\r\n                                                        <h6 className=\"mx-1 my-auto\" data-item={itemNameDisplay}>\r\n                                                            { itemNameDisplay }\r\n                                                        </h6>\r\n                                                    </div>\r\n                                                </ListGroup.Item>\r\n                                            )\r\n                                        })\r\n                                    }   \r\n                                </ListGroup>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                    {/* Regular view */}\r\n                    {\r\n                        !this.state.queryItems && \r\n                            <div>\r\n                                <Tabs defaultActiveKey=\"basic\" transition={false} id=\"shop-tabs\">\r\n                                    <Tab eventKey=\"basic\" title={<TabHeading text=\"BASIC\" />}>\r\n                                        <div className=\"d-flex flex-wrap\">\r\n                                            {\r\n                                                this.state.basicItems && this.state.basicItems.map((item) => {\r\n                                                    return (\r\n                                                        <ItemFromInfo \r\n                                                            key={item.item.ID}\r\n                                                            item={item}\r\n                                                            onClick={this.onShopItemSelected} \r\n                                                            scale={scale} />\r\n                                                    )\r\n                                                })\r\n                                            }\r\n                                        </div>\r\n                                    </Tab>\r\n                                    <Tab eventKey=\"upgrades\" title={<TabHeading text=\"UPGRADES\" />}>\r\n                                        <div className=\"d-flex flex-wrap\">\r\n                                            {\r\n                                                this.state.upgradesItems && this.state.upgradesItems.map((item) => {\r\n                                                    return (\r\n                                                        <ItemFromInfo \r\n                                                            key={item.item.ID}\r\n                                                            item={item}\r\n                                                            onClick={this.onShopItemSelected} \r\n                                                            scale={scale} />\r\n                                                    );\r\n                                                })\r\n                                            }\r\n                                        </div>\r\n                                    </Tab>\r\n                                </Tabs>\r\n                            </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ItemSelector;","import React, { Component } from 'react';\r\nimport Popup from 'reactjs-popup';\r\n\r\nimport ItemSelector from \"./ItemSelector\";\r\n\r\nimport \"../../css/dota_hero_icons_big.css\";\r\n\r\n/// Single item that contains a popup to change the item\r\nclass Item extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            item: props.item,\r\n            slot: props.slot,\r\n            isBackpack: props.isBackpack,\r\n\r\n            onItemChanged: props.onItemChanged,\r\n        };\r\n\r\n        //console.log(`slot: ${this.state.slot} - item: ${this.state.item}`);\r\n        this.getItemIcon = this.getItemIcon.bind(this);\r\n        this.onSelectedItem = this.onSelectedItem.bind(this);\r\n    }\r\n\r\n    getItemIcon(item, width, height, scale) {\r\n        // Width and height of each item in item_stylesheet\r\n        if (item) {\r\n            return <span className={ 'sprite sprite-' + item + '_png '} alt={item} style={{ transform: `scale(${scale}, ${scale})`, transformOrigin: \"top left\" }} />\r\n        } else {\r\n            return <span style={{ backgroundColor: \"#212121\", width: width, height: height, transform: `scale(${scale}, ${scale})`, display: \"block\", transformOrigin: \"top left\" }} />\r\n        }\r\n    }\r\n\r\n    onSelectedItem (item) {\r\n        this.setState({\r\n            open: false,\r\n        });\r\n        \r\n        this.state.onItemChanged({ \r\n            slot: this.state.slot, \r\n            item: item,\r\n            isBackpack: this.state.isBackpack ? true : false,\r\n        });\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.item !== this.props.item) {\r\n            this.setState({ item: this.props.item, });\r\n        }\r\n\r\n        if (prevProps.slot !== this.props.slot) {\r\n            this.setState({ slot: this.props.slot });\r\n        }\r\n\r\n        if (prevProps.isBackpack !== this.props.isBackpack) {\r\n            this.setState({ isBackpack: this.props.isBackpack });\r\n        }\r\n    }   \r\n\r\n    render() {\r\n        var scale = 0.7;\r\n        var width = \"88px\";\r\n        var height = \"64px\";\r\n        return (\r\n            <div>\r\n                <Popup\r\n                    trigger={isOpen => (\r\n                        <div className=\"m-1\" style={{ width: `calc(88px * ${scale})`, height: `calc(64px * ${scale})` }}  onClick={() => this.setState({ open: isOpen })}>\r\n                            {  this.getItemIcon(this.state.item, width, height, 0.7) }\r\n                        </div>\r\n                    )}\r\n                    open={this.state.open}\r\n                    position=\"right center\"\r\n                    contentStyle={{ width: \"350px\", height: \"400px\", overflowY: \"auto\" }}>\r\n                        <ItemSelector onSelectedItem={this.onSelectedItem} />\r\n                </Popup>\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default Item;","import React, { Component } from 'react';\r\nimport {\r\n    Button\r\n} from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faMinus } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport { itemNameToElement } from \"../../utils\";\r\nimport {\r\n    getAllNeutrals\r\n} from \"../../utility/dataHelperItems\";\r\n\r\nimport \"./NeutralItemSelector.css\";\r\n\r\nclass NeutralItemSelector extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            allNeutrals: getAllNeutrals(),\r\n            iconScale: 0.5,\r\n            onNewNeutralSelected: props.onNeutralSelected,\r\n        };\r\n\r\n        this.onNeutralSelected = this.onNeutralSelected.bind(this);\r\n    }\r\n\r\n    onNeutralSelected(e) {\r\n        var neutral = e.target.parentElement.parentElement.dataset.neutral;\r\n        this.state.onNewNeutralSelected({ item: neutral });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"neutral-item-card\" style={{ color: \"black\" }}>\r\n                <div className=\"neutral-item-card header d-flex\">\r\n                    <h5 className=\"my-auto\">NEUTRAL ITEMS</h5>\r\n                    <Button className=\"ml-auto\" variant=\"outline-danger\" onClick={this.onNeutralSelected} data-neutral={null}>\r\n                        <FontAwesomeIcon icon={faMinus} data-neutral={null} />\r\n                    </Button>\r\n                </div>\r\n                <div className=\"neutral-item-card content\">\r\n                    <div className=\"d-flex flex-wrap\">\r\n                        {\r\n                            this.state.allNeutrals && this.state.allNeutrals.map((itemInfo) => {\r\n                                return ( \r\n                                    <div \r\n                                        className=\"m-1\" \r\n                                        key={itemInfo.item} \r\n                                        onClick={this.onNeutralSelected} \r\n                                        title={itemInfo.item}\r\n                                        data-neutral={itemInfo.item}>\r\n                                        { itemNameToElement(itemInfo, this.state.iconScale) }\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NeutralItemSelector;","import Neutral from \"./Neutral\";\r\n\r\nexport default Neutral;","import React, { Component } from 'react';\r\nimport Popup from \"reactjs-popup\";\r\n\r\nimport NeutralItemSelector from \"./NeutralItemSelector\";\r\n\r\nimport { itemNameToElement } from \"../../utils\";\r\n\r\nclass Neutral extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            neutralItem: props.neutralItem,\r\n            iconScale: 0.7,\r\n            onNewNeutralSelected: props.onNewNeutralSelected,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate (prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                neutralItem: this.props.neutralItem,\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Popup\r\n                    trigger={isOpen => {\r\n                        return itemNameToElement(this.state.neutralItem, this.state.iconScale)\r\n                    }}\r\n                    position=\"right center\"\r\n                    contentStyle={{ width: \"325px\", overflowY: \"auto\" }}>\r\n                    <NeutralItemSelector onNeutralSelected={this.state.onNewNeutralSelected} />\r\n                </Popup>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Neutral;","import React, { Component } from 'react';\r\nimport {\r\n    Row, \r\n    Col\r\n} from \"react-bootstrap\";\r\n\r\nimport Item from \"./Item\";\r\nimport Neutral from \"../Neutral\";\r\n\r\nclass ItemsBar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            items: props.items,\r\n            backpack: props.backpack,\r\n            neutral: props.neutral,\r\n            iconScale: 0.7,\r\n\r\n            onNeutralChanged: props.onNeutralChanged,\r\n            onItemChanged: props.onItemChanged,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        //Update if previous props have changed\r\n        if (prevProps.items !== this.props.items) {\r\n            this.setState({\r\n                items: this.props.items,\r\n            });\r\n        }\r\n\r\n        if (prevProps.backpack !== this.props.backpack) {\r\n            this.setState({\r\n                backpack: this.props.backpack,\r\n            });\r\n        }\r\n\r\n        if (prevProps.neutral !== this.props.neutral) {\r\n            this.setState({\r\n                neutral: this.props.neutral,\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        var itemsColWidth = 5;\r\n        var backpackColWidth = 5;\r\n        var neutralColWidth = 2;\r\n        return (\r\n            <div>\r\n                <Row>\r\n                    <Col md={itemsColWidth}>\r\n                        <h6>ITEMS</h6>\r\n                        <div className=\"d-flex flex-wrap\">\r\n                            {\r\n                                this.state.items && this.state.items.map((value) => {\r\n                                    return (\r\n                                        <Item \r\n                                            key={value.slot}\r\n                                            slot={value.slot}\r\n                                            item={value.item} \r\n                                            onItemChanged={this.state.onItemChanged} />\r\n                                    )\r\n                                })\r\n                            }\r\n                        </div>\r\n                    </Col>\r\n                    <Col md={backpackColWidth}>\r\n                        <h6>BACKPACK</h6>\r\n                        <div className=\"d-flex flex-wrap\">\r\n                            {\r\n                                this.state.backpack && this.state.backpack.map((value) => {\r\n                                    return (\r\n                                        <Item\r\n                                            key={value.slot}\r\n                                            slot={value.slot}\r\n                                            item={value.item}\r\n\r\n                                            isBackpack={true}\r\n                                            onItemChanged={this.state.onItemChanged} />\r\n                                    )\r\n                                })\r\n                            }\r\n                        </div>\r\n                    </Col>\r\n                    <Col md={neutralColWidth}>\r\n                        <h6>NEUTRAL</h6>\r\n                        {/* Neutral Item */}\r\n                        <div>\r\n                            <Neutral neutralItem={this.state.neutral} onNewNeutralSelected={this.state.onNeutralChanged} />\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ItemsBar;","import ItemsBar from \"./ItemsBar\";\r\n\r\nexport default ItemsBar;","import React, { Component } from 'react';\r\n\r\nimport { EAttributes } from \"../../enums/attributes.js\";\r\n\r\nimport \"./Attributes.css\";\r\n\r\nfunction parse(value) {\r\n    return parseFloat(value).toFixed(2);\r\n}\r\n\r\nfunction Attribute(props) {\r\n    return (\r\n        <div className=\"d-flex my-2\">\r\n            <div className={props.isPrimaryAttribute ? \" primary-attribute\" : \"\"}>\r\n                <span className={'attribute ' + props.type} alt=\"attribute\" />\r\n            </div>\r\n            <div className=\"ml-2\">{props.value}</div>\r\n            <div className=\"px-1\">+</div>\r\n            <div>{props.per}</div>\r\n            <div className=\"px-1\">per level</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nclass Attributes extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            hero: props.hero,\r\n            level: props.heroLevel,\r\n            items: props.items,\r\n            talents: props.talents,\r\n            neutral: props.neutral,\r\n            abilities: props.abilities,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                hero: this.props.hero,\r\n                level: this.props.heroLevel,\r\n                items: this.props.items,\r\n                talents: this.props.talents,\r\n                neutral: this.props.neutral,\r\n                abilities: this.props.abilities,\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h5>STATS</h5>\r\n                <h6>ATTRIBUTES</h6>\r\n                <Attribute \r\n                    type={\"strength\"} \r\n                    value={parse(this.state.hero?.AttributeBaseStrength)} \r\n                    per={parse(this.state.hero?.AttributeStrengthGain)} \r\n                    isPrimaryAttribute={this.state.hero?.AttributePrimary === EAttributes.ATTR_STRENGTH}/>\r\n\r\n                <Attribute \r\n                    type=\"agility\"\r\n                    value={parse(this.state.hero?.AttributeBaseAgility)}\r\n                    per={parse(this.state.hero?.AttributeAgilityGain)} \r\n                    isPrimaryAttribute={this.state.hero?.AttributePrimary === EAttributes.ATTR_AGILITY} />\r\n\r\n                <Attribute \r\n                    type=\"intelligence\" \r\n                    value={parse(this.state.hero?.AttributeBaseIntelligence)}\r\n                    per={parse(this.state.hero?.AttributeIntelligenceGain)} \r\n                    isPrimaryAttribute={this.state.hero?.AttributePrimary === EAttributes.ATTR_INTELLIGENCE} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Attributes;","import Attributes from \"./Attributes\";\r\n\r\nexport default Attributes;","import React, { Component } from 'react';\r\nimport {\r\n    Row, Col\r\n} from \"react-bootstrap\";\r\n\r\nimport {\r\n    calculateHealthRegen,\r\n    calculateManaRegen,\r\n    calculateMainArmor,\r\n    calculateTotalSpellAmp,\r\n    calculateStatusResist,\r\n    calculateMagicResist,\r\n    calculatePhysicalResist,\r\n    calculateEvasion,\r\n    calculateRightClickDamage,\r\n    calculateAttackTime,\r\n    calculateMoveSpeed,\r\n    calculateAttackRange\r\n} from \"../../utility/calculate\";\r\nimport { \r\n    getPrimaryAttributeStats\r\n} from '../../utility/dataHelperHero';\r\n\r\nfunction StatArray(props) {\r\n    return (\r\n        <div style={{ backgroundColor: \"#171717\", color: \"white\", fontSize: \"0.8rem\" }} className=\"p-2 h-100\">\r\n            <h6 className=\"ml-auto\">{props.title}</h6>\r\n            {\r\n                props.stats &&\r\n                    props.stats.map((value) => {\r\n                        return (<Row key={value.name}>\r\n                            <Col md={6}>\r\n                                {value.name}\r\n                            </Col>\r\n                            <Col md={6}>\r\n                                {value.value}\r\n                            </Col>\r\n                        </Row>\r\n                        );\r\n                    })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\n/// Gets the attack min/max and formats it for display in UI\r\nfunction formatAttackMinMax(hero, lvl, items, neutral, abilities, talents) {\r\n    let standardAtkDmg = calculateRightClickDamage(hero, lvl, items, neutral, abilities, talents);\r\n    return `${standardAtkDmg.min} - ${standardAtkDmg.max}`;\r\n}\r\n\r\n/// Gets the atk time and formats it to display in UI\r\nfunction formatAttackTime(hero, lvl, items, neutral, abilities, talents) {\r\n    let attackInfo = calculateAttackTime(hero, lvl, items, neutral, abilities, talents);\r\n    return `${attackInfo.attackSpeed} (${attackInfo.attackTime} s)`;\r\n}\r\n\r\nclass Statistics extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            hero: props.hero,\r\n            level: props.heroLevel,\r\n            talents: props.talents,\r\n            items: props.items,\r\n            neutral: props.neutral,\r\n            abilities: props.abilities,\r\n        };\r\n\r\n        this.updateStatistics = this.updateStatistics.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateStatistics()\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        \r\n        if (prevProps.hero !== this.props.hero) {\r\n            this.setState({ \r\n                hero: this.props.hero \r\n            }, () => {\r\n                this.updateStatistics();\r\n            });\r\n        }\r\n        if (prevProps.items !== this.props.items) {\r\n            this.setState({ \r\n                items: this.props.items \r\n            }, () => {\r\n                this.updateStatistics();\r\n            });\r\n        }\r\n        if (prevProps.neutral !== this.props.neutral) {\r\n            this.setState({ \r\n                neutral: this.props.neutral, \r\n            }, () => {\r\n                this.updateStatistics();\r\n            });\r\n        }\r\n        if (prevProps.talents !== this.props.talents) {\r\n            this.setState({ \r\n                talents: this.props.talents \r\n            }, () => {\r\n                this.updateStatistics();\r\n            });\r\n        }\r\n        if (prevProps.abilities !== this.props.abilities) {\r\n            this.setState({ \r\n                abilities: this.props.abilities \r\n            }, () => {\r\n                this.updateStatistics();\r\n            });\r\n        }\r\n        if (prevProps.heroLevel !== this.props.heroLevel) {\r\n            this.setState({ \r\n                level: this.props.heroLevel \r\n            }, () => {\r\n                this.updateStatistics();\r\n            });\r\n        }\r\n    }\r\n\r\n    updateStatistics() {\r\n        let armor =  calculateMainArmor(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents);\r\n        let physResist = calculatePhysicalResist(armor);\r\n        this.setState({\r\n            // Attack\r\n            attackSpeed: formatAttackTime(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n            damage: formatAttackMinMax(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n            attackRange: calculateAttackRange(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n            moveSpeed: calculateMoveSpeed(this.state.hero, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n            spellAmp: calculateTotalSpellAmp(this.state.talents, this.state.items, this.state.neutral),\r\n            manaRegen: calculateManaRegen(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n\r\n            // Defence\r\n            armor: armor,\r\n            physicalResist: physResist,\r\n            magicResist: calculateMagicResist(this.state.items, this.state.neutral, this.state.abilities),\r\n            statusResist: calculateStatusResist(this.state.items, this.state.neutral),\r\n            evasion: calculateEvasion(this.state.items, this.state.neutrak, this.state.abilities , this.state.talents),\r\n            healthRegen: calculateHealthRegen(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Row>\r\n                {\r\n                    this.state.hero &&\r\n                    <Col md={6}>\r\n                        <StatArray title=\"ATTACK\" stats={[\r\n                            { name: \"attack speed\", value: this.state.attackSpeed },\r\n                            { name: \"damage\", value: this.state.damage },\r\n                            { name: \"attack range\", value: this.state.attackRange },\r\n                            { name: \"move speed\", value: this.state.moveSpeed },\r\n                            { name: \"spell amp\", value: this.state.spellAmp + \"%\" },\r\n                            { name: \"mana regen\", value: this.state.manaRegen },\r\n                        ]} />\r\n                    </Col>\r\n                }   \r\n                {\r\n                    this.state.hero &&\r\n                    <Col md={6}>\r\n                        <StatArray title=\"DEFENCE\" stats={[\r\n                            { name: \"armor\", value:  this.state.armor },\r\n                            { name: \"physical resist\", value: this.state.physicalResist + \"%\" },\r\n                            { name: \"magic resist\", value: this.state.magicResist + \"%\" },\r\n                            { name: \"status resist\", value: this.state.statusResist + \"%\" },\r\n                            { name: \"evasion\", value: this.state.evasion + \"%\" },\r\n                            { name: \"health regen\", value: this.state.healthRegen },\r\n                        ]}/>\r\n                    </Col>\r\n                }\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Statistics;","import Statistics from \"./Statistics\";\r\n\r\nexport default Statistics;","import React, { Component } from 'react';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport {  faSearch } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nclass HeroSelector extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            heroes: props.heroes,\r\n            filteredHeroes: props.heroes,\r\n            onSelectedHero: props.onSelectedHero,\r\n        };\r\n\r\n        this.onSearchChanged = this.onSearchChanged.bind(this);\r\n    }\r\n\r\n    onSearchChanged(e) {\r\n        var searchTerm = e.target.value;\r\n        var filtered = this.state.heroes;\r\n        filtered = filtered.filter((hero) => {\r\n            return hero.name.indexOf(searchTerm.toLowerCase()) !== -1;\r\n        });\r\n\r\n        this.setState({\r\n            filteredHeroes: filtered,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        var iconScale = 0.5;\r\n        return (\r\n            <div className=\"hero-card\">\r\n                <div className=\"hero-card header d-flex\">\r\n                    <div className=\"d-flex\">\r\n                        <h5 className=\"my-auto ml-2\">CHOOSE A HERO</h5>\r\n                        <div className=\"ml-auto p-1\">\r\n                            <Form.Control type=\"text\" placeholder=\"Search...\" onChange={this.onSearchChanged} />\r\n                        </div>\r\n                        <FontAwesomeIcon icon={faSearch} className=\"my-auto mr-2\" />\r\n                    </div>\r\n                </div>\r\n                <div className=\"content\">\r\n                    <div className=\"d-flex flex-wrap\">\r\n                        {\r\n                            this.state.filteredHeroes && this.state.filteredHeroes.map((value) => {\r\n                                return (\r\n                                    <div\r\n                                        key={value.name}  \r\n                                        onClick={this.state.onSelectedHero}\r\n                                        className=\"m-1\"\r\n                                        style={{ height: `calc(72px * ${iconScale})`, width: `calc(128px * ${iconScale})` }}>\r\n                                        <span \r\n                                            className={`hero-icon-big hero-icon-big-${value.name}_png`} \r\n                                            style={{ transformOrigin: \"top left\", transform: `scale(${iconScale}, ${iconScale})` }}\r\n                                            data-heroname={value.displayName}\r\n                                            data-hero={value.name} />\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HeroSelector;","import ChangeHeroBtn from \"./ChangeHeroBtn\";\r\n\r\nexport default ChangeHeroBtn;","import React, { Component } from 'react';\r\nimport {\r\n    Button\r\n} from \"react-bootstrap\";\r\nimport Popup from \"reactjs-popup\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport HeroSelector from \"./HeroSelector\";\r\n\r\nimport { DOTAHeroes } from \"../../data/dota2/json/npc_heroes.json\";\r\n\r\nimport \"./ChangeHeroBtn.css\";\r\n\r\nclass ChangeHeroBtn extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        // Filter and remove any unwanted heroes\r\n        var selectableHeroes = Object.keys(DOTAHeroes).filter((value) => {\r\n            var key = value.toLowerCase();\r\n            if (key !== \"version\" && key !== \"npc_dota_hero_base\" && key !== \"npc_dota_hero_target_dummy\") {\r\n                return true;\r\n            }\r\n            return false;\r\n        })\r\n        // Map only necessary data\r\n        selectableHeroes = selectableHeroes.map((key) => {\r\n            if (DOTAHeroes[key].workshop_guide_name) {\r\n                return {\r\n                    displayName: DOTAHeroes[key].workshop_guide_name,\r\n                    name: key,\r\n                    alias: DOTAHeroes[key].NameAliases ? DOTAHeroes[key].NameAliases.split(',') : null,\r\n                };\r\n            }\r\n        });\r\n        // sort by name property\r\n        selectableHeroes.sort((a, b) => (a.name > b.name) ? 1 : -1)\r\n\r\n        this.state = {\r\n            open: false,\r\n            heroes: selectableHeroes,\r\n\r\n            onSelectHero: props.onSelectHero,\r\n        };\r\n\r\n        this.onToggleHeroSelect = this.onToggleHeroSelect.bind(this);\r\n        this.onSelectHero = this.onSelectHero.bind(this);\r\n    }\r\n\r\n    onToggleHeroSelect(e) {\r\n        this.setState({\r\n            open: !this.state.open,\r\n        });\r\n    }\r\n\r\n    onSelectHero (e) {\r\n        //e.persist();\r\n        //console.log(e);\r\n        this.setState({\r\n            open: !this.state.open,\r\n        });\r\n        \r\n        var hero = e.target.dataset.hero;\r\n        this.state.onSelectHero(hero);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Popup \r\n                    trigger={isOpen => (\r\n                        <Button onClick={this.onToggleHeroSelect}><FontAwesomeIcon icon={faPencilAlt} /></Button>\r\n                    )} \r\n                    position=\"right top\"\r\n                    contentStyle={{ width: \"750px\" }}>\r\n                     <HeroSelector heroes={this.state.heroes} onSelectedHero={this.onSelectHero} />\r\n                </Popup>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChangeHeroBtn;","import React, { Component } from 'react';\r\nimport {\r\n    Row,\r\n    Col\r\n} from \"react-bootstrap\";\r\n\r\nimport {\r\n    getTalentInfoFromName,\r\n} from \"../../utility/dataHelperTalents\";\r\nimport { tryGetAbilityLocalizedString } from \"../../utility/data-helpers/language\";\r\n\r\nfunction isTalentSelected (selectedTalents, talent) {\r\n    return selectedTalents?.includes(talent);\r\n}\r\n\r\nclass TalentRow extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            leftTalent: props.leftTalent,\r\n            rightTalent: props.rightTalent,\r\n            level: props.lvl,\r\n\r\n            selectedTalents: this.props.selectedTalents,\r\n            onTalentSelected: this.props.onTalentSelected,\r\n            onTalentUnselected: this.props.onTalentUnselected,\r\n\r\n            abilityStrings: this.props.abilityStrings,\r\n        };\r\n\r\n        this.onSelectTalent = this.onSelectTalent.bind(this);\r\n        this.getTalentDisplayName = this.getTalentDisplayName.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.leftTalent !== this.props.leftTalent) {\r\n            this.setState({ leftTalent: this.props.leftTalent });\r\n        }\r\n\r\n        if(prevProps.rightTalent !== this.props.rightTalent) {\r\n            this.setState({ rightTalent: this.props.rightTalent });\r\n        }\r\n\r\n        if (prevProps.lvl !== this.props.lvl) {\r\n            this.setState({ level: this.props.lvl });\r\n        }\r\n\r\n        if (prevProps.selectedTalents !== this.props.selectedTalents) {\r\n            this.setState({ selectedTalents: this.props.selectedTalents });\r\n        }\r\n\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ abilityStrings: this.props.abilityStrings });\r\n        }\r\n    }\r\n\r\n    onSelectTalent(e) {\r\n        var selectedTalent = e.target.dataset.talent;\r\n        // if clicked twice, unselect the talent\r\n        if (isTalentSelected(this.state.selectedTalents, selectedTalent)) {\r\n            this.state.onTalentUnselected(selectedTalent);\r\n        } else {\r\n            this.state.onTalentSelected(selectedTalent);\r\n        }\r\n    }\r\n\r\n    getTalentDisplayName (talent) {\r\n        let talentInfo = getTalentInfoFromName(talent);\r\n        if (!talentInfo) {\r\n            return \"Unknown Talent\";\r\n        }\r\n\r\n        let displayName = tryGetAbilityLocalizedString(this.state.abilityStrings, talent);\r\n        if (displayName && talentInfo && talentInfo.AbilitySpecial) {\r\n            displayName = displayName.replace('{s:value}', talentInfo.AbilitySpecial[0].value);\r\n        }\r\n\r\n        return displayName;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Row className=\"my-1 py-2\" style={{ backgroundColor: \"rgb(24, 30, 33)\"}}>\r\n                {/* Left Talent */}\r\n                <Col \r\n                    md={5}\r\n                    className=\"text-center\"\r\n                    style={{ color: isTalentSelected(this.state.selectedTalents, this.state.leftTalent) ? \"#c4a66f\" : \"white\" }}>\r\n                    <div onClick={this.onSelectTalent} data-talent={this.state.leftTalent}>\r\n                        {\r\n                            this.getTalentDisplayName(this.state.leftTalent)\r\n                        }\r\n                    </div>\r\n                </Col>\r\n                {/* Talent Level */}\r\n                <Col md={2}>\r\n                    <h6 \r\n                        className=\"text-center\"\r\n                        style={{ color: \"#e7d291\"}}>\r\n                        {this.state.level}\r\n                    </h6>\r\n                </Col>\r\n                {/* Right Talent */}\r\n                <Col \r\n                    md={5}\r\n                    className=\"text-center\"\r\n                    style={{ color: isTalentSelected(this.state.selectedTalents, this.state.rightTalent) ? \"#c4a66f\" : \"white\" }}>\r\n                    <div onClick={this.onSelectTalent} data-talent={this.state.rightTalent}>\r\n                        {\r\n                            this.getTalentDisplayName(this.state.rightTalent)\r\n                        }\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TalentRow;\r\n","import TalentTree from \"./TalentTree\";\r\n\r\nexport default TalentTree;","import React, { Component } from 'react';\r\n\r\nimport TalentRow from \"./TalentRow\";\r\n\r\nclass TalentTree extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            talents: this.props.talents,\r\n            selectedTalents: this.props.selectedTalents,\r\n\r\n            onTalentSelected: this.props.onTalentSelected,\r\n            onTalentUnselected: this.props.onTalentUnselected,\r\n\r\n            abilityStrings: this.props.abilityStrings,\r\n        };\r\n        this.findSelectedTalent = this.findSelectedTalent.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(prevProps.talents !== this.props.talents) {\r\n            this.setState({\r\n                talents: this.props.talents,\r\n            });\r\n        }\r\n\r\n        if (prevProps.selectedTalents !== this.props.selectedTalents) {\r\n            this.setState({ selectedTalents: this.props.selectedTalents });\r\n        }\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ abilityStrings: this.props.abilityStrings });\r\n        }\r\n    }\r\n\r\n    findSelectedTalent(leftTalent, rightTalent) {\r\n        if (this.state.selectedTalents && this.state.selectedTalents.length > 0) {\r\n            var matchTalent = this.state.selectedTalents.find((val) => {\r\n                if (val.name === leftTalent) {\r\n                    return leftTalent;\r\n                } else if (val.name === rightTalent) {\r\n                    return rightTalent;\r\n                }\r\n                return null;\r\n            });\r\n            return matchTalent?.name;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h6 className=\"text-center\">TALENT TREE</h6>\r\n                {/* <img src=\"/images/dota2/talent.jpg\" alt=\"talent tree\" /> */}\r\n                <div \r\n                    className=\"mr-2\"\r\n                    style={{ fontSize: \"0.8rem\" }}>\r\n                        {\r\n                            this.state.talents && this.state.talents.map((talentInfo) => {\r\n                                return <TalentRow \r\n                                                key={talentInfo.lvl}\r\n                                                lvl={talentInfo.lvl}\r\n                                                leftTalent={talentInfo.leftTalent} \r\n                                                rightTalent={talentInfo.rightTalent} \r\n                                                selectedTalents={this.state.selectedTalents}\r\n                                                onTalentSelected={this.state.onTalentSelected}\r\n                                                onTalentUnselected={this.state.onTalentUnselected} \r\n                                                \r\n                                                abilityStrings={this.state.abilityStrings} />\r\n                            })\r\n                        }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TalentTree;","import HealthManaBar from \"./HealthManaBar\";\r\n\r\nexport default HealthManaBar;","import React, { Component } from 'react';\r\n\r\nimport {\r\n    calculateHealth,\r\n    calculateMana,\r\n    calculateHealthRegen,\r\n    calculateManaRegen,\r\n} from \"../../utility/calculate\";\r\nimport { EAttributes } from \"../../enums/attributes\";\r\n\r\nimport \"./style.css\";\r\n\r\nclass HealthManaBar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            hero: props.hero,\r\n            level: props.heroLevel,\r\n            items: props.items,\r\n            talents: props.talents,\r\n            neutral: props.neutral,\r\n            abilities: props.abilities,\r\n\r\n            maxHealth: 0,\r\n            maxMana: 0,\r\n        }\r\n\r\n        this.updateBar = this.updateBar.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateBar();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                hero: this.props.hero,\r\n                level: this.props.heroLevel,\r\n                items: this.props.items,\r\n                talents: this.props.talents,\r\n                neutral: this.props.neutral,\r\n                abilities: this.props.abilities,\r\n\r\n                maxHealth: 0,\r\n                maxMana: 0,\r\n            }, () => this.updateBar());\r\n        }\r\n    }\r\n\r\n    updateBar() {\r\n        this.setState({\r\n            maxHealth: calculateHealth(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n            maxMana: calculateMana(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"bar health d-flex\">\r\n                    <h6 className=\"my-auto mx-auto\">{this.state.maxHealth} / {this.state.maxHealth}</h6>\r\n                    <div className=\"my-auto mr-1\">\r\n                        { \"+\" + calculateHealthRegen(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents) }\r\n                    </div>\r\n                </div>\r\n                <div className=\"bar mana d-flex\">\r\n                    <h6 className=\"my-auto mx-auto\">{this.state.maxMana} / {this.state.maxMana}</h6>\r\n                    <div className=\"my-auto mr-1\">\r\n                        { \"+\" + calculateManaRegen(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents) }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HealthManaBar;","import React, { Component } from 'react';\r\nimport { \r\n    Button, \r\n    Form\r\n} from 'react-bootstrap';\r\n\r\nconst MAX_LEVEL = 30;\r\nconst MIN_LEVEL = 1;\r\n\r\nfunction ModifyBtn (props) {\r\n    return (\r\n        <Button \r\n            className=\"py-1\"\r\n            variant=\"outline-secondary\" \r\n            onClick={props.onClick}>\r\n            { props.text }\r\n        </Button>\r\n    );\r\n}\r\n\r\nclass LevelSelector extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            level: props.heroLevel,\r\n            onHeroLevelChanged: props.onHeroLevelChanged,\r\n        };\r\n\r\n        this.onIncrementHeroLevel = this.onIncrementHeroLevel.bind(this);\r\n        this.onDecrementHeroLevel = this.onDecrementHeroLevel.bind(this);\r\n        this.onLvlInputChanged = this.onLvlInputChanged.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.heroLevel !== this.props.heroLevel) {\r\n            this.setState({\r\n                level: this.props.heroLevel,\r\n            });\r\n        }\r\n    }\r\n\r\n    onIncrementHeroLevel() {\r\n        var newLevel = this.state.level;\r\n        newLevel += 1;\r\n\r\n        if (newLevel >= MAX_LEVEL) {\r\n            newLevel = MAX_LEVEL;\r\n        }\r\n\r\n        this.state.onHeroLevelChanged(newLevel);\r\n    }\r\n\r\n    onDecrementHeroLevel() {\r\n        var newLevel = this.state.level;\r\n        newLevel -= 1;\r\n\r\n        if (newLevel < MIN_LEVEL) {\r\n            newLevel = MIN_LEVEL;\r\n        }\r\n\r\n        this.state.onHeroLevelChanged(newLevel);\r\n    }\r\n\r\n    onLvlInputChanged(e) {\r\n        var lvl = parseInt(e.target.value);\r\n        if (lvl) {\r\n            if (lvl > MAX_LEVEL) {\r\n                lvl = MAX_LEVEL;\r\n            }\r\n            else if (lvl < MIN_LEVEL) {\r\n                lvl = MIN_LEVEL;\r\n            }\r\n        } else {\r\n            lvl = MIN_LEVEL;\r\n        }\r\n\r\n        this.state.onHeroLevelChanged(lvl);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"mx-5\">\r\n                <h6>HERO LEVEL</h6>\r\n                <div className=\"d-flex\">\r\n                    <ModifyBtn \r\n                        onClick={this.onDecrementHeroLevel} \r\n                        text=\"-\" />\r\n                    <Form.Control\r\n                        className=\"mx-3\" \r\n                        style={{ width: \"75px\" }}\r\n                        placeholder=\"lvl\" \r\n                        type=\"number\" \r\n                        value={this.state.level} \r\n                        onChange={this.onLvlInputChanged} />\r\n                    <ModifyBtn \r\n                        onClick={this.onIncrementHeroLevel} \r\n                        text=\"+\" />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LevelSelector;","import LevelSelector from \"./LevelSelector\";\r\n\r\nexport default LevelSelector;","import React, { Component } from 'react';\r\nimport {\r\n    Container,\r\n    Row,\r\n    Col,\r\n} from 'react-bootstrap';\r\nimport { connect } from \"react-redux\";\r\n\r\nimport {\r\n    SELECTED_HERO,\r\n    SELECTED_ITEM,\r\n    SELECTED_NEUTRAL,\r\n    SELECTED_BACKPACK_ITEM,\r\n    SELECTED_TALENT,\r\n    UNSELECTED_TALENT,\r\n    NEW_HERO_LEVEL,\r\n    ENEMY_SELECTED_TALENT\r\n} from \"../../constants/actionTypes\";\r\n\r\nimport Abilities from \"../Abilities\";\r\nimport ItemsBar from \"../ItemsBar\";\r\nimport Attributes from \"../Attributes\";\r\nimport Statistics from \"../Statistics\";\r\nimport ChangeHeroBtn from \"../ChangeHeroBtn\";\r\nimport TalentTree from \"../TalentTree\";\r\nimport HealthManaBar from \"../HealthManaBar\";\r\nimport LevelSelector from \"../LevelSelector\";\r\nimport EnemyHero from '../EnemyHero';\r\n\r\n/* DotA 2 Import Data */\r\nimport { DOTAHeroes } from \"../../data/dota2/json/npc_heroes.json\";\r\n\r\nimport \"../../css/dota_hero_icons.css\";\r\nimport \"../../css/dota_attributes.css\";\r\nimport \"../../css/dota_items.css\";\r\nimport \"../../css/dota_hero_icons_big.css\";\r\nimport \"./Calculator.css\";\r\n\r\nclass Calculator extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.onHeroSelected = this.onHeroSelected.bind(this);\r\n        this.onItemSelected = this.onItemSelected.bind(this);\r\n        this.onNeutralSelected = this.onNeutralSelected.bind(this);\r\n        this.onTalentSelected = this.onTalentSelected.bind(this);\r\n        this.onTalentUnselected = this.onTalentUnselected.bind(this);\r\n        this.onHeroLevelChanged = this.onHeroLevelChanged.bind(this);\r\n    }\r\n\r\n    onHeroSelected(heroName) {\r\n        var targetHero = DOTAHeroes[heroName];\r\n        console.log(`${SELECTED_HERO}: ${heroName}`);\r\n\r\n        this.props.dispatch({ type: SELECTED_HERO, value: targetHero });\r\n    }\r\n\r\n    onItemSelected (item) {\r\n        if (item.isBackpack) \r\n        {\r\n            console.log(`${SELECTED_BACKPACK_ITEM}: Slot: ${item.slot} Item: ${item.item}`);\r\n            this.props.dispatch({ type: SELECTED_BACKPACK_ITEM, value: item });\r\n        }\r\n        else\r\n        {\r\n            console.log(`${SELECTED_ITEM}: Slot: ${item.slot} Item: ${item.item}`);\r\n            this.props.dispatch({ type: SELECTED_ITEM, value: item });\r\n        }\r\n    }\r\n\r\n    onNeutralSelected(neutralItem) {\r\n        console.log(`${SELECTED_NEUTRAL}: ${neutralItem.item}`);\r\n        this.props.dispatch({ type: SELECTED_NEUTRAL, value: neutralItem });\r\n    }\r\n\r\n    onTalentSelected (talent) {\r\n        console.log(`${SELECTED_TALENT}: ${talent}`);\r\n        this.props.dispatch({ type: SELECTED_TALENT, value: talent });\r\n    }\r\n\r\n    onTalentUnselected (talent) {\r\n        console.log(`${UNSELECTED_TALENT}: ${talent}`);\r\n        this.props.dispatch({ type: UNSELECTED_TALENT, value: talent });\r\n    }\r\n\r\n    onEnemyTalentSelected (enemy, talent) {\r\n        console.log(`${ENEMY_SELECTED_TALENT}: ${enemy}, ${talent}`);\r\n        this.props.dispatch({ type: ENEMY_SELECTED_TALENT, value: talent });\r\n    }\r\n\r\n    onHeroLevelChanged(newLevel) {\r\n        //console.log(`${NEW_HERO_LEVEL}: ${newLevel}`);\r\n        this.props.dispatch({ type: NEW_HERO_LEVEL, value: newLevel });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"mt-3\">\r\n                <Container fluid=\"md\">\r\n                    {/* Top row, Inital Hero Information */}\r\n                    <Row>\r\n                        {/* Main Hero Info */}\r\n                        <Col className=\"my-auto\" md={3}>\r\n                            <span \r\n                                className={`hero-icon-big hero-icon-big-npc_dota_hero_${this.props.selectedHeroName}_png mx-3`}\r\n                                height={50}\r\n                                alt=\"hero banner\" />\r\n                            <div className=\"d-flex mt-3\">\r\n                                <h5 className=\"my-auto px-3\">\r\n                                    {this.props.selectedHeroName}\r\n                                </h5>\r\n                                <ChangeHeroBtn onSelectHero={this.onHeroSelected}/>\r\n                            </div>\r\n                        </Col>\r\n                        {/* Small Stats */}\r\n                        <Col md={3}>\r\n                            <Attributes \r\n                                hero={this.props.selectedHero} \r\n                                heroLevel={this.props.heroLevel}\r\n                                talents={this.props.selectedTalents}\r\n                                items={this.props.items}\r\n                                neutral={this.props.neutralItem} \r\n                                abilities={this.props.heroAbilities} />\r\n                        </Col>\r\n                        {/* Final Attack/Defence Stats */}\r\n                        <Col md={5}>\r\n                            <Statistics \r\n                                hero={this.props.selectedHero} \r\n                                heroLevel={this.props.heroLevel}\r\n                                talents={this.props.selectedTalents}\r\n                                items={this.props.items}\r\n                                neutral={this.props.neutralItem} \r\n                                abilities={this.props.heroAbilities} />\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    {/* Health/Mana and Hero Lvl  */}\r\n                    <Row className=\"my-2 py-2\">\r\n                        <Col md={8}>\r\n                            <HealthManaBar \r\n                                hero={this.props.selectedHero} \r\n                                heroLevel={this.props.heroLevel}\r\n                                talents={this.props.selectedTalents}\r\n                                items={this.props.items}\r\n                                neutral={this.props.neutralItem} \r\n                                abilities={this.props.heroAbilities} />\r\n                        </Col>\r\n                        <Col md={4}>\r\n                            <LevelSelector \r\n                                heroLevel={ this.props.heroLevel } \r\n                                onHeroLevelChanged={ this.onHeroLevelChanged }/>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    {/* Items/Talent */}\r\n                    <Row className=\"items-row my-4\">\r\n                        <Col md={7}>\r\n                            <ItemsBar\r\n                                items={this.props.items} \r\n                                backpack={this.props.backpack} \r\n                                neutral={this.props.neutralItem} \r\n                                onItemChanged={this.onItemSelected}\r\n                                onNeutralChanged={this.onNeutralSelected} />\r\n                        </Col>\r\n                        <Col md={5}>\r\n                            <TalentTree\r\n                                talents={this.props.heroTalents} \r\n                                selectedTalents={this.props.selectedTalents}\r\n                                onTalentSelected={this.onTalentSelected} \r\n                                onTalentUnselected={this.onTalentUnselected} \r\n                                abilityStrings={this.props.abilityStrings} />\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    {/* Abilities */}\r\n                    <Abilities \r\n                        abilities={this.props.heroAbilities}\r\n                        items={this.props.items}\r\n                        neutral={this.props.neutralItem} \r\n                        selectedTalents={this.props.selectedTalents} \r\n                        abilityStrings={this.props.abilityStrings}\r\n                        dotaStrings={this.props.dotaStrings} \r\n                        displayDamage={true} />\r\n\r\n                    {/* Padding Separator */}\r\n                    {/* <div className=\"py-5\" /> */}\r\n                    \r\n                    {/* Enemy Hero */}\r\n                    {/* <EnemyHero \r\n                        hero={this.props.selectedEnemyHero}\r\n                        heroName={this.props.selectedEnemyHeroName} \r\n                        heroAbilities={this.props.enemyHeroAbilities} \r\n                        heroItems={this.props.enemyHeroItems}\r\n                        heroTalents={this.props.enemyHeroTalents} \r\n                        selectedTalents={this.props.selectedEnemyTalents}\r\n                        neutral={this.props.enemyNeutralItem}\r\n                        abilityStrings={this.props.abilityStrings} \r\n                        dotaStrings={this.props.dotaStrings} /> */}\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    selectedHero: state.hero.selectedHero,\r\n    selectedHeroName: state.hero.selectedHeroName,\r\n    \r\n    heroAbilities: state.hero.heroAbilities,\r\n    heroTalents: state.hero.heroTalents,\r\n    heroLevel: state.hero.heroLevel,\r\n\r\n    items: state.hero.items,\r\n    backpack: state.hero.backpack,\r\n    neutralItem: state.hero.neutralItem,\r\n    selectedTalents: state.hero.selectedTalents,\r\n\r\n    abilityStrings: state.language.stringsAbilities,\r\n    dotaStrings: state.language.stringsDota,\r\n\r\n    selectedEnemyHero: state.enemy.selectedEnemyHero,\r\n    selectedEnemyHeroName: state.enemy.selectedEnemyHeroName,\r\n    enemyHeroTalents: state.enemy.enemyHeroTalents,\r\n    enemyHeroAbilities: state.enemy.enemyHeroAbilities,\r\n    selectedEnemyTalents: state.enemy.selectedEnemyTalents,\r\n    enemyHeroItems: state.enemy.enemyHeroItems,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Calculator);","import React, { Component } from 'react';\r\nimport {\r\n    Row,\r\n    Col,\r\n} from 'react-bootstrap';\r\n\r\nimport TalentTree from \"../TalentTree\";\r\nimport ItemsBar from '../ItemsBar/ItemsBar';\r\nimport Abilities from '../Abilities';\r\nimport HealthManaBar from \"../HealthManaBar\";\r\n\r\nclass EnemyHero extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            enemyHero: this.props.hero,\r\n            enemyHeroName: this.props.heroName,\r\n            heroTalents: this.props.heroTalents,\r\n            heroAbilities: this.props.heroAbilities,\r\n            selectedTalents: this.props.selectedTalents,\r\n            heroItems: this.props.heroItems,\r\n            heroNeutral: this.props.neutral,\r\n\r\n            abilityStrings: this.props.abilityStrings,\r\n            dotaStrings: this.props.dotaStrings,\r\n\r\n            heroLevel: 0,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.hero !== this.props.hero) {\r\n            this.setState({ enemyHero: this.props.hero });\r\n        }\r\n        if (prevProps.heroName !== this.props.heroName) {\r\n            this.setState({ enemyHeroName: this.props.heroName });\r\n        }\r\n        if (prevProps.heroTalents !== this.props.heroTalents) {\r\n            this.setState({ heroTalents: this.props.heroTalents });\r\n        }\r\n        if (prevProps.heroAbilities !== this.props.heroAbilities) {\r\n            this.setState({ heroAbilities: this.props.heroAbilities });\r\n        }\r\n        if (prevProps.selectedTalents !== this.props.selectedTalents) {\r\n            this.setState({ selectedTalents: this.props.selectedTalents });\r\n        }\r\n        if (prevProps.heroItems !== this.props.heroItems) {\r\n            this.setState({ heroItems: this.props.heroItems });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Row>\r\n                    <Col md={4}>\r\n                        {this.state.enemyHeroName}\r\n                    </Col>\r\n                    <Col md={8}>\r\n                        <HealthManaBar \r\n                                baseStrength ={ this.state.enemyHero?.AttributeBaseStrength }\r\n                                strengthGain={ this.state.enemyHero?.AttributeStrengthGain } \r\n                                baseIntelligence={this.state.enemyHero?.AttributeBaseIntelligence }\r\n                                intelligenceGain={ this.state.enemyHero?.AttributeIntelligenceGain }\r\n                                heroLevel={ this.state.heroLevel } \r\n                                primaryAttribute={ this.state.enemyHero?.AttributePrimary }\r\n                                bonusHealthRegen={ this.state.enemyHero?.StatusHealthRegen }\r\n                                bonusManaRegen={ this.state.enemyHero?.StatusManaRegen } />\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"\">\r\n                    {/* Talents */}\r\n                    <Col md={5}>\r\n                        <TalentTree\r\n                            talents={this.state.heroTalents} \r\n                            selectedTalents={this.state.selectedTalents}\r\n                            onTalentSelected={this.onTalentSelected} \r\n                            onTalentUnselected={this.onTalentUnselected} \r\n                            abilityStrings={this.state.abilityStrings} />\r\n                    </Col>\r\n                    {/* Abilities */}\r\n                    \r\n                    {/* Items */}\r\n                    <Col md={5}>\r\n                        <ItemsBar\r\n                            items={this.state.heroItems}  \r\n                            neutral={this.props.neutralItem}\r\n                            onItemChanged={this.onItemSelected}\r\n                            onNeutralChanged={this.onNeutralSelected} />\r\n                    </Col>\r\n                </Row>\r\n                <Abilities \r\n                        abilities={this.state.heroAbilities}\r\n                        items={this.state.heroItems}\r\n                        neutral={this.props.neutralItem} \r\n                        selectedTalents={this.props.selectedTalents} \r\n                        abilityStrings={this.props.abilityStrings}\r\n                        dotaStrings={this.state.dotaStrings} \r\n                        displayDamage={false} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EnemyHero;","import Calculator from \"./Calculator\";\r\n\r\nexport default Calculator;","import Home from \"./Home\";\r\n\r\nexport default Home;","import React, { Component } from 'react';\r\nimport {\r\n    Container,\r\n    Button\r\n} from \"react-bootstrap\";\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nclass Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            redirect: \"\",\r\n        };\r\n\r\n        this.onGoToCalc = this.onGoToCalc.bind(this);\r\n    }\r\n\r\n    onGoToCalc() {\r\n        this.setState({ redirect: \"/app\" });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Container>\r\n                    <div style={{ height: \"300px\" }}>\r\n                        <h1 \r\n                            className=\"text-center my-5 pt-3\">\r\n                                foresight\r\n                        </h1>\r\n                        <div className=\"text-center\">\r\n                            <h6 className=\"py-2\">work in progress</h6>\r\n                            <Button\r\n                                className=\"mx-auto\"\r\n                                onClick={this.onGoToCalc}>\r\n                                to app\r\n                            </Button>\r\n                        </div>\r\n                        \r\n                    </div>\r\n                </Container>\r\n                {\r\n                    this.state.redirect && <Redirect to={this.state.redirect} />\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import App from \"./App\";\r\n\r\nexport default App;","import React, { Component } from 'react';\nimport { \n    HashRouter,\n    Route,\n    Switch\n} from 'react-router-dom';\n\nimport Navigation from \"../Navigation\";\nimport FourOhFour from \"../FourOhFour\";\nimport Calculator from \"../Calculator\";\nimport Home from \"../Home\";\n\nclass App extends Component {\n    render() {\n        return (\n            <HashRouter>\n                <Navigation />\n\n                <Switch>\n                    <Route exact path=\"/\" component={Home} />\n\n                    <Route exact path=\"/app\" component={Calculator} />\n\n                    <Route component={FourOhFour} />\n                </Switch>\n            </HashRouter>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./store\";\n\nimport App from './components/App/';\n\n// Import Bootstrap component styles\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst app = (\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>\n);\n\nReactDOM.render(app, document.getElementById('root') );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}