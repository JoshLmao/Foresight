{"version":3,"sources":["serviceWorker.js","enums/attributes.js","utility/dataHelperHero.js","reducers/initialState.js","utils.js","reducers/hero.js","constants/actionTypes.js","enums/languages.js","reducers/language.js","store/index.js","reducers/enemy.js","components/LanguageSelect/LanguageSelect.jsx","components/LanguageSelect/index.js","components/Navigation/Navigation.jsx","components/Navigation/index.js","components/FourOhFour/index.js","components/FourOhFour/FourOhFour.jsx","utility/data-helpers/language.js","enums/abilities.js","utility/dataHelperTalents.js","utility/dataHelperAbilities.js","utility/dataHelperItems.js","enums/hero.js","utility/calculate.js","components/Abilities/DamageOutput.jsx","components/Abilities/Cooldown.jsx","components/Abilities/ManaCost.jsx","components/Abilities/AbilityDetails.jsx","components/Abilities/Abilities.jsx","components/Abilities/index.js","utility/spriteHelper.js","components/ItemsBar/ItemSelector.jsx","enums/items.js","components/ItemTooltip/ItemTooltip.jsx","components/ItemTooltip/index.js","components/ItemsBar/Item.jsx","components/Neutral/NeutralItemSelector.jsx","components/Neutral/index.js","components/Neutral/Neutral.jsx","components/ItemsBar/ItemsBar.jsx","components/ItemsBar/index.js","components/Attributes/Attributes.jsx","components/Attributes/index.js","components/Statistics/Statistics.jsx","components/Statistics/index.js","components/ChangeHeroBtn/HeroSelector.jsx","components/ChangeHeroBtn/index.js","components/ChangeHeroBtn/ChangeHeroBtn.jsx","components/TalentTree/TalentRow.jsx","components/TalentTree/index.js","components/TalentTree/TalentTree.jsx","components/HealthManaBar/index.js","components/HealthManaBar/HealthManaBar.jsx","components/LevelSelector/LevelSelector.jsx","components/LevelSelector/index.js","components/Calculator/Calculator.jsx","components/EnemyHero/EnemyHero.jsx","components/Calculator/index.js","components/Home/index.js","components/Home/Home.jsx","components/App/index.js","components/App/App.jsx","index.js"],"names":["Boolean","window","location","hostname","match","EAttributes","getSpecificAttributeStats","specificAttribute","heroInfo","basePrimary","primaryPerLevel","parseInt","AttributeBaseStrength","parseFloat","AttributeStrengthGain","AttributeBaseAgility","AttributeAgilityGain","AttributeBaseIntelligence","AttributeIntelligenceGain","console","error","base","perLevel","getHeroTalents","keys","Object","talents","i","length","includes","ability","push","mappedTalents","lvlRow","lvl","rightTalent","leftTalent","sort","a","b","getAllHeroAbilities","abilities","getPrimaryAttribute","hero","AttributePrimary","isHeroAttackCapability","atkCapability","AttackCapabilities","split","initialState","selectedHero","DOTAHeroes","npc_dota_hero_abaddon","selectedHeroName","heroAbilities","heroTalents","selectedTalents","heroLevel","items","slot","item","backpack","neutralItem","lang","stringsAbilities","EngAbilStrings","stringsDota","EngDotaStrings","selectedEnemyHero","npc_dota_hero_target_dummy","selectedEnemyHeroName","modelString","dashSplit","parseNameFromModel","Model","enemyHeroTalents","enemyHeroAbilities","selectedEnemyTalents","enemyHeroItems","replaceUpdatedItem","itemArray","newItem","newArray","filter","val","extra","getNewTalentArray","talentArray","newTalent","map","value","removeTalent","unselectedTalent","talent","reducer","state","action","type","log","ELanguages","SCHINESE","ENGLISH","getAbilityStrings","langCode","SChineseAbilStrings","getGeneralStrings","SChineseDotaStrings","allReducers","combineReducers","language","enemy","store","createStore","LanguageSelect","props","onLanguageChanged","bind","event","newLanguage","target","this","dispatch","Form","Control","className","as","onChange","defaultValue","values","key","Component","connect","pkg","require","Navigation","Navbar","Container","Brand","to","Link","name","Nav","style","fontSize","eventKey","disabled","version","dotaVersion","Toggle","aria-controls","Collapse","id","href","Button","variant","icon","faGithub","FourOhFour","getLocalizedString","localeStrings","string","Tokens","replaceStringValue","undefined","replace","EDamageType","EAbilityBehaviour","ESpellImmunityType","ESpecialBonusOperation","tryGetTalentSpecialAbilityValue","specialValueKey","talentInfo","getAbilityInfoFromName","specialValue","getAbilitySpecialAbilityValue","talentsInclude","targetTalent","abilityName","DOTAAbilities","tryGetAbilitySpecialAbilityValue","abilityLevel","abilityInfo","specialAbilityKey","AbilitySpecial","matchingKey","find","element","specialAbilityInfo","dataValue","var_type","parseAbilityValueByLevel","level","abilValue","splitValues","isCooldownTalent","isTalent","isDamageTalent","isCastRangeTalent","lowerCasePhrase","abilityString","DOTAEngAbilityStrings","toLowerCase","tryParseAbilitySpecialValue","abilSpecialinfo","tryGetAbilityInfoValueFromKey","abilInfoKey","getItemInfoFromName","itemName","DOTAItems","getItemSpecialAbilityValue","itemInfo","specialAbilityValueKey","tryGetItemSpecialValue","tryGetNeutralSpecialValue","neutral","foundNeutralInfo","primaryAttributeToItemBonusKey","primaryAttr","itemsContainsScepter","allItems","tryGetItemInfoValue","itemInfoKey","infoValue","convertItemDescToHtml","itemDescString","dataString","replaceRegex","phrase","infoKey","join","specialAbilityValue","replaceStringWithDataValues","engSplitString","localizedSplit","totalHtmlSections","section","position","right","AbilityManaCost","AbilityCooldown","faClock","dangerouslySetInnerHTML","__html","ItemQuality","itemAliasIncludes","itemAlias","includePhrase","indexOf","EAttackCapabilities","calculateHealth","baseStrength","strengthGain","baseHealth","npc_dota_hero_base","StatusHealth","totalHealth","bonusHealth","bonusStr","bonusAllStats","maxHealth","toFixed","calculateMana","baseInt","intGain","baseMana","StatusMana","totalMana","bonusMana","bonusInt","maxMana","calculateHealthRegen","totalHpRegen","StatusHealthRegen","regenAmt","bonusHealthRegen","bonusRegen","calculateManaRegen","totalManaRegen","StatusManaRegen","totalManaRegenPercentAmp","bonusManaRegen","bonusIntellect","regenPerCharge","charges","manaRegenAmp","manaRegen","calculateTotalSpellAmp","totalSpellAmp","ampTalent","spellAmpInfo","foundNeutral","spellAmpAmount","ampPerCharge","calculateStatusResist","totalStatusResist","statusResistAmount","calculateMagicResist","resistanceBonuses","MagicalResistance","baseResist","magicResistAmount","edited","total","calculateEvasion","totalEvasion","bonusEvasion","evasionAmount","calculateRightClickDamage","heroMainAttribute","atkMin","AttackDamageMin","atkMax","AttackDamageMax","primaryAttributeStats","heroIsMelee","totalPrimaryAttribute","totalAdditional","allAttrKeys","bonusPrimaryAttr","bonusPrimaryStat","bonusDmg","bonusMeleeDmg","bonusRangedDmg","allStats","min","max","Math","floor","additional","calculateAttackTime","totalAttackSpeed","BaseAttackSpeed","agiStats","totalAgi","bonusAttackSpeed","bonusAgility","attackSpeed","attacksPerSec","atkSpeed","attackTime","attacksPerSecond","calculateSpellDamage","abilityDamageInfo","abilityDmg","damage","isPercent","AbilityDamage","dmgValue","specialAbilityElement","lowerKey","getAbilityOutputDamage","totalSpellAmpPercent","talentBonus","spellAmp","bonusSpellAmp","chargeCount","neutralInfo","special","bonus_spell_amp","spell_amp","ampTalentValue","linkedAbility","spellDamage","totalAbilDmg","abilityDamage","calculateAbilityCooldown","cooldown","fixedAmtReductionSeconds","AbilityCharges","AbilityChargeRestoreTime","getIncludesAbilitySpecialAbilityValue","allReductions","bonusCooldown","amount","source","reduction","totalCooldown","sourceOfReductions","decimal","calculateMoveSpeed","baseSpeed","MovementSpeed","flatBonus","moveSpeed","bonusMovement","moveSpeedPercentBonus","bonusMoveSpeed","bonusSpeed","calculateAttackRange","isHeroRanged","totalAttackRange","AttackRange","baseRange","rangeBonus","bonusAttackRange","bonusMeleeAttackRange","calculateAttribute","attribute","attributeStats","baseAttribute","attributePerLevel","totalAttribute","additionalAttribute","bonusAgi","primaryStat","calculateAbilityCastRange","baseCastRange","AbilityCastRange","foundRange","RequiresScepter","getAbilitySpecialCastRangeValue","totalBonusRange","getAbilityNameFromStrings","strings","languageStrings","stringKey","matchingKeys","tryGetLocalizedString","DamageOutput","levelInfo","abilityStrings","dotaStrings","prevProps","setState","abilityKey","abilInfo","abilLvl","parseDamage","Cooldown","abilityCooldown","updateCooldown","currentCooldownInfo","title","faCircle","ManaCost","updateMana","manaCost","totalManaCostReducePercent","manaCostReduceAmount","costReductionAmount","reduceAmount","calculateManaCost","height","width","backgroundColor","stringContainsHtml","str","TypeValueUI","isPercentage","typeStr","valueStr","AbilityDetails","abilityBehaviours","castRange","castRangeAmt","valuesInformation","abilitySpecials","containsScepter","specialInfo","abilitySpecialKeys","currentAbilitySpecialObject","specialBonus","specialBonusOperation","translationKey","abilityValue","containsKey","specialBonusValue","getAbilitySpecialExtraValues","behaviours","AbilityBehavior","targeting","splitBehaviours","AbilityUnitDamageType","dmgTypeVal","splitDmgTypes","SpellImmunityType","pierceValue","getAbilityBehaviours","index","toUpperCase","getLevelInfo","abil","Abilities","abils","filterAbilities","abilLevels","heroName","abilityLevels","displayDamage","onLevelChanged","e","tagName","parentElement","levelIndex","dataset","lvlindex","targetLevel","btnindex","Row","md","abilVal","IsGrantedByScepter","Col","ID","maxWidth","maxHeight","src","alt","abilityIndex","maxLvl","AbilityType","MaxLevel","html","onClick","data-lvlindex","data-btnindex","getAbilityLevelHtml","getItemIcon","scale","shift","filterItemName","data-item","transform","transformOrigin","display","getItemsByQuality","itemsArray","matchArray","quality","ItemIcon","keyName","TabHeading","text","ItemSelector","selectableItems","ItemIsNeutralDrop","IsObsolete","getAllItems","basicItems","upgradesItems","queryItems","onSelectedItem","onSearchChanged","onSearchItemSelected","onShopItemSelected","onRemoveItemSelected","query","filteredItems","localizedName","ItemAliases","placeholder","faMinus","color","ListGroup","itmName","Item","Tabs","defaultActiveKey","transition","Tab","EDisassembleRule","EItemQuality","replaceItemStatLocalizeString","localizeString","splice","abs","ItemTooltip","itemStats","statistics","getItemStatistics","loreString","descString","descFiltered","ItemCost","faCampground","faHome","splitCompare","localized","toString","cost","calculateItemSellCost","eDisassembleRule","ItemDisassembleRule","isDissassembleRule","isBackpack","onItemChanged","onItemExtraChanged","itemExtra","itemSelectorDisabled","onBloodstoneChargesChanged","setCharges","ItemInitialCharges","newVal","newChargeAmt","trigger","isOpen","zIndex","faInfo","on","contentStyle","closeOnDocumentClick","ItemRequiresCharges","itemRequiresCharges","top","left","size","padding","textAlign","background","border","NeutralTier","tier","time","neutrals","neutralKey","onNeutralSelected","data-neutral","iconScale","NeutralItemSelector","allNeutrals","selectableNeutrals","array","itemKey","getAllNeutrals","neutralTierList","DOTANeutralsTierList","queryNeutrals","onNewNeutralSelected","filteredNeutrals","drop_rates","tierDropAmt","dropAmount","Neutral","neutralSelectorDisabled","ItemsBar","onNeutralChanged","onItemExtraChnaged","onItem","Attribute","isPrimaryAttribute","perLevelString","per","Attributes","strengthStats","agilityStats","intStats","StatArray","stats","formatAttackMinMax","standardAtkDmg","dmgString","formatAttackTime","attackInfo","formatArmor","armorInfo","armor","Statistics","updateStatistics","totalArmor","ArmorPhysical","totalBonusArmor","bonusArmor","armorBonus","calculateMainArmor","physResist","percent","calculatePhysicalResist","attackRange","physicalResist","magicResist","statusResist","evasion","neutrak","healthRegen","HeroSelector","selectableHeroes","getAllPlayableHeroes","filteredHeroes","allHeroes","onSelectedHero","searchTerm","localizedHeroName","NameAliases","faSearch","data-heroname","displayName","data-hero","ChangeHeroBtn","onSelectHero","heroSelectorDisabled","onToggleHeroSelect","faPencilAlt","closeOnEscape","isTalentSelected","TalentRow","onTalentSelected","onTalentUnselected","onSelectTalent","getTalentDisplayName","selectedTalent","getTalentInfoFromName","userSelect","data-talent","TalentTree","findSelectedTalent","matchTalent","HealthManaBar","updateBar","ModifyBtn","LevelSelector","onHeroLevelChanged","onIncrementHeroLevel","onDecrementHeroLevel","onLvlInputChanged","newLevel","Calculator","buildName","buildCreator","openBuildShare","loadedFromParams","onHeroSelected","onItemSelected","onShareBuild","onBuildNameChanged","onBuildCreatorChanged","search","buildData","URLSearchParams","get","decoded","Base64","decode","buildObject","JSON","parse","creator","build","stringify","encoded","encode","copy","fluid","faChevronUp","faChevronDown","plaintext","readonly","faShare","Home","redirect","onGoToCalc","paddingTop","paddingBottom","sm","App","exact","path","component","app","StrictMode","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.ef950436.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// Enum of all attributes contained within npc_heroes\r\nexport const EAttributes = {\r\n    ATTR_STRENGTH: \"DOTA_ATTRIBUTE_STRENGTH\",\r\n    ATTR_AGILITY: \"DOTA_ATTRIBUTE_AGILITY\",\r\n    ATTR_INTELLIGENCE: \"DOTA_ATTRIBUTE_INTELLECT\"\r\n};","// * Helper and utility functions to provide for retrieving data from \"npc_heroes.json\"\r\n// * \r\n\r\nimport { EAttributes } from \"../enums/attributes\";\r\n\r\nimport { DOTAHeroes } from \"../data/dota2/json/npc_heroes.json\";\r\n\r\n/// Get the base and per level stats of a heroes primary attribute\r\nexport function getPrimaryAttributeStats(heroInfo) {\r\n    if (heroInfo && heroInfo.AttributePrimary) {\r\n        return getSpecificAttributeStats(heroInfo.AttributePrimary, heroInfo);\r\n    } else{\r\n        return null;\r\n    }\r\n}\r\n\r\n/// Get the base and per level stats of a specific attribute\r\nexport function getSpecificAttributeStats(specificAttribute, heroInfo) {\r\n    var basePrimary = 0;\r\n    var primaryPerLevel = 0;\r\n\r\n    switch(specificAttribute) {\r\n        case EAttributes.ATTR_STRENGTH:\r\n            {\r\n                basePrimary = parseInt(heroInfo.AttributeBaseStrength);\r\n                primaryPerLevel = parseFloat(heroInfo.AttributeStrengthGain);\r\n                break;\r\n            }\r\n        case EAttributes.ATTR_AGILITY:\r\n            {\r\n                basePrimary = parseInt(heroInfo.AttributeBaseAgility);\r\n                primaryPerLevel = parseFloat(heroInfo.AttributeAgilityGain);\r\n                break;\r\n            }\r\n        case EAttributes.ATTR_INTELLIGENCE:\r\n            {\r\n                basePrimary = parseInt(heroInfo.AttributeBaseIntelligence);\r\n                primaryPerLevel = parseFloat(heroInfo.AttributeIntelligenceGain);\r\n                break;\r\n            }\r\n        default:\r\n            console.error(`Unable to get attribute stats because of unknown specific attribute '${specificAttribute}'`);\r\n    }\r\n    \r\n    return {\r\n        base: basePrimary,\r\n        perLevel: primaryPerLevel,\r\n    };\r\n}\r\n\r\n/// Gets all hero talents from a hero info\r\nexport function getHeroTalents (heroInfo) {\r\n    // Get simple array of all talents from npc_heroes.json\r\n    // All abilities are stored in npc_heroes.json as \"Ability?\", where ? is a number. \r\n    // Not always in numberical order like 1, 2, 3\r\n\r\n    var keys = Object.keys(heroInfo);\r\n    var talents = [];\r\n    for(var i = 0; i < keys.length; i++) {\r\n        if (keys[i].includes(\"Ability\") && !keys[i].includes(\"AbilityDraft\")) {\r\n            var ability = heroInfo[keys[i]];\r\n            if (ability && typeof ability === \"string\") {\r\n                if (ability !== \"generic_hidden\" && ability.includes(\"special_bonus\")) {\r\n                    talents.push(ability);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // sort into nice list\r\n    var mappedTalents = [];\r\n    var lvlRow = 0;\r\n    for (i = 0 ; i < talents.length; i += 2) {\r\n        mappedTalents.push({\r\n            lvl: 10 + (5 * lvlRow),\r\n            rightTalent: talents[i],\r\n            leftTalent: talents[i + 1]\r\n        });\r\n\r\n        lvlRow++;\r\n    }\r\n\r\n    // Sort by lvl 25 talents first\r\n    mappedTalents.sort((a, b) => a.lvl < b.lvl ? 1 : -1);\r\n\r\n    return mappedTalents;\r\n}\r\n\r\n/// Gets all hero abilities from a hero info\r\nexport function getAllHeroAbilities (heroInfo) {\r\n    var keys = Object.keys(heroInfo);\r\n    var abilities = [];\r\n    for(var i = 0; i < keys.length; i++) {\r\n        if (keys[i].includes(\"Ability\") && !keys[i].includes(\"AbilityDraft\")) {\r\n            var ability = heroInfo[keys[i]];\r\n            if (ability && typeof ability === \"string\") {\r\n                if (ability !== \"generic_hidden\" && !ability.includes(\"special_bonus\")) {\r\n                    abilities.push(ability);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return abilities;\r\n}\r\n\r\n/// Returns the base hero information that all heroes are based on\r\nexport function getDotaBaseHero () {\r\n    return DOTAHeroes?.npc_dota_hero_base;\r\n}\r\n\r\n/// Gets the hero's primary attribute as the EAttribute enum\r\nexport function getPrimaryAttribute (hero) {\r\n    switch(hero.AttributePrimary) {\r\n        case EAttributes.ATTR_STRENGTH:\r\n            return EAttributes.ATTR_STRENGTH;\r\n        case EAttributes.ATTR_AGILITY:\r\n            return EAttributes.ATTR_AGILITY;\r\n        case EAttributes.ATTR_INTELLIGENCE:\r\n            return EAttributes.ATTR_INTELLIGENCE;\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\nexport function getAllPlayableHeroes() {\r\n    // Filter and remove any unwanted heroes\r\n    let selectableHeroes = Object.keys(DOTAHeroes).filter((value) => {\r\n        var key = value.toLowerCase();\r\n        if (key !== \"version\" && key !== \"npc_dota_hero_base\" && key !== \"npc_dota_hero_target_dummy\") {\r\n            return true;\r\n        }\r\n        return false;\r\n    })\r\n    // Map only necessary data\r\n    selectableHeroes = selectableHeroes.map((key) => {\r\n        return {\r\n            name: key,\r\n            heroInfo: DOTAHeroes[key],\r\n        };\r\n    });\r\n    // sort by name property\r\n    selectableHeroes.sort((a, b) => (a.name > b.name) ? 1 : -1);\r\n    return selectableHeroes;\r\n}\r\n\r\n/// Checks a hero's attack capability for the specific capability\r\nexport function isHeroAttackCapability (heroInfo, atkCapability) {\r\n    if ( heroInfo && atkCapability) {\r\n        return heroInfo.AttackCapabilities && heroInfo.AttackCapabilities.split(\" | \").includes(atkCapability);\r\n    }\r\n    return false;\r\n}","import { DOTAHeroes } from \"../data/dota2/json/npc_heroes.json\";\r\nimport { lang as EngAbilStrings } from \"../data/dota2/languages/abilities_english.json\";\r\nimport { lang as EngDotaStrings } from \"../data/dota2/languages/dota_english.json\";\r\n\r\nimport {\r\n    parseNameFromModel,\r\n} from \"../utils\";\r\nimport {\r\n    getAllHeroAbilities,\r\n    getHeroTalents,\r\n} from \"../utility/dataHelperHero\";\r\n\r\nconst initialState = {\r\n    /// Current selected hero info by the user\r\n    selectedHero: DOTAHeroes.npc_dota_hero_abaddon,\r\n    /// Internal string name of the hero\r\n    selectedHeroName: \"npc_dota_hero_abaddon\",\r\n    /// Array of abilities of the selectedHero\r\n    heroAbilities: getAllHeroAbilities(DOTAHeroes.npc_dota_hero_abaddon),\r\n    /// Array of talents of the selectedHero\r\n    heroTalents: getHeroTalents(DOTAHeroes.npc_dota_hero_abaddon),\r\n    /// Array of talents selected by the user\r\n    selectedTalents: [ ],\r\n    /// Current level of the hero set by the user\r\n    heroLevel: 1,\r\n\r\n    /// Current items that have been selected\r\n    items: [\r\n        { slot: 0, item: \"\" },\r\n        { slot: 1, item: \"\" },\r\n        { slot: 2, item: \"\" },\r\n        { slot: 3, item: \"\" },\r\n        { slot: 4, item: \"\" },\r\n        { slot: 5, item: \"\" },\r\n    ],\r\n    /// Current backpack selected by user\r\n    backpack: [\r\n        { slot: 0, item: \"\" },\r\n        { slot: 1, item: \"\" },\r\n        { slot: 2, item: \"\" },\r\n    ],\r\n    /// Current neutral item selected by user\r\n    neutralItem: { item: \"\" },\r\n\r\n    // Current code of the selected UI language\r\n    lang: \"en\",\r\n    stringsAbilities: EngAbilStrings,\r\n    stringsDota: EngDotaStrings,\r\n\r\n    /// Selected enemy hero \r\n    selectedEnemyHero: DOTAHeroes.npc_dota_hero_target_dummy,\r\n    selectedEnemyHeroName: parseNameFromModel(DOTAHeroes.npc_dota_hero_target_dummy.Model[1]),\r\n    enemyHeroTalents: getHeroTalents(DOTAHeroes.npc_dota_hero_target_dummy),\r\n    enemyHeroAbilities: getAllHeroAbilities(DOTAHeroes.npc_dota_hero_target_dummy),\r\n    selectedEnemyTalents: [ ],\r\n    enemyHeroItems: [\r\n        { slot: 0, item: \"ultimate_scepter\" },\r\n        { slot: 1, item: \"\" },\r\n        { slot: 2, item: \"\" },\r\n        { slot: 3, item: \"\" },\r\n        { slot: 4, item: \"\" },\r\n        { slot: 5, item: \"\" },\r\n    ],\r\n};\r\n\r\nexport default initialState;","/// Parses a display name from a hero info Model string\r\nexport function parseNameFromModel (modelString) {\r\n    var dashSplit = modelString.split('.')[0].split('/');\r\n    return dashSplit[dashSplit.length - 1];\r\n};","import initialState from \"./initialState\";\r\n\r\nimport {\r\n    SELECTED_HERO,\r\n    SELECTED_ITEM,\r\n    SELECTED_BACKPACK_ITEM,\r\n    SELECTED_NEUTRAL,\r\n    SELECTED_TALENT,\r\n    UNSELECTED_TALENT,\r\n    NEW_HERO_LEVEL,\r\n} from \"../constants/actionTypes\";\r\n\r\nimport {\r\n    parseNameFromModel,\r\n} from \"../utils\";\r\n\r\nimport {\r\n    getAllHeroAbilities,\r\n    getHeroTalents,\r\n} from \"../utility/dataHelperHero\";\r\n\r\n/* DotA 2 Import Data */\r\nimport { DOTAHeroes } from \"../data/dota2/json/npc_heroes.json\";\r\n\r\n/// Takes the existing itemArray and removes the current slot item and\r\n/// replaces with the newItem\r\nfunction replaceUpdatedItem(itemArray, newItem) {\r\n    /// Remove old slot insert new and sort by Slot\r\n    let newArray = itemArray.filter((val) => {\r\n        if (val.slot !== newItem.slot) {\r\n            return val;\r\n        }\r\n    })\r\n    newArray.push({ \r\n        slot: newItem.slot,\r\n        item: newItem.item,\r\n        extra: newItem.extra,\r\n    });\r\n    /// Sort by slot order 0 - 5\r\n    newArray.sort((a, b) => (a.slot > b.slot) ? 1 : -1);\r\n    return newArray;\r\n}\r\n\r\nfunction getNewTalentArray(talentArray, newTalent) {\r\n    let newArray = talentArray.map((value => { return value }));\r\n    newArray.push(newTalent);\r\n    return newArray;\r\n}\r\n\r\nfunction removeTalent (talentArray, unselectedTalent) {\r\n    /// Filter to get all but the unselectedTalent\r\n    var array = talentArray.filter((talent) => {\r\n        if (talent && talent !== unselectedTalent) {\r\n            return talent;\r\n        }\r\n    });\r\n    return array;\r\n}\r\n\r\nfunction reducer(state = initialState, action) {\r\n    switch(action.type)\r\n    {\r\n        case SELECTED_HERO:\r\n            console.log(action);\r\n            let heroInfo = DOTAHeroes[action.value];\r\n            return {\r\n                ...state,\r\n                selectedHero: heroInfo,\r\n                selectedHeroName: action.value,\r\n                heroAbilities: getAllHeroAbilities(heroInfo),\r\n                heroTalents: getHeroTalents(heroInfo),\r\n                \r\n                // reset selected talents when new hero selected\r\n                selectedTalents: [ ],\r\n            };\r\n        case SELECTED_ITEM:\r\n            return {\r\n                ...state,\r\n                items: replaceUpdatedItem(state.items, action.value),\r\n            };\r\n        case SELECTED_BACKPACK_ITEM:\r\n            return {\r\n                ...state,\r\n                backpack: replaceUpdatedItem(state.backpack, action.value),\r\n            }\r\n        case SELECTED_NEUTRAL:\r\n            return {\r\n                ...state,\r\n                neutralItem: action.value,\r\n            };\r\n        case SELECTED_TALENT:\r\n            return {\r\n                ...state,\r\n               selectedTalents: getNewTalentArray(state.selectedTalents, action.value),\r\n            }\r\n            case UNSELECTED_TALENT:\r\n                return {\r\n                    ...state,\r\n                    selectedTalents: removeTalent(state.selectedTalents, action.value),\r\n                }\r\n        case NEW_HERO_LEVEL:\r\n            return {\r\n                ...state,\r\n                heroLevel: action.value,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","export const SELECTED_HERO = \"SELECT_HERO\";\r\nexport const SELECTED_NEUTRAL = \"SELECTED_NEUTRAL\";\r\nexport const SELECTED_ITEM = \"SELECTED_ITEM\";\r\nexport const SELECTED_BACKPACK_ITEM = \"SELECTED_BACKPACK_ITEM\";\r\nexport const SELECTED_TALENT = \"SELECTED_TALENT\";\r\nexport const UNSELECTED_TALENT = \"UNSELECTED_TALENT\";\r\nexport const NEW_HERO_LEVEL = \"NEW_HERO_LEVEL\";\r\nexport const C = \"ITEM_EXTRAS_CHANGED\";\r\n\r\nexport const LANGUAGE_CHANGED = \"LANGUAGE_CHANGED\";\r\n\r\nexport const ENEMY_SELECTED = \"ENEMY_SELECTED\";\r\nexport const ENEMY_SELECTED_TALENT = \"ENEMY_SELECTED_TALENT\";\r\n","/// Enum of all supported languages\r\nexport const ELanguages = {\r\n    SCHINESE: \"szh\",\r\n    ENGLISH: \"en\",\r\n    //RUSSIAN: \"ru\",\r\n};","import {\r\n    LANGUAGE_CHANGED\r\n} from \"../constants/actionTypes\";\r\nimport { ELanguages } from \"../enums/languages\";\r\nimport initialState from \"./initialState\";\r\n\r\nimport { lang as EngAbilStrings } from \"../data/dota2/languages/abilities_english.json\";\r\nimport { lang as EngDotaStrings } from \"../data/dota2/languages/dota_english.json\";\r\n\r\nimport { lang as SChineseAbilStrings } from \"../data/dota2/languages/abilities_schinese.json\";\r\nimport { lang as SChineseDotaStrings } from \"../data/dota2/languages/dota_schinese.json\";\r\n\r\nfunction getAbilityStrings(langCode) {\r\n    switch(langCode) {\r\n        case ELanguages.ENGLISH:\r\n            return EngAbilStrings;\r\n        case ELanguages.SCHINESE:\r\n            return SChineseAbilStrings;\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\nfunction getGeneralStrings(langCode) {\r\n    switch(langCode) {\r\n        case ELanguages.ENGLISH:\r\n            return EngDotaStrings;\r\n        case ELanguages.SCHINESE:\r\n            return SChineseDotaStrings;\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\nexport default (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case LANGUAGE_CHANGED:\r\n            console.log(`${LANGUAGE_CHANGED}: ${action.value}`);\r\n            return {\r\n                ...state,\r\n                lang: action.value,\r\n\r\n                stringsAbilities: getAbilityStrings(action.value),\r\n                stringsDota: getGeneralStrings(action.value),\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import { createStore, combineReducers } from \"redux\";\r\nimport hero from \"../reducers/hero\";\r\nimport language from \"../reducers/language\";\r\nimport enemy from \"../reducers/enemy\";\r\n\r\nconst allReducers = combineReducers({\r\n    language,\r\n    hero,\r\n    enemy,\r\n});\r\n\r\nconst store = createStore(allReducers);\r\n\r\nexport default store;","import initialState from \"./initialState\";\r\n\r\nimport {\r\n    ENEMY_SELECTED,\r\n    ENEMY_SELECTED_TALENT\r\n} from \"../constants/actionTypes\";\r\n\r\nexport default (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case ENEMY_SELECTED:\r\n            return {\r\n                ...state,\r\n\r\n                enemy: action.value,\r\n            };\r\n        case ENEMY_SELECTED_TALENT:\r\n            return {\r\n                ...state,\r\n\r\n                selectedEnemyTalents: [ ],\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Form } from 'react-bootstrap';\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { LANGUAGE_CHANGED } from \"../../constants/actionTypes\";\r\nimport { ELanguages } from \"../../enums/languages\";\r\n\r\nfunction getSupportedLanguages() {\r\n    var langs = Object.values(ELanguages);\r\n    return langs.map((value) => {\r\n        return (\r\n            <option value={value} key={value}>{value}</option>\r\n        )\r\n    });\r\n}\r\n\r\nclass LanguageSelect extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.onLanguageChanged = this.onLanguageChanged.bind(this);\r\n    }\r\n\r\n    onLanguageChanged(event) {\r\n        let newLanguage = event.target.value;\r\n        this.props.dispatch({ type: LANGUAGE_CHANGED, value: newLanguage });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Form.Control \r\n                    className=\"foresight-dropdown\"\r\n                    as=\"select\" \r\n                    onChange={this.onLanguageChanged} \r\n                    defaultValue={this.props.lang}>\r\n                    { getSupportedLanguages() }\r\n                </Form.Control>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    lang: state.language.lang,\r\n});\r\n\r\nexport default connect(mapStateToProps)(LanguageSelect);","import LanguageSelect from \"./LanguageSelect\";\r\n\r\nexport default LanguageSelect;","import React, { Component } from 'react';\r\nimport { \r\n    Nav,\r\n    Navbar,\r\n    Container,\r\n    Button,\r\n}from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\r\n\r\nimport LanguageSelect from '../LanguageSelect';\r\n\r\nimport \"./Navigation.css\";\r\n\r\nlet pkg = require('../../../package.json');\r\n\r\nclass Navigation extends Component {\r\n    render() {\r\n        return (\r\n            <Navbar className=\"foresite-navbar\">\r\n                <Container>\r\n                    <Navbar.Brand \r\n                        className=\"navbar-brand-name\"\r\n                        to=\"/\" as={Link}>\r\n                        { pkg ? pkg.name : \"?\" }\r\n                    </Navbar.Brand>\r\n                    <Nav.Link \r\n                        className=\"px-1 align-bottom mr-2\"\r\n                        style={{ fontSize: \"0.85rem\" }}\r\n                        eventKey=\"disabled\" \r\n                        disabled>\r\n                            {\r\n                                pkg ? \"v\" + pkg.version : \"v0.0.0\"\r\n                            }\r\n                    </Nav.Link>\r\n                    <Nav.Link\r\n                        className=\"px-1 align-bottom mr-2\"\r\n                        style={{ fontSize: \"0.85rem\" }}\r\n                        eventKey=\"disabled\"\r\n                        disabled>\r\n                        {\r\n                            pkg ? pkg.dotaVersion : \"Unknown\"\r\n                        }\r\n                    </Nav.Link>\r\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                        <Nav className=\"mr-auto\">\r\n                            <Nav.Link to=\"/\" as={Link}>home</Nav.Link>\r\n                            <Nav.Link to=\"/app\" as={Link}>app</Nav.Link>\r\n                        </Nav>\r\n                        <div className=\"mr-2\">\r\n                            <LanguageSelect/>\r\n                        </div>\r\n                        <a href=\"https://github.com/JoshLmao/foresight\">\r\n                            <Button variant=\"outline-secondary\">\r\n                                <FontAwesomeIcon icon={faGithub} />\r\n                            </Button>\r\n                        </a>\r\n                    </Navbar.Collapse>\r\n                </Container>\r\n            </Navbar>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Navigation;","import Navigation from \"./Navigation\";\r\n\r\nexport default Navigation;","import FourOhFour from \"./FourOhFour\";\r\n\r\nexport default FourOhFour;","import React, { Component } from 'react';\r\n\r\nclass FourOhFour extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                404 page\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FourOhFour;","import { lang as DOTAEngAbilityStrings } from \"../../data/dota2/languages/abilities_english.json\";\r\n\r\n/// Searches the passed strings file for the related string\r\n/// Very resource intensive\r\nexport function tryGetLocalizedString(languageStrings, stringKey) {\r\n    if (!languageStrings || !stringKey) {\r\n        return null;\r\n    }\r\n\r\n    let languageKeys = Object.keys(languageStrings.Tokens);\r\n    let matchingKeys = languageKeys.filter((key) => {\r\n        if (key.toLowerCase() === stringKey.toLowerCase()) {\r\n            return key;\r\n        } else {\r\n            return null;\r\n        }\r\n    });\r\n\r\n    if (matchingKeys && matchingKeys.length > 0) {\r\n        let displayName = languageStrings.Tokens[matchingKeys[0]];\r\n        return displayName;\r\n    } else {\r\n        return \"?\";\r\n    }\r\n}\r\n\r\nexport function tryGetTalentLocalizedString(languageStrings, stringKey) {\r\n    if (!languageStrings || !stringKey) {\r\n        return null;\r\n    }\r\n\r\n    let languageKeys = Object.keys(languageStrings.Tokens);\r\n    let matchingKeys = languageKeys.filter((key) => {\r\n        if (key.includes(stringKey)) {\r\n            return key;\r\n        } else {\r\n            return null;\r\n        }\r\n    });\r\n\r\n    if (matchingKeys && matchingKeys.length > 0) {\r\n        let displayName = languageStrings.Tokens[matchingKeys[0]];\r\n        return displayName;\r\n    } else {\r\n        return \"?\";\r\n    }\r\n}\r\n\r\n/// Quick method for retrieving localized string\r\n/// Main fast method to retrieve an exact key from strings\r\nexport function getLocalizedString(localeStrings, key) {\r\n    let string = localeStrings.Tokens[key];\r\n    return string ?? null;\r\n}\r\n\r\n/// Check if the localeStrings contains the key\r\nexport function containsLocalizedString (localeStrings, key) {\r\n    let containsVal = localeStrings.Tokens[key];\r\n    return containsVal != null;\r\n}\r\n\r\n/// Gets a string from the dota strings that contain the prefix \"DOTA_Toolip_\"\r\n/// Useful for getting general tooltip UI strings\r\nexport function getTooltipString(dotaStrings, tooltipKey) {\r\n    if (!dotaStrings || !tooltipKey) {\r\n        return null;\r\n    }\r\n\r\n    if (!tooltipKey.includes(\"DOTA_ToolTip_\")) {\r\n        tooltipKey = \"DOTA_ToolTip_\" + tooltipKey;\r\n    }\r\n    var match = dotaStrings.Tokens[tooltipKey];\r\n    return match;\r\n}\r\n\r\n/// Gets a string from the abilities strings that contain the prefix \"DOTA_Tooltip_ability\"\r\n/// Useful for retrieving localized strings of ability names\r\nexport function getTooltipAbilityString(abilityStrings, abilityKey) {\r\n    if (!abilityStrings || !abilityKey) {\r\n        return null;\r\n    }\r\n    if (!abilityKey.includes(\"DOTA_Tooltip_ability\")) {\r\n        abilityKey = \"DOTA_Tooltip_ability_\" + abilityKey;\r\n    }\r\n    var match = abilityStrings.Tokens[abilityKey];\r\n    return match;\r\n}\r\n\r\n/// Places a value in a translation string that contains a \"{s:value}\" inside\r\nexport function replaceStringValue(string, value) {\r\n    if (!string || value === undefined || value === null) {\r\n        return \"?\";\r\n    }\r\n\r\n    string = string.replace(/{.*}/, value);\r\n    return string;\r\n}\r\n\r\n/// Gets the english localized ability string\r\nexport function getEngAnilityLocalizedString (key) {\r\n    return getLocalizedString(DOTAEngAbilityStrings, key);\r\n}","export const EDamageType = {\r\n    MAGICAL: \"DAMAGE_TYPE_MAGICAL\",\r\n    PURE: \"DAMAGE_TYPE_PURE\",\r\n    PHYSICAL: \"DAMAGE_TYPE_PHYSICAL\",\r\n};\r\n\r\n/// All Ability Behaviour types\r\nexport const EAbilityBehaviour = {\r\n    UNIT_TARGET: \"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET\",\r\n    POINT: \"DOTA_ABILITY_BEHAVIOR_POINT\",\r\n    AOE: \"DOTA_ABILITY_BEHAVIOR_AOE\",\r\n    HIDDEN: \"DOTA_ABILITY_BEHAVIOR_HIDDEN\",\r\n    PASSIVE: \"DOTA_ABILITY_BEHAVIOR_PASSIVE\",\r\n    NO_TARGET: \"DOTA_ABILITY_BEHAVIOR_NO_TARGET\",\r\n    IMMEDIATE: \"DOTA_ABILITY_BEHAVIOR_IMMEDIATE\",\r\n    IGNORE_CHANNEL: \"DOTA_ABILITY_BEHAVIOR_IGNORE_CHANNEL\",\r\n    SHOW_IN_GUIDES: \"DOTA_ABILITY_BEHAVIOR_SHOW_IN_GUIDES\",\r\n    AURA: \"DOTA_ABILITY_BEHAVIOR_AURA\",\r\n}\r\n\r\n/// Enum of all spell immune types, if the ability pierces spell immunity\r\nexport const ESpellImmunityType = {\r\n    YES: \"SPELL_IMMUNITY_ENEMIES_YES\",\r\n    NO: \"SPELL_IMMUNITY_ENEMIES_NO\",\r\n    ALLIES_YES_ENEMIES_NO: \"SPELL_IMMUNITY_ALLIES_YES_ENEMIES_NO\",\r\n    ALLIES_NO: \"SPELL_IMMUNITY_ALLIES_NO\",\r\n}\r\n\r\n// Enum of all special bonus operations inside AbilityInfo AbilitySpecials\r\nexport const ESpecialBonusOperation = {\r\n    MULTIPLY: \"SPECIAL_BONUS_MULTIPLY\",\r\n    SUBTRACT: \"SPECIAL_BONUS_SUBTRACT\",\r\n    PERCENT_ADD: \"SPECIAL_BONUS_PERCENTAGE_ADD\",\r\n}","import { DOTAAbilities } from \"../data/dota2/json/npc_abilities.json\";\r\nimport {\r\n    getAbilityInfoFromName,\r\n    getAbilitySpecialAbilityValue\r\n} from \"./dataHelperAbilities\";\r\n\r\n/// Gets info and formattable display name of a talent\r\n/// Returns both display name of talent and it's info in an object\r\nexport function getTalentInfoFromName(talent) {\r\n    if (talent) {\r\n        var talentInfo = DOTAAbilities[talent];\r\n        return talentInfo;    \r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport function tryGetTalentSpecialAbilityValue (talent, specialValueKey) {\r\n    let talentInfo = getAbilityInfoFromName(talent);\r\n    if(talentInfo) {\r\n        let specialValue = getAbilitySpecialAbilityValue(talentInfo, specialValueKey);\r\n        if (specialValue) {\r\n            return specialValue;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/// Checks the selected talents array to see if the targetTalent has been selected\r\nexport function talentsInclude(selectedTalents, targetTalent) {\r\n    if (!selectedTalents) {\r\n        return null;\r\n    }\r\n\r\n    for (let talent of selectedTalents) {\r\n        if (talent === targetTalent) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}","// * Helper and utility functions to provide for retrieving data from \"npc_abilities.json\"\r\n// * \r\n\r\nimport { DOTAAbilities } from \"../data/dota2/json/npc_abilities.json\";\r\nimport { \r\n    EAbilityBehaviour, \r\n    EDamageType, \r\n    ESpellImmunityType,\r\n    ESpecialBonusOperation\r\n} from \"../enums/abilities\";\r\n\r\nimport {\r\n    lang as DOTAEngAbilityStrings\r\n} from \"../data/dota2/languages/abilities_english.json\";\r\nimport { containsLocalizedString } from \"./data-helpers/language\";\r\nimport { itemsContainsScepter } from \"./dataHelperItems\";\r\nimport { \r\n    tryGetTalentSpecialAbilityValue,\r\n    talentsInclude\r\n} from \"./dataHelperTalents\";\r\n\r\nexport function getAbilityInfoFromName(abilityName) {\r\n    if (abilityName) {\r\n        return DOTAAbilities[abilityName];\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport function tryGetAbilitySpecialAbilityValue (ability, specialValueKey, abilityLevel = 1) {\r\n    let abilityInfo = getAbilityInfoFromName(ability);\r\n    if (abilityInfo) {\r\n        let specialValue = getAbilitySpecialAbilityValue(abilityInfo, specialValueKey, abilityLevel);\r\n        if (specialValue) {\r\n            return specialValue;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nexport function getAbilitySpecialAbilityValue(abilityInfo, specialAbilityKey, abilityLevel = 1) {\r\n    if (abilityInfo && abilityInfo.AbilitySpecial) {\r\n        for(let i = 0; i < abilityInfo.AbilitySpecial.length; i++) {\r\n            let keys = Object.keys(abilityInfo.AbilitySpecial[i]);\r\n            let matchingKey = keys.find(element => {\r\n                return element === specialAbilityKey;\r\n            });\r\n\r\n            if (matchingKey) {\r\n                let specialAbilityInfo = abilityInfo.AbilitySpecial[i];\r\n\r\n                // If value contains a space, it can be levelled up needs to be split up\r\n                let dataValue = specialAbilityInfo[matchingKey];\r\n                if (typeof dataValue === \"string\" && dataValue.includes(' ')) {\r\n                    let split = specialAbilityInfo[matchingKey].split(' ');\r\n                    dataValue = split[abilityLevel - 1];\r\n                }\r\n\r\n                /// If wanting it for it's value, correctly convert and return\r\n                if (matchingKey.includes(\"value\") && specialAbilityInfo.var_type) {\r\n                    if (specialAbilityInfo.var_type === \"FIELD_INTEGER\") {\r\n                        return parseInt(dataValue);\r\n                    } \r\n                    else if(specialAbilityInfo.var_type === \"FIELD_FLOAT\") {\r\n                        return parseFloat(dataValue);\r\n                    }\r\n                } \r\n                /// else return whatever the value is\r\n                else {\r\n                    return dataValue;\r\n                }\r\n                \r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/// Gets \r\nexport function getAbilitySpecialCastRangeValue (abilityInfo, includePhrase, abilityLevel = 1) {\r\n    if (abilityInfo && abilityInfo.AbilitySpecial) {\r\n        for(let i = 0; i < abilityInfo.AbilitySpecial.length; i++) {\r\n            let keys = Object.keys(abilityInfo.AbilitySpecial[i]);\r\n            let matchingKey = keys.find(element => {\r\n                return element.includes(includePhrase) && !element.includes(\"scepter\");\r\n            });\r\n\r\n            if (matchingKey) {\r\n                let specialAbilityInfo = abilityInfo.AbilitySpecial[i];\r\n\r\n                /// ignore if scepter \r\n                if (specialAbilityInfo.RequiresScepter) {\r\n                    return null;\r\n                }\r\n\r\n                // If value contains a space, it can be levelled up needs to be split up\r\n                let dataValue = specialAbilityInfo[matchingKey];\r\n                \r\n                /// Return dataValue in format\r\n                return tryParseAbilitySpecialValue(specialAbilityInfo, dataValue, abilityLevel)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/// Searches an AbilityInfo's AbilitySpecial array for a property that includes the the \"includePhrase\"\r\n/// in it's key. For example includePhrase = \"charges\" would return value of voice spirit's \"max_charges\"\r\nexport function getIncludesAbilitySpecialAbilityValue(abilityInfo, includePhrase, abilityLevel) {\r\n    if (abilityInfo && abilityInfo.AbilitySpecial) {\r\n        for(let i = 0; i < abilityInfo.AbilitySpecial.length; i++) {\r\n            let keys = Object.keys(abilityInfo.AbilitySpecial[i]);\r\n            let matchingKey = keys.find(element => {\r\n                return element.includes(includePhrase);\r\n            });\r\n\r\n            if (matchingKey) {\r\n                let specialAbilityInfo = abilityInfo.AbilitySpecial[i];\r\n                let dataValue = specialAbilityInfo[matchingKey];\r\n\r\n                /// Return dataValue in format\r\n                return tryParseAbilitySpecialValue(specialAbilityInfo, dataValue, abilityLevel);\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/// Gets the standard output damage of an ability from its level\r\nexport function getAbilityOutputDamage(abilityInfo, abilityLevel) {\r\n    let abilityDmg = {\r\n        min: null,\r\n        max: null,\r\n        damage: null,\r\n        isPercent: null,\r\n    };\r\n\r\n    if (abilityInfo && abilityLevel) {\r\n        if (abilityInfo.AbilityDamage) {\r\n            let dmgValue = abilityInfo.AbilityDamage.split(' ')[abilityLevel - 1];\r\n            abilityDmg = {\r\n                ...abilityDmg,\r\n                damage: parseFloat(dmgValue),\r\n            };\r\n        }\r\n        else if (abilityInfo.AbilitySpecial) \r\n        {\r\n            for (let i = 0; i < abilityInfo.AbilitySpecial.length; i++) {\r\n                let specialAbilityElement = abilityInfo.AbilitySpecial[i];\r\n                \r\n                let abilSpecKeys = Object.keys(specialAbilityElement);\r\n                for(let key of abilSpecKeys) {\r\n                    // AbilitySpecial contains damage under a property\r\n                    let lowerKey = key.toLowerCase();\r\n                    \r\n                    // Includes dmg & not scepter\r\n                    if (lowerKey.includes(\"damage\") && !lowerKey.includes(\"scepter\")) \r\n                    {\r\n                        let value = parseAbilityValueByLevel(specialAbilityElement[key], abilityLevel);\r\n                        let dmgValue = parseFloat(value);\r\n\r\n                        if (lowerKey.includes(\"min\")) {\r\n                            //min_damage\r\n                            abilityDmg.min =  dmgValue;\r\n                        }\r\n                        if (lowerKey.includes(\"max\")) {\r\n                            abilityDmg.max = dmgValue;\r\n                        } \r\n                        if (lowerKey.includes(\"pct\")) {\r\n                            abilityDmg.isPercent = true;\r\n                        }\r\n\r\n                        if (!abilityDmg.min && !abilityDmg.max) {\r\n                            abilityDmg.damage = dmgValue;\r\n                        }\r\n                    }\r\n\r\n                    // Stop iterate if have min&max or dmg\r\n                    if (abilityDmg.min && abilityDmg.max || abilityDmg.damage) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return abilityDmg;\r\n}\r\n\r\n/// Gets all behaviour options of an ability such as if it goes through BKB, damage type, etc\r\nexport function getAbilityBehaviours(abilityInfo) {\r\n    if (!abilityInfo) {\r\n        return null;\r\n    }\r\n\r\n    let behaviours = [];\r\n\r\n    if (abilityInfo.AbilityBehavior) {\r\n        let targeting = [];\r\n        let splitBehaviours = abilityInfo.AbilityBehavior.split(' | ');\r\n        for(let b of splitBehaviours) {\r\n            switch(b) {\r\n                case EAbilityBehaviour.UNIT_TARGET:\r\n                    targeting.push(\"DOTA_ToolTip_Ability_Target\");\r\n                    break;\r\n                case EAbilityBehaviour.POINT:\r\n                    targeting.push(\"DOTA_ToolTip_Ability_Point\");\r\n                    break;\r\n                case EAbilityBehaviour.PASSIVE:\r\n                    targeting.push(\"DOTA_ToolTip_Ability_Passive\");\r\n                    break;\r\n                case EAbilityBehaviour.NO_TARGET:\r\n                    targeting.push(\"DOTA_ToolTip_Ability_NoTarget\");\r\n                    break;\r\n            }\r\n        }\r\n    \r\n        behaviours.push({\r\n            key: \"DOTA_ToolTip_Ability\",\r\n            value: targeting,\r\n        });\r\n    }\r\n\r\n    if (abilityInfo.AbilityUnitDamageType) {\r\n        let dmgTypeVal = \"\";\r\n        let splitDmgTypes = abilityInfo.AbilityUnitDamageType.split(\" | \");\r\n        for(let type of splitDmgTypes) {\r\n            switch(type) {\r\n                case EDamageType.MAGICAL:\r\n                    dmgTypeVal = \"DOTA_Plus_Death_Screen_MagicalDamage\";\r\n                    break;\r\n                case EDamageType.PURE:\r\n                    dmgTypeVal = \"DOTA_Plus_Death_Screen_PureDamage\";\r\n                    break;\r\n                case EDamageType.PHYSICAL:\r\n                    dmgTypeVal = \"DOTA_Plus_Death_Screen_PhysicalDamage\";\r\n                    break;\r\n                default:\r\n                    dmgTypeVal = \"Not Implemented\";\r\n                    break;\r\n            }\r\n        }\r\n\r\n        behaviours.push({\r\n            key: \"DOTA_ToolTip_Damage\",\r\n            value: dmgTypeVal,\r\n        });\r\n    }\r\n\r\n    if (abilityInfo.SpellImmunityType) {\r\n        let pierceValue = \"\";\r\n        switch(abilityInfo.SpellImmunityType) {\r\n            case ESpellImmunityType.YES:\r\n                pierceValue = \"DOTA_ToolTip_PiercesSpellImmunity_Yes\";\r\n                break;\r\n            case ESpellImmunityType.NO:\r\n            case ESpellImmunityType.ALLIES_NO:\r\n                pierceValue = \"DOTA_ToolTip_PiercesSpellImmunity_No\";\r\n                break;\r\n            case ESpellImmunityType.ALLIES_YES_ENEMIES_NO:\r\n                pierceValue = \"DOTA_ToolTip_PiercesSpellImmunity_AlliesYesEnemiesNo\";\r\n                break;\r\n            default:\r\n                pierceValue = \"Unknown\";\r\n                break;\r\n        }\r\n\r\n        behaviours.push({\r\n            key: \"DOTA_ToolTip_PiercesSpellImmunity\",\r\n            value: pierceValue,\r\n        });\r\n    }\r\n\r\n    return behaviours;\r\n}\r\n\r\n/// Parses an AbilitySpecial\r\nexport function parseAbilitySpecialValueByLevel (abilitySpecials, key, level = 1) {\r\n    let valuesSplit = abilitySpecials[key].split(' ');\r\n    if (valuesSplit.length > 1) {\r\n        return valuesSplit[level - 1];\r\n    } else {\r\n        return abilitySpecials[key];\r\n    }\r\n}\r\n\r\n/// Parses a value in an abilityInfo that could be alone or have multiple values per level\r\nexport function parseAbilityValueByLevel (value, level = 1) {\r\n    if (level < 1) {\r\n        return null;\r\n    }\r\n    \r\n    let abilValue = 0;\r\n    if (typeof value === \"string\") {\r\n        let splitValues = value.split(\" \");\r\n        if (splitValues.length > 1) {\r\n            abilValue = splitValues[level - 1];\r\n        } else {\r\n            abilValue = value;\r\n        }\r\n\r\n        abilValue = parseFloat(abilValue);\r\n    } else {\r\n        abilValue = value;\r\n    }\r\n\r\n    return abilValue;\r\n}\r\n\r\nexport function isCooldownTalent (talent) {\r\n    return isTalent(talent, \"cooldown\");\r\n}\r\n\r\nexport function isDamageTalent (talent) {\r\n    return isTalent(talent, \"damage\");\r\n}\r\n\r\nexport function isCastRangeTalent (talent) {\r\n    return isTalent(talent, \"cast range\");\r\n}\r\n\r\nexport function isTalent (talent, lowerCasePhrase) {\r\n    let abilityString = DOTAEngAbilityStrings.Tokens[\"DOTA_Tooltip_ability_\" + talent];\r\n    return abilityString && abilityString.toLowerCase().includes(lowerCasePhrase);\r\n}\r\n\r\n/// Checks the AbilityBehavior string on an AbilityInfo to\r\n/// see if it contains all EBehaviours in array\r\nexport function isAbilityBehaviour (abilityBehaviour, ebehaviours) {\r\n    if (abilityBehaviour) {\r\n        let splitBehaviours = abilityBehaviour.split(' | ');\r\n        \r\n        let contains = splitBehaviours.some((b) => ebehaviours.includes(b));\r\n        return contains;\r\n    }\r\n    return false;\r\n}\r\n\r\n/// Gets all AbilitySpecial extra information values with it's translation key \r\nexport function getAbilitySpecialExtraValues (abilityName, abilityInfo, abilityLevel, items, selectedTalents) {\r\n    if (!abilityInfo || (abilityInfo && !abilityInfo.AbilitySpecial)) {\r\n        return null;\r\n    }\r\n\r\n    let abilitySpecials = [];\r\n    let containsScepter = itemsContainsScepter(items);\r\n\r\n    for (let specialInfo of abilityInfo.AbilitySpecial) {\r\n        let abilitySpecialKeys = Object.keys(specialInfo);\r\n        let currentAbilitySpecialObject = null;\r\n        for (let key of abilitySpecialKeys) {\r\n\r\n            // Store specific properties inside object for later\r\n            if (key === \"LinkedSpecialBonus\") {\r\n                currentAbilitySpecialObject = {\r\n                    ...currentAbilitySpecialObject,\r\n                    specialBonus: specialInfo[key],\r\n                };\r\n            } else if (key === \"LinkedSpecialBonusOperation\") {\r\n                currentAbilitySpecialObject = {\r\n                    ...currentAbilitySpecialObject,\r\n                    specialBonusOperation: specialInfo[key],\r\n                };\r\n            }\r\n\r\n            // Skip specific properties we don't need\r\n            if (key.includes(\"var_type\") || key.includes(\"RequiresScepter\") || key === \"damage\") {\r\n                continue;\r\n            }\r\n            \r\n            // Ignore scepter info if no aghs in inventory\r\n            if (key.includes(\"scepter\") && !containsScepter) {\r\n                continue;\r\n            }\r\n\r\n            // Create key for indexing inside locale files\r\n            let translationKey = `DOTA_Tooltip_ability_${abilityName}_${key}`;\r\n\r\n            let abilityValue = null;\r\n            // if AbilitySpecial key doesn't contain an underscore, it references property on master AbilityInfo object\r\n            if (!key.includes(\"_\") && !key.includes(\"Linked\")) {\r\n                let containsKey = tryGetAbilityInfoValueFromKey(abilityInfo, key);\r\n                if (containsKey) {\r\n                    abilityValue = tryParseAbilitySpecialValue(abilityInfo, abilityInfo[containsKey], abilityLevel);\r\n                }\r\n            } else {\r\n                abilityValue = tryParseAbilitySpecialValue(specialInfo, specialInfo[key], abilityLevel);\r\n            }\r\n            \r\n            if (translationKey && abilityValue) {\r\n                currentAbilitySpecialObject = {\r\n                    ...currentAbilitySpecialObject,\r\n                    key: translationKey,\r\n                    value: abilityValue,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (currentAbilitySpecialObject && currentAbilitySpecialObject.value) {\r\n            let value = currentAbilitySpecialObject.value;\r\n\r\n            // If AbilitySpecial has special bonus modifier and is selected\r\n            if ( talentsInclude(selectedTalents, currentAbilitySpecialObject.specialBonus) ) {\r\n                let specialBonusValue = tryGetTalentSpecialAbilityValue(currentAbilitySpecialObject.specialBonus, \"value\");\r\n               \r\n                /// Apply bonus operation to value\r\n                if (currentAbilitySpecialObject.specialBonusOperation) {\r\n                    switch (currentAbilitySpecialObject.specialBonusOperation) {\r\n                        case ESpecialBonusOperation.SUBTRACT:\r\n                            value -= specialBonusValue;\r\n                            break;\r\n                        case ESpecialBonusOperation.MULTIPLY:\r\n                            value *= specialBonusValue;\r\n                            break;\r\n                        case ESpecialBonusOperation.PERCENT_ADD:\r\n                            let percentBonus = (value / 100) * specialBonusValue;\r\n                            value += percentBonus;\r\n                            break;\r\n                        default:\r\n                            console.log(`Unknown SpecialBonusOperation: ${currentAbilitySpecialObject.specialBonusOperation}`);\r\n                            break;\r\n                    };\r\n                } else {\r\n                    /// If no special bonus operation, just replace new values on original\r\n                    if (specialBonusValue) {\r\n                        value = specialBonusValue;\r\n                    }\r\n                }\r\n            }\r\n\r\n            abilitySpecials.push({\r\n                key: currentAbilitySpecialObject.key,\r\n                value: value,\r\n            });\r\n        }\r\n    }\r\n\r\n    return abilitySpecials;\r\n}\r\n\r\nexport function tryParseAbilitySpecialValue (abilSpecialinfo, value, abilityLevel = 1) {\r\n    if (typeof value === \"string\" && value.includes(' ')) {\r\n        let split = value.split(' ');\r\n        value = split[abilityLevel - 1];\r\n    }\r\n\r\n    if (abilSpecialinfo) {\r\n        if (abilSpecialinfo.var_type === \"FIELD_INTEGER\") {\r\n            return parseInt(value);\r\n        } \r\n        else if(abilSpecialinfo.var_type === \"FIELD_FLOAT\") {\r\n            return parseFloat(value);\r\n        }\r\n    }\r\n    return value;\r\n}\r\n\r\n/// Try get's a value on an AbilityInfo object from it's key, which can be upper/lower/CamelCase\r\nexport function tryGetAbilityInfoValueFromKey (abilityInfo, key) {\r\n    let abilInfoKeys = Object.keys(abilityInfo);\r\n    for(let abilInfoKey of abilInfoKeys) {\r\n        if (abilInfoKey.toLowerCase() === key.toLowerCase()) {\r\n            return  abilInfoKey;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n","\r\n// * Helper and utility functions to provide for retrieving data from \"npc_items.json\"\r\n// * \r\nimport { DOTAAbilities as DOTAItems } from \"../data/dota2/json/items.json\";\r\nimport { neutral_items as DOTANeutralsTierList } from \"../data/dota2/json/neutral_items.json\";\r\nimport { EAttributes } from \"../enums/attributes\";\r\nimport React from \"react\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faClock } from '@fortawesome/free-solid-svg-icons';\r\nimport { tryParseAbilitySpecialValue } from \"./dataHelperAbilities\";\r\nimport { \r\n    getLocalizedString, \r\n    getEngAnilityLocalizedString \r\n} from \"./data-helpers/language\";\r\n\r\nexport function getItemInfoFromName (itemName) {\r\n    if (itemName)\r\n        return DOTAItems[itemName];\r\n    else\r\n        return null;\r\n}\r\n\r\n/// Gets the value of an item's AbilitySpecial array\r\nexport function getItemSpecialAbilityValue (itemInfo, specialAbilityValueKey) {\r\n    if (itemInfo && itemInfo.AbilitySpecial) {\r\n        for(let i = 0; i < itemInfo.AbilitySpecial.length; i++) {\r\n            let keys = Object.keys(itemInfo.AbilitySpecial[i]);\r\n            let matchingKey = keys.find(element => {\r\n                return element === specialAbilityValueKey;\r\n            });\r\n\r\n            if (matchingKey) {\r\n                let specialAbilityInfo = itemInfo.AbilitySpecial[i];\r\n                return tryParseAbilitySpecialValue(specialAbilityInfo, specialAbilityInfo[matchingKey], 1);\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/// Try Gets a item info and sepcial value from it's item's Ability Special array\r\nexport function tryGetItemSpecialValue (item, specialAbilityValueKey) {\r\n    let itemInfo = getItemInfoFromName(item.item);\r\n    if (itemInfo) {\r\n        var specialValue = getItemSpecialAbilityValue(itemInfo, specialAbilityValueKey);\r\n        if (specialValue) {\r\n            return specialValue;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/// Try Gets a neutral item info and special value from it's items' AbilitySpecial array\r\nexport function tryGetNeutralSpecialValue (neutral, specialValueKey) {\r\n    let foundNeutralInfo = getItemInfoFromName(neutral.item);\r\n    if (foundNeutralInfo) {\r\n        var specialValue = getItemSpecialAbilityValue(foundNeutralInfo, specialValueKey);\r\n        if (specialValue) {\r\n            return specialValue;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/// Gets all normal items in dota\r\nexport function getAllItems () {\r\n    let selectableItems = Object.keys(DOTAItems).filter((value) => {\r\n        let key = value.toLowerCase();\r\n        let ability = DOTAItems[value];\r\n        if (key !== \"version\" && !key.includes(\"recipe\") && !ability.ItemIsNeutralDrop && !ability.IsObsolete) {\r\n            return true;\r\n        }\r\n        return false;\r\n    });\r\n\r\n    // Convert keys to item data\r\n    selectableItems = selectableItems.map((key) => {\r\n        return {\r\n            item:  DOTAItems[key],\r\n            name: key,\r\n        };\r\n    })\r\n    selectableItems.sort();\r\n\r\n    return selectableItems;\r\n}\r\n\r\n/// Returns all neutral items\r\nexport function getAllNeutrals() {\r\n     /// Filter out unused or unnecessary keys in items.json\r\n     let selectableNeutrals = Object.keys(DOTAItems).filter((value, index, array) => {\r\n        let key = value.toLowerCase();\r\n        let ability = DOTAItems[value];\r\n        \r\n        // Make sure it's a neutral\r\n        if (ability.ItemIsNeutralDrop === \"1\") {\r\n            // Filter irrelevant results, ignore any neutral recipes and return full item\r\n            if (key !== \"version\" && !ability.IsObsolete && !key.includes(\"recipe\")) {\r\n                return true;\r\n            }    \r\n        }\r\n        \r\n        return false;\r\n    });\r\n    selectableNeutrals.sort();\r\n\r\n    // Map to an object\r\n    selectableNeutrals = selectableNeutrals.map((key) => {\r\n        let itemKey = key;\r\n        if (itemKey.includes(\"recipe\")) {\r\n            // remove recipe and retrieve item version\r\n            itemKey = itemKey.replace(\"_recipe\", \"\");\r\n        }\r\n\r\n        let itemInfo = DOTAItems[itemKey];\r\n        if (itemInfo.ItemIsNeutralDrop === \"1\") {\r\n            return {\r\n                item: itemKey,\r\n                itemInfo: itemInfo,\r\n            };\r\n        }\r\n    });\r\n\r\n    return selectableNeutrals;\r\n}\r\n\r\n/// Gets the correct key inside items.json for the hero's primary attribute\r\nexport function primaryAttributeToItemBonusKey(primaryAttr) {\r\n    switch(primaryAttr) {\r\n        case EAttributes.ATTR_STRENGTH:\r\n            return [ \"bonus_strength\" ];\r\n        case EAttributes.ATTR_AGILITY:\r\n            return [ \"bonus_agility\" ];\r\n        case EAttributes.ATTR_INTELLIGENCE:\r\n            return [ \"bonus_intellect\", \"bonus_intelligence\" ];\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\n/// Checks if the items array contains an aghanims scepter\r\nexport function itemsContainsScepter (allItems) {\r\n    for (let item of allItems) {\r\n        if (item.item && item.item.includes(\"ultimate_scepter\")) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n/// Replaces a localized string with it's data values found inside AbilitySpecial \r\n/// or on ItemInfo object\r\nexport function replaceStringWithDataValues (string, itemInfo) {\r\n    if (!string) {\r\n        return null;\r\n    }\r\n\r\n    let replaceRegex = /(%.*?%)/;\r\n    \r\n    while (string.match(replaceRegex)?.length > 0) {\r\n        let phrase = string.match(replaceRegex)[0];\r\n        if (phrase) {\r\n            let infoKey = phrase.split(\"%\").join(\"\");\r\n            let specialAbilityValue = \"?\";\r\n            // no characters inbetween, needs to be a normal percentage sign\r\n            if (infoKey === \"\") {\r\n                /// use ~ for now, replace later\r\n                specialAbilityValue = \"~\";\r\n            }\r\n            // if is an AbilitySpecial key as all contain a '_' \r\n            else if (infoKey.includes(\"_\")) {\r\n                specialAbilityValue = getItemSpecialAbilityValue(itemInfo, infoKey);\r\n            }\r\n            // is a key on the main ItemInfo object \r\n            else {\r\n                specialAbilityValue = tryGetItemInfoValue(itemInfo, infoKey);\r\n            }\r\n            \r\n            string = string.replace(phrase, specialAbilityValue);\r\n        }\r\n    }\r\n\r\n    /// replace ! with actual percentage sign\r\n    string = string.replace(/[~]/g, \"%\");\r\n    \r\n    return string;\r\n}\r\n\r\n/// Try Get's a ItemInfo value on the original object from a key\r\nexport function tryGetItemInfoValue (itemInfo, itemInfoKey) {\r\n    if (itemInfo) {\r\n        let keys = Object.keys(itemInfo);\r\n        let matchingKey = keys.find(element => {\r\n            return element.toLowerCase() === itemInfoKey.toLowerCase();\r\n        });\r\n\r\n        if (matchingKey) {\r\n            let infoValue = itemInfo[matchingKey];\r\n            if (infoValue.includes(\".\")) {\r\n                return parseFloat(infoValue);\r\n            } else {\r\n                return parseInt(infoValue);\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/// Converts a item description localized string into the correct displayable HTML\r\nexport function convertItemDescToHtml(itemDescString, itemName, itemInfo) {\r\n    let dataString = replaceStringWithDataValues(itemDescString, itemInfo);\r\n    if (!dataString) {\r\n        return null;\r\n    }\r\n\r\n    /// Get english string to be able to check for \"Active:\" phrase\r\n    let engDataString = getEngAnilityLocalizedString(`DOTA_Tooltip_ability_${itemName}_Description`);\r\n    let engSplitString = engDataString.split(\"\\\\n\");\r\n\r\n    /// Also split localized string to iterate over\r\n    let localizedSplit = dataString.split(\"\\\\n\");\r\n\r\n    let totalHtmlSections = [];\r\n    for(let i = 0; i < localizedSplit.length; i++) {\r\n        let section = localizedSplit[i];\r\n        let isActive = engSplitString[i].includes(\"Active:\");\r\n        if (isActive) {\r\n            totalHtmlSections.push(\r\n                <div className=\"my-3 item-active\" key={i}>\r\n                    <div\r\n                        className=\"d-flex justify-content-between align-items-center\" \r\n                        style={{ position: \"absolute\", right: \"1rem\" }}>\r\n                        {\r\n                            itemInfo && itemInfo.AbilityManaCost &&\r\n                            <div className=\"d-flex\">\r\n                                <div className=\"mx-1 my-1 mana-cost-box-icon\" />\r\n                                <div>\r\n                                    { parseInt(itemInfo.AbilityManaCost) }\r\n                                </div>\r\n                            </div>\r\n                        }\r\n                        <div className=\"px-1\" />\r\n                        {\r\n                            itemInfo && itemInfo.AbilityCooldown &&\r\n                            <div className=\"d-flex\">\r\n                                <FontAwesomeIcon \r\n                                    className=\"mx-1 my-1\" \r\n                                    icon={faClock} />\r\n                                <div>\r\n                                    { parseFloat(itemInfo.AbilityCooldown)  }\r\n                                </div>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                    <div dangerouslySetInnerHTML={{ __html: section }}>\r\n                    </div>\r\n                </div>\r\n            )\r\n        } else {\r\n            totalHtmlSections.push(\r\n                <div\r\n                    key={i} \r\n                    className={`my-3 ${itemInfo.ItemQuality === \"consumable\" ? \"item-consumable\" : \"item-passive\"}`} \r\n                    dangerouslySetInnerHTML={{ __html: section }}>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    return totalHtmlSections;\r\n}\r\n\r\n/// Gets all bonuses the item provides, returning a key value list\r\nexport function getItemStatistics (itemInfo) {\r\n    if (!itemInfo || !itemInfo?.AbilitySpecial) {\r\n        return null;\r\n    }\r\n\r\n    let statistics = [];\r\n\r\n    for (let i = 0; i < itemInfo.AbilitySpecial.length; i++) {\r\n        let keys = Object.keys(itemInfo.AbilitySpecial[i]);\r\n        for(let key of keys) {\r\n            if (key.includes(\"bonus\") || \r\n                key.includes(\"spell\") || \r\n                key.includes(\"multiplier\") || \r\n                key.includes(\"regen\") || \r\n                key.includes(\"resistance\") ) {\r\n                let val = tryParseAbilitySpecialValue(itemInfo.AbilitySpecial[i], itemInfo.AbilitySpecial[i][key]);\r\n                statistics.push({\r\n                    key: key,\r\n                    value: val,\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    return statistics;\r\n}\r\n\r\n/// Checks an ItemInfo Disassemble rule if it matches the given rule\r\nexport function isDissassembleRule(itemInfo, eDisassembleRule) {\r\n    if (itemInfo && itemInfo.ItemDisassembleRule) {\r\n        let split = itemInfo.ItemDisassembleRule.split(\" | \");\r\n        for(let rule of split) {\r\n            if (rule === eDisassembleRule) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n/// Checks if an item requires charges to function\r\nexport function itemRequiresCharges (itemName) {\r\n    let itemInfo = getItemInfoFromName(itemName);\r\n    if (itemInfo) {\r\n        return itemInfo.ItemRequiresCharges === \"1\";\r\n    }\r\n    return false;\r\n}\r\n\r\n/// Checks an item alias from an ItemInfo to see if the phrase is included\r\nexport function itemAliasIncludes (itemAlias, includePhrase) {\r\n    if (itemAlias && includePhrase) {\r\n        let split = itemAlias.split(\";\");\r\n        for (let alias of split) {\r\n            if (alias.toLowerCase().indexOf(includePhrase.toLowerCase()) !== -1) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n/// Gets the list of enabled/disabled Neutrals in their tiers\r\nexport function getNeutralTierLayout () {\r\n    if (DOTANeutralsTierList) {\r\n        return DOTANeutralsTierList;\r\n    }\r\n    return null;\r\n}","// Enum for all Attack types\r\nexport const EAttackCapabilities = {\r\n    MELEE: \"DOTA_UNIT_CAP_MELEE_ATTACK\",\r\n    RANGED: \"DOTA_UNIT_CAP_RANGED_ATTACK\",\r\n};","import { \r\n    getItemInfoFromName,\r\n    getItemSpecialAbilityValue,\r\n    tryGetItemSpecialValue,\r\n    tryGetNeutralSpecialValue,\r\n    primaryAttributeToItemBonusKey,\r\n    itemsContainsScepter\r\n} from \"./dataHelperItems\";\r\n\r\nimport {\r\n    getAbilityInfoFromName,\r\n    getAbilitySpecialAbilityValue,\r\n    getAbilityOutputDamage,\r\n    tryGetAbilitySpecialAbilityValue,\r\n    parseAbilityValueByLevel,\r\n    isCooldownTalent,\r\n    isDamageTalent,\r\n    isCastRangeTalent,\r\n    getAbilitySpecialCastRangeValue,\r\n    getIncludesAbilitySpecialAbilityValue,\r\n    isAbilityBehaviour\r\n} from \"./dataHelperAbilities\";\r\n\r\nimport {\r\n    getTalentInfoFromName,\r\n    tryGetTalentSpecialAbilityValue,\r\n} from \"./dataHelperTalents\";\r\n\r\nimport {\r\n    getDotaBaseHero,\r\n    getSpecificAttributeStats,\r\n    getPrimaryAttributeStats,\r\n    getPrimaryAttribute,\r\n    isHeroAttackCapability\r\n} from \"./dataHelperHero\";\r\n\r\nimport { EAttributes } from \"../enums/attributes\";\r\nimport { EAttackCapabilities } from \"../enums/hero\";\r\n\r\nimport { DOTAHeroes } from \"../data/dota2/json/npc_heroes.json\";\r\nimport { DOTAAbilities } from \"../data/dota2/json/npc_abilities.json\";\r\n\r\n/// Calculates the health of a hero\r\n/// https://dota2.gamepedia.com/Health\r\nexport function calculateHealth(hero, heroLevel, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }\r\n    \r\n    let HEALTH_PER_STRENGTH_POINT = 20;\r\n    let baseStrength = parseInt(hero.AttributeBaseStrength)\r\n    let strengthGain = parseFloat(hero.AttributeStrengthGain);\r\n\r\n    let baseHealth = 0;\r\n    if (DOTAHeroes && DOTAHeroes.npc_dota_hero_base && DOTAHeroes.npc_dota_hero_base.StatusHealth) {\r\n        baseHealth = parseInt(DOTAHeroes.npc_dota_hero_base.StatusHealth);\r\n    } else {\r\n        console.error(\"Can't add baseHealth to heroes health pool\");\r\n    }\r\n\r\n    let totalStr = baseStrength + (strengthGain * (heroLevel - 1));\r\n    let totalHealth = baseHealth + (totalStr * HEALTH_PER_STRENGTH_POINT);\r\n\r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            let bonusHealth = tryGetItemSpecialValue(item, \"bonus_health\");\r\n            if (bonusHealth) {\r\n                totalHealth += bonusHealth;\r\n            }\r\n\r\n            let bonusStr = tryGetItemSpecialValue(item, \"bonus_strength\");\r\n            if (bonusStr) {\r\n                totalHealth += bonusStr * HEALTH_PER_STRENGTH_POINT;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalHealth += bonusAllStats * HEALTH_PER_STRENGTH_POINT;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let bonusHealth = tryGetNeutralSpecialValue(neutral, \"bonus_health\");\r\n        if (bonusHealth) {\r\n            totalHealth += bonusHealth;\r\n        }\r\n\r\n        let bonusStr = tryGetNeutralSpecialValue(neutral, \"bonus_strength\");\r\n        if (bonusStr) {\r\n            totalHealth += bonusStr * HEALTH_PER_STRENGTH_POINT;\r\n        }\r\n\r\n        let bonusAllStats = tryGetNeutralSpecialValue(neutral, \"bonus_all_stats\");\r\n        if (bonusAllStats) {\r\n            totalHealth += bonusAllStats * HEALTH_PER_STRENGTH_POINT;\r\n        }\r\n\r\n        let maxHealth = tryGetNeutralSpecialValue(neutral, \"max_health\");\r\n        if (maxHealth) {\r\n            totalHealth += maxHealth;\r\n        }\r\n    }\r\n\r\n    if (abilities && abilities.length > 0) {\r\n        \r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            if (talent.includes(\"bonus_hp\")) {\r\n                let bonusHealth = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusHealth) {\r\n                    totalHealth += bonusHealth;\r\n                }\r\n            } else if (talent.includes(\"bonus_strength\")) {\r\n                let bonusStr = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusStr) {\r\n                    totalHealth += bonusStr * HEALTH_PER_STRENGTH_POINT;\r\n                }\r\n            } else if (talent.includes(\"bonus_all_stats\")) {\r\n                let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAllStats) {\r\n                    totalHealth += bonusAllStats * HEALTH_PER_STRENGTH_POINT;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return totalHealth.toFixed(0);\r\n}\r\n\r\n/// Calculates the mana pool of a hero\r\n/// https://dota2.gamepedia.com/Mana\r\nexport function calculateMana(hero, heroLevel, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }    \r\n\r\n    let MANA_PER_INT_POINT = 12;\r\n    let baseInt = parseInt(hero.AttributeBaseIntelligence);\r\n    let intGain = parseFloat(hero.AttributeIntelligenceGain);\r\n\r\n    let baseMana = 0;\r\n    if (DOTAHeroes && DOTAHeroes.npc_dota_hero_base && DOTAHeroes.npc_dota_hero_base.StatusMana) {\r\n        baseMana = parseInt(DOTAHeroes.npc_dota_hero_base.StatusMana);\r\n    } else {\r\n        console.error(\"Can't add baseMana to heroes mana pool\");\r\n    }\r\n\r\n    let totalInt = baseInt + (intGain * (heroLevel - 1));\r\n    let totalMana = baseMana + (totalInt * MANA_PER_INT_POINT);\r\n\r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            let bonusMana = tryGetItemSpecialValue(item, \"bonus_mana\");\r\n            if (bonusMana) {\r\n                totalMana += bonusMana;\r\n            }\r\n\r\n            let bonusInt = tryGetItemSpecialValue(item, \"bonus_intellect\");\r\n            if (bonusInt) {\r\n                totalMana += bonusInt * MANA_PER_INT_POINT;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalMana += bonusAllStats * MANA_PER_INT_POINT;\r\n            }\r\n        }\r\n    }\r\n    \r\n    if (neutral) {\r\n        let bonusMana = tryGetNeutralSpecialValue(neutral, \"bonus_mana\");\r\n        if (bonusMana) {\r\n            totalMana += bonusMana;\r\n        }\r\n\r\n        let bonusInt = tryGetNeutralSpecialValue(neutral, \"bonus_intellect\");\r\n        if (bonusInt) {\r\n            totalMana += bonusInt * MANA_PER_INT_POINT;\r\n        }\r\n\r\n        let bonusAllStats = tryGetNeutralSpecialValue(neutral, \"bonus_all_stats\");\r\n        if (bonusAllStats) {\r\n            totalMana += bonusAllStats * MANA_PER_INT_POINT;\r\n        }\r\n\r\n        // If witless shako, remove from total mana pool\r\n        if (neutral.item === \"item_witless_shako\") {\r\n            let maxMana = tryGetNeutralSpecialValue(neutral, \"max_mana\");\r\n            if (maxMana) {\r\n                totalMana -= maxMana;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (abilities && abilities.length > 0) {\r\n        for(let ability of abilities) {\r\n            let bonusMana = tryGetAbilitySpecialAbilityValue(ability, \"bonus_mana\");\r\n            if (bonusMana) {\r\n                totalMana += bonusMana;\r\n            }\r\n\r\n            let bonusInt = tryGetAbilitySpecialAbilityValue(ability, \"bonus_intellect\");\r\n            if (bonusInt) {\r\n                totalMana += bonusInt * MANA_PER_INT_POINT;\r\n            }\r\n\r\n            let bonusAllStats = tryGetAbilitySpecialAbilityValue(ability, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalMana += bonusAllStats * MANA_PER_INT_POINT;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            if (talent.includes(\"bonus_mp\")) {\r\n                let bonusMana = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusMana) {\r\n                    totalMana += bonusMana;\r\n                }\r\n            } else if (talent.includes(\"bonus_intelligence\")) {\r\n                let bonusInt = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusInt) {\r\n                    totalMana += bonusInt * MANA_PER_INT_POINT;\r\n                }\r\n            } else if (talent.includes(\"bonus_all_stats\")) {\r\n                let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAllStats) {\r\n                    totalMana += bonusAllStats * MANA_PER_INT_POINT;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return totalMana.toFixed(0);\r\n}\r\n\r\n/* Hero gains +0.1 regen per each point of strength\r\n* https://dota2.gamepedia.com/Health_regeneration */\r\nexport function calculateHealthRegen(hero, heroLevel, items, neutral, abilities, talents) {\r\n    if(!hero) {\r\n        return \"?\";\r\n    }\r\n\r\n    let HP_REGEN_PER_STRENGTH = 0.1;\r\n    let baseStr = parseInt(hero.AttributeBaseStrength);\r\n    let strPerLvl = parseFloat(hero.AttributeStrengthGain);\r\n\r\n    let totalHpRegen = (baseStr + (strPerLvl * (heroLevel - 1))) * HP_REGEN_PER_STRENGTH;\r\n    if (hero.StatusHealthRegen) {\r\n        totalHpRegen += parseFloat(hero.StatusHealthRegen);\r\n    }\r\n\r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            let regenAmt = tryGetItemSpecialValue(item, \"bonus_health_regen\");\r\n            if (regenAmt) {\r\n                totalHpRegen += regenAmt;\r\n            }\r\n\r\n            let bonusStr = tryGetItemSpecialValue(item, \"bonus_strength\");\r\n            if(bonusStr) {\r\n                totalHpRegen += bonusStr * HP_REGEN_PER_STRENGTH;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalHpRegen += bonusAllStats * HP_REGEN_PER_STRENGTH;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let bonusHealthRegen = tryGetNeutralSpecialValue(neutral, \"bonus_health_regen\");\r\n        if (bonusHealthRegen) {\r\n            totalHpRegen += bonusHealthRegen;\r\n        }\r\n\r\n        let bonusStr = tryGetNeutralSpecialValue(neutral, \"bonus_strength\");\r\n        if (bonusStr) {\r\n            totalHpRegen += bonusStr * HP_REGEN_PER_STRENGTH;\r\n        }\r\n        \r\n        let bonusAllStats = tryGetNeutralSpecialValue(neutral, \"bonus_all_stats\");\r\n        if (bonusAllStats) {\r\n            totalHpRegen += bonusAllStats * HP_REGEN_PER_STRENGTH;\r\n        }\r\n    } \r\n\r\n    // if (abilities && abilities.length > 0) {\r\n    //     for (let ability of abilities) {\r\n    //         let bonusRegen = tryGetAbilitySpecialAbilityValue(ability, \"bonus_health_regen\", 1);\r\n    //         if (bonusRegen) {\r\n    //             totalHpRegen += bonusRegen;\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for (let talent of talents) {\r\n            // Only get bonus_hp_regen talents\r\n            if (talent.includes(\"bonus_hp_regen\")) {\r\n                let bonusRegen = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusRegen) {\r\n                    totalHpRegen += bonusRegen;\r\n                }\r\n            } else if(talent.includes(\"bonus_strength\")) {\r\n                let bonusStr = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusStr) {\r\n                    totalHpRegen += bonusStr * HP_REGEN_PER_STRENGTH;\r\n                }\r\n            } else if (talent.includes(\"bonus_all_stats\")) {\r\n                let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAllStats) {\r\n                    totalHpRegen += bonusAllStats * HP_REGEN_PER_STRENGTH;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return totalHpRegen.toFixed(1);\r\n}\r\n\r\n/* Each point of intelligence increases the hero's mana regeneration by 0.05.\r\n * https://dota2.gamepedia.com/Mana_regeneration */\r\nexport function calculateManaRegen(hero, heroLevel, items, neutral, abilities, talents) {\r\n    if(!hero) {\r\n        return \"?\";\r\n    }\r\n    let MANA_REGEN_PER_INT = 0.05;\r\n    let baseInt = parseInt(hero.AttributeBaseIntelligence);\r\n    let intGain = parseFloat(hero.AttributeIntelligenceGain);\r\n\r\n    let totalManaRegen = (baseInt + (intGain * (heroLevel - 1))) * MANA_REGEN_PER_INT;\r\n    if (hero.StatusManaRegen) {\r\n        totalManaRegen += parseFloat(hero.StatusManaRegen);\r\n    }\r\n\r\n    let totalManaRegenPercentAmp = 100;\r\n\r\n    if(items && items.length > 0) {\r\n        for(let item of items) {\r\n            let bonusManaRegen = tryGetItemSpecialValue(item, \"bonus_mana_regen\");\r\n            if (bonusManaRegen) {\r\n                totalManaRegen += bonusManaRegen;\r\n            }\r\n\r\n            let bonusInt = tryGetItemSpecialValue(item, \"bonus_intelligence\");\r\n            if(bonusInt) {\r\n                let regen = bonusInt * MANA_REGEN_PER_INT; \r\n                totalManaRegen += regen;\r\n            }\r\n\r\n            let bonusIntellect = tryGetItemSpecialValue(item, \"bonus_intellect\");\r\n            if (bonusIntellect) {\r\n                let regen = bonusIntellect * MANA_REGEN_PER_INT; \r\n                totalManaRegen += regen;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalManaRegen += bonusAllStats * MANA_REGEN_PER_INT;\r\n            }\r\n\r\n            // If bloodstone mp regen per charge\r\n            let regenPerCharge = tryGetItemSpecialValue(item, \"regen_per_charge\");\r\n            if (item.extra?.charges && regenPerCharge) {\r\n                let bloodstoneCharges = item.extra.charges;\r\n                totalManaRegen += regenPerCharge * bloodstoneCharges;\r\n            }\r\n\r\n            /// any mana regen percentage multiplier\r\n            let manaRegenAmp = tryGetItemSpecialValue(item, \"mana_regen_multiplier\");\r\n            if (manaRegenAmp) {\r\n                totalManaRegenPercentAmp += manaRegenAmp;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let bonusInt = tryGetNeutralSpecialValue(neutral, \"bonus_intelligence\");\r\n        if (bonusInt) {\r\n            let manaRegen = bonusInt * MANA_REGEN_PER_INT;\r\n            totalManaRegen += manaRegen;\r\n        }\r\n\r\n        let bonusIntellect = tryGetNeutralSpecialValue(neutral, \"bonus_intellect\");\r\n        if (bonusIntellect) {\r\n            let regen = bonusIntellect * MANA_REGEN_PER_INT; \r\n            totalManaRegen += regen;\r\n        }\r\n\r\n        let bonusAllStats = tryGetNeutralSpecialValue(neutral, \"bonus_all_stats\");\r\n        if (bonusAllStats) {\r\n            totalManaRegen += bonusAllStats * MANA_REGEN_PER_INT;\r\n        }\r\n\r\n        let bonusRegen = tryGetNeutralSpecialValue(neutral, \"mana_regen\");\r\n        if (bonusRegen) {\r\n            totalManaRegen += bonusRegen;\r\n        }\r\n    }\r\n\r\n    if(abilities && abilities.length > 0) {\r\n        for (let ability of abilities) {\r\n            let manaRegen = tryGetAbilitySpecialAbilityValue(ability, \"mana_regen\", 1);\r\n            if (manaRegen) {\r\n                totalManaRegen += manaRegen;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            // Only includes bonus mana point regen talents\r\n            if(talent.includes(\"bonus_mp_regen\")) {\r\n                let value = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (value) {\r\n                    totalManaRegen += parseFloat(value);\r\n                }\r\n            } else if (talent.includes(\"bonus_intelligence\")) {\r\n                let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAllStats) {\r\n                    totalManaRegen += bonusAllStats * MANA_REGEN_PER_INT;\r\n                }\r\n            } else if (talent.includes(\"bonus_all_stats\")) {\r\n                let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAllStats) {\r\n                    totalManaRegen += bonusAllStats * MANA_REGEN_PER_INT;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    let totalMP = totalManaRegen * (totalManaRegenPercentAmp / 100);\r\n    return totalMP.toFixed(1);\r\n}\r\n\r\n// Calculates the main armor of the hero\r\n// Each point of agility increases a hero's armor by 0.167 (1/6) https://dota2.gamepedia.com/Armor\r\nexport function calculateMainArmor(hero, level, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }\r\n\r\n    let ARMOR_PER_AGI = 0.167;\r\n    let baseArmor = parseInt(hero.ArmorPhysical);\r\n    let baseAgility = parseInt(hero.AttributeBaseAgility);\r\n    let agiPerLevel = parseFloat(hero.AttributeAgilityGain);\r\n\r\n    // Determine bonus agility from perLevel. Then work out main armor\r\n    let agiPer = (agiPerLevel * (level - 1));\r\n    let totalArmor = baseArmor + ((baseAgility + agiPer) * ARMOR_PER_AGI);\r\n    let totalBonusArmor = 0;\r\n    \r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            let bonusArmor = tryGetItemSpecialValue(item, \"bonus_armor\");\r\n            if (bonusArmor) {\r\n                totalBonusArmor += bonusArmor;\r\n            }\r\n\r\n            let bonusAgility = tryGetItemSpecialValue(item, \"bonus_agility\");\r\n            if (bonusAgility) {\r\n                let armor = bonusAgility * ARMOR_PER_AGI;\r\n                totalArmor += armor;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                let armor = bonusAllStats * ARMOR_PER_AGI;\r\n                totalArmor += armor;\r\n            }\r\n        }\r\n    }\r\n    \r\n    if(neutral) {\r\n        /// If item is nether_shawl, armor needs to be removed\r\n        if (neutral.item === \"item_nether_shawl\") {\r\n            let bonusArmor = tryGetNeutralSpecialValue(neutral, \"bonus_armor\");\r\n            if (bonusArmor) {\r\n                totalBonusArmor -= bonusArmor;\r\n            }\r\n        } else {\r\n            let bonusArmor = tryGetNeutralSpecialValue(neutral, \"bonus_armor\");\r\n            if (bonusArmor) {\r\n                totalBonusArmor += bonusArmor;\r\n            }\r\n        }\r\n        \r\n\r\n        let armorBonus = tryGetNeutralSpecialValue(neutral, \"armor_bonus\");\r\n        if (armorBonus) {\r\n            totalBonusArmor += armorBonus;\r\n        }\r\n\r\n        let bonusAgi = tryGetNeutralSpecialValue(neutral, \"bonus_agility\");\r\n        if (bonusAgi) {\r\n            totalArmor += bonusAgi * ARMOR_PER_AGI;\r\n        }\r\n\r\n        let bonusAllStats = tryGetNeutralSpecialValue(neutral, \"bonus_all_stats\");\r\n        if (bonusAllStats) {\r\n            let armor = bonusAllStats * ARMOR_PER_AGI;\r\n            totalArmor += armor;\r\n        }\r\n    }\r\n\r\n    /// ToDo: If abilities active, add active ability armor\r\n    /// or if ability is passive, apply bonus\r\n    // if (abilities && abilities.length > 0) {\r\n    //     for(let ability of abilities) {\r\n    //         /// if a passive, add armor depending on ability level\r\n    //         let abilInfo = getAbilityInfoFromName(ability);\r\n    //         if (isAbilityBehaviour(abilInfo.AbilityBehavior, [ EAbilityBehaviour.PASSIVE ])) {\r\n    //             let bonusArmor = tryGetAbilitySpecialAbilityValue(ability, \"bonus_armor\");\r\n    //             if (bonusArmor) {\r\n    //                 totalArmor += bonusArmor;\r\n    //             }\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    if(talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            if (talent.includes(\"bonus_armor\")) {\r\n                let bonusArmor = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusArmor) {\r\n                    totalBonusArmor += bonusArmor;\r\n                }\r\n            } else if (talent.includes(\"bonus_agility\")) {\r\n                let bonusAgility = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAgility) {\r\n                    totalArmor += bonusAgility * ARMOR_PER_AGI;\r\n                }\r\n            } else if (talent.includes(\"bonus_all_stats\")) {\r\n                let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAllStats) {\r\n                    totalArmor += bonusAllStats * ARMOR_PER_AGI;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Round to one decimal place\r\n    return {\r\n        armor: totalArmor,\r\n        additional: totalBonusArmor,\r\n    };\r\n}\r\n\r\n/// Returns the total amount of spell amplification as a percentage applied to the hero\r\nexport function calculateTotalSpellAmp (talents, items, neutral) {\r\n    let totalSpellAmp = 0;\r\n    \r\n    // Determine if any talents provide spell amp\r\n    if (talents && talents.length > 0) {\r\n        let ampTalent = talents.find(element => element.includes(\"spell_amplify\"));\r\n        if (ampTalent) {\r\n            let talentInfo = DOTAAbilities[ampTalent.name];\r\n            if (talentInfo) {\r\n                let spellAmpInfo = talentInfo.AbilitySpecial.find(element => element.value);\r\n                if (spellAmpInfo) {\r\n                    let spellAmpAmt = parseInt(spellAmpInfo.value);\r\n                    totalSpellAmp += spellAmpAmt;\r\n\r\n                    //console.log(`Talent ${ampTalent.name} provides ${spellAmpAmt}% spell amp`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Determine if current neutral item provides any spell amplification\r\n    if (neutral) {\r\n        let foundNeutral = getItemInfoFromName(neutral.item);\r\n        if (foundNeutral) {\r\n            let spellAmpAmount = getItemSpecialAbilityValue(foundNeutral, \"spell_amp\");\r\n            if (spellAmpAmount) {\r\n                totalSpellAmp += spellAmpAmount;\r\n                //console.log(`Neutral ${neutral.item} provides ${spellAmpAmount}% spell amp`);\r\n            }\r\n        }\r\n    }\r\n\r\n    /// Determine if any items provide spell amp\r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            let spellAmpAmount = tryGetItemSpecialValue(item, \"spell_amp\");\r\n            if (spellAmpAmount) {\r\n                totalSpellAmp += spellAmpAmount;\r\n                //console.log(`Item ${items[i].item} provides ${spellAmpAmt}% spell amp`);\r\n            }\r\n\r\n            let ampPerCharge = tryGetItemSpecialValue(item, \"amp_per_charge\");\r\n            if (item.extra?.charges && ampPerCharge) {\r\n                let bloodstoneCharges = item.extra.charges;\r\n                totalSpellAmp += ampPerCharge * bloodstoneCharges;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    return totalSpellAmp.toFixed(1);\r\n}\r\n\r\nexport function calculateStatusResist(items, neutral) {\r\n    let totalStatusResist = 0.0;\r\n\r\n    if (items && items.length > 0) {\r\n        for(let i = 0; i < items.length; i++) {\r\n            if (items[i].item) {\r\n                let itemInfo = getItemInfoFromName(items[i].item);\r\n                if (itemInfo) {\r\n                    let statusResistAmount = getItemSpecialAbilityValue(itemInfo, \"status_resistance\");\r\n                    if (statusResistAmount) {\r\n                        totalStatusResist += statusResistAmount;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let statusResistAmount = tryGetNeutralSpecialValue(neutral, \"status_resistance\");\r\n        if (statusResistAmount) {\r\n            totalStatusResist += statusResistAmount;\r\n        }\r\n    }\r\n\r\n    return totalStatusResist;\r\n}\r\n\r\nexport function calculateMagicResist (items, neutral, abilities) {\r\n    // Formula from Wiki\r\n    // Total magic resistance = 1 − ((1 − natural resistance) × (1 − first resistance bonus) × (1 − second resistance bonus) × (1 + first resistance reduction) × (1 + second resistance reduction))\r\n    \r\n    // Array of magic resistance values\r\n    let resistanceBonuses = [ ];\r\n    \r\n    if (DOTAHeroes && DOTAHeroes?.npc_dota_hero_base?.MagicalResistance) {\r\n        let baseResist = parseInt(DOTAHeroes.npc_dota_hero_base.MagicalResistance);\r\n        resistanceBonuses.push(baseResist);\r\n    }\r\n\r\n    if (items && items.length > 0) {\r\n        for(let i = 0; i < items.length; i++) {\r\n            let itemInfo = getItemInfoFromName(items[i].item);\r\n            if (itemInfo) {\r\n                let magicResistAmount = getItemSpecialAbilityValue(itemInfo, \"bonus_magic_resistance\");\r\n                if (magicResistAmount) {\r\n                    resistanceBonuses.push(magicResistAmount);\r\n                }\r\n\r\n                magicResistAmount = getItemSpecialAbilityValue(itemInfo, \"magic_resistance\");\r\n                if (magicResistAmount) {\r\n                    resistanceBonuses.push(magicResistAmount);\r\n                }\r\n\r\n                magicResistAmount = getItemSpecialAbilityValue(itemInfo, \"bonus_magical_armor\");\r\n                if (magicResistAmount) {\r\n                    resistanceBonuses.push(magicResistAmount);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let magicResistAmount = tryGetNeutralSpecialValue(neutral, \"magic_resistance\");\r\n        if (magicResistAmount) {\r\n            resistanceBonuses.push(magicResistAmount);\r\n        }\r\n    }\r\n\r\n    if (abilities && abilities.length > 0) { \r\n        for(let ability of abilities) {\r\n            // let magicResistAmount = tryGetAbilitySpecialAbilityValue(ability, \"magic_resistance\");\r\n            // if (magicResistAmount) {\r\n            //     resistanceBonuses.push(magicResistAmount);\r\n            // }\r\n            \r\n            let magicResistAmount = tryGetAbilitySpecialAbilityValue(ability, \"bonus_magic_resistance\");\r\n            if (magicResistAmount) {\r\n                resistanceBonuses.push(magicResistAmount);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Divide original value into 0.x and minus from 1 to get the reverse\r\n    let edited = []\r\n    for(let i = 0; i < resistanceBonuses.length; i++) {\r\n        edited.push(1 - (resistanceBonuses[i] / 100));\r\n    }\r\n\r\n    // multiply them all together \r\n    let total = edited[0];\r\n    for(let i = 1; i < edited.length; i++) {\r\n        total *= edited[i];\r\n    }\r\n\r\n    // then minus from 1, and multiply by 100 to get value as a percentage\r\n    let percent = (1 - total) * 100;\r\n    return percent.toFixed(2);\r\n}\r\n\r\n/// Calculates the total magic resistance of the hero\r\n/// https://dota2.gamepedia.com/Magic_resistance\r\nexport function calculatePhysicalResist (totalArmor) {\r\n    // Formula from https://www.dotabuff.com/blog/2018-11-30-understanding-720-armor-changes\r\n    //( 0.052 * armor ) ÷ ( 0.9 + 0.048 * |armor|)\r\n    let physResist = (0.052 * totalArmor) / (0.9 + 0.048 * Math.abs(totalArmor));\r\n    let percent = physResist * 100;\r\n    return percent < 0 ? 0 : percent.toFixed(0);\r\n}\r\n\r\n/// Calculates evasion\r\nexport function calculateEvasion(items, neutral, abilities, talents) {\r\n    let totalEvasion = 0.0;\r\n\r\n    if (abilities && abilities.length > 0) {\r\n        for(let ability of abilities) {\r\n            let bonusEvasion = tryGetAbilitySpecialAbilityValue(ability, \"bonus_evasion\");\r\n            if (bonusEvasion) {\r\n                totalEvasion += bonusEvasion;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            if (talent.includes(\"bonus_evasion\")) {\r\n                let bonusEvasion = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusEvasion) {\r\n                    totalEvasion += bonusEvasion;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (items && items.length > 0) {\r\n        for(let i = 0; i < items.length; i++) {\r\n            if (items[i].item) {\r\n                let itemInfo = getItemInfoFromName(items[i].item);\r\n                if (itemInfo) {\r\n                    let evasionAmount = getItemSpecialAbilityValue(itemInfo, \"bonus_evasion\");\r\n                    if (evasionAmount) {\r\n                        totalEvasion += evasionAmount;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return totalEvasion;\r\n}\r\n\r\n/// Returns the minimum and maximum right click damage of a hero\r\n// atkMin, atkMax, primaryAttributeStats, heroLevel = 1\r\nexport function calculateRightClickDamage(hero, level, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }\r\n    \r\n    let heroMainAttribute = getPrimaryAttribute(hero);\r\n    let atkMin = parseInt(hero.AttackDamageMin);\r\n    let atkMax = parseInt(hero.AttackDamageMax);\r\n    let primaryAttributeStats = getPrimaryAttributeStats(hero);\r\n\r\n    // Check if the hero attack is melee or ranged\r\n    let heroIsMelee = isHeroAttackCapability(hero, EAttackCapabilities.MELEE);\r\n\r\n    // Work out how much bonus attack hero recieves from their primary attribute\r\n    let totalPrimaryAttribute = primaryAttributeStats.base + (primaryAttributeStats.perLevel * (level - 1));\r\n    // Calc additional damage from sources\r\n    let totalAdditional = 0;\r\n\r\n    /* Iterate over all items, neutral, abilities and talents to\r\n        get all primary attribute and all stat bonuses\r\n        */\r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            let allAttrKeys = primaryAttributeToItemBonusKey(heroMainAttribute);\r\n            for(let key of allAttrKeys) {\r\n                let bonusPrimaryAttr = tryGetItemSpecialValue(item, key);\r\n                if (bonusPrimaryAttr) {\r\n                    totalPrimaryAttribute += bonusPrimaryAttr;\r\n                }\r\n            }\r\n\r\n            let bonusPrimaryStat = tryGetItemSpecialValue(item, \"bonus_primary_stat\");\r\n            if (bonusPrimaryStat) {\r\n                totalPrimaryAttribute += bonusPrimaryStat;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalPrimaryAttribute += bonusAllStats;\r\n            }\r\n\r\n            let bonusDmg = tryGetItemSpecialValue(item, \"bonus_damage\");\r\n            if (bonusDmg) {\r\n                totalAdditional += bonusDmg;\r\n            }\r\n\r\n            if (heroIsMelee) {\r\n                let bonusMeleeDmg = tryGetItemSpecialValue(item, \"bonus_damage_melee\");\r\n                if (bonusMeleeDmg) {\r\n                    totalAdditional += bonusMeleeDmg;\r\n                }\r\n            } else {\r\n                let bonusRangedDmg = tryGetItemSpecialValue(item, \"bonus_damage_ranged\");\r\n                if (bonusRangedDmg) {\r\n                    totalAdditional += bonusRangedDmg;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let allAttrKeys = primaryAttributeToItemBonusKey(heroMainAttribute);\r\n        for(let key of allAttrKeys) {\r\n            let bonusPrimaryAttr = tryGetNeutralSpecialValue(neutral, key);\r\n            if (bonusPrimaryAttr) {\r\n                totalPrimaryAttribute += bonusPrimaryAttr;\r\n            }\r\n        }\r\n\r\n        let bonusPrimaryStat = tryGetNeutralSpecialValue(neutral, \"primary_stat\");\r\n        if (bonusPrimaryStat) {\r\n            totalPrimaryAttribute += bonusPrimaryStat;\r\n        }\r\n\r\n        let bonusAllStats = tryGetNeutralSpecialValue(neutral, \"bonus_all_stats\");\r\n        if (bonusAllStats) {\r\n            totalPrimaryAttribute += bonusAllStats;\r\n        }\r\n\r\n        let bonusDmg = tryGetNeutralSpecialValue(neutral, \"bonus_damage\");\r\n        if (bonusDmg) {\r\n            totalAdditional += bonusDmg;\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            let allAttrKeys = primaryAttributeToItemBonusKey(heroMainAttribute);\r\n            for(let key of allAttrKeys) {\r\n                if (talent.includes(key)) {\r\n                    let bonusPrimaryAttr = tryGetNeutralSpecialValue(talent, \"value\");\r\n                    if (bonusPrimaryAttr) {\r\n                        totalPrimaryAttribute += bonusPrimaryAttr;\r\n                    }\r\n                }\r\n            }\r\n            \r\n            if (talent.includes(\"bonus_all_stats\")) {\r\n                let allStats = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (allStats) {\r\n                    totalPrimaryAttribute += allStats;\r\n                }\r\n            } else if (talent.includes(\"bonus_attack_damage\")) {\r\n                let bonusDmg = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusDmg) {\r\n                    totalAdditional += bonusDmg;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /// Damage from primary attribute counts as part of the Min-Max\r\n    /// whereas bonus damage (+5 damage) from sources count as additional\r\n\r\n    let min = atkMin + totalPrimaryAttribute;\r\n    let max = atkMax + totalPrimaryAttribute;\r\n\r\n    return {\r\n        /// minimum attack damage of the hero\r\n        min: Math.floor(min),\r\n        /// maximum attack damage of the hero\r\n        max: Math.floor(max),\r\n        additional: totalAdditional,\r\n    };\r\n}\r\n\r\n/// Returns info on the attack time of the hero\r\nexport function calculateAttackTime(hero, level, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }\r\n    \r\n    let MAX_ATTACK_SPEED = 700;\r\n\r\n    // Check if hero has different attack rate or attack speed than base hero\r\n    let totalAttackSpeed = parseInt(getDotaBaseHero()?.BaseAttackSpeed);\r\n\r\n    /// Get base agi stats\r\n    let agiStats = getSpecificAttributeStats(EAttributes.ATTR_AGILITY, hero);\r\n    let baseAgi = agiStats.base;\r\n    let agiPerLevel = agiStats.perLevel;\r\n\r\n    let totalAgi = baseAgi + (agiPerLevel * (level - 1));\r\n\r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            let bonusAttackSpeed = tryGetItemSpecialValue(item, \"bonus_attack_speed\");\r\n            if (bonusAttackSpeed) {\r\n                totalAttackSpeed += bonusAttackSpeed;\r\n            }\r\n\r\n            let bonusAgility = tryGetItemSpecialValue(item, \"bonus_agility\");\r\n            if (bonusAgility) {\r\n                totalAgi += bonusAgility;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalAgi += bonusAllStats;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let bonusAttackSpeed = tryGetNeutralSpecialValue(neutral, \"bonus_attack_speed\");\r\n        if (bonusAttackSpeed) {\r\n            totalAttackSpeed += bonusAttackSpeed;\r\n        }\r\n\r\n        let attackSpeed = tryGetNeutralSpecialValue(neutral, \"attack_speed\");\r\n        if (attackSpeed) {\r\n            totalAttackSpeed += attackSpeed;\r\n        }\r\n    }\r\n\r\n    // Only actives that gives attack speed bonuses\r\n    // if (abilities && abilities.length > 0) {\r\n    // }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            let bonusAttackSpeed = tryGetTalentSpecialAbilityValue(talent, \"bonus_attack_speed\");\r\n            if (bonusAttackSpeed) {\r\n                totalAttackSpeed += bonusAttackSpeed;\r\n            }\r\n\r\n            let bonusAgility = tryGetTalentSpecialAbilityValue(talent, \"bonus_agility\");\r\n            if (bonusAgility) {\r\n                totalAgi += bonusAgility;\r\n            }\r\n\r\n            let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalAgi += bonusAllStats;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// Check that max atk speed hasn't been reached\r\n    if ((totalAttackSpeed + totalAgi) > MAX_ATTACK_SPEED) {\r\n        // Use totalAttackSpeed at max if so, reset agi since 1 agi = 1 atk speed\r\n        totalAttackSpeed = MAX_ATTACK_SPEED;\r\n        totalAgi = 0;\r\n    }\r\n\r\n    let attacksPerSec = ((totalAttackSpeed + totalAgi) * 0.01) / 1.7;\r\n    let attackTime = 1.7 / ((totalAttackSpeed + totalAgi) * 0.01);\r\n    attackTime = 1 / attacksPerSec;\r\n\r\n    let atkSpeed = totalAttackSpeed + totalAgi;\r\n\r\n    return {\r\n        /// Amount of seconds inbetween attacks\r\n        attackTime: attackTime.toFixed(2),\r\n        /// Amount of attacks per second\r\n        attacksPerSecond: attacksPerSec.toFixed(2),\r\n        /// Attack speed value shown in UI of dota\r\n        attackSpeed: atkSpeed.toFixed(0),\r\n    };\r\n}\r\n\r\n/// Calculates how much output damage an ability will do to an enemy, factoring in any items\r\nexport function calculateSpellDamage(abilityName, abilityInfo, abilityLevel, items, neutral, talents) {\r\n    if (!abilityLevel || !abilityInfo) {\r\n        return -1;\r\n    }\r\n\r\n    // Get normal dmg output of ability\r\n    let abilityDamageInfo = getAbilityOutputDamage(abilityInfo, abilityLevel);\r\n    \r\n    // Add up spellAmp from all bonuses to calculate at end\r\n    let totalSpellAmpPercent = 0;\r\n\r\n    /// Value bonus from talent\r\n    let talentBonus = 0;\r\n\r\n    if (items) {\r\n        // Add item spell damage increase\r\n        for(let item of items) {\r\n            let spellAmp = tryGetItemSpecialValue(item, \"spell_amp\");\r\n            if (spellAmp) {\r\n                totalSpellAmpPercent += spellAmp;\r\n            }\r\n\r\n            let bonusSpellAmp = tryGetItemSpecialValue(item, \"bonus_spell_amp\");\r\n            if (bonusSpellAmp) {\r\n                totalSpellAmpPercent += bonusSpellAmp;\r\n            }\r\n\r\n            // get current bloodstone charges and amp correctly\r\n            let chargeCount = item.extra?.charges;\r\n            let ampPerCharge = tryGetItemSpecialValue(item, \"amp_per_charge\");\r\n            if (ampPerCharge && chargeCount) {\r\n                totalSpellAmpPercent += (ampPerCharge * chargeCount);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        //Add neutral item spell dmg\r\n        let neutralInfo = getItemInfoFromName(neutral.item);\r\n        if (neutralInfo && neutralInfo.AbilitySpecial) {\r\n            for (let i = 0; i < neutralInfo.AbilitySpecial.length; i++) {\r\n                let special = neutralInfo.AbilitySpecial[i];\r\n                // Spell amp\r\n                if (special.bonus_spell_amp) {\r\n                    let bonusSpellAmp = parseInt(special.bonus_spell_amp);\r\n                    totalSpellAmpPercent += bonusSpellAmp; \r\n                }\r\n\r\n                if (special.spell_amp) {\r\n                    let bonusSpellAmp = parseInt(special.spell_amp);\r\n                    totalSpellAmpPercent += bonusSpellAmp;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        // Add spell amplify from any selected talents\r\n        for(let talent of talents) {\r\n            if (talent.includes(\"spell_amplify\")) {\r\n                let ampTalentValue = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (ampTalentValue) {\r\n                    totalSpellAmpPercent += ampTalentValue;\r\n                }\r\n            } \r\n            /// if a unique talent specific to a hero ability\r\n            else if (talent.includes(\"special_bonus_unique\")) {\r\n                /// Search Abilities_English.json for string of talent to \r\n                /// check if it is a damage talent modifier and apply\r\n                if (isDamageTalent(talent)) {\r\n                    let linkedAbility = tryGetTalentSpecialAbilityValue(talent, \"ad_linked_ability\");\r\n\r\n                    // if linked ability is equal to current one\r\n                    if (linkedAbility && linkedAbility === abilityName) {\r\n                        let value = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                        if (value) {\r\n                            talentBonus = value;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    let totalAbilDmg = abilityDamageInfo.damage + talentBonus;\r\n    let abilityDamage = calculateSpellAmp(totalAbilDmg, totalSpellAmpPercent);\r\n\r\n    return {\r\n        damage: abilityDamage === 0 ? null : abilityDamage,\r\n        isPercent: abilityDamageInfo.isPercent,\r\n    };\r\n}\r\n\r\n/// Calculates and applies spell amp to the spell damage and returns the result\r\nexport function calculateSpellAmp (spellDamage, spellAmpPercent) {\r\n    return spellDamage + ((spellDamage / 100) * spellAmpPercent);\r\n}\r\n\r\n/// Calculates ability mana cost with items, neutrals and talents that contain reductions\r\nexport function calculateManaCost(abilityInfo, abilityLevel, items, neutral, talents) {\r\n    if (abilityLevel <= 0) {\r\n        return null;\r\n    }\r\n    \r\n    let manaCost = null;\r\n\r\n    // Get inital mana cost amount\r\n    if (abilityInfo && abilityInfo.AbilityManaCost) {\r\n        manaCost = parseAbilityValueByLevel(abilityInfo.AbilityManaCost, abilityLevel);\r\n    }\r\n\r\n    // Determine mana reductions from items, neutral, talents\r\n    // Take all percentages and calculate at end\r\n    let totalManaCostReducePercent = 0;\r\n\r\n    if (items) {\r\n        for(let item of items) {\r\n            let itemInfo = getItemInfoFromName(item.item);\r\n            if(itemInfo) {\r\n                let manaCostReduceAmount = getItemSpecialAbilityValue(itemInfo, \"manacost_reduction\");\r\n                if(manaCostReduceAmount) {\r\n                    totalManaCostReducePercent += manaCostReduceAmount;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let neutralInfo = getItemInfoFromName(neutral.item);\r\n        if (neutralInfo) {\r\n            let costReductionAmount = getItemSpecialAbilityValue(neutralInfo, \"manacost_reduction\");\r\n            if (costReductionAmount) {\r\n                totalManaCostReducePercent += costReductionAmount;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (talents) {\r\n        for(let talent of talents) {\r\n            // Only apply mana reducing talents\r\n            if (talent.includes(\"mana_reduction\")) {\r\n                let reduceAmount = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (reduceAmount) {\r\n                    totalManaCostReducePercent += reduceAmount;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // If ability has a mana value and has mana reductions\r\n    if (manaCost && totalManaCostReducePercent > 0) {\r\n        let removeManaAmt = (manaCost / 100) * totalManaCostReducePercent;\r\n        manaCost -= removeManaAmt;\r\n    }\r\n\r\n    return manaCost;\r\n}\r\n\r\n/// Calculates ability cooldown with items, neutrals, talents and abilities\r\n/// https://liquipedia.net/dota2/Cooldown_Reduction\r\nexport function calculateAbilityCooldown(abilityName, abilityInfo, abilityLevel, items, neutral, talents) {\r\n    if (abilityLevel <= 0) {\r\n        return null;\r\n    }\r\n    \r\n    let cooldown = null;\r\n    let charges = null;\r\n    let fixedAmtReductionSeconds = 0;\r\n\r\n    if (abilityInfo && abilityInfo.AbilityCooldown) {\r\n        cooldown = parseAbilityValueByLevel(abilityInfo.AbilityCooldown, abilityLevel);\r\n\r\n        /// if ability uses charges, use charge cooldown\r\n        if (cooldown === 0 && abilityInfo.AbilityCharges && abilityInfo.AbilityChargeRestoreTime) {\r\n            cooldown = parseInt(abilityInfo.AbilityChargeRestoreTime);\r\n            charges = parseInt(abilityInfo.AbilityCharges);\r\n        }\r\n\r\n        // if AbilityInfo has a Scepter upgrade and items contains scepter\r\n        let requiresScepter = getAbilitySpecialAbilityValue(abilityInfo, \"RequiresScepter\") === \"1\";\r\n        if (requiresScepter && itemsContainsScepter(items)) {\r\n            let scepterCharges = getIncludesAbilitySpecialAbilityValue(abilityInfo, \"charges\", abilityLevel);\r\n            charges = scepterCharges;\r\n        }\r\n    }\r\n\r\n    let allReductions = [];\r\n    if (items) {\r\n        for (let item of items) {\r\n            if (item && item.item) {\r\n                let itemInfo = getItemInfoFromName(item.item);\r\n                if (itemInfo) {\r\n                    let bonusCooldown = getItemSpecialAbilityValue(itemInfo, \"bonus_cooldown\");\r\n                    if (bonusCooldown) {\r\n                        allReductions.push({ amount: bonusCooldown, source: item.item });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let neutralInfo = getItemInfoFromName(neutral.item);\r\n        if (neutralInfo) {\r\n            let bonusCooldown = getItemSpecialAbilityValue(neutralInfo, \"bonus_cooldown\");\r\n            if (bonusCooldown) {\r\n                allReductions.push({ amount: bonusCooldown, source: neutral });\r\n            } \r\n        }\r\n    }\r\n\r\n    if (talents) {\r\n        for(let talent of talents) {\r\n            // Ignore talent if it isn't a cd reduction one\r\n            if (talent.includes(\"cooldown_reduction\")) {\r\n                let reduction = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (reduction) {\r\n                    allReductions.push({ amount: reduction, source: talent });\r\n                }\r\n            }\r\n            else if (talent.includes(\"special_bonus_unique\")) {\r\n                if (isCooldownTalent(talent)) {\r\n                    let linkedAbility = tryGetTalentSpecialAbilityValue(talent, \"ad_linked_ability\");\r\n                    if (linkedAbility === abilityName) {\r\n                        let value = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                        if (value) {\r\n                            fixedAmtReductionSeconds += value;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /// Remove any fixed amount cooldown reductions first before\r\n    /// applying any other reductions\r\n    let totalCooldown = cooldown - fixedAmtReductionSeconds;\r\n\r\n    let sourceOfReductions = [];\r\n    for(let reduction of allReductions) {\r\n        let decimal = reduction.amount / 100;\r\n        sourceOfReductions.push((1 - decimal));\r\n    }\r\n\r\n    for(let reduce of sourceOfReductions) {\r\n        totalCooldown *= reduce;\r\n    }\r\n\r\n    return {\r\n        charges: charges,\r\n        cooldown: totalCooldown > 0 ? totalCooldown.toFixed(2) : null,\r\n    };\r\n}\r\n\r\n/// Calculates the movement speed of the hero, factoring in their items, neutral, abilities and talents\r\nexport function calculateMoveSpeed (hero, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }\r\n\r\n    let baseSpeed = parseInt(hero.MovementSpeed);\r\n    let flatBonus = 0;\r\n    let percentageBasedBonuses = 0;\r\n\r\n    if (items && items.length > 0) {\r\n        for (let item of items) {\r\n            let moveSpeed = tryGetItemSpecialValue(item, \"bonus_movement_speed\");\r\n            if (moveSpeed) {\r\n                flatBonus += moveSpeed;\r\n            }\r\n            \r\n            let bonusMovement = tryGetItemSpecialValue(item, \"bonus_movement\");\r\n            if (bonusMovement) {\r\n                flatBonus += bonusMovement;\r\n            }\r\n\r\n            let moveSpeedPercentBonus = tryGetItemSpecialValue(item, \"movement_speed_percent_bonus\");\r\n            if (moveSpeedPercentBonus) {\r\n                percentageBasedBonuses += moveSpeedPercentBonus;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let bonusMoveSpeed = tryGetNeutralSpecialValue(neutral, \"bonus_movement_speed\");\r\n        if (bonusMoveSpeed) {\r\n            flatBonus += bonusMoveSpeed;\r\n        }\r\n\r\n        let moveSpeedPercentBonus = tryGetNeutralSpecialValue(neutral, \"movement_speed_percent_bonus\");\r\n        if (moveSpeedPercentBonus) {\r\n            percentageBasedBonuses += moveSpeedPercentBonus;\r\n        }\r\n    }\r\n\r\n    /// Abilities are actives so dont include since no way in UI to activate an ability yet\r\n    // if (abilities && abilities.length > 0) {\r\n    //     for(let ability of abilities) {\r\n    //         let bonusMoveSpeed = tryGetAbilitySpecialAbilityValue(ability, \"bonus_movespeed\");\r\n    //         if (bonusMoveSpeed) {\r\n    //             flatBonus += bonusMoveSpeed;\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            if (talent.includes(\"bonus_movement_speed\")) {\r\n                let bonusSpeed = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusSpeed) {\r\n                    flatBonus += bonusSpeed;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    let total = baseSpeed + flatBonus;\r\n    return total;\r\n}\r\n\r\nexport function calculateAttackRange (hero, level, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }\r\n\r\n    let isHeroRanged = isHeroAttackCapability(hero, EAttackCapabilities.RANGED);\r\n\r\n    let baseRange = parseInt(hero.AttackRange);\r\n    let totalAttackRange = baseRange;\r\n\r\n    // Dont add bonuses if hero isn't ranged\r\n    if (isHeroRanged) {\r\n        if (items && items.length > 0) {\r\n            for(let item of items) {\r\n                let baseRange = tryGetItemSpecialValue(item, \"base_attack_range\");\r\n                if (baseRange) {\r\n                    totalAttackRange += baseRange;\r\n                }\r\n            }\r\n        }\r\n    \r\n        if (neutral) {\r\n            let rangeBonus = tryGetNeutralSpecialValue(neutral, \"attack_range_bonus\");\r\n            if (rangeBonus) {\r\n                totalAttackRange += rangeBonus;\r\n            }\r\n    \r\n            let bonusAttackRange = tryGetNeutralSpecialValue(neutral, \"bonus_attack_range\");\r\n            if (bonusAttackRange) {\r\n                totalAttackRange += bonusAttackRange;\r\n            }\r\n        }\r\n\r\n        if (abilities && abilities.length > 0) {\r\n            for(let ability of abilities) {\r\n                let bonusAttackRange = tryGetAbilitySpecialAbilityValue(ability, \"bonus_attack_range\", 1);\r\n                if (bonusAttackRange) {\r\n                    totalAttackRange += bonusAttackRange;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (talents && talents.length > 0) {\r\n            for(let talent of talents) {\r\n                if (talent.includes(\"bonus_attack_range\")) {\r\n                    let bonusAttackRange = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                    if (bonusAttackRange) {\r\n                        totalAttackRange += bonusAttackRange;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        // Melee units, apply any melee attack range bonuses\r\n        if (neutral) {\r\n            let bonusMeleeAttackRange = tryGetNeutralSpecialValue(neutral, \"melee_attack_range\");\r\n            if (bonusMeleeAttackRange) {\r\n                totalAttackRange += bonusMeleeAttackRange;\r\n            }\r\n        }\r\n    }\r\n\r\n    return totalAttackRange;\r\n}\r\n\r\n/// Calculates the correct attribute stats for a given hero\r\nexport function calculateAttribute(attribute, hero, level, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }\r\n\r\n    let attributeStats = getSpecificAttributeStats(attribute, hero);\r\n    let baseAttribute = attributeStats.base;\r\n    let attributePerLevel = attributeStats.perLevel;\r\n\r\n    let totalAttribute = baseAttribute + (attributePerLevel * (level - 1));\r\n    let additionalAttribute = 0;\r\n\r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            switch(attribute) {\r\n                case EAttributes.ATTR_STRENGTH:\r\n                    {\r\n                        let bonusStr = tryGetItemSpecialValue(item, \"bonus_strength\");\r\n                        if (bonusStr) {\r\n                            additionalAttribute += bonusStr;\r\n                        }\r\n                        break;\r\n                    }\r\n                case EAttributes.ATTR_AGILITY:\r\n                    {\r\n                        let bonusAgi = tryGetItemSpecialValue(item, \"bonus_agility\");\r\n                        if (bonusAgi) {\r\n                            additionalAttribute += bonusAgi;\r\n                        }\r\n                        break;\r\n                    }\r\n                case EAttributes.ATTR_INTELLIGENCE:\r\n                    {\r\n                        let bonusIntellect = tryGetItemSpecialValue(item, \"bonus_intellect\");\r\n                        if (bonusIntellect) {\r\n                            additionalAttribute += bonusIntellect;\r\n                        }\r\n\r\n                        let bonusInt = tryGetItemSpecialValue(item, \"bonus_intelligence\");\r\n                        if (bonusInt) {\r\n                            additionalAttribute += bonusInt;\r\n                        }\r\n                        break;    \r\n                    }\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                additionalAttribute += bonusAllStats;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        switch(attribute) {\r\n            case EAttributes.ATTR_STRENGTH:\r\n                    {\r\n                        let bonusStr = tryGetNeutralSpecialValue(neutral, \"bonus_strength\");\r\n                        if (bonusStr) {\r\n                            additionalAttribute += bonusStr;\r\n                        }\r\n                        break;\r\n                    }\r\n            case EAttributes.ATTR_AGILITY:\r\n                {\r\n                    let bonusAgi = tryGetNeutralSpecialValue(neutral, \"bonus_agility\");\r\n                    if (bonusAgi) {\r\n                        additionalAttribute += bonusAgi;\r\n                    }\r\n                    break;\r\n                }\r\n            case EAttributes.ATTR_INTELLIGENCE:\r\n                {\r\n                    let bonusInt = tryGetNeutralSpecialValue(neutral, \"bonus_intelligence\");\r\n                    if (bonusInt) {\r\n                        additionalAttribute += bonusInt;\r\n                    }\r\n\r\n                    let bonusIntellect = tryGetNeutralSpecialValue(neutral, \"bonus_intellect\");\r\n                    if (bonusIntellect) {\r\n                        additionalAttribute += bonusIntellect;\r\n                    }\r\n                    break;    \r\n                }\r\n            default:\r\n                break;\r\n        }\r\n\r\n        let bonusAllStats = tryGetNeutralSpecialValue(neutral, \"bonus_all_stats\");\r\n        if (bonusAllStats) {\r\n            additionalAttribute += bonusAllStats;\r\n        }\r\n\r\n        /// Add primary stat bonus if current attribute matches hero's primary\r\n        if (attribute == hero.AttributePrimary) {\r\n            let primaryStat = tryGetNeutralSpecialValue(neutral, \"primary_stat\");\r\n            if (primaryStat) {\r\n                additionalAttribute += primaryStat;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            switch(attribute) {\r\n                case EAttributes.ATTR_STRENGTH:\r\n                        {\r\n                            if (talent.includes(\"bonus_strength\")) {\r\n                                let bonusStr = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                                if (bonusStr) {\r\n                                    additionalAttribute += bonusStr;\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                case EAttributes.ATTR_AGILITY:\r\n                    {\r\n                        if (talent.includes(\"bonus_agility\")) {\r\n                            let bonusAgi = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                            if (bonusAgi) {\r\n                                additionalAttribute += bonusAgi;\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                case EAttributes.ATTR_INTELLIGENCE:\r\n                    {\r\n                        if (talent.includes(\"bonus_intelligence\")) {\r\n                            let bonusInt = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                            if (bonusInt) {\r\n                                additionalAttribute += bonusInt;\r\n                            }\r\n                        }\r\n                        break;    \r\n                    }\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            if (talent.includes(\"all_stats\")) {\r\n                let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAllStats) {\r\n                    additionalAttribute += bonusAllStats;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // If primary attribute, round down else us normal rounding\r\n    let isPrimaryAttr = getPrimaryAttribute(hero) === attribute;\r\n    if (isPrimaryAttr) {\r\n        totalAttribute = Math.floor(totalAttribute)\r\n    } else {\r\n        totalAttribute = parseInt(totalAttribute.toFixed(0));\r\n    }\r\n\r\n    return {\r\n        /// Base attribute amount, includes per level\r\n        attribute: totalAttribute,\r\n        /// Additional attribute amount, from items/neutral/abils/talents\r\n        additionalAttribute: additionalAttribute.toFixed(0),\r\n        /// Amount of attribute per level\r\n        perLevel: attributePerLevel,\r\n    };\r\n}\r\n\r\nexport function calculateAbilityCastRange (abilityName, abilityInfo, abilityLevel, items, neutral, talents) {\r\n    if (!abilityInfo) {\r\n        return \"?\";\r\n    }\r\n\r\n    /// Use CastRange or find range inside AbilitySpecial\r\n    let baseCastRange = parseInt(abilityInfo.AbilityCastRange);\r\n    if (!baseCastRange) {\r\n        let foundRange = getAbilitySpecialCastRangeValue(abilityInfo, \"_range\", abilityLevel.level);\r\n        if (foundRange) {\r\n            baseCastRange = foundRange;\r\n        } else {\r\n            // Cant determine a cast range, none\r\n            return null;\r\n        }\r\n    }\r\n\r\n    let totalBonusRange = 0;\r\n\r\n    if (items && items.length > 0) {\r\n        for (let item of items) {\r\n            let rangeBonus = tryGetItemSpecialValue(item, \"cast_range_bonus\");\r\n            if (rangeBonus) {\r\n                totalBonusRange += rangeBonus;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let rangeBonus = tryGetNeutralSpecialValue(neutral, \"cast_range_bonus\");\r\n        if (rangeBonus) {\r\n            totalBonusRange += rangeBonus;\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for (let talent of talents) {\r\n            if (talent.includes(\"bonus_cast_range\")) {\r\n                let rangeBonus = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (rangeBonus) {\r\n                    totalBonusRange += rangeBonus;\r\n                }\r\n            }\r\n            else if (talent.includes(\"special_bonus_unique\")) {\r\n                if (isCastRangeTalent(talent)) {\r\n                    let linkedAbility = tryGetTalentSpecialAbilityValue(talent, \"ad_linked_ability\");\r\n                    if (linkedAbility === abilityName) {\r\n                        let value = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                        if (value) {\r\n                            totalBonusRange += value;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return baseCastRange + totalBonusRange;\r\n}\r\n\r\n/// Calculates the normal sell price of an item from it's ItemInfo\r\nexport function calculateItemSellCost (itemInfo) {\r\n    if (itemInfo && itemInfo.ItemCost) {\r\n        let cost = parseInt(itemInfo.ItemCost);\r\n        // value rounded down\r\n        return Math.floor(cost / 2);\r\n    }\r\n    return 0;\r\n}","import React, { Component } from 'react';\r\n\r\nimport {\r\n    calculateSpellDamage\r\n} from \"../../utility/calculate\";\r\nimport { \r\n    tryGetLocalizedString, \r\n    getTooltipAbilityString,\r\n} from \"../../utility/data-helpers/language\";\r\n\r\n/// Retrieves ability damage and returns display value\r\nfunction parseDamage(abilityName, abilInfo, abilLvl, items, neutral, talents) {\r\n    let abilityDamage = calculateSpellDamage(abilityName, abilInfo, abilLvl, items, neutral, talents);\r\n    if (abilityDamage && abilityDamage.damage) {\r\n        // force to be to two decimal places\r\n        let damage = abilityDamage.damage.toFixed(2);\r\n        if (abilityDamage.isPercent) {\r\n            damage += \"%\";\r\n        }\r\n        return damage;\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nfunction getAbilityNameFromStrings(strings, key) {\r\n    if (strings && key) {\r\n        return tryGetLocalizedString(strings, key);\r\n    } else {\r\n        return \"?\";\r\n    }\r\n}\r\n\r\nclass DamageOutput extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            ability: props.ability,\r\n            abilityInfo: props.abilityInfo,\r\n            levelInfo: props.levelInfo,\r\n\r\n            items: props.items,\r\n            neutral: props.neutral,\r\n            selectedTalents: props.selectedTalents,\r\n\r\n            abilityStrings: props.abilityStrings,\r\n            dotaStrings: props.dotaStrings,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(prevProps.abilityInfo !== this.props.abilityInfo) {\r\n            this.setState({ abilityInfo: this.props.abilityInfo });\r\n        }\r\n\r\n        if (prevProps.levelInfo !== this.props.levelInfo) {\r\n            this.setState({ levelInfo: this.props.levelInfo });\r\n        }\r\n\r\n        if (prevProps.items !== this.props.items) {\r\n            this.setState({ items: this.props.items });\r\n        }\r\n\r\n        if (prevProps.neutral !== this.props.neutral) {\r\n            this.setState({ neutral: this.props.neutral });\r\n        }\r\n\r\n        if (prevProps.selectedTalents !== this.props.selectedTalents) {\r\n            this.setState({ selectedTalents: this.props.selectedTalents });\r\n        }\r\n\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ abilityStrings: this.props.abilityStrings });\r\n        }\r\n        if (prevProps.dotaStrings !== this.props.dotaStrings) {\r\n            this.setState({ dotaStrings: this.props.dotaStrings });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let abilityDamage = parseDamage(this.state.ability, this.state.abilityInfo, this.state.levelInfo?.level, this.state.items, this.state.neutral, this.state.selectedTalents);\r\n        return (\r\n            <div className=\"w-100 h-100\">\r\n                <h5>{getTooltipAbilityString(this.state.abilityStrings, this.state.ability)}</h5>\r\n                {\r\n                    abilityDamage && \r\n                    <h6>\r\n                        { (getAbilityNameFromStrings(this.state.abilityStrings, \"dota_ability_variable_damage\") + \":\")}\r\n                        {' '}\r\n                        { abilityDamage }\r\n                    </h6>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DamageOutput;","import React, { Component } from 'react';\r\nimport {\r\n    calculateAbilityCooldown\r\n} from \"../../utility/calculate\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faClock, faCircle }from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nclass Cooldown extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            abilityLevel: props.abilityLevel,\r\n            abilityCooldown: props.cooldown,\r\n\r\n            ability: props.ability,\r\n            abilityInfo: props.abilityInfo,\r\n            items: props.items,\r\n            neutral: props.neutral,\r\n            selectedTalents: props.selectedTalents,\r\n\r\n            cooldown: null,\r\n            charges: null,\r\n        };\r\n\r\n        this.updateCooldown = this.updateCooldown.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateCooldown();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                abilityLevel: this.props.abilityLevel,\r\n                abilityCooldown: this.props.cooldown,\r\n\r\n                ability: this.props.ability,\r\n                items: this.props.items,\r\n                neutral: this.props.neutral,\r\n                selectedTalents: this.props.selectedTalents,\r\n            }, () => this.updateCooldown() );\r\n        }\r\n    }\r\n\r\n    updateCooldown() {\r\n        let currentCooldownInfo = calculateAbilityCooldown(this.state.ability, this.state.abilityInfo, this.state.abilityLevel, this.state.items, this.state.neutral, this.state.selectedTalents);\r\n        \r\n        this.setState({\r\n            cooldown: currentCooldownInfo?.cooldown,\r\n            charges: currentCooldownInfo?.charges,\r\n        });\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                {\r\n                    this.state.cooldown &&\r\n                        <div className=\"d-flex\" title=\"cooldown\">\r\n                            <FontAwesomeIcon className=\"my-auto mr-1\" icon={faClock} />\r\n                            <div>\r\n                                { this.state.cooldown }\r\n                            </div>\r\n                        </div>\r\n                }\r\n                {\r\n                    this.state.charges &&\r\n                        <div className=\"d-flex\" title=\"charges\">\r\n                            <FontAwesomeIcon className=\"my-auto mr-1\" icon={faCircle} />\r\n                            <div>\r\n                                { this.state.charges }\r\n                            </div>\r\n                        </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Cooldown;","import React, { Component } from 'react';\r\nimport { \r\n    calculateManaCost \r\n} from '../../utility/calculate';\r\n\r\nclass ManaCost extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            ability: props.ability,\r\n            abilityLevel: props.abilityLevel,\r\n\r\n            items: props.items,\r\n            neutral: props.neutral,\r\n            selectedTalents: props.selectedTalents,\r\n        };\r\n\r\n        this.updateMana = this.updateMana.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                ability: this.props.ability,\r\n                abilityLevel: this.props.abilityLevel,\r\n\r\n                items: this.props.items,\r\n                neutral: this.props.neutral,\r\n                selectedTalents: this.props.selectedTalents,\r\n            });\r\n        }\r\n    }\r\n\r\n    updateMana() {\r\n        let manaCost = -1;\r\n        if (this.state.ability) {\r\n            manaCost = calculateManaCost(this.state.ability, this.state.abilityLevel, this.state.items, this.state.neutral, this.state.selectedTalents);\r\n        }\r\n        \r\n        // this.setState({\r\n        //     abilityManaCost: manaCost,\r\n        // });\r\n        return manaCost;\r\n    }\r\n\r\n    render() {\r\n        let manaCost = this.updateMana();\r\n        return (\r\n            <div>\r\n                { \r\n                    manaCost &&\r\n                        <div className=\"mana-cost d-flex\" title=\"mana cost\">\r\n                            <div className=\"my-auto mr-1\" style={{ \r\n                                height: \"10px\",\r\n                                width: \"10px\",\r\n                                backgroundColor: \"rgb(69, 148, 207)\",\r\n                            }}/>\r\n                            <div>{ manaCost }</div>\r\n                        </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ManaCost;","import React, { Component } from 'react';\r\nimport { \r\n    getAbilityBehaviours,\r\n    getAbilitySpecialExtraValues\r\n\r\n} from \"../../utility/dataHelperAbilities\";\r\nimport { \r\n    getTooltipString,\r\n    getLocalizedString,\r\n    containsLocalizedString\r\n} from \"../../utility/data-helpers/language\";\r\nimport {\r\n    calculateAbilityCastRange\r\n} from \"../../utility/calculate\";\r\n\r\nfunction stringContainsHtml (str) {\r\n    return typeof(str) === \"string\" && str.includes(\"</font>\");\r\n}\r\n\r\n/// Displays a Type/Value props used inside Ability descriptions\r\nfunction TypeValueUI (props) {\r\n    /// Check if localized type value contains percent and remove\r\n    let isPercentage = false;\r\n    let typeStr = props.type;\r\n    let valueStr = props.value;\r\n    if (props.type.includes(\"%\")) {\r\n        typeStr = typeStr.replace(\"%\", \"\");\r\n        isPercentage = true;\r\n    }\r\n\r\n    return (\r\n        <div className=\"d-flex\" style={{ fontSize: \"0.85rem\"}}>\r\n            {/* Type Key */}\r\n            {\r\n                stringContainsHtml(typeStr) ?\r\n                <div dangerouslySetInnerHTML={{ __html: typeStr.replace(\"\\\\\", \"\") }}></div>\r\n                :\r\n                <div>{ typeStr }</div>\r\n            }\r\n            <div className=\"mx-1\" />\r\n            {/* Value */}\r\n            {\r\n                stringContainsHtml(valueStr) ?    \r\n                <div dangerouslySetInnerHTML={{ __html: valueStr.replace(\"\\\\\", \"\") }}></div>\r\n                :\r\n                <div>{ valueStr }</div>\r\n            }\r\n            {\r\n                // Give percent sign after value if isPercent\r\n                isPercentage && \"%\"\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nclass AbilityDetails extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            ability: props.ability,\r\n            abilityInfo: props.abilityInfo,\r\n            levelInfo: props.levelInfo,\r\n\r\n            items: props.items,\r\n            neutral: props.neutral,\r\n            selectedTalents: props.selectedTalents,\r\n\r\n            abilityBehaviours: null,\r\n            castRange: 0,\r\n\r\n            abilityStrings: props.abilityStrings,\r\n            dotaStrings: props.dotaStrings,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(prevProps.abilityInfo !== this.props.abilityInfo) {\r\n            this.setState({ \r\n                abilityInfo: this.props.abilityInfo,\r\n            });\r\n        }\r\n\r\n        if (prevProps.levelInfo !== this.props.levelInfo) {\r\n            this.setState({ \r\n                levelInfo: this.props.levelInfo \r\n            });\r\n        }\r\n\r\n        if (prevProps.items !== this.props.items) {\r\n            this.setState({ \r\n                items: this.props.items \r\n            });\r\n        }\r\n\r\n        if (prevProps.neutral !== this.props.neutral) {\r\n            this.setState({ \r\n                neutral: this.props.neutral \r\n            });\r\n        }\r\n\r\n        if (prevProps.selectedTalents !== this.props.selectedTalents) {\r\n            this.setState({ \r\n                selectedTalents: this.props.selectedTalents \r\n            });\r\n        }\r\n\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ \r\n                abilityStrings: this.props.abilityStrings \r\n            });\r\n        }\r\n        if (prevProps.dotaStrings !== this.props.dotaStrings) {\r\n            this.setState({ \r\n                dotaStrings: this.props.dotaStrings \r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let castRangeAmt = calculateAbilityCastRange(this.state.ability, this.state.abilityInfo, this.state.levelInfo, this.state.items, this.state.neutral, this.state.selectedTalents);\r\n        let valuesInformation = getAbilitySpecialExtraValues(this.state.ability, this.state.abilityInfo, this.state.levelInfo.level, this.state.items, this.state.selectedTalents);\r\n        let abilityBehaviours = getAbilityBehaviours(this.state.abilityInfo);\r\n        return (\r\n            <div className=\"mb-2\">\r\n                {\r\n                    abilityBehaviours && abilityBehaviours.map((value, index) => {\r\n                        return (\r\n                            <TypeValueUI \r\n                                key={index}\r\n                                type={ getLocalizedString(this.state.dotaStrings, value.key) } \r\n                                value={ typeof value.value === \"object\" ? value.value.map((val) => {\r\n                                        return getLocalizedString(this.state.dotaStrings, val)\r\n                                    }).join(', ') : getLocalizedString(this.state.dotaStrings, value.value) \r\n                                } />\r\n                        );\r\n                    })\r\n                }\r\n                <div className=\"py-1\" />\r\n                {\r\n                    castRangeAmt &&\r\n                        <TypeValueUI \r\n                            type={getLocalizedString(this.state.abilityStrings, \"dota_ability_variable_cast_range\").toUpperCase() + \":\"}\r\n                            value={castRangeAmt} />\r\n                }\r\n                <div className=\"py-1\" />\r\n                {\r\n                    valuesInformation && valuesInformation.map((value, index) => {\r\n                        if (containsLocalizedString(this.state.abilityStrings, value.key)) {\r\n                            return (\r\n                                <TypeValueUI \r\n                                    key={ `${value.key}-${index}` }\r\n                                    type={ getLocalizedString(this.state.abilityStrings, value.key) }\r\n                                    value={ value.value } />\r\n                            );   \r\n                        }\r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AbilityDetails;","import React, { Component } from 'react';\r\nimport {\r\n    Row, \r\n    Col,\r\n    Button\r\n} from \"react-bootstrap\";\r\n\r\nimport { DOTAAbilities } from \"../../data/dota2/json/npc_abilities.json\";\r\n\r\nimport {\r\n    itemsContainsScepter\r\n} from \"../../utility/dataHelperItems\";\r\n\r\nimport DamageOutput from \"./DamageOutput\";\r\nimport Cooldown from \"./Cooldown\";\r\nimport ManaCost from \"./ManaCost\";\r\nimport AbilityDetails from \"./AbilityDetails\";\r\nimport \"./Abilities.css\";\r\n\r\n/// Returns array of html elements to represent the levels of the ability\r\nfunction getAbilityLevelHtml (levelInfo, abilityIndex, abilityInfo, onLevelChanged) {\r\n    if (levelInfo && abilityInfo)\r\n    {\r\n        /// Determine max level of ability\r\n        let maxLvl = abilityInfo.AbilityType === \"DOTA_ABILITY_TYPE_ULTIMATE\" ? 3 : 4;\r\n        if (abilityInfo.MaxLevel)\r\n            maxLvl = parseInt(abilityInfo.MaxLevel);\r\n        \r\n        let html = [];\r\n        for(let i = 0; i < maxLvl; i++) {\r\n            html.push(\r\n                <Button \r\n                    key={i} \r\n                    variant=\"outline-secondary\"\r\n                    className=\"p-1\"\r\n                    onClick={(e) => onLevelChanged(e)}\r\n                    data-lvlindex={abilityIndex}\r\n                    data-btnindex={i}>\r\n                    <div className={ i < levelInfo.level ? \"levelled\" : \"unlevelled\"}></div>\r\n                </Button>\r\n            );\r\n        }\r\n        return html;\r\n    }\r\n    else\r\n    {\r\n        return <div>?</div>\r\n    }\r\n}\r\n\r\nfunction getLevelInfo (abilities) {\r\n    if (abilities) {\r\n        return abilities.map((abil, index) => {\r\n            return { ability: index, level: 1 };\r\n        });\r\n    }\r\n    return [ ];\r\n}\r\n\r\n/// Max amount of abilities to show in one row\r\nconst ABILITY_ROW_MAX = 6;\r\n\r\nclass Abilities extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        var abils = this.filterAbilities(props.abilities);\r\n        var abilLevels = getLevelInfo(abils);\r\n\r\n        this.state = {\r\n            heroName: props.heroName,\r\n            abilities: abils,\r\n            abilityLevels: abilLevels,\r\n            items: props.items,\r\n            neutral: props.neutral,\r\n            selectedTalents: props.selectedTalents,\r\n\r\n            abilityStrings: props.abilityStrings,\r\n            dotaStrings: props.dotaStrings,\r\n\r\n            displayDamage: props.displayDamage,\r\n        };\r\n\r\n        this.onLevelChanged = this.onLevelChanged.bind(this);\r\n        this.filterAbilities = this.filterAbilities.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.heroName !== this.props.heroName) {\r\n            this.setState({\r\n                heroName: this.props.heroName,\r\n            });\r\n        }\r\n\r\n        if (prevProps.abilities !== this.props.abilities) {\r\n            var abils = this.filterAbilities(this.props.abilities);\r\n            this.setState({\r\n                abilities: abils,\r\n                abilityLevels: getLevelInfo(abils),\r\n            });\r\n        }\r\n\r\n        if (prevProps.items !== this.props.items) {\r\n            this.setState({ items: this.props.items });\r\n        }\r\n        if (prevProps.neutral !== this.props.neutral) {\r\n            this.setState({ neutral: this.props.neutral });\r\n        }\r\n        if (prevProps.selectedTalents !== this.props.selectedTalents) {\r\n            this.setState({ selectedTalents: this.props.selectedTalents });\r\n        }\r\n\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ abilityStrings: this.props.abilityStrings });\r\n        }\r\n        if (prevProps.dotaStrings !== this.props.dotaStrings) {\r\n            this.setState({ dotaStrings: this.props.dotaStrings });\r\n        }\r\n    }\r\n    \r\n    // Remove any undefined, hidden abilities\r\n    filterAbilities(abils) {\r\n        if (abils) {\r\n            return abils.filter(function (val) {\r\n                return val && val !== \"generic_hidden\";\r\n            });\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    onLevelChanged(e) {\r\n        // If click on inner element\r\n        if (e.target.tagName.toLowerCase() !== \"button\") {\r\n            e.target = e.target.parentElement;\r\n        }\r\n\r\n        var levelIndex = parseInt(e.target.dataset.lvlindex);\r\n        var abilities = this.state.abilityLevels;\r\n        var targetLevel = parseInt(e.target.dataset.btnindex) + 1;\r\n        // Clicked same level, set to 0\r\n        if (abilities[levelIndex].level === targetLevel) {\r\n            abilities[levelIndex].level = 0;\r\n        } else {\r\n            // Set Level's new value to which btn was pressed\r\n            abilities[levelIndex].level = targetLevel;\r\n        }\r\n\r\n        this.setState({\r\n            abilityLevels: abilities,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Row \r\n                md={this.state.abilities?.length > ABILITY_ROW_MAX ? ABILITY_ROW_MAX : 0}>\r\n                {\r\n                    this.state.abilities && this.state.abilityLevels && this.state.abilities.map((value, index) => {\r\n                        // Info about the ability\r\n                        let ability = DOTAAbilities[value];\r\n                        if (!ability) {\r\n                            console.log(`Unable to find info on ability '${value}'`);\r\n                        }\r\n                        // Current level of the ability\r\n                        let levelInfo = this.state.abilityLevels.find(abilVal => abilVal.ability === index);\r\n                        if (!ability && value) {\r\n                            return <div key={value}>?</div>\r\n                        }\r\n\r\n                        // Dont add any scepter abilities unless hero has scepter\r\n                        if (ability && ability.IsGrantedByScepter && !itemsContainsScepter(this.state.items)) {\r\n                            return;\r\n                        }\r\n                        return (\r\n                            <Col key={ability.ID} className=\"d-flex flex-column justify-content-top\">\r\n                                <img\r\n                                    className=\"h-100 align-self-center\"\r\n                                    style={{ maxWidth: \"90px\", maxHeight: \"90px\" }}\r\n                                    src={`http://cdn.dota2.com/apps/dota2/images/abilities/${value}_hp1.png`} \r\n                                    alt={ `${ability.ID}-${value}` } />\r\n                                <Row className=\"px-4\">\r\n                                    <Col md={6}>\r\n                                        {/* Cooldown */}\r\n                                        <Cooldown \r\n                                            ability={value} \r\n                                            abilityInfo={ability}\r\n                                            abilityLevel={levelInfo.level} \r\n                                            cooldown={ability.AbilityCooldown}\r\n                                            items={this.state.items}\r\n                                            neutral={this.state.neutral}\r\n                                            selectedTalents={this.state.selectedTalents} />\r\n                                    </Col>\r\n                                    <Col md={6}>\r\n                                        {/* Mana Cost */}\r\n                                        <ManaCost \r\n                                            ability={ability}\r\n                                            abilityLevel={levelInfo.level} \r\n                                            items={this.state.items}\r\n                                            neutral={this.state.neutral}\r\n                                            selectedTalents={this.state.selectedTalents} />\r\n                                    </Col>\r\n                                </Row>\r\n                                <div className=\"align-self-center pt-2 d-flex\">\r\n                                    {\r\n                                        this.state.abilityLevels && !ability.IsGrantedByScepter && \r\n                                            getAbilityLevelHtml(levelInfo, index, ability, this.onLevelChanged)\r\n                                    }\r\n                                </div>\r\n                                <div className=\"py-1\">\r\n                                    {\r\n                                        this.state.displayDamage && \r\n                                            <DamageOutput \r\n                                                ability={value}\r\n                                                abilityInfo={ability} \r\n                                                levelInfo={levelInfo}\r\n                                                items={this.state.items}\r\n                                                neutral={this.state.neutral} \r\n                                                selectedTalents={this.state.selectedTalents} \r\n                                                abilityStrings={this.state.abilityStrings} \r\n                                                dotaStrings={this.state.dotaStrings} />\r\n                                    }\r\n                                </div>\r\n                                <div className=\"py-1\">\r\n                                    <AbilityDetails \r\n                                        ability={value}\r\n                                        abilityInfo={ability} \r\n                                        levelInfo={levelInfo}\r\n                                        items={this.state.items}\r\n                                        neutral={this.state.neutral} \r\n                                        selectedTalents={this.state.selectedTalents}\r\n                                        abilityStrings={this.state.abilityStrings} \r\n                                        dotaStrings={this.state.dotaStrings} />\r\n                                </div>\r\n                            </Col>\r\n                        );\r\n                    })\r\n                }\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Abilities;","import Abilities from \"./Abilities\";\r\n\r\nexport default Abilities;","import React from \"react\";\r\n\r\nexport function filterItemName (name) {\r\n    if (name) {\r\n        let item = name.split('_');\r\n        item.shift();\r\n        item = item.join('_');\r\n        return item;\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\n/// Gets an item icon from it's name. For exmaple \"item_mango_tree\"\r\nexport function getItemIcon (itemName, width, height, scale) {\r\n    // Remove 'item_' prefix, split by _, remove \"item\" and join again\r\n    let item = filterItemName(itemName);\r\n\r\n    // Width and height of each item in item_stylesheet\r\n    if (item) {\r\n        return <span \r\n                    className={ 'sprite sprite-' + item + '_png '} \r\n                    alt={item} \r\n                    data-item={itemName} \r\n                    style={{ transform: `scale(${scale}, ${scale})`, transformOrigin: \"top left\" }} />\r\n    } else {\r\n        return <span \r\n                style={{ backgroundColor: \"#212121\", width: width, height: height, transform: `scale(${scale}, ${scale})`, display: \"block\", transformOrigin: \"top left\" }} />\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport {\r\n    Tabs,\r\n    Tab,\r\n    Button,\r\n    Form,\r\n    ListGroup\r\n} from \"react-bootstrap\";\r\nimport { getLocalizedString } from '../../utility/data-helpers/language';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faMinus } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport {\r\n    getItemIcon\r\n} from \"../../utility/spriteHelper\";\r\n\r\nimport \"../../css/dota_items.css\";\r\nimport { \r\n    itemAliasIncludes, \r\n    getAllItems \r\n} from '../../utility/dataHelperItems';\r\n\r\nfunction getItemsByQuality(itemsArray, matchArray) {\r\n    return itemsArray.filter((itemInfo) => {\r\n        var quality = itemInfo.item.ItemQuality;\r\n        if (quality) { //(quality === \"consumable\" || quality === \"component\" || quality === \"secret_shop\")) {\r\n            for(var i = 0; i < matchArray.length; i++) {\r\n                if (quality === matchArray[i]) {\r\n                    return itemInfo;\r\n                }\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction ItemIcon(props) {\r\n    return (\r\n            <div \r\n                key={props.keyName} \r\n                title={props.itemName} \r\n                onClick={props.onClick}\r\n                data-item={props.itemName}\r\n                className=\"m-1\" \r\n                style={{ width: `calc(88px * ${props.scale})`, height: `calc(64px * ${props.scale})` }}>\r\n                { \r\n                    getItemIcon(props.itemName, \"88px\", \"64px\", props.scale) \r\n                }\r\n            </div>\r\n    );\r\n}\r\n\r\nfunction TabHeading(props) {\r\n    return (\r\n        <h6 className=\"px-3 mb-0\">{props.text}</h6>\r\n    );\r\n}\r\n\r\nclass ItemSelector extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // Get all selectable items in dota\r\n        let allItems = getAllItems();\r\n        // Split into basic and upgrade items to sort into tabs\r\n        let basicItems = getItemsByQuality(allItems, [\"consumable\", \"component\", \"secret_shop\"]);\r\n        let upgradesItems = getItemsByQuality(allItems, [\"common\", \"rare\", \"epic\", \"artifact\"]);\r\n\r\n        this.state = {\r\n            allItems: allItems,\r\n            queryItems: null,\r\n\r\n            onSelectedItem: props.onSelectedItem,\r\n            dotaStrings: props.dotaStrings,\r\n            abilityStrings: props.abilityStrings,\r\n\r\n            basicItems: basicItems,\r\n            upgradesItems: upgradesItems,\r\n        };\r\n\r\n        this.onSearchChanged = this.onSearchChanged.bind(this);\r\n        this.onSearchItemSelected = this.onSearchItemSelected.bind(this);\r\n        this.onShopItemSelected = this.onShopItemSelected.bind(this);\r\n        this.onRemoveItemSelected = this.onRemoveItemSelected.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(prevProps !== this.props) {\r\n            this.setState({\r\n                dotaStrings: this.props.dotaStrings,\r\n                abilityStrings: this.props.abilityStrings,\r\n                onSelectedItem: this.props.onSelectedItem,\r\n            });\r\n        }\r\n    }\r\n\r\n    onSearchChanged(e) {\r\n        let query = e.target.value;\r\n        let filteredItems = null;\r\n        if (query) {\r\n            filteredItems = this.state.allItems.filter((item) => {\r\n                // Check query for match in localized string, should work most of the time\r\n                let localizedName = getLocalizedString(this.state.abilityStrings, `DOTA_Tooltip_Ability_${item.name}`)?.toLowerCase();\r\n                if (localizedName && localizedName.indexOf(query.toLowerCase()) !== -1) {\r\n                    return true;\r\n                }\r\n\r\n                // Match query with any item aliases (only works for english)\r\n                let aliasMatch = itemAliasIncludes(item.item.ItemAliases, query);\r\n                if (aliasMatch) {\r\n                    return true;\r\n                }\r\n            });\r\n        }\r\n\r\n        this.setState({\r\n            queryItems: filteredItems,\r\n        });\r\n    }\r\n\r\n    onSearchItemSelected(e) {\r\n        let val = e.target.dataset?.item;\r\n        this.state.onSelectedItem(val);\r\n    }\r\n\r\n    onShopItemSelected (e) {\r\n        let item = e.target.dataset?.item;\r\n        this.state.onSelectedItem(item);\r\n    }\r\n\r\n    onRemoveItemSelected(e) {\r\n        let item = null;\r\n        this.state.onSelectedItem(item);\r\n    }\r\n\r\n    render() {\r\n        let scale = 0.5;\r\n        let searchIconScale = 0.45;\r\n        return (\r\n            <div className=\"item-card\">\r\n                <div className=\"item-card header d-flex p-2\">\r\n                    <div>\r\n                        <Form.Control \r\n                            className=\"foresight-input-control\"\r\n                            type=\"text\" \r\n                            placeholder=\"Search...\" \r\n                            onChange={this.onSearchChanged}/>\r\n                    </div>\r\n                    <div className=\"ml-auto\">\r\n                        <Button variant=\"outline-danger\" onClick={this.onRemoveItemSelected}>\r\n                            <FontAwesomeIcon icon={faMinus} />\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"item-card content\">\r\n                    <div className=\"p-1\">\r\n                        {\r\n                            this.state.queryItems && \r\n                            <div style={{ color: \"white\" }}>\r\n                                <h5 >\r\n                                    { getLocalizedString(this.state.dotaStrings, \"DOTA_Shop_Search_Results_Title\") }\r\n                                </h5>\r\n                                <ListGroup className=\"foresight-list-group\">\r\n                                    {\r\n                                        // Query search term\r\n                                        this.state.queryItems.map((item) => {\r\n                                            // Add L char at end of dagons to show their level\r\n                                            let itmName = item.name;\r\n                                            if (item.name.includes(\"item_dagon_\")) {\r\n                                                itmName += \"L\";\r\n                                            }\r\n                                            \r\n                                            let localizedName = getLocalizedString(this.state.abilityStrings, `DOTA_Tooltip_Ability_${itmName}`);\r\n                                            return (\r\n                                                <ListGroup.Item \r\n                                                    key={item.name} \r\n                                                    data-item={item.name} \r\n                                                    onClick={this.onSearchItemSelected} \r\n                                                    action>\r\n                                                    <div className=\"d-flex\" data-item={item.name}>\r\n                                                        <ItemIcon \r\n                                                            itemName={item.name}\r\n                                                            onClick={this.onSearchItemSelected} \r\n                                                            scale={searchIconScale}/>\r\n\r\n                                                        <h6 className=\"mx-1 my-auto\" data-item={item.name}>\r\n                                                            { localizedName ?? itmName }\r\n                                                        </h6>\r\n                                                    </div>\r\n                                                </ListGroup.Item>\r\n                                            )\r\n                                        })\r\n                                    }   \r\n                                </ListGroup>\r\n                                {\r\n                                    this.state.queryItems && this.state.queryItems.length <= 0 &&\r\n                                        <h6>\r\n                                            { getLocalizedString(this.state.dotaStrings, \"DOTA_Shop_Search_No_Results\") }\r\n                                        </h6>\r\n                                }\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                    {/* Regular view */}\r\n                    {\r\n                        !this.state.queryItems && \r\n                            <div>\r\n                                <Tabs\r\n                                    className=\"foresight-tabs\"\r\n                                    defaultActiveKey=\"basic\" \r\n                                    transition={false} \r\n                                    id=\"shop-tabs\">\r\n                                    <Tab \r\n                                        eventKey=\"basic\" \r\n                                        title={<TabHeading text={getLocalizedString(this.state.dotaStrings, \"DOTA_Shop_Category_Basics\")} />} >\r\n                                        <div className=\"d-flex flex-wrap\">\r\n                                            {\r\n                                                this.state.basicItems && this.state.basicItems.map((item) => {\r\n                                                    return (\r\n                                                        <ItemIcon \r\n                                                            key={item.item.ID}\r\n                                                            itemName={item.name}\r\n                                                            onClick={this.onShopItemSelected} \r\n                                                            scale={scale} />\r\n                                                    )\r\n                                                })\r\n                                            }\r\n                                        </div>\r\n                                    </Tab>\r\n                                    <Tab \r\n                                        eventKey=\"upgrades\" \r\n                                        title={<TabHeading text={getLocalizedString(this.state.dotaStrings, \"DOTA_Shop_Category_Upgrades\")} />} >\r\n                                        <div className=\"d-flex flex-wrap\">\r\n                                            {\r\n                                                this.state.upgradesItems && this.state.upgradesItems.map((item) => {\r\n                                                    return (\r\n                                                        <ItemIcon \r\n                                                            key={item.item.ID}\r\n                                                            itemName={item.name}\r\n                                                            onClick={this.onShopItemSelected} \r\n                                                            scale={scale} />\r\n                                                    );\r\n                                                })\r\n                                            }\r\n                                        </div>\r\n                                    </Tab>\r\n                                </Tabs>\r\n                            </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ItemSelector;","/// All Disassemble rules of an item\r\nexport const EDisassembleRule = {\r\n    ALWAYS: \"DOTA_ITEM_DISASSEMBLE_ALWAYS\",\r\n    NEVER: \"DOTA_ITEM_DISASSEMBLE_NEVER\",\r\n};\r\n\r\n/// All ItemQuality properties on ItemInfo's\r\nexport const EItemQuality = {\r\n    SECRET_SHOP: \"secret_shop\",\r\n    COMPONENT: \"component\",\r\n};","import React, { Component } from 'react';\r\n\r\nimport {\r\n    getItemInfoFromName, \r\n    convertItemDescToHtml,\r\n    getItemStatistics,\r\n    isDissassembleRule\r\n} from \"../../utility/dataHelperItems\";\r\nimport { \r\n    getLocalizedString\r\n} from '../../utility/data-helpers/language';\r\nimport { calculateItemSellCost } from \"../../utility/calculate\";\r\nimport {\r\n    EDisassembleRule, EItemQuality\r\n} from \"../../enums/items\";\r\n\r\nimport \"./ItemTooltip.css\";\r\nimport { getItemIcon } from '../../utility/spriteHelper';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faHome, faCampground } from '@fortawesome/free-solid-svg-icons';\r\n\r\nfunction replaceItemStatLocalizeString (localizeString, value) {\r\n    // If generic one tha contains $value, split and insert value\r\n    if(localizeString.includes(\"$\")) {\r\n        let split = localizeString.split('$');\r\n        split.splice(1, 0, value);\r\n        return split.join(\" \");\r\n    } \r\n    // If contains %, arrange it correctly\r\n    else if (localizeString.includes(\"%\")) {\r\n        return localizeString.replace(\"%+\", `+ ${value}% `);\r\n    }\r\n    /// If negative value\r\n    else if (localizeString.includes(\"-\")) {\r\n        return localizeString.replace(\"-\", `- ${Math.abs(value)} `);\r\n    }\r\n    return localizeString;\r\n}\r\n\r\nclass ItemTooltip extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            itemName: props.itemName,\r\n            dotaStrings: props.dotaStrings,\r\n            abilityStrings: props.abilityStrings,\r\n\r\n            itemInfo: getItemInfoFromName(props.itemName),  \r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                itemName: this.props.itemName,\r\n                dotaStrings: this.props.dotaStrings,\r\n                abilityStrings: this.props.abilityStrings,\r\n                itemInfo: getItemInfoFromName(this.props.itemName),  \r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let scale = 0.7;\r\n        let width = \"88px\";\r\n        let height = \"64px\";\r\n        let goldIconSize = 20;\r\n\r\n        let itemStats = getItemStatistics(this.state.itemInfo);\r\n        let loreString = getLocalizedString(this.state.abilityStrings, `DOTA_Tooltip_ability_${this.state.itemName}_Lore`);\r\n        /// Get localized string and filter it to correct html\r\n        let descString = getLocalizedString(this.state.abilityStrings, `DOTA_Tooltip_ability_${this.state.itemName}_Description`);\r\n        let descFiltered = convertItemDescToHtml(descString, this.state.itemName, this.state.itemInfo);\r\n        return (\r\n            <div className=\"item-tooltip\">\r\n                <div className=\"d-flex p-1\">\r\n                    <div className=\"m-2\" style={{ width: `calc(${width} * ${scale})`, height: `calc(${height} * ${scale})` }}>\r\n                        {  \r\n                            getItemIcon(this.state.itemName, width, height, 0.7) \r\n                        }\r\n                    </div>\r\n                    <div>\r\n                        <h4>\r\n                            { getLocalizedString(this.state.abilityStrings, `DOTA_Tooltip_Ability_${this.state.itemName}`) }\r\n                        </h4>\r\n                        {\r\n                            //If has an item cost and is more than 0\r\n                            this.state.itemInfo?.ItemCost && this.state.itemInfo?.ItemCost > 0 &&\r\n                            <div className=\"d-flex\">\r\n                                {\r\n                                    this.state.itemInfo?.ItemQuality &&\r\n                                        <FontAwesomeIcon icon={this.state.itemInfo?.ItemQuality == EItemQuality.SECRET_SHOP ? faCampground : faHome } className=\"align-item-center\" />\r\n                                }\r\n                                <img \r\n                                    className=\"mx-1\"\r\n                                    src={process.env.PUBLIC_URL + \"/images/dota2/gold_icon_ui.png\"} \r\n                                    height={goldIconSize}\r\n                                    width={goldIconSize} />\r\n                                <h6 className=\"gold-amount\">\r\n                                    { parseInt(this.state.itemInfo?.ItemCost) }\r\n                                </h6>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <div className=\"item-content p-2\">\r\n                    {/* item stat info */}\r\n                    {\r\n                        itemStats &&\r\n                            <div className=\"pb-1\">\r\n                                { \r\n                                    itemStats.map((value) => {\r\n                                        /// attempt to get localized string and display\r\n                                        let string = getLocalizedString(this.state.abilityStrings, `DOTA_Tooltip_ability_${this.state.itemName}_${value.key}`);\r\n                                        if (string) {\r\n                                            /// Check if item stat is a generic one that can be applied to most items and replace variable with localized string\r\n                                            let genericKeys = [\r\n                                                \"health\", \"mana\", \"armor\", \"damage\", \"str\", \"int\", \"agi\", \"all\", \"attack\", \"hp_regen\",\r\n                                                \"mana_regen\", \"spell_amp\", \"move_speed\", \"evasion\", \"spell_resist\", \"selected_attrib\",\r\n                                                \"attack_range\", \"attack_range_melee\", \"cast_range\", \"status_resist\"\r\n                                            ];\r\n                                            // split and use variable to compare\r\n                                            let splitCompare = string.split(\"$\")[1];\r\n                                            for (let key of genericKeys) {\r\n                                                if (splitCompare === key) {\r\n                                                    /// get localized generic and replace variable in existing string\r\n                                                    let localized = getLocalizedString(this.state.abilityStrings, `dota_ability_variable_${key}`);\r\n                                                    string = string.replace(key.toString(), localized);\r\n                                                    break;\r\n                                                }\r\n                                            }\r\n                                            \r\n                                            return (\r\n                                                <div key={value.key} dangerouslySetInnerHTML={{ __html: replaceItemStatLocalizeString(string, value.value) }}>\r\n                                                </div>\r\n                                            );\r\n                                        }\r\n                                    })\r\n                                }\r\n                            </div>\r\n                    }\r\n\r\n                    {/* abilities */}\r\n                    {\r\n                        descString && descString != \"?\" &&\r\n                            <div className=\"p-1\">\r\n                                { descFiltered }\r\n                            </div>\r\n                    }\r\n\r\n                    {/* lore */}\r\n                    {\r\n                        loreString && loreString != \"?\" &&   \r\n                            <div className=\"p-1 m-1 lore\">\r\n                                { loreString }\r\n                            </div>\r\n                    }\r\n\r\n                    {/* sell price */}\r\n                    {\r\n                        this.state.itemInfo?.ItemCost && !this.state.itemInfo?.ItemIsNeutralDrop &&\r\n                            <div className=\"px-1\"> \r\n                                {\r\n                                    getLocalizedString(this.state.dotaStrings, \"DOTA_Item_Tooltip_Sell_Price\")\r\n                                    .replace(\"%s1\", calculateItemSellCost(this.state.itemInfo))\r\n                                }\r\n                            </div>\r\n                    }\r\n\r\n                    {/* dissassemble */}\r\n                    {\r\n                        isDissassembleRule(this.state.itemInfo, EDisassembleRule.ALWAYS) && \r\n                            <div className=\"px-1\">\r\n                                { getLocalizedString(this.state.dotaStrings, \"DOTA_Item_Tooltip_Disassemble\") }\r\n                            </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ItemTooltip;","import ItemTooltip from \"./ItemTooltip\";\r\n\r\nexport default ItemTooltip;","import React, { Component } from 'react';\r\nimport Popup from 'reactjs-popup';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { \r\n    faInfo, \r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport {\r\n    Form\r\n} from \"react-bootstrap\";\r\n\r\nimport { getItemIcon } from \"../../utility/spriteHelper\"\r\nimport { \r\n    getItemInfoFromName,\r\n    itemRequiresCharges\r\n} from '../../utility/dataHelperItems';\r\n\r\nimport ItemSelector from \"./ItemSelector\";\r\nimport ItemTooltip from '../ItemTooltip';\r\nimport \"../../css/dota_hero_icons_big.css\";\r\n\r\n/// Single item that contains a popup to change the item\r\nclass Item extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            item: props.item,\r\n            slot: props.slot, \r\n            isBackpack: props.isBackpack,\r\n\r\n            onItemChanged: props.onItemChanged,\r\n            onItemExtraChanged: props.onItemExtraChanged,\r\n\r\n            dotaStrings: props.dotaStrings,\r\n            abilityStrings: props.abilityStrings,\r\n\r\n            itemExtra: { },\r\n\r\n            itemSelectorDisabled: false,\r\n        };\r\n\r\n        //console.log(`slot: ${this.state.slot} - item: ${this.state.item}`);\r\n        this.onSelectedItem = this.onSelectedItem.bind(this);\r\n        this.onBloodstoneChargesChanged = this.onBloodstoneChargesChanged.bind(this);\r\n        this.setCharges = this.setCharges.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.state.item === \"item_bloodstone\") {\r\n            /// Set inital charges of bloodstone\r\n            let itemInfo = getItemInfoFromName(this.state.item);\r\n            this.setState({\r\n                itemExtra: {\r\n                    ...this.state.itemExtra,\r\n                    charges: itemInfo?.ItemInitialCharges ?? 0,\r\n                },\r\n            }, () => {\r\n                /// Update state to new init value\r\n                this.setCharges(this.state.itemExtra.charges);\r\n            });\r\n        }\r\n    }\r\n\r\n    onSelectedItem (item) {\r\n        // Close item selector popup by disabling\r\n        this.setState({\r\n            itemSelectorDisabled: true,\r\n        });\r\n        \r\n        // Trigger onItemChanged event\r\n        this.state.onItemChanged({ \r\n            slot: this.state.slot, \r\n            item: item,\r\n            extra: this.state.itemExtra,\r\n            isBackpack: this.state.isBackpack ? true : false,\r\n        });\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.item !== this.props.item) {\r\n            this.setState({ item: this.props.item, });\r\n        }\r\n\r\n        if (prevProps.slot !== this.props.slot) {\r\n            this.setState({ slot: this.props.slot });\r\n        }\r\n\r\n        if (prevProps.isBackpack !== this.props.isBackpack) {\r\n            this.setState({ isBackpack: this.props.isBackpack });\r\n        }\r\n\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ abilityStrings: this.props.abilityStrings });\r\n        }\r\n\r\n        if (prevProps.dotaStrings !== this.props.dotaStrings) {\r\n            this.setState({ dotaStrings: this.props.dotaStrings });\r\n        }\r\n    }\r\n\r\n    onBloodstoneChargesChanged (e) {\r\n        let newVal = parseInt(e.target.value);\r\n        this.setCharges(newVal);\r\n    }\r\n\r\n    setCharges(newChargeAmt) {\r\n        // If null or not exist, set to 0\r\n        if (!newChargeAmt) {\r\n            newChargeAmt = 0;\r\n        }\r\n\r\n        // Value must be more than 0 and less than 999\r\n        if (newChargeAmt < 0) {\r\n            newChargeAmt = 0;\r\n        } else if (newChargeAmt > 999) {\r\n            newChargeAmt = 999;\r\n        }\r\n        \r\n        this.setState({\r\n            itemExtra: {\r\n                ...this.state.itemExtra,\r\n                charges: newChargeAmt,\r\n            },\r\n        }, () => {\r\n            this.state.onItemChanged({\r\n                slot: this.state.slot, \r\n                item: this.state.item,\r\n                extra: this.state.itemExtra,\r\n                isBackpack: this.state.isBackpack ? true : false,\r\n            });\r\n        });\r\n    }\r\n\r\n    render() {\r\n        // If last render was disabled, enable again\r\n        if (this.state.itemSelectorDisabled) {\r\n            this.setState({ itemSelectorDisabled: false });\r\n        }\r\n\r\n        let scale = 0.7;\r\n        let width = \"88px\";\r\n        let height = \"64px\";\r\n        return (\r\n            // Relative to make positioning work on children\r\n            <div style={{ position:\"relative\" }}>\r\n                {\r\n                    // Hover popup for Item information tooltip\r\n                    this.state.item &&\r\n                        <Popup\r\n                            trigger={isOpen => (\r\n                                // Info icon on item to display tooltip\r\n                                <div\r\n                                    className=\"ml-2 mt-1\" \r\n                                    style={{ position:\"absolute\", zIndex: 1 }}>\r\n                                    <FontAwesomeIcon icon={faInfo} />\r\n                                </div>\r\n                            )}\r\n                            position=\"right center\"\r\n                            on=\"hover\"\r\n                            className=\"foresight-tooltip\"\r\n                            contentStyle={{ width: \"350px\" }}>\r\n                                <ItemTooltip\r\n                                    itemName={this.state.item}\r\n                                    dotaStrings={this.state.dotaStrings}\r\n                                    abilityStrings={this.state.abilityStrings}\r\n                                    />\r\n                        </Popup>\r\n                }\r\n                {/* Item selector popup to allow for changing to new item */}\r\n                <Popup\r\n                    trigger={isOpen => (\r\n                        // Item icon\r\n                        <div className=\"m-1\">\r\n                            <div style={{ width: `calc(${width} * ${scale})`, height: `calc(${height} * ${scale})` }}>\r\n                                {  getItemIcon(this.state.item, width, height, 0.7) }\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                    closeOnDocumentClick \r\n                    disabled={this.state.itemSelectorDisabled}\r\n                    position=\"right center\"\r\n                    on=\"click\"\r\n                    className=\"foresight-tooltip\"\r\n                    contentStyle={{ \r\n                        width: \"350px\", \r\n                        height: \"450px\",\r\n                    }}>\r\n                        <ItemSelector \r\n                            onSelectedItem={this.onSelectedItem}\r\n                            dotaStrings={this.state.dotaStrings}\r\n                            abilityStrings={this.state.abilityStrings} />\r\n                </Popup>\r\n                {\r\n                    // Charge counter UI for bloodstone or charge based items\r\n                    (this.state.item === \"item_bloodstone\" || itemRequiresCharges(this.state.item)) &&\r\n                    <div style={{ \r\n                        position: \"absolute\", \r\n                        zIndex: 1, \r\n                        width: `calc(${width} * ${scale})`, \r\n                        height: `calc(${height} * ${scale})`,\r\n                        top: `calc(${height} * ${scale} - 17px)`,\r\n                        left: `calc(${width} * ${scale} - 27px)`, \r\n                    }}>\r\n                        <Form.Control \r\n                            size=\"sm\" \r\n                            value={ this.state.itemExtra?.charges ?? 0 } \r\n                            onChange={this.onBloodstoneChargesChanged} \r\n                            style={{ \r\n                                width: \"30px\",\r\n                                height: \"20px\",\r\n                                padding: 0,\r\n                                textAlign: \"center\",\r\n                                background: \"rgba(0, 0, 0, 0.5)\",\r\n                                border: 0,\r\n                                color: \"white\"\r\n                            }} />\r\n                    </div>\r\n                }\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default Item;","import React, { Component } from 'react';\r\nimport {\r\n    Button,\r\n    Form,\r\n    ListGroup\r\n} from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faMinus } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport {\r\n    getAllNeutrals, getItemInfoFromName, getNeutralTierLayout, itemAliasIncludes,\r\n} from \"../../utility/dataHelperItems\";\r\n\r\nimport { getItemIcon } from '../../utility/spriteHelper';\r\nimport { \r\n    getLocalizedString, \r\n    replaceStringValue,\r\n} from '../../utility/data-helpers/language';\r\n\r\nfunction ItemIcon(props) {\r\n    let searchIconScale = 0.45;\r\n    return (\r\n        <div \r\n            key={props.keyName} \r\n            title={props.itemName} \r\n            onClick={props.onClick}\r\n            data-item={props.itemName}\r\n            className=\"m-1\" \r\n            style={{ width: `calc(88px * ${searchIconScale})`, height: `calc(64px * ${searchIconScale})` }}>\r\n            { \r\n                getItemIcon(props.itemName, \"88px\", \"64px\", searchIconScale) \r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\n/// HTML for one level of tiered neutral items\r\nfunction NeutralTier (props) {\r\n    return (\r\n        <div>\r\n            <div className=\"d-flex\" style={{ color:\"white\" }}>\r\n                <h6>\r\n                    { replaceStringValue( getLocalizedString(props.dotaStrings, \"DOTA_Shop_NeutralTier\"), props.tier) } \r\n                </h6>\r\n                <h6 className=\"ml-auto text-muted\">\r\n                    { props.time + \"+\" }\r\n                </h6>\r\n            </div>\r\n            <div className=\"d-flex flex-wrap\">\r\n                {\r\n                    props.neutrals && Object.keys(props.neutrals).map((neutralKey, index) => {\r\n                        // Replace any recipes with actual item\r\n                        let neutral = neutralKey;\r\n                        if (neutral.includes(\"_recipe\")) {\r\n                            neutral = neutral.replace(\"_recipe\", \"\");\r\n                        }\r\n\r\n                        let localizedName = getLocalizedString(props.abilityStrings, `DOTA_Tooltip_Ability_${neutral}`);\r\n                        return (\r\n                            <div \r\n                                className=\"m-1\" \r\n                                key={ `${neutral}-${index}` } \r\n                                title={ localizedName }\r\n                                onClick={ props.onNeutralSelected }\r\n                                data-neutral={ neutral }\r\n                                style={{ width: `calc(88px * ${props.iconScale})`, height: `calc(64px * ${props.iconScale})` }}>\r\n                                { \r\n                                    getItemIcon(neutral, \"88px\", \"64px\", props.iconScale)\r\n                                }\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nclass NeutralItemSelector extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let allNeutrals = getAllNeutrals();\r\n        let neutralTierList = getNeutralTierLayout();\r\n        this.state = {\r\n            allNeutrals: allNeutrals,\r\n            queryNeutrals: null,\r\n            neutralTierList: neutralTierList,\r\n\r\n            iconScale: 0.49,\r\n            onNewNeutralSelected: props.onNeutralSelected,\r\n\r\n            dotaStrings: props.dotaStrings,\r\n            abilityStrings: props.abilityStrings,\r\n        };\r\n\r\n        this.onNeutralSelected = this.onNeutralSelected.bind(this);\r\n        this.onSearchChanged = this.onSearchChanged.bind(this);\r\n    }\r\n\r\n    onNeutralSelected(e) {\r\n        let neutral = e.target.parentElement.dataset.neutral;\r\n        this.state.onNewNeutralSelected({ item: neutral });\r\n    }\r\n\r\n    onSearchChanged (e) {\r\n        let query = e.target.value;\r\n        let filteredNeutrals = null;\r\n        if (query) {\r\n            filteredNeutrals = this.state.allNeutrals.filter((neutral, index) => {\r\n                // Check query for match in localized string, should work most of the time\r\n                let localizedName = getLocalizedString(this.state.abilityStrings, `DOTA_Tooltip_Ability_${neutral.item}`)?.toLowerCase();\r\n                if (localizedName && localizedName.indexOf(query.toLowerCase()) !== -1) {\r\n                    return true;\r\n                }\r\n\r\n                // Match query with any item aliases (only works for english)\r\n                let aliasMatch = itemAliasIncludes(neutral.itemInfo.ItemAliases, query);\r\n                if (aliasMatch) {\r\n                    return true;\r\n                }\r\n            });\r\n        }\r\n\r\n        /// If no query, show all neutrals\r\n        this.setState({\r\n            queryNeutrals: filteredNeutrals,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"neutral-item-card\" style={{ color: \"black\" }}>\r\n                <div className=\"neutral-item-card header d-flex p-2\">\r\n                    <div>\r\n                        <Form.Control \r\n                            className=\"foresight-input-control\"\r\n                            type=\"text\" \r\n                            placeholder=\"Search...\" \r\n                            onChange={this.onSearchChanged}/>\r\n                    </div>\r\n                    <Button className=\"ml-auto\" variant=\"outline-danger\" onClick={this.onNeutralSelected} data-neutral={null}>\r\n                        <FontAwesomeIcon icon={faMinus} data-neutral={null} />\r\n                    </Button>\r\n                </div>\r\n                <div className=\"neutral-item-card content p-2\">\r\n                    {/* Query search term UI */}\r\n                    {\r\n                        this.state.queryNeutrals && \r\n                            <ListGroup className=\"foresight-list-group\">\r\n                                {\r\n                                    <h6>\r\n                                        { getLocalizedString(this.state.dotaStrings, \"DOTA_Shop_Search_Results_Title\") }\r\n                                    </h6>\r\n                                }\r\n                                {\r\n                                    this.state.queryNeutrals.map((itemInfo, index) => {\r\n                                        let localizedName = getLocalizedString(this.state.abilityStrings, `DOTA_Tooltip_Ability_${itemInfo.item}`);\r\n                                        return ( \r\n                                            <ListGroup.Item\r\n                                                key={ `${itemInfo.item}-${index}`}\r\n                                                onClick={this.onNeutralSelected}\r\n                                                title={localizedName}\r\n                                                data-neutral={itemInfo.item}\r\n                                                action>\r\n                                                <div className=\"d-flex\" data-neutral={itemInfo.item}>\r\n                                                    <ItemIcon \r\n                                                        itemName={itemInfo.item}\r\n                                                        onClick={this.onNeutralSelected}  />\r\n                                                    <h6 className=\"mx-1 my-auto\" data-neutral={itemInfo.item}>\r\n                                                        { localizedName ?? itemInfo.item }\r\n                                                    </h6>\r\n                                                </div>\r\n                                            </ListGroup.Item>\r\n                                        )\r\n                                    })\r\n                                }\r\n                                {\r\n                                    this.state.queryNeutrals.length <= 0 &&\r\n                                        <h6>\r\n                                            { \r\n                                                getLocalizedString(this.state.dotaStrings, \"DOTA_Shop_Search_No_Results\")\r\n                                            }\r\n                                        </h6>\r\n                                }\r\n                            </ListGroup>\r\n                    }\r\n                    \r\n                    <div>\r\n                        {\r\n                            !this.state.queryNeutrals && this.state.neutralTierList && this.state.neutralTierList.map((tier, index) => {\r\n                                let time = Object.keys(tier.drop_rates).filter((key) => {\r\n                                    if (key.includes(\":\")) {\r\n                                        return true;\r\n                                    }\r\n                                });\r\n                                let array = tier.drop_rates[time[0]];\r\n                                let tierDropAmt = Object.keys(array).length;\r\n\r\n                                return (\r\n                                    <NeutralTier \r\n                                        tier={index + 1}\r\n                                        neutrals={tier.items}\r\n                                        time={time}\r\n                                        dropAmount={tierDropAmt}\r\n                                        iconScale={this.state.iconScale}\r\n                                        onNeutralSelected={this.onNeutralSelected}\r\n                                        dotaStrings={this.state.dotaStrings}\r\n                                        abilityStrings={this.state.abilityStrings}\r\n                                        />\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NeutralItemSelector;","import Neutral from \"./Neutral\";\r\n\r\nexport default Neutral;","import React, { Component } from 'react';\r\nimport Popup from \"reactjs-popup\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faInfo } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport NeutralItemSelector from \"./NeutralItemSelector\";\r\nimport ItemTooltip from '../ItemTooltip';\r\n\r\nimport { itemNameToElement } from \"../../utils\";\r\nimport { getItemIcon } from '../../utility/spriteHelper';\r\n\r\nclass Neutral extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            neutralItem: props.neutralItem,\r\n            onNewNeutralSelected: props.onNewNeutralSelected,\r\n            dotaStrings: props.dotaStrings,\r\n            abilityStrings: props.abilityStrings,\r\n\r\n            iconScale: 0.7,\r\n            neutralSelectorDisabled: false,\r\n        };\r\n\r\n        this.onNeutralSelected = this.onNeutralSelected.bind(this);\r\n    }\r\n\r\n    componentDidUpdate (prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                neutralItem: this.props.neutralItem,\r\n                dotaStrings: this.props.dotaStrings,\r\n                abilityStrings: this.props.abilityStrings,\r\n                onNewNeutralSelected: this.props.onNewNeutralSelected,\r\n            });\r\n        }\r\n    }\r\n\r\n    onNeutralSelected (neutral) {\r\n        this.setState({\r\n            neutralSelectorDisabled: true,\r\n        });\r\n\r\n        if (this.state.onNewNeutralSelected) {\r\n            this.state.onNewNeutralSelected(neutral);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if(this.state.neutralSelectorDisabled) {\r\n            this.setState({ neutralSelectorDisabled: false });\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                {\r\n                    this.state.neutralItem && this.state.neutralItem.item &&\r\n                        <Popup\r\n                            trigger={isOpen => (\r\n                                <div\r\n                                    className=\"ml-2 mt-1\" \r\n                                    style={{ position:\"absolute\", zIndex: 1 }}>\r\n                                    <FontAwesomeIcon icon={faInfo} />\r\n                                </div>\r\n                            )}\r\n                            position=\"right center\"\r\n                            on=\"hover\"\r\n                            className=\"foresight-tooltip\"\r\n                            contentStyle={{\r\n                                width: \"350px\",\r\n                            }}>\r\n                                <ItemTooltip\r\n                                    itemName={this.state.neutralItem.item}\r\n                                    dotaStrings={this.state.dotaStrings}\r\n                                    abilityStrings={this.state.abilityStrings}\r\n                                    />\r\n                        </Popup>\r\n                }\r\n                <Popup\r\n                    trigger={isOpen => {\r\n                        return getItemIcon(this.state.neutralItem.item, \"88px\", \"64px\", this.state.iconScale);\r\n                    }}\r\n                    position=\"right center\"\r\n                    disabled={this.state.neutralSelectorDisabled}\r\n                    className=\"foresight-tooltip\"\r\n                    contentStyle={{\r\n                        width: \"350px\",\r\n                        height: \"450px\"\r\n                    }}>\r\n                        <NeutralItemSelector \r\n                            onNeutralSelected={this.onNeutralSelected}\r\n                            dotaStrings={this.state.dotaStrings} \r\n                            abilityStrings={this.state.abilityStrings}\r\n                            />\r\n                </Popup>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Neutral;","import React, { Component } from 'react';\r\nimport {\r\n    Row, \r\n    Col\r\n} from \"react-bootstrap\";\r\n\r\nimport { \r\n    getLocalizedString\r\n} from '../../utility/data-helpers/language';\r\n\r\nimport Item from \"./Item\";\r\nimport Neutral from \"../Neutral\";\r\n\r\nclass ItemsBar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            items: props.items,\r\n            backpack: props.backpack,\r\n            neutral: props.neutral,\r\n            iconScale: 0.7,\r\n\r\n            onNeutralChanged: props.onNeutralChanged,\r\n            onItemChanged: props.onItemChanged,\r\n\r\n            dotaStrings: props.dotaStrings,\r\n            abilityStrings: props.abilityStrings,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        //Update if previous props have changed\r\n        if (prevProps.items !== this.props.items) {\r\n            this.setState({\r\n                items: this.props.items,\r\n            });\r\n        }\r\n\r\n        if (prevProps.backpack !== this.props.backpack) {\r\n            this.setState({\r\n                backpack: this.props.backpack,\r\n            });\r\n        }\r\n\r\n        if (prevProps.neutral !== this.props.neutral) {\r\n            this.setState({\r\n                neutral: this.props.neutral,\r\n            });\r\n        }\r\n\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ abilityStrings: this.props.abilityStrings });\r\n        }\r\n        if (prevProps.dotaStrings !== this.props.dotaStrings) {\r\n            this.setState({ dotaStrings: this.props.dotaStrings });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        var itemsColWidth = 5;\r\n        var backpackColWidth = 5;\r\n        var neutralColWidth = 2;\r\n        return (\r\n            <div>\r\n                <Row>\r\n                    <Col md={itemsColWidth}>\r\n                        <h6>{ getLocalizedString(this.state.dotaStrings, \"DOTA_SHOP_ITEMS\") }</h6>\r\n                        <Row md={3} className=\"m-0 p-0\">\r\n                            {\r\n                                this.state.items && this.state.items.map((value) => {\r\n                                    return (\r\n                                        <Item \r\n                                            key={value.slot}\r\n                                            slot={value.slot}\r\n                                            item={value.item} \r\n                                            onItemChanged={this.state.onItemChanged}\r\n                                            onItemExtraChnaged={this.state.onItem}\r\n                                            dotaStrings={this.state.dotaStrings} \r\n                                            abilityStrings={this.state.abilityStrings} />\r\n                                    )\r\n                                })\r\n                            }\r\n                        </Row>\r\n                    </Col>\r\n                    <Col md={backpackColWidth}>\r\n                        <h6>{ getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_BackpackHintTitle\").toUpperCase() }</h6>\r\n                        <div className=\"d-flex flex-wrap\">\r\n                            {\r\n                                this.state.backpack && this.state.backpack.map((value) => {\r\n                                    return (\r\n                                        <Item\r\n                                            key={value.slot}\r\n                                            slot={value.slot}\r\n                                            item={value.item}\r\n\r\n                                            isBackpack={true}\r\n                                            onItemChanged={this.state.onItemChanged}\r\n                                            dotaStrings={this.state.dotaStrings}\r\n                                            abilityStrings={this.state.abilityStrings} />\r\n                                    )\r\n                                })\r\n                            }\r\n                        </div>\r\n                    </Col>\r\n                    <Col md={neutralColWidth}>\r\n                        <h6>{ getLocalizedString(this.state.dotaStrings, \"UI_NEUTRALS\") }</h6>\r\n                        {/* Neutral Item */}\r\n                        <div>\r\n                            <Neutral \r\n                                neutralItem={this.state.neutral} \r\n                                onNewNeutralSelected={this.state.onNeutralChanged}\r\n                                dotaStrings={this.state.dotaStrings}\r\n                                abilityStrings={this.state.abilityStrings} />\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ItemsBar;","import ItemsBar from \"./ItemsBar\";\r\n\r\nexport default ItemsBar;","import React, { Component } from 'react';\r\n\r\nimport { EAttributes } from \"../../enums/attributes.js\";\r\n\r\nimport \"./Attributes.css\";\r\nimport { getLocalizedString, replaceStringValue } from '../../utility/data-helpers/language.js';\r\nimport { calculateAttribute } from '../../utility/calculate.js';\r\n\r\nfunction Attribute(props) {\r\n    return (\r\n        <div className=\"d-flex my-2 align-items-center\">\r\n            <div className={props.isPrimaryAttribute ? \" primary-attribute\" : \"\"}>\r\n                <span className={'attribute ' + props.type} alt=\"attribute\" />\r\n            </div>\r\n            <div className=\"ml-2\">{props.value}</div>\r\n            {\r\n                props.additional && props.additional > 0 &&\r\n                <div   \r\n                    className=\"mx-1\" \r\n                    style={{ color: \"green\" }}>\r\n                    {\"+\" + props.additional}\r\n                </div>\r\n            }\r\n            <div\r\n                className=\"ml-3\"\r\n                style={{ fontSize: \"0.75rem\" }}>\r\n                {\r\n                    replaceStringValue(props.perLevelString, props.per)\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nclass Attributes extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            hero: props.hero,\r\n            level: props.heroLevel,\r\n            items: props.items,\r\n            talents: props.talents,\r\n            neutral: props.neutral,\r\n            abilities: props.abilities,\r\n\r\n            dotaStrings: props.dotaStrings,\r\n            abilityStrings: props.abilityStrings,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                hero: this.props.hero,\r\n                level: this.props.heroLevel,\r\n                items: this.props.items,\r\n                talents: this.props.talents,\r\n                neutral: this.props.neutral,\r\n                abilities: this.props.abilities,\r\n\r\n                dotaStrings: this.props.dotaStrings,\r\n                abilityStrings: this.props.abilityStrings,\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let strengthStats = calculateAttribute(EAttributes.ATTR_STRENGTH, this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents);\r\n        let agilityStats = calculateAttribute(EAttributes.ATTR_AGILITY, this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents);\r\n        let intStats = calculateAttribute(EAttributes.ATTR_INTELLIGENCE, this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents);\r\n        return (\r\n            <div>\r\n                <h5>{getLocalizedString(this.state.dotaStrings, \"DOTA_Tooltip_topbar_stats\")}</h5>\r\n                <h6>{getLocalizedString(this.state.dotaStrings, \"DOTA_Attributes\")}</h6>\r\n                <Attribute \r\n                    type=\"strength\" \r\n                    value={ strengthStats.attribute }\r\n                    additional= { strengthStats.additionalAttribute }\r\n                    per={ strengthStats.perLevel } \r\n                    isPrimaryAttribute={this.state.hero?.AttributePrimary === EAttributes.ATTR_STRENGTH}\r\n                    perLevelString={ getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_StrengthGain\") } />\r\n\r\n                <Attribute \r\n                    type=\"agility\"\r\n                    value={ agilityStats.attribute }\r\n                    additional= { agilityStats.additionalAttribute }\r\n                    per={ agilityStats.perLevel } \r\n                    isPrimaryAttribute={this.state.hero?.AttributePrimary === EAttributes.ATTR_AGILITY} \r\n                    perLevelString={ getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_AgilityGain\") } />\r\n\r\n                <Attribute \r\n                    type=\"intelligence\" \r\n                    value={ intStats.attribute }\r\n                    additional= { intStats.additionalAttribute }\r\n                    per={ intStats.perLevel } \r\n                    isPrimaryAttribute={this.state.hero?.AttributePrimary === EAttributes.ATTR_INTELLIGENCE} \r\n                    perLevelString={ getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_IntelligenceGain\") } />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Attributes;","import Attributes from \"./Attributes\";\r\n\r\nexport default Attributes;","import React, { Component } from 'react';\r\nimport {\r\n    Row, Col\r\n} from \"react-bootstrap\";\r\n\r\nimport {\r\n    calculateHealthRegen,\r\n    calculateManaRegen,\r\n    calculateMainArmor,\r\n    calculateTotalSpellAmp,\r\n    calculateStatusResist,\r\n    calculateMagicResist,\r\n    calculatePhysicalResist,\r\n    calculateEvasion,\r\n    calculateRightClickDamage,\r\n    calculateAttackTime,\r\n    calculateMoveSpeed,\r\n    calculateAttackRange\r\n} from \"../../utility/calculate\";\r\nimport {\r\n    getLocalizedString\r\n} from \"../../utility/data-helpers/language\";\r\n\r\nfunction StatArray(props) {\r\n    return (\r\n        <div style={{ backgroundColor: \"#171717\", color: \"white\", fontSize: \"0.8rem\" }} className=\"p-2 h-100\">\r\n            <h6 className=\"ml-auto\">{props.title}</h6>\r\n            {\r\n                props.stats &&\r\n                    props.stats.map((value) => {\r\n                        return (\r\n                        <Row \r\n                            key={value.name}\r\n                            className=\"mx-0\">\r\n                            <Col \r\n                                md={6}\r\n                                className=\"px-0\">\r\n                                {value.name}\r\n                            </Col>\r\n                            <Col \r\n                                md={6}\r\n                                className=\"px-0\">\r\n                                {value.value}\r\n                            </Col>\r\n                        </Row>\r\n                        );\r\n                    })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\n/// Gets the attack min/max and formats it for display in UI\r\nfunction formatAttackMinMax(hero, lvl, items, neutral, abilities, talents) {\r\n    let standardAtkDmg = calculateRightClickDamage(hero, lvl, items, neutral, abilities, talents);\r\n    \r\n    // Range string\r\n    //let dmgString = `${standardAtkDmg.min} - ${standardAtkDmg.max}`;\r\n    // Average damage inbetween range value\r\n    let dmgString = standardAtkDmg.min + ((standardAtkDmg.max - standardAtkDmg.min) / 2);\r\n    if (standardAtkDmg.additional) {\r\n        dmgString += \" \";\r\n        dmgString += `${ standardAtkDmg.additional >= 0 ? \"+\" : \"-\" } ${Math.abs(standardAtkDmg.additional)}`;\r\n    }\r\n    return dmgString;\r\n}\r\n\r\n/// Gets the atk time and formats it to display in UI\r\nfunction formatAttackTime(hero, lvl, items, neutral, abilities, talents) {\r\n    let attackInfo = calculateAttackTime(hero, lvl, items, neutral, abilities, talents);\r\n    return `${attackInfo.attackSpeed} (${attackInfo.attackTime} s)`;\r\n}\r\n\r\nfunction formatArmor (armorInfo) {\r\n    if (!armorInfo || !armorInfo?.armor) {\r\n        return null;\r\n    }\r\n\r\n    let str = armorInfo.armor.toFixed(1);\r\n    if (armorInfo.additional) {\r\n        str += \" \";\r\n        str += `${armorInfo.additional > 0 ? \"+\" : \"-\"} ${Math.abs(armorInfo.additional)}`;\r\n    }\r\n\r\n    return str;\r\n}\r\n\r\nclass Statistics extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            hero: props.hero,\r\n            level: props.heroLevel,\r\n            talents: props.talents,\r\n            items: props.items,\r\n            neutral: props.neutral,\r\n            abilities: props.abilities,\r\n\r\n            dotaStrings: props.dotaStrings,\r\n            abilityStrings: props.abilityStrings,\r\n        };\r\n\r\n        this.updateStatistics = this.updateStatistics.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateStatistics();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.hero !== this.props.hero) {\r\n            this.setState({ \r\n                hero: this.props.hero \r\n            }, () => {\r\n                this.updateStatistics();\r\n            });\r\n        }\r\n        if (prevProps.items !== this.props.items) {\r\n            this.setState({ \r\n                items: this.props.items \r\n            }, () => {\r\n                this.updateStatistics();\r\n            });\r\n        }\r\n        if (prevProps.neutral !== this.props.neutral) {\r\n            this.setState({ \r\n                neutral: this.props.neutral, \r\n            }, () => {\r\n                this.updateStatistics();\r\n            });\r\n        }\r\n        if (prevProps.talents !== this.props.talents) {\r\n            this.setState({ \r\n                talents: this.props.talents \r\n            }, () => {\r\n                this.updateStatistics();\r\n            });\r\n        }\r\n        if (prevProps.abilities !== this.props.abilities) {\r\n            this.setState({ \r\n                abilities: this.props.abilities \r\n            }, () => {\r\n                this.updateStatistics();\r\n            });\r\n        }\r\n        if (prevProps.heroLevel !== this.props.heroLevel) {\r\n            this.setState({ \r\n                level: this.props.heroLevel \r\n            }, () => {\r\n                this.updateStatistics();\r\n            });\r\n        }\r\n        if (prevProps.dotaStrings !== this.props.dotaStrings) {\r\n            this.setState({ dotaStrings: this.props.dotaStrings });\r\n        }\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ abilityStrings: this.props.abilityStrings });\r\n        }\r\n    }\r\n\r\n    updateStatistics() {\r\n        let armorInfo =  calculateMainArmor(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents);\r\n        let physResist = calculatePhysicalResist(armorInfo.armor + armorInfo.additional);\r\n        this.setState({\r\n            // Attack\r\n            attackSpeed: formatAttackTime(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n            damage: formatAttackMinMax(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n            attackRange: calculateAttackRange(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n            moveSpeed: calculateMoveSpeed(this.state.hero, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n            spellAmp: calculateTotalSpellAmp(this.state.talents, this.state.items, this.state.neutral),\r\n            manaRegen: calculateManaRegen(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n\r\n            // Defence\r\n            armor: formatArmor(armorInfo),\r\n            physicalResist: physResist,\r\n            magicResist: calculateMagicResist(this.state.items, this.state.neutral, this.state.abilities),\r\n            statusResist: calculateStatusResist(this.state.items, this.state.neutral),\r\n            evasion: calculateEvasion(this.state.items, this.state.neutrak, this.state.abilities , this.state.talents),\r\n            healthRegen: calculateHealthRegen(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Row>\r\n                {\r\n                    this.state.hero &&\r\n                    <Col md={6}>\r\n                        <StatArray title={getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_Attack\")} stats={[\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_AttackSpeed\"),\r\n                                value: this.state.attackSpeed\r\n                            },\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_Damage\"), \r\n                                value: this.state.damage \r\n                            },\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_AttackRange\"), \r\n                                value: this.state.attackRange \r\n                            },\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_MoveSpeed\"), \r\n                                value: this.state.moveSpeed \r\n                            },\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_SpellAmp\"), \r\n                                value: this.state.spellAmp + \"%\" \r\n                            },\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_ManaRegenDetail\"), \r\n                                value: this.state.manaRegen \r\n                            },\r\n                        ]} />\r\n                    </Col>\r\n                }   \r\n                {\r\n                    this.state.hero &&\r\n                    <Col md={6}>\r\n                        <StatArray title={getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_Defense\")} stats={[\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_Armor\"), \r\n                                value: this.state.armor,\r\n                            },\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_PhysicalResist\"), \r\n                                value: this.state.physicalResist + \"%\" \r\n                            },\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_MagicResist\"), \r\n                                value: this.state.magicResist + \"%\" \r\n                            },\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_StatusResist\"), \r\n                                value: this.state.statusResist + \"%\" \r\n                            },\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_Evasion\"), \r\n                                value: this.state.evasion + \"%\" \r\n                            },\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_HealthRegenDetail\"), \r\n                                value: this.state.healthRegen \r\n                            },\r\n                        ]}/>\r\n                    </Col>\r\n                }\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Statistics;","import Statistics from \"./Statistics\";\r\n\r\nexport default Statistics;","import React, { Component } from 'react';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport {  faSearch } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { getLocalizedString } from '../../utility/data-helpers/language';\r\nimport { getAllPlayableHeroes } from '../../utility/dataHelperHero';\r\n\r\nimport \"./HeroSelector.css\";\r\nimport { itemAliasIncludes } from '../../utility/dataHelperItems';\r\n\r\nclass HeroSelector extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let selectableHeroes = getAllPlayableHeroes();\r\n        this.state = {\r\n            filteredHeroes: selectableHeroes,\r\n            allHeroes: selectableHeroes,\r\n\r\n            onSelectedHero: props.onSelectedHero,\r\n            dotaStrings: props.dotaStrings,\r\n        };\r\n\r\n        this.onSearchChanged = this.onSearchChanged.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                onSelectedHero: this.props.onSelectedHero,\r\n                dotaStrings: this.props.dotaStrings,\r\n            });\r\n        }\r\n    }\r\n\r\n    onSearchChanged(e) {\r\n        let searchTerm = e.target.value;\r\n        let filteredHeroes = this.state.allHeroes;\r\n        if (searchTerm) {\r\n            filteredHeroes = this.state.allHeroes.filter((hero) => {\r\n                /// Match against localized string\r\n                let localizedHeroName = getLocalizedString(this.state.dotaStrings, hero.name)?.toLowerCase();\r\n                if (localizedHeroName && localizedHeroName.indexOf(searchTerm.toLowerCase()) !== -1) {\r\n                    return true;\r\n                }\r\n\r\n                // Alias if localized string hasnt got a match, only works in english\r\n                let aliasMatch = itemAliasIncludes(hero.heroInfo.NameAliases, searchTerm);\r\n                if (aliasMatch) {\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n            });\r\n        }\r\n\r\n        this.setState({\r\n            filteredHeroes: filteredHeroes,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let iconScale = 0.5;\r\n        return (\r\n            <div className=\"hero-card\">\r\n                <div className=\"hero-card header d-flex p-2\">\r\n                    <div className=\"d-flex\">\r\n                        <h5 className=\"my-auto ml-2\">{ getLocalizedString(this.state.dotaStrings, \"DOTA_Hero_Selection_Intro_Header\") }</h5>\r\n                        <div className=\"ml-auto p-1\">\r\n                            <Form.Control \r\n                                className=\"foresight-input-control\"\r\n                                type=\"text\"\r\n                                placeholder=\"Search...\" \r\n                                onChange={this.onSearchChanged} />\r\n                        </div>\r\n                        <FontAwesomeIcon \r\n                            className=\"my-auto mx-2\"\r\n                            icon={faSearch} />\r\n                    </div>\r\n                </div>\r\n                <div className=\"hero-card content p-2\">\r\n                    <div className=\"d-flex flex-wrap\">\r\n                        {\r\n                            this.state.filteredHeroes && this.state.filteredHeroes.map((value) => {\r\n                                return (\r\n                                    <div\r\n                                        key={value.name}  \r\n                                        onClick={this.state.onSelectedHero}\r\n                                        className=\"m-1\"\r\n                                        style={{ \r\n                                            height: `calc(72px * ${iconScale})`, \r\n                                            width: `calc(128px * ${iconScale})` \r\n                                        }}>\r\n                                        <span \r\n                                            className={`hero-icon-big hero-icon-big-${value.name}_png`} \r\n                                            style={{ transformOrigin: \"top left\", transform: `scale(${iconScale}, ${iconScale})` }}\r\n                                            data-heroname={value.displayName}\r\n                                            data-hero={value.name} />\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n                        {\r\n                            this.state.filteredHeroes && this.state.filteredHeroes.length <= 0 &&\r\n                                <h6 className=\"p-1\">\r\n                                    { getLocalizedString(this.state.dotaStrings, \"DOTA_Shop_Search_No_Results\") }\r\n                                </h6>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HeroSelector;","import ChangeHeroBtn from \"./ChangeHeroBtn\";\r\n\r\nexport default ChangeHeroBtn;","import React, { Component } from 'react';\r\nimport {\r\n    Button\r\n} from \"react-bootstrap\";\r\nimport Popup from \"reactjs-popup\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport HeroSelector from \"./HeroSelector\";\r\n\r\nclass ChangeHeroBtn extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            onSelectHero: props.onSelectHero,\r\n            dotaStrings: props.dotaStrings,\r\n\r\n            heroSelectorDisabled: false,\r\n        };\r\n\r\n        this.onSelectHero = this.onSelectHero.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                dotaStrings: this.props.dotaStrings,\r\n                onSelectHero: this.props.onSelectHero,\r\n            });\r\n        }\r\n    }\r\n\r\n    onSelectHero (e) {\r\n        // Disable popup to force close\r\n        this.setState({\r\n            heroSelectorDisabled: true,\r\n        });\r\n\r\n        let hero = e.target.dataset.hero;\r\n        this.state.onSelectHero(hero);\r\n    }\r\n\r\n    render() {\r\n        // If last render popup was force disabled to close, then flip to false\r\n        // to allow reopening \r\n        if (this.state.heroSelectorDisabled) {\r\n            this.setState({ heroSelectorDisabled: false });\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <Popup \r\n                    trigger={isOpen => (\r\n                        <Button onClick={this.onToggleHeroSelect}><FontAwesomeIcon icon={faPencilAlt} /></Button>\r\n                    )} \r\n                    position=\"right top\"\r\n                    closeOnDocumentClick\r\n                    closeOnEscape\r\n                    disabled={this.state.heroSelectorDisabled}\r\n                    className=\"foresight-tooltip\"\r\n                    contentStyle={{ \r\n                        width: \"750px\"\r\n                    }}>\r\n                     <HeroSelector \r\n                        onSelectedHero={this.onSelectHero} \r\n                        dotaStrings={this.state.dotaStrings}\r\n                         />\r\n                </Popup>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChangeHeroBtn;","import React, { Component } from 'react';\r\nimport {\r\n    Row,\r\n    Col\r\n} from \"react-bootstrap\";\r\n\r\nimport {\r\n    getTalentInfoFromName,\r\n} from \"../../utility/dataHelperTalents\";\r\nimport { \r\n    tryGetTalentLocalizedString,\r\n    replaceStringValue,\r\n    getLocalizedString\r\n} from \"../../utility/data-helpers/language\";\r\n\r\nfunction isTalentSelected (selectedTalents, talent) {\r\n    return selectedTalents?.includes(talent);\r\n}\r\n\r\nclass TalentRow extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            leftTalent: props.leftTalent,\r\n            rightTalent: props.rightTalent,\r\n            level: props.lvl,\r\n\r\n            selectedTalents: this.props.selectedTalents,\r\n            onTalentSelected: this.props.onTalentSelected,\r\n            onTalentUnselected: this.props.onTalentUnselected,\r\n\r\n            abilityStrings: this.props.abilityStrings,\r\n        };\r\n\r\n        this.onSelectTalent = this.onSelectTalent.bind(this);\r\n        this.getTalentDisplayName = this.getTalentDisplayName.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.leftTalent !== this.props.leftTalent) {\r\n            this.setState({ leftTalent: this.props.leftTalent });\r\n        }\r\n\r\n        if(prevProps.rightTalent !== this.props.rightTalent) {\r\n            this.setState({ rightTalent: this.props.rightTalent });\r\n        }\r\n\r\n        if (prevProps.lvl !== this.props.lvl) {\r\n            this.setState({ level: this.props.lvl });\r\n        }\r\n\r\n        if (prevProps.selectedTalents !== this.props.selectedTalents) {\r\n            this.setState({ selectedTalents: this.props.selectedTalents });\r\n        }\r\n\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ abilityStrings: this.props.abilityStrings });\r\n        }\r\n    }\r\n\r\n    onSelectTalent(e) {\r\n        var selectedTalent = e.target.dataset.talent;\r\n        // if clicked twice, unselect the talent\r\n        if (isTalentSelected(this.state.selectedTalents, selectedTalent)) {\r\n            this.state.onTalentUnselected(selectedTalent);\r\n        } else {\r\n            this.state.onTalentSelected(selectedTalent);\r\n        }\r\n    }\r\n\r\n    getTalentDisplayName (talent) {\r\n        let talentInfo = getTalentInfoFromName(talent);\r\n        if (!talentInfo) {\r\n            return \"Unknown Talent\";\r\n        }\r\n\r\n        let displayName = getLocalizedString(this.state.abilityStrings, \"DOTA_Tooltip_ability_\" + talent); \r\n        if (displayName && talentInfo && talentInfo.AbilitySpecial) {\r\n            displayName = replaceStringValue(displayName, talentInfo.AbilitySpecial[0].value)\r\n        }\r\n\r\n        return displayName;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Row className=\"my-1 py-2\" style={{ backgroundColor: \"rgb(24, 30, 33)\"}}>\r\n                {/* Left Talent */}\r\n                <Col \r\n                    md={5}\r\n                    className=\"text-center\"\r\n                    style={{ \r\n                        color: isTalentSelected(this.state.selectedTalents, this.state.leftTalent) ? \"#c4a66f\" : \"white\",\r\n                        userSelect: \"none\",\r\n                    }}>\r\n                    <div onClick={this.onSelectTalent} data-talent={this.state.leftTalent}>\r\n                        {\r\n                            this.getTalentDisplayName(this.state.leftTalent)\r\n                        }\r\n                    </div>\r\n                </Col>\r\n                {/* Talent Level */}\r\n                <Col md={2}>\r\n                    <h6 \r\n                        className=\"text-center\"\r\n                        style={{ color: \"#e7d291\"}}>\r\n                        {this.state.level}\r\n                    </h6>\r\n                </Col>\r\n                {/* Right Talent */}\r\n                <Col \r\n                    md={5}\r\n                    className=\"text-center\"\r\n                    style={{ \r\n                        color: isTalentSelected(this.state.selectedTalents, this.state.rightTalent) ? \"#c4a66f\" : \"white\",\r\n                        userSelect: \"none\",\r\n                    }}>\r\n                    <div onClick={this.onSelectTalent} data-talent={this.state.rightTalent}>\r\n                        {\r\n                            this.getTalentDisplayName(this.state.rightTalent)\r\n                        }\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TalentRow;\r\n","import TalentTree from \"./TalentTree\";\r\n\r\nexport default TalentTree;","import React, { Component } from 'react';\r\n\r\nimport TalentRow from \"./TalentRow\";\r\nimport { getLocalizedString } from '../../utility/data-helpers/language';\r\n\r\nclass TalentTree extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            talents: this.props.talents,\r\n            selectedTalents: this.props.selectedTalents,\r\n\r\n            onTalentSelected: this.props.onTalentSelected,\r\n            onTalentUnselected: this.props.onTalentUnselected,\r\n\r\n            dotaStrings: this.props.dotaStrings,\r\n            abilityStrings: this.props.abilityStrings,\r\n        };\r\n        this.findSelectedTalent = this.findSelectedTalent.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(prevProps.talents !== this.props.talents) {\r\n            this.setState({ talents: this.props.talents });\r\n        }\r\n        if (prevProps.selectedTalents !== this.props.selectedTalents) {\r\n            this.setState({ selectedTalents: this.props.selectedTalents });\r\n        }\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ abilityStrings: this.props.abilityStrings });\r\n        }\r\n        if (prevProps.dotaStrings !== this.props.dotaStrings) {\r\n            this.setState({ dotaStrings: this.props.dotaStrings });\r\n        }\r\n    }\r\n\r\n    findSelectedTalent(leftTalent, rightTalent) {\r\n        if (this.state.selectedTalents && this.state.selectedTalents.length > 0) {\r\n            var matchTalent = this.state.selectedTalents.find((val) => {\r\n                if (val.name === leftTalent) {\r\n                    return leftTalent;\r\n                } else if (val.name === rightTalent) {\r\n                    return rightTalent;\r\n                }\r\n                return null;\r\n            });\r\n            return matchTalent?.name;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h6 className=\"text-center\">{ getLocalizedString(this.state.dotaStrings, \"DOTA_StatBranch_TooltipTitle\") }</h6>\r\n                {/* <img src=\"/images/dota2/talent.jpg\" alt=\"talent tree\" /> */}\r\n                <div \r\n                    className=\"mr-2\"\r\n                    style={{ fontSize: \"0.8rem\" }}>\r\n                        {\r\n                            this.state.talents && this.state.talents.map((talentInfo) => {\r\n                                return <TalentRow \r\n                                                key={talentInfo.lvl}\r\n                                                lvl={talentInfo.lvl}\r\n                                                leftTalent={talentInfo.leftTalent} \r\n                                                rightTalent={talentInfo.rightTalent} \r\n                                                selectedTalents={this.state.selectedTalents}\r\n                                                onTalentSelected={this.state.onTalentSelected}\r\n                                                onTalentUnselected={this.state.onTalentUnselected} \r\n                                                \r\n                                                abilityStrings={this.state.abilityStrings} />\r\n                            })\r\n                        }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TalentTree;","import HealthManaBar from \"./HealthManaBar\";\r\n\r\nexport default HealthManaBar;","import React, { Component } from 'react';\r\n\r\nimport {\r\n    calculateHealth,\r\n    calculateMana,\r\n    calculateHealthRegen,\r\n    calculateManaRegen,\r\n} from \"../../utility/calculate\";\r\nimport { EAttributes } from \"../../enums/attributes\";\r\n\r\nimport \"./style.css\";\r\n\r\nclass HealthManaBar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            hero: props.hero,\r\n            level: props.heroLevel,\r\n            items: props.items,\r\n            talents: props.talents,\r\n            neutral: props.neutral,\r\n            abilities: props.abilities,\r\n\r\n            maxHealth: 0,\r\n            maxMana: 0,\r\n        }\r\n\r\n        this.updateBar = this.updateBar.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateBar();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                hero: this.props.hero,\r\n                level: this.props.heroLevel,\r\n                items: this.props.items,\r\n                talents: this.props.talents,\r\n                neutral: this.props.neutral,\r\n                abilities: this.props.abilities,\r\n\r\n                maxHealth: 0,\r\n                maxMana: 0,\r\n            }, () => this.updateBar());\r\n        }\r\n    }\r\n\r\n    updateBar() {\r\n        this.setState({\r\n            maxHealth: calculateHealth(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n            maxMana: calculateMana(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"bar health d-flex\">\r\n                    <h6 className=\"max-health-text my-auto mx-auto\">{this.state.maxHealth} / {this.state.maxHealth}</h6>\r\n                    <div className=\"health-bar-regen my-auto mr-1\">\r\n                        { \"+\" + calculateHealthRegen(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents) }\r\n                    </div>\r\n                </div>\r\n                <div className=\"bar mana d-flex\">\r\n                    <h6 className=\"max-mana-text my-auto mx-auto\">{this.state.maxMana} / {this.state.maxMana}</h6>\r\n                    <div className=\"mana-bar-regen my-auto mr-1\">\r\n                        { \"+\" + calculateManaRegen(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents) }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HealthManaBar;","import React, { Component } from 'react';\r\nimport { \r\n    Button, \r\n    Form\r\n} from 'react-bootstrap';\r\nimport { getLocalizedString } from '../../utility/data-helpers/language';\r\n\r\nconst MAX_LEVEL = 30;\r\nconst MIN_LEVEL = 1;\r\n\r\nfunction ModifyBtn (props) {\r\n    return (\r\n        <Button \r\n            className=\"py-1\"\r\n            variant=\"outline-secondary\" \r\n            onClick={props.onClick}>\r\n            { props.text }\r\n        </Button>\r\n    );\r\n}\r\n\r\nclass LevelSelector extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            level: props.heroLevel,\r\n            onHeroLevelChanged: props.onHeroLevelChanged,\r\n            dotaStrings: props.dotaStrings,\r\n        };\r\n\r\n        this.onIncrementHeroLevel = this.onIncrementHeroLevel.bind(this);\r\n        this.onDecrementHeroLevel = this.onDecrementHeroLevel.bind(this);\r\n        this.onLvlInputChanged = this.onLvlInputChanged.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.heroLevel !== this.props.heroLevel) {\r\n            this.setState({\r\n                level: this.props.heroLevel,\r\n            });\r\n        }\r\n        if (prevProps.dotaStrings !== this.props.dotaStrings) {\r\n            this.setState({ dotaStrings: this.props.dotaStrings });\r\n        }\r\n    }\r\n\r\n    onIncrementHeroLevel() {\r\n        let newLevel = this.state.level;\r\n        newLevel += 1;\r\n\r\n        if (newLevel >= MAX_LEVEL) {\r\n            newLevel = MAX_LEVEL;\r\n        }\r\n\r\n        this.state.onHeroLevelChanged(newLevel);\r\n    }\r\n\r\n    onDecrementHeroLevel() {\r\n        let newLevel = this.state.level;\r\n        newLevel -= 1;\r\n\r\n        if (newLevel < MIN_LEVEL) {\r\n            newLevel = MIN_LEVEL;\r\n        }\r\n\r\n        this.state.onHeroLevelChanged(newLevel);\r\n    }\r\n\r\n    onLvlInputChanged(e) {\r\n        let lvl = parseInt(e.target.value);\r\n        if (lvl) {\r\n            if (lvl > MAX_LEVEL) {\r\n                lvl = MAX_LEVEL;\r\n            }\r\n            else if (lvl < MIN_LEVEL) {\r\n                lvl = MIN_LEVEL;\r\n            }\r\n        } else {\r\n            lvl = MIN_LEVEL;\r\n        }\r\n\r\n        this.state.onHeroLevelChanged(lvl);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"mx-5\">\r\n                <h6>{ getLocalizedString(this.state.dotaStrings, \"dota_stat_dropdown_level\") }</h6>\r\n                <div className=\"d-flex\">\r\n                    <ModifyBtn \r\n                        onClick={this.onDecrementHeroLevel} \r\n                        text=\"-\" />\r\n                    <Form.Control\r\n                        className=\"foresight-input-control mx-3\" \r\n                        style={{ width: \"75px\" }}\r\n                        placeholder=\"lvl\" \r\n                        type=\"number\" \r\n                        value={this.state.level} \r\n                        onChange={this.onLvlInputChanged} />\r\n                    <ModifyBtn \r\n                        onClick={this.onIncrementHeroLevel} \r\n                        text=\"+\" />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LevelSelector;","import LevelSelector from \"./LevelSelector\";\r\n\r\nexport default LevelSelector;","import React, { Component } from 'react';\r\nimport {\r\n    Container,\r\n    Row,\r\n    Col,\r\n    Button,\r\n    Form,\r\n} from 'react-bootstrap';\r\nimport { connect } from \"react-redux\";\r\nimport copy from \"copy-to-clipboard\";\r\nimport { Base64 } from \"js-base64\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCopy, faFile, faChevronUp, faChevronDown, faShare } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport {\r\n    SELECTED_HERO,\r\n    SELECTED_ITEM,\r\n    SELECTED_NEUTRAL,\r\n    SELECTED_BACKPACK_ITEM,\r\n    SELECTED_TALENT,\r\n    UNSELECTED_TALENT,\r\n    NEW_HERO_LEVEL,\r\n    ENEMY_SELECTED_TALENT\r\n} from \"../../constants/actionTypes\";\r\n\r\nimport { \r\n    getLocalizedString\r\n} from '../../utility/data-helpers/language';\r\n\r\nimport Abilities from \"../Abilities\";\r\nimport ItemsBar from \"../ItemsBar\";\r\nimport Attributes from \"../Attributes\";\r\nimport Statistics from \"../Statistics\";\r\nimport ChangeHeroBtn from \"../ChangeHeroBtn\";\r\nimport TalentTree from \"../TalentTree\";\r\nimport HealthManaBar from \"../HealthManaBar\";\r\nimport LevelSelector from \"../LevelSelector\";\r\nimport EnemyHero from '../EnemyHero';\r\n\r\nimport \"../../css/dota_hero_icons.css\";\r\nimport \"../../css/dota_attributes.css\";\r\nimport \"../../css/dota_items.css\";\r\nimport \"../../css/dota_hero_icons_big.css\";\r\nimport \"./Calculator.css\";\r\nimport { Redirect, Link } from 'react-router-dom';\r\n\r\n\r\nclass Calculator extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            buildName: \"\",\r\n            buildCreator: \"\",\r\n            openBuildShare: false,\r\n            loadedFromParams: false,\r\n        };\r\n\r\n        this.onHeroSelected = this.onHeroSelected.bind(this);\r\n        this.onItemSelected = this.onItemSelected.bind(this);\r\n        this.onNeutralSelected = this.onNeutralSelected.bind(this);\r\n        this.onTalentSelected = this.onTalentSelected.bind(this);\r\n        this.onTalentUnselected = this.onTalentUnselected.bind(this);\r\n        this.onHeroLevelChanged = this.onHeroLevelChanged.bind(this);\r\n\r\n        this.onShareBuild = this.onShareBuild.bind(this);\r\n        this.onBuildNameChanged = this.onBuildNameChanged.bind(this);\r\n        this.onBuildCreatorChanged = this.onBuildCreatorChanged.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        /// Parse build data from url on start and set app state\r\n        if (this.props.location.search) {\r\n            let params = new URLSearchParams(this.props.location.search);\r\n            let buildData = params.get(\"build\");\r\n            if (buildData) {\r\n                let decoded = Base64.decode(buildData);\r\n                let buildObject = null;\r\n                try {\r\n                    buildObject = JSON.parse(decoded);\r\n                } catch(e) {\r\n                    console.error(\"Unable to parse build object\");\r\n                }\r\n\r\n                if (buildObject) {\r\n                    this.setState({\r\n                        buildCreator: buildObject.creator,\r\n                        buildName: buildObject.name,\r\n                        openBuildShare: true,\r\n                        loadedFromParams: true,\r\n                    });\r\n                    \r\n                    let build = buildObject.build;\r\n                    if (build?.selectedHeroName)\r\n                        this.props.dispatch({ type: SELECTED_HERO, value: build.selectedHeroName });\r\n                    if (build?.heroLevel)\r\n                        this.props.dispatch({ type: NEW_HERO_LEVEL, value: build.heroLevel });\r\n                    if (build?.selectedTalents) {\r\n                        for(let talent of  build.selectedTalents) {\r\n                            this.props.dispatch({ type: SELECTED_TALENT, value: talent });\r\n                        }\r\n                    }\r\n                    if (build?.items) {\r\n                        for (let item of build.items) {\r\n                            if (item.item) {\r\n                                this.props.dispatch({ type: SELECTED_ITEM, value: item });\r\n                            }\r\n                        }\r\n                    }\r\n                    if (build?.neutralItem) {\r\n                        this.props.dispatch({ type: SELECTED_NEUTRAL, value: build.neutralItem });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    onShareBuild() {\r\n        let buildObject = {\r\n            name: this.state.buildName ?? \"Unknown\",\r\n            creator: this.state.buildCreator ?? \"Unknown\",\r\n            build: {\r\n                selectedHeroName: this.props.selectedHeroName,\r\n                heroAbilities: this.props.heroAbilities,\r\n                heroTalents: this.props.heroTalents,\r\n                heroLevel: this.props.heroLevel,\r\n\r\n                items: this.props.items,\r\n                backpack: this.props.backpack,\r\n                neutralItem: this.props.neutralItem,\r\n                selectedTalents: this.props.selectedTalents,\r\n            },\r\n        };\r\n        let str = JSON.stringify(buildObject);\r\n        let encoded = Base64.encode(str);\r\n        // set clipboard\r\n        copy(`localhost:3000/#/app?build=${encoded}`);\r\n    }\r\n\r\n    onHeroSelected(heroName) {\r\n        console.log(`${SELECTED_HERO}: ${heroName}`);\r\n        this.props.dispatch({ type: SELECTED_HERO, value: heroName });\r\n    }\r\n\r\n    onItemSelected (item) {\r\n        if (item.isBackpack) \r\n        {\r\n            console.log(`${SELECTED_BACKPACK_ITEM}: Slot: ${item.slot} Item: ${item.item}`);\r\n            this.props.dispatch({ type: SELECTED_BACKPACK_ITEM, value: item });\r\n        }\r\n        else\r\n        {\r\n            console.log(`${SELECTED_ITEM}: Slot: ${item.slot} Item: ${item.item}`);\r\n            this.props.dispatch({ type: SELECTED_ITEM, value: item });\r\n        }\r\n    }\r\n\r\n    onNeutralSelected(neutralItem) {\r\n        console.log(`${SELECTED_NEUTRAL}: ${neutralItem.item}`);\r\n        this.props.dispatch({ type: SELECTED_NEUTRAL, value: neutralItem });\r\n    }\r\n\r\n    onTalentSelected (talent) {\r\n        console.log(`${SELECTED_TALENT}: ${talent}`);\r\n        this.props.dispatch({ type: SELECTED_TALENT, value: talent });\r\n    }\r\n\r\n    onTalentUnselected (talent) {\r\n        console.log(`${UNSELECTED_TALENT}: ${talent}`);\r\n        this.props.dispatch({ type: UNSELECTED_TALENT, value: talent });\r\n    }\r\n\r\n    onEnemyTalentSelected (enemy, talent) {\r\n        console.log(`${ENEMY_SELECTED_TALENT}: ${enemy}, ${talent}`);\r\n        this.props.dispatch({ type: ENEMY_SELECTED_TALENT, value: talent });\r\n    }\r\n\r\n    onHeroLevelChanged(newLevel) {\r\n        //console.log(`${NEW_HERO_LEVEL}: ${newLevel}`);\r\n        this.props.dispatch({ type: NEW_HERO_LEVEL, value: newLevel });\r\n    }\r\n\r\n    onBuildNameChanged(e) {\r\n        this.setState({ buildName: e.target.value });\r\n    }\r\n\r\n    onBuildCreatorChanged(e) {\r\n        this.setState({ buildCreator: e.target.value });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"foresite-app-container\">\r\n                <Container className=\"app-main-content py-3\" fluid=\"md\">\r\n                    {/* Top row, Inital Hero Information */}\r\n                    <Row>\r\n                        {/* Main Hero Info */}\r\n                        <Col className=\"my-auto\" md={3}>\r\n                            <span \r\n                                className={`hero-icon-big hero-icon-big-${this.props.selectedHeroName}_png mx-3`}\r\n                                height={50}\r\n                                alt=\"hero banner\" />\r\n                            <div className=\"d-flex mt-3\">\r\n                                <h5 className=\"my-auto px-3\">\r\n                                    { getLocalizedString(this.props.dotaStrings, this.props.selectedHeroName) }\r\n                                </h5>\r\n                                <ChangeHeroBtn \r\n                                    onSelectHero={this.onHeroSelected}\r\n                                    dotaStrings={this.props.dotaStrings} />\r\n                            </div>\r\n                        </Col>\r\n                        {/* Small Stats */}\r\n                        <Col md={3}>\r\n                            <Attributes \r\n                                hero={this.props.selectedHero} \r\n                                heroLevel={this.props.heroLevel}\r\n                                talents={this.props.selectedTalents}\r\n                                items={this.props.items}\r\n                                neutral={this.props.neutralItem} \r\n                                abilities={this.props.heroAbilities} \r\n                                abilityStrings={this.props.abilityStrings}\r\n                                dotaStrings={this.props.dotaStrings}/>\r\n                        </Col>\r\n                        {/* Final Attack/Defence Stats */}\r\n                        <Col md={5}>\r\n                            <Statistics \r\n                                hero={this.props.selectedHero} \r\n                                heroLevel={this.props.heroLevel}\r\n                                talents={this.props.selectedTalents}\r\n                                items={this.props.items}\r\n                                neutral={this.props.neutralItem} \r\n                                abilities={this.props.heroAbilities} \r\n                                abilityStrings={this.props.abilityStrings}\r\n                                dotaStrings={this.props.dotaStrings}  />\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    {/* Health/Mana and Hero Lvl  */}\r\n                    <Row className=\"my-2 py-2\">\r\n                        <Col md={8}>\r\n                            <HealthManaBar \r\n                                hero={this.props.selectedHero} \r\n                                heroLevel={this.props.heroLevel}\r\n                                talents={this.props.selectedTalents}\r\n                                items={this.props.items}\r\n                                neutral={this.props.neutralItem} \r\n                                abilities={this.props.heroAbilities} />\r\n                        </Col>\r\n                        <Col md={4}>\r\n                            <LevelSelector \r\n                                heroLevel={ this.props.heroLevel } \r\n                                onHeroLevelChanged={ this.onHeroLevelChanged }\r\n                                dotaStrings={this.props.dotaStrings} />\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    {/* Items/Talent */}\r\n                    <Row className=\"items-row my-4\">\r\n                        <Col md={7}>\r\n                            <ItemsBar\r\n                                items={this.props.items} \r\n                                backpack={this.props.backpack} \r\n                                neutral={this.props.neutralItem} \r\n                                onItemChanged={this.onItemSelected}\r\n                                onNeutralChanged={this.onNeutralSelected} \r\n                                dotaStrings={this.props.dotaStrings}\r\n                                abilityStrings={this.props.abilityStrings} />\r\n                        </Col>\r\n                        <Col md={5}>\r\n                            <TalentTree\r\n                                talents={this.props.heroTalents} \r\n                                selectedTalents={this.props.selectedTalents}\r\n                                onTalentSelected={this.onTalentSelected} \r\n                                onTalentUnselected={this.onTalentUnselected} \r\n                                dotaStrings={this.props.dotaStrings}\r\n                                abilityStrings={this.props.abilityStrings} />\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    {/* Abilities */}\r\n                    <Abilities \r\n                        heroName={this.props.selectedHeroName}\r\n                        abilities={this.props.heroAbilities}\r\n                        items={this.props.items}\r\n                        neutral={this.props.neutralItem} \r\n                        selectedTalents={this.props.selectedTalents} \r\n                        abilityStrings={this.props.abilityStrings}\r\n                        dotaStrings={this.props.dotaStrings} \r\n                        displayDamage={true} />\r\n\r\n                    <div className=\"pb-4\">\r\n                        <Button \r\n                            className=\"d-flex py-2\"\r\n                            onClick={() => this.setState({ openBuildShare: !this.state.openBuildShare })}>\r\n                            <h6 className=\"mx-1 mr-2 mb-0\">Share</h6>\r\n                            <FontAwesomeIcon className=\"my-auto\" icon={this.state.openBuildShare ? faChevronUp : faChevronDown} />\r\n                        </Button>\r\n                        {\r\n                            this.state.openBuildShare &&\r\n                                <Row>\r\n                                    <Col md={4}>\r\n                                        <h4>Build Name</h4>\r\n                                        {\r\n                                            this.state.buildName && this.state.loadedFromParams \r\n                                            ?\r\n                                            <Form.Control \r\n                                                className=\"foresight-input-control mr-2 ml-0\"\r\n                                                type=\"text\" \r\n                                                placeholder=\"Build Name\" \r\n                                                value={this.state.buildName} \r\n                                                plaintext\r\n                                                readonly />\r\n                                            :\r\n                                            <Form.Control \r\n                                                className=\"foresight-input-control mr-2 ml-0\"\r\n                                                type=\"text\" \r\n                                                placeholder=\"Build Name\" \r\n                                                onChange={this.onBuildNameChanged} />\r\n                                        }\r\n                                    </Col>\r\n                                    <Col md={4}>\r\n                                        <h4>Creator</h4>\r\n                                        {\r\n                                            this.state.buildCreator && this.state.loadedFromParams\r\n                                            ?\r\n                                            <Form.Control \r\n                                                className=\"foresight-input-control mr-2 ml-0\"\r\n                                                type=\"text\" \r\n                                                placeholder=\"Creator\" \r\n                                                value={this.state.buildCreator} \r\n                                                plaintext\r\n                                                readonly />\r\n                                            :\r\n                                            <Form.Control \r\n                                                className=\"foresight-input-control mr-2 ml-0\"\r\n                                                type=\"text\" \r\n                                                placeholder=\"Creator\" \r\n                                                onChange={this.onBuildCreatorChanged} />\r\n                                        }\r\n                                    </Col>\r\n                                    <Col md={4}>\r\n                                        <div className=\"d-flex my-auto h-100\">\r\n                                            <Button className=\"mr-1 my-auto\" onClick={this.onShareBuild}>\r\n                                                <FontAwesomeIcon icon={faShare} />\r\n                                            </Button>\r\n                                            <div className=\"my-auto\">Share this build!</div>\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                        }\r\n                    </div>\r\n\r\n                    {/* Padding Separator */}\r\n                    {/* <div className=\"py-5\" /> */}\r\n                    \r\n                    {/* Enemy Hero */}\r\n                    {/* <EnemyHero \r\n                        hero={this.props.selectedEnemyHero}\r\n                        heroName={this.props.selectedEnemyHeroName} \r\n                        heroAbilities={this.props.enemyHeroAbilities} \r\n                        heroItems={this.props.enemyHeroItems}\r\n                        heroTalents={this.props.enemyHeroTalents} \r\n                        selectedTalents={this.props.selectedEnemyTalents}\r\n                        neutral={this.props.enemyNeutralItem}\r\n                        abilityStrings={this.props.abilityStrings} \r\n                        dotaStrings={this.props.dotaStrings} /> */}\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    selectedHero: state.hero.selectedHero,\r\n    selectedHeroName: state.hero.selectedHeroName,\r\n    \r\n    heroAbilities: state.hero.heroAbilities,\r\n    heroTalents: state.hero.heroTalents,\r\n    heroLevel: state.hero.heroLevel,\r\n\r\n    items: state.hero.items,\r\n    backpack: state.hero.backpack,\r\n    neutralItem: state.hero.neutralItem,\r\n    selectedTalents: state.hero.selectedTalents,\r\n\r\n    abilityStrings: state.language.stringsAbilities,\r\n    dotaStrings: state.language.stringsDota,\r\n\r\n    selectedEnemyHero: state.enemy.selectedEnemyHero,\r\n    selectedEnemyHeroName: state.enemy.selectedEnemyHeroName,\r\n    enemyHeroTalents: state.enemy.enemyHeroTalents,\r\n    enemyHeroAbilities: state.enemy.enemyHeroAbilities,\r\n    selectedEnemyTalents: state.enemy.selectedEnemyTalents,\r\n    enemyHeroItems: state.enemy.enemyHeroItems,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Calculator);","import React, { Component } from 'react';\r\nimport {\r\n    Row,\r\n    Col,\r\n} from 'react-bootstrap';\r\n\r\nimport TalentTree from \"../TalentTree\";\r\nimport ItemsBar from '../ItemsBar/ItemsBar';\r\nimport Abilities from '../Abilities';\r\nimport HealthManaBar from \"../HealthManaBar\";\r\n\r\nclass EnemyHero extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            enemyHero: this.props.hero,\r\n            enemyHeroName: this.props.heroName,\r\n            heroTalents: this.props.heroTalents,\r\n            heroAbilities: this.props.heroAbilities,\r\n            selectedTalents: this.props.selectedTalents,\r\n            heroItems: this.props.heroItems,\r\n            heroNeutral: this.props.neutral,\r\n\r\n            abilityStrings: this.props.abilityStrings,\r\n            dotaStrings: this.props.dotaStrings,\r\n\r\n            heroLevel: 0,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.hero !== this.props.hero) {\r\n            this.setState({ enemyHero: this.props.hero });\r\n        }\r\n        if (prevProps.heroName !== this.props.heroName) {\r\n            this.setState({ enemyHeroName: this.props.heroName });\r\n        }\r\n        if (prevProps.heroTalents !== this.props.heroTalents) {\r\n            this.setState({ heroTalents: this.props.heroTalents });\r\n        }\r\n        if (prevProps.heroAbilities !== this.props.heroAbilities) {\r\n            this.setState({ heroAbilities: this.props.heroAbilities });\r\n        }\r\n        if (prevProps.selectedTalents !== this.props.selectedTalents) {\r\n            this.setState({ selectedTalents: this.props.selectedTalents });\r\n        }\r\n        if (prevProps.heroItems !== this.props.heroItems) {\r\n            this.setState({ heroItems: this.props.heroItems });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Row>\r\n                    <Col md={4}>\r\n                        {this.state.enemyHeroName}\r\n                    </Col>\r\n                    <Col md={8}>\r\n                        <HealthManaBar \r\n                                baseStrength ={ this.state.enemyHero?.AttributeBaseStrength }\r\n                                strengthGain={ this.state.enemyHero?.AttributeStrengthGain } \r\n                                baseIntelligence={this.state.enemyHero?.AttributeBaseIntelligence }\r\n                                intelligenceGain={ this.state.enemyHero?.AttributeIntelligenceGain }\r\n                                heroLevel={ this.state.heroLevel } \r\n                                primaryAttribute={ this.state.enemyHero?.AttributePrimary }\r\n                                bonusHealthRegen={ this.state.enemyHero?.StatusHealthRegen }\r\n                                bonusManaRegen={ this.state.enemyHero?.StatusManaRegen } />\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"\">\r\n                    {/* Talents */}\r\n                    <Col md={5}>\r\n                        <TalentTree\r\n                            talents={this.state.heroTalents} \r\n                            selectedTalents={this.state.selectedTalents}\r\n                            onTalentSelected={this.onTalentSelected} \r\n                            onTalentUnselected={this.onTalentUnselected} \r\n                            abilityStrings={this.state.abilityStrings} />\r\n                    </Col>\r\n                    {/* Abilities */}\r\n                    \r\n                    {/* Items */}\r\n                    <Col md={5}>\r\n                        <ItemsBar\r\n                            items={this.state.heroItems}  \r\n                            neutral={this.props.neutralItem}\r\n                            onItemChanged={this.onItemSelected}\r\n                            onNeutralChanged={this.onNeutralSelected} />\r\n                    </Col>\r\n                </Row>\r\n                <Abilities \r\n                        abilities={this.state.heroAbilities}\r\n                        items={this.state.heroItems}\r\n                        neutral={this.props.neutralItem} \r\n                        selectedTalents={this.props.selectedTalents} \r\n                        abilityStrings={this.props.abilityStrings}\r\n                        dotaStrings={this.state.dotaStrings} \r\n                        displayDamage={false} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EnemyHero;","import Calculator from \"./Calculator\";\r\n\r\nexport default Calculator;","import Home from \"./Home\";\r\n\r\nexport default Home;","import React, { Component } from 'react';\r\nimport {\r\n    Container,\r\n    Button,\r\n    Col, Row,\r\n} from \"react-bootstrap\";\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport \"./Home.css\";\r\n\r\nclass Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            redirect: \"\",\r\n        };\r\n\r\n        this.onGoToCalc = this.onGoToCalc.bind(this);\r\n    }\r\n\r\n    onGoToCalc() {\r\n        this.setState({ \r\n            redirect: \"/app\"\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                className=\"bg-master\">\r\n                {/* Primary Title Container */}\r\n                <div className=\"primary-home-container py-5\">\r\n                    <div className=\"home-bg-image\" />\r\n                    <Container \r\n                        className=\"faded-background\"\r\n                        style={{\r\n                            height: \"auto\",\r\n                            paddingTop: \"7rem\",\r\n                            paddingBottom: \"7rem\",\r\n                        }}>\r\n                        <div className=\"text-center\">\r\n                            {/* App title */}\r\n                            <h1>\r\n                                foresight\r\n                            </h1>\r\n                            {/* Sub text & action */}\r\n                            <div>\r\n                                <h6 className=\"py-2\">\r\n                                    Web application for calculating damage output for heroes in DotA 2 \r\n                                </h6>\r\n                                <Button\r\n                                    className=\"mx-auto mt-2\"\r\n                                    variant=\"primary\"\r\n                                    onClick={this.onGoToCalc}>\r\n                                    <h5 className=\"m-0 px-5 py-2\">Get Started!</h5>\r\n                                </Button>\r\n                            </div>\r\n                        </div>\r\n                    </Container>\r\n                    <div className=\"py-3\" />\r\n                    <Container className=\"faded-background\">\r\n                        <Row>\r\n                            <Col sm>\r\n                                <h3>Experiment</h3>\r\n                                <p>\r\n                                    Gaze into the future and see how much an item effects your overall build and view the raw numbers behind the game\r\n                                </p>\r\n                            </Col>\r\n                            <Col sm>\r\n                                <h3>Share</h3>\r\n                                <p>\r\n                                    Share your item and ability builds to get an in depth look at the statistics and numbers, all in one handy and sharable link.\r\n                                </p>\r\n                            </Col>\r\n                            <Col sm>\r\n                                <h3>Open Source</h3>\r\n                                <p>\r\n                                    The site is completly open source and available to view on Github. Created by JoshLmao <span>😊</span>\r\n                                </p>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </div>\r\n                {\r\n                    this.state.redirect && <Redirect to={this.state.redirect} />\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import App from \"./App\";\r\n\r\nexport default App;","import React, { Component } from 'react';\nimport { \n    HashRouter,\n    Route,\n    Switch\n} from 'react-router-dom';\n\nimport Navigation from \"../Navigation\";\nimport FourOhFour from \"../FourOhFour\";\nimport Calculator from \"../Calculator\";\nimport Home from \"../Home\";\n\nimport \"../../css/foresight-bs-styling.css\";\nimport \"../../css/foresight-generic.css\";\n\nclass App extends Component {\n    render() {\n        return (\n            <HashRouter>\n                <Navigation />\n\n                <Switch>\n                    <Route exact path=\"/\" component={Home} />\n\n                    <Route exact path=\"/app\" component={Calculator} />\n\n                    <Route component={FourOhFour} />\n                </Switch>\n            </HashRouter>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./store\";\n\nimport App from './components/App/';\n\n// Import Bootstrap component styles\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst app = (\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>\n);\n\nReactDOM.render(app, document.getElementById('root') );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}