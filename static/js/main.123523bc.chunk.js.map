{"version":3,"sources":["serviceWorker.js","enums/attributes.js","utility/dataHelperHero.js","reducers/initialState.js","utils.js","reducers/hero.js","constants/actionTypes.js","enums/languages.js","reducers/language.js","store/index.js","reducers/enemy.js","components/LanguageSelect/LanguageSelect.jsx","components/LanguageSelect/index.js","components/Navigation/Navigation.jsx","components/Navigation/index.js","components/FourOhFour/index.js","components/FourOhFour/FourOhFour.jsx","enums/abilities.js","utility/dataHelperTalents.js","utility/dataHelperAbilities.js","utility/dataHelperGeneric.js","utility/dataHelperItems.js","utility/data-helpers/language.js","utility/generalMath.js","enums/hero.js","utility/calculate.js","components/Abilities/DamageOutput.jsx","components/Abilities/Cooldown.jsx","components/Abilities/ManaCost.jsx","components/Abilities/AbilityDetails.jsx","components/Abilities/abilities-helper.js","components/Abilities/Abilities.jsx","components/Abilities/index.js","utility/spriteHelper.js","components/ItemsBar/ItemSelector.jsx","enums/items.js","components/ItemTooltip/ItemTooltip.jsx","components/ItemTooltip/index.js","components/ItemsBar/Item.jsx","components/Neutral/NeutralItemSelector.jsx","components/Neutral/index.js","components/Neutral/Neutral.jsx","components/ItemsBar/ItemsBar.jsx","components/ItemsBar/index.js","components/Attributes/Attributes.jsx","components/Attributes/index.js","components/Statistics/Statistics.jsx","components/Statistics/index.js","components/ChangeHeroBtn/HeroSelector.jsx","components/ChangeHeroBtn/index.js","components/ChangeHeroBtn/ChangeHeroBtn.jsx","components/TalentTree/TalentRow.jsx","components/TalentTree/index.js","components/TalentTree/TalentTree.jsx","components/HealthManaBar/index.js","components/HealthManaBar/HealthManaBar.jsx","components/LevelSelector/LevelSelector.jsx","components/LevelSelector/index.js","components/EnemyHero/EnemyHero.jsx","components/Aghanims/aghs-helper.js","components/Aghanims/AghanimsUpgrades.jsx","components/Aghanims/AghanimsDescriptorTooltip.jsx","components/Calculator/Calculator.jsx","components/Calculator/index.js","components/Home/index.js","components/Home/Home.jsx","components/App/index.js","components/App/App.jsx","index.js"],"names":["Boolean","window","location","hostname","match","EAttributes","getSpecificAttributeStats","specificAttribute","heroInfo","basePrimary","primaryPerLevel","parseInt","AttributeBaseStrength","parseFloat","AttributeStrengthGain","AttributeBaseAgility","AttributeAgilityGain","AttributeBaseIntelligence","AttributeIntelligenceGain","console","error","base","perLevel","getHeroTalents","keys","Object","talents","i","length","includes","ability","push","mappedTalents","lvlRow","lvl","rightTalent","leftTalent","sort","a","b","getAllHeroAbilities","abilities","getPrimaryAttribute","hero","AttributePrimary","isHeroAttackCapability","atkCapability","AttackCapabilities","split","initialState","selectedHero","DOTAHeroes","npc_dota_hero_abaddon","selectedHeroName","heroAbilities","heroAbilityLevels","map","val","index","level","heroTalents","selectedTalents","heroLevel","items","slot","item","backpack","neutralItem","shard","lang","stringsAbilities","EngAbilStrings","stringsDota","EngDotaStrings","selectedEnemyHero","npc_dota_hero_target_dummy","selectedEnemyHeroName","modelString","dashSplit","parseNameFromModel","Model","enemyHeroTalents","enemyHeroAbilities","selectedEnemyTalents","enemyHeroItems","replaceUpdatedAbilityLevel","abilityLevelArray","newAbilityLevel","newArray","filter","replaceUpdatedItem","itemArray","newItem","extra","getNewTalentArray","talentArray","newTalent","value","removeTalent","unselectedTalent","talent","reducer","state","action","type","allHeroAbilities","heroAbilLevels","abil","ELanguages","SCHINESE","ENGLISH","getAbilityStrings","langCode","SChineseAbilStrings","getGeneralStrings","SChineseDotaStrings","allReducers","combineReducers","language","log","enemy","store","createStore","LanguageSelect","props","onLanguageChanged","bind","event","newLanguage","target","this","dispatch","Form","Control","className","as","onChange","defaultValue","values","key","Component","connect","pkg","require","Navigation","Navbar","Container","Brand","to","Link","name","Nav","style","fontSize","eventKey","disabled","version","dotaVersion","Toggle","aria-controls","Collapse","id","href","Button","variant","icon","faGithub","FourOhFour","EDamageType","EAbilityBehaviour","ESpellImmunityType","ESpecialBonusOperation","tryGetTalentValueInclude","talentName","includePhrase","tryGetTalentSpecialAbilityValue","specialValueKey","shouldTryParseValue","talentInfo","getAbilityInfoFromName","specialValue","getAbilitySpecialAbilityValue","talentsInclude","targetTalent","abilityName","DOTAAbilities","tryGetAbilitySpecialAbilityValue","abilityLevel","abilityInfo","specialAbilityKey","shouldTryParse","AbilitySpecial","matchingKey","find","element","specialAbilityInfo","dataValue","var_type","parseAbilityValueByLevel","abilValue","splitValues","isCooldownTalent","isTalent","isDamageTalent","isCastRangeTalent","lowerCasePhrase","abilityString","DOTAEngAbilityStrings","Tokens","toLowerCase","isAbilityBehaviour","abilityBehaviour","ebehaviours","some","tryParseAbilitySpecialValue","abilSpecialinfo","tryGetAbilityInfoValueFromKey","abilInfoKey","isAbilityPassive","info","AbilityBehavior","insertLocaleStringDataValues","localeString","infoObject","abilitySpecials","replaceRegex","phrase","infoKey","join","specialAbilityValue","getAbilitySpecialValue","tryGetInfoValue","replace","regexExp","RegExp","abilSpecialInfo","infoValue","getItemInfoFromName","itemName","DOTAItems","tryGetItemSpecialValue","specialAbilityValueKey","itemLvl","itemInfo","tryGetNeutralSpecialValue","neutral","foundNeutralInfo","primaryAttributeToItemBonusKey","primaryAttr","itemsContainsScepter","allItems","itemsIncludesItem","convertItemDescToHtml","itemDescString","dataString","engSplitString","getFuzzyTooltipAbilityString","localizedSplit","totalHtmlSections","section","position","right","AbilityManaCost","AbilityCooldown","faClock","dangerouslySetInnerHTML","__html","ItemQuality","itemAliasIncludes","itemAlias","indexOf","abilityStrings","str","getLocalizedString","localeStrings","string","getTooltipAbilityString","abilityKey","replaceStringValue","undefined","calculateMultiplicativeStackingTotal","allStackedSources","decimals","source","total","EAttackCapabilities","calculateHealth","baseStrength","strengthGain","baseHealth","npc_dota_hero_base","StatusHealth","totalHealth","itmLevel","bonusHealth","bonusStr","bonusAllStats","maxHealth","toFixed","calculateMana","abilityLevels","baseInt","intGain","baseMana","StatusMana","totalMana","bonusMana","bonusInt","maxMana","calculateHealthRegen","totalHpRegen","StatusHealthRegen","additionalHpRegen","allHpRegenAmpSources","totalMaxHealthRegenPercent","regenAmt","bonusRegen","healthRegen","regenAmp","healthRegenPct","bonusHealthRegen","bonusHpRegen","totalMaxHpRegen","regenAmpTotalPercent","ampedHpRegen","additional","calculateManaRegen","totalManaRegen","StatusManaRegen","totalManaRegenPercentAmp","bonusManaRegen","bonusIntellect","regenPerCharge","charges","manaRegenAmp","manaRegen","calculateTotalSpellAmp","totalSpellAmp","ampTalent","spellAmpInfo","foundNeutral","spellAmpAmount","bonusSpellAmp","ampPerCharge","calculateStatusResist","totalStatusResist","statusResistAmount","calculateMagicResist","resistanceBonuses","MagicalResistance","baseResist","magicResistAmount","magicResist","calculateEvasion","evasionInstances","evasionBonus","bonusEvasion","evasionAmount","evasion","calculateRightClickDamage","heroMainAttribute","atkMin","AttackDamageMin","atkMax","AttackDamageMax","primaryAttributeStats","heroIsMelee","totalPrimaryAttribute","totalAdditional","allAttrKeys","bonusPrimaryAttr","bonusPrimaryStat","bonusDmg","bonusMeleeDmg","bonusRangedDmg","dmg","allStats","min","max","Math","floor","calculateAttackTime","totalAttackSpeed","BaseAttackSpeed","agiStats","totalAgi","bonusAttackSpeed","bonusAgility","attackSpeed","attacksPerSec","atkSpeed","attackTime","attacksPerSecond","calculateSpellDamage","abilityDamageInfo","abilityDmg","damage","isPercent","AbilityDamage","dmgValue","specialAbilityElement","lowerKey","getAbilityOutputDamage","totalSpellAmpPercent","talentBonus","spellAmp","chargeCount","neutralInfo","special","bonus_spell_amp","spell_amp","ampTalentValue","linkedAbility","spellDamage","totalAbilDmg","abilityDamage","calculateAbilityCooldown","cooldown","fixedAmtReductionSeconds","AbilityCharges","AbilityChargeRestoreTime","getIncludesAbilitySpecialAbilityValue","allReductions","bonusCooldown","reduction","totalCooldown","sourceOfReductions","decimal","calculateAttackRange","isHeroRanged","totalAttackRange","AttackRange","baseRange","rangeBonus","bonusAttackRange","bonusMeleeAttackRange","calculateAttribute","attribute","attributeStats","baseAttribute","attributePerLevel","totalAttribute","additionalAttribute","bonusAgi","primaryStat","calculateAbilityCastRange","baseCastRange","AbilityCastRange","foundRange","RequiresScepter","getAbilitySpecialCastRangeValue","totalBonusRange","calculateTotalLifesteal","totalLifestealPercent","totalLifestealAmp","lifestealPercent","lifestealAmp","bonusLifesteal","calculateTotalCleaveDmgPercent","totalCleaveDmgPercent","cleaveDmgPercent","cleaveDmg","greatCleaveDmg","cleavePercent","calculateCritPercent","highestCritPercent","critMultiplier","critBonus","bladeDanceCrit","calculateCritChancePercent","totalCritChancePercent","critChance","bladeDanceCritChance","calculateTotalSpellLifesteal","totalAllPercent","totalHeroLsPerc","totalCreepLsPerc","octarineCount","heroLifesteal","creepLifesteal","spellLifesteal","getAbilityNameFromStrings","strings","languageStrings","stringKey","matchingKeys","tryGetLocalizedString","DamageOutput","levelInfo","dotaStrings","prevProps","setState","abilInfo","abilLvl","parseDamage","Cooldown","abilityCooldown","updateCooldown","currentCooldownInfo","title","faCircle","ManaCost","updateMana","manaCost","totalManaCostReducePercent","manaCostReduceAmount","costReductionAmount","reduceAmount","calculateManaCost","height","width","backgroundColor","stringContainsHtml","TypeValueUI","isPercentage","typeStr","valueStr","AbilityDetails","abilityBehaviours","castRange","castRangeAmt","valuesInformation","containsScepter","specialInfo","abilitySpecialKeys","currentAbilitySpecialObject","specialBonus","specialBonusOperation","translationKey","abilityValue","containsKey","specialBonusValue","getAbilitySpecialExtraValues","behaviours","targeting","splitBehaviours","AbilityUnitDamageType","dmgTypeVal","splitDmgTypes","SpellImmunityType","pierceValue","getAbilityBehaviours","toUpperCase","getAbilityIconURL","Abilities","heroName","displayDamage","onAbilityLevelChanged","onLevelChanged","e","tagName","parentElement","abilityIndex","dataset","lvlindex","targetLevel","btnindex","Row","md","abilName","abilVal","IsGrantedByScepter","IsGrantedByShard","Col","ID","maxWidth","maxHeight","src","alt","maxLvl","AbilityType","MaxLevel","html","onClick","data-lvlindex","data-btnindex","getAbilityLevelHtml","getItemIcon","scale","shift","filterItemName","data-item","transform","transformOrigin","display","getItemsByQuality","itemsArray","matchArray","quality","ItemIcon","keyName","localizedName","TabHeading","text","ItemSelector","selectableItems","ItemIsNeutralDrop","IsObsolete","getAllItems","basicItems","upgradesItems","queryItems","onSelectedItem","onSearchChanged","onSearchItemSelected","onShopItemSelected","onRemoveItemSelected","query","filteredItems","ItemAliases","placeholder","faMinus","color","ListGroup","itmName","Item","Tabs","defaultActiveKey","transition","Tab","EDisassembleRule","EItemQuality","replaceItemStatLocalizeString","localizeString","splice","abs","ItemTooltip","itemExtra","itemStats","itemExtras","statistics","itemStatIncludePhrases","getItemStatistics","loreString","descString","descFiltered","ItemCost","faCampground","faHome","splitCompare","localized","toString","cost","calculateItemSellCost","eDisassembleRule","ItemDisassembleRule","isDissassembleRule","isBackpack","onItemChanged","onItemExtraChanged","itemSelectorDisabled","onBloodstoneChargesChanged","setCharges","onItemUpdated","triggerOnItemChangedEvent","callback","dagonLvl","ItemInitialCharges","newVal","newChargeAmt","trigger","isOpen","zIndex","faInfo","on","contentStyle","cursor","closeOnDocumentClick","ItemRequiresCharges","itemRequiresCharges","top","left","size","padding","textAlign","background","border","NeutralTier","tier","time","neutrals","neutralKey","onNeutralSelected","data-neutral","iconScale","NeutralItemSelector","allNeutrals","selectableNeutrals","array","itemKey","getAllNeutrals","neutralTierList","DOTANeutralsTierList","queryNeutrals","onNewNeutralSelected","filteredNeutrals","drop_rates","tierDropAmt","dropAmount","Neutral","neutralSelectorDisabled","ItemsBar","onNeutralChanged","onItemExtraChnaged","onItem","Attribute","isPrimaryAttribute","perLevelString","per","Attributes","strengthStats","agilityStats","intStats","StatArray","stats","formatAttackMinMax","standardAtkDmg","dmgString","formatAttackTime","attackInfo","formatTotalAdditional","toFixedAmt","additionalValue","Statistics","otherOpen","updateStatistics","onToggleOtherDetails","armorInfo","totalArmor","ArmorPhysical","totalBonusArmor","bonusArmor","armorBonus","armor","calculateMainArmor","physResist","percent","calculatePhysicalResist","moveSpeedInfo","baseSpeed","MovementSpeed","flatBonus","percentageBasedBonuses","moveSpeed","bonusMovement","moveSpeedPercentBonus","bonusMoveSpeed","bonusSpeed","calculateMoveSpeed","attackRange","physicalResist","statusResist","totalLifesteal","totalSpellLifesteal","totalCleaveAmount","totalCritPercent","totalCooldownAmount","faEyeSlash","faEye","HeroSelector","selectableHeroes","getAllPlayableHeroes","filteredHeroes","allHeroes","onSelectedHero","searchTerm","localizedHeroName","NameAliases","faSearch","data-heroname","displayName","data-hero","ChangeHeroBtn","onSelectHero","heroSelectorDisabled","onToggleHeroSelect","faPencilAlt","closeOnEscape","isTalentSelected","TalentRow","onTalentSelected","onTalentUnselected","onSelectTalent","getTalentDisplayName","selectedTalent","getTalentInfoFromName","prefix","data-talent","TalentTree","findSelectedTalent","matchTalent","HealthManaBar","updateBar","healthRegenInfo","ModifyBtn","LevelSelector","onHeroLevelChanged","onIncrementHeroLevel","onDecrementHeroLevel","onLvlInputChanged","newLevel","getScepterIconPath","isEnabled","getShardIconPath","determineScepterShardAbilities","shardAbility","scepterAbility","HasShardUpgrade","HasScepterUpgrade","scepter","AghanimsUpgrades","scepterShardAbils","shardOn","scepterOn","tooltipDisabled","onShardSet","onShardClicked","shardScepterAbils","buildDescriptionLocaleKey","upgradeInfo","scepterShard","AghanimDescriptor","isScepter","descriptorType","isAbility","hasUpgrade","descLocaleString","description","descriptorOn","titleName","AghanimsDescriptorTooltip","overflow","flexDirection","Calculator","buildName","buildCreator","openBuildShare","loadedFromParams","onHeroSelected","onItemSelected","onShareBuild","onBuildNameChanged","onBuildCreatorChanged","search","buildData","URLSearchParams","get","decoded","Base64","decode","buildObject","JSON","parse","creator","build","abilLevel","stringify","encoded","encode","copy","extraString","abilLvlInfo","isSet","fluid","faChevronUp","faChevronDown","plaintext","readonly","faShare","Home","redirect","onGoToApp","paddingTop","paddingBottom","faTwitter","sm","App","exact","path","component","app","StrictMode","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.123523bc.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// Enum of all attributes contained within npc_heroes\r\nexport const EAttributes = {\r\n    ATTR_STRENGTH: \"DOTA_ATTRIBUTE_STRENGTH\",\r\n    ATTR_AGILITY: \"DOTA_ATTRIBUTE_AGILITY\",\r\n    ATTR_INTELLIGENCE: \"DOTA_ATTRIBUTE_INTELLECT\"\r\n};","// * Helper and utility functions to provide for retrieving data from \"npc_heroes.json\"\r\n// * \r\n\r\nimport { EAttributes } from \"../enums/attributes\";\r\n\r\nimport { DOTAHeroes } from \"../data/dota2/json/npc_heroes.json\";\r\n\r\n/// Get the base and per level stats of a heroes primary attribute\r\nexport function getPrimaryAttributeStats(heroInfo) {\r\n    if (heroInfo && heroInfo.AttributePrimary) {\r\n        return getSpecificAttributeStats(heroInfo.AttributePrimary, heroInfo);\r\n    } else{\r\n        return null;\r\n    }\r\n}\r\n\r\n/// Get the base and per level stats of a specific attribute\r\nexport function getSpecificAttributeStats(specificAttribute, heroInfo) {\r\n    var basePrimary = 0;\r\n    var primaryPerLevel = 0;\r\n\r\n    switch(specificAttribute) {\r\n        case EAttributes.ATTR_STRENGTH:\r\n            {\r\n                basePrimary = parseInt(heroInfo.AttributeBaseStrength);\r\n                primaryPerLevel = parseFloat(heroInfo.AttributeStrengthGain);\r\n                break;\r\n            }\r\n        case EAttributes.ATTR_AGILITY:\r\n            {\r\n                basePrimary = parseInt(heroInfo.AttributeBaseAgility);\r\n                primaryPerLevel = parseFloat(heroInfo.AttributeAgilityGain);\r\n                break;\r\n            }\r\n        case EAttributes.ATTR_INTELLIGENCE:\r\n            {\r\n                basePrimary = parseInt(heroInfo.AttributeBaseIntelligence);\r\n                primaryPerLevel = parseFloat(heroInfo.AttributeIntelligenceGain);\r\n                break;\r\n            }\r\n        default:\r\n            console.error(`Unable to get attribute stats because of unknown specific attribute '${specificAttribute}'`);\r\n    }\r\n    \r\n    return {\r\n        base: basePrimary,\r\n        perLevel: primaryPerLevel,\r\n    };\r\n}\r\n\r\n/// Gets all hero talents from a hero info\r\nexport function getHeroTalents (heroInfo) {\r\n    // Get simple array of all talents from npc_heroes.json\r\n    // All abilities are stored in npc_heroes.json as \"Ability?\", where ? is a number. \r\n    // Not always in numberical order like 1, 2, 3\r\n\r\n    if (!heroInfo) {\r\n        return null;\r\n    }\r\n\r\n    let keys = Object.keys(heroInfo);\r\n    let talents = [];\r\n    for(let i = 0; i < keys.length; i++) {\r\n        if (keys[i].includes(\"Ability\") && !keys[i].includes(\"AbilityDraft\")) {\r\n            let ability = heroInfo[keys[i]];\r\n            if (ability && typeof ability === \"string\") {\r\n                if (ability !== \"generic_hidden\" && ability.includes(\"special_bonus\")) {\r\n                    talents.push(ability);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // sort into nice list\r\n    let mappedTalents = [];\r\n    let lvlRow = 0;\r\n    for (let i = 0 ; i < talents.length; i += 2) {\r\n        mappedTalents.push({\r\n            lvl: 10 + (5 * lvlRow),\r\n            rightTalent: talents[i],\r\n            leftTalent: talents[i + 1]\r\n        });\r\n\r\n        lvlRow++;\r\n    }\r\n\r\n    // Sort by lvl 25 talents first\r\n    mappedTalents.sort((a, b) => a.lvl < b.lvl ? 1 : -1);\r\n\r\n    return mappedTalents;\r\n}\r\n\r\n/// Gets all hero abilities from a hero info\r\nexport function getAllHeroAbilities (heroInfo) {\r\n    if (!heroInfo) {\r\n        return null;\r\n    }\r\n\r\n    let keys = Object.keys(heroInfo);\r\n    let abilities = [];\r\n    for(let i = 0; i < keys.length; i++) {\r\n        if (keys[i].includes(\"Ability\") && !keys[i].includes(\"AbilityDraft\")) {\r\n            let ability = heroInfo[keys[i]];\r\n            if (ability && typeof ability === \"string\") {\r\n                if (ability !== \"generic_hidden\" && !ability.includes(\"special_bonus\")) {\r\n                    abilities.push(ability);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return abilities;\r\n}\r\n\r\n/// Returns the base hero information that all heroes are based on\r\nexport function getDotaBaseHero () {\r\n    return DOTAHeroes?.npc_dota_hero_base;\r\n}\r\n\r\n/// Gets the hero's primary attribute as the EAttribute enum\r\nexport function getPrimaryAttribute (hero) {\r\n    switch(hero.AttributePrimary) {\r\n        case EAttributes.ATTR_STRENGTH:\r\n            return EAttributes.ATTR_STRENGTH;\r\n        case EAttributes.ATTR_AGILITY:\r\n            return EAttributes.ATTR_AGILITY;\r\n        case EAttributes.ATTR_INTELLIGENCE:\r\n            return EAttributes.ATTR_INTELLIGENCE;\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\nexport function getAllPlayableHeroes() {\r\n    // Filter and remove any unwanted heroes\r\n    let selectableHeroes = Object.keys(DOTAHeroes).filter((value) => {\r\n        var key = value.toLowerCase();\r\n        if (key !== \"version\" && key !== \"npc_dota_hero_base\" && key !== \"npc_dota_hero_target_dummy\") {\r\n            return true;\r\n        }\r\n        return false;\r\n    })\r\n    // Map only necessary data\r\n    selectableHeroes = selectableHeroes.map((key) => {\r\n        return {\r\n            name: key,\r\n            heroInfo: DOTAHeroes[key],\r\n        };\r\n    });\r\n    // sort by name property\r\n    selectableHeroes.sort((a, b) => (a.name > b.name) ? 1 : -1);\r\n    return selectableHeroes;\r\n}\r\n\r\n/// Checks a hero's attack capability for the specific capability\r\nexport function isHeroAttackCapability (heroInfo, atkCapability) {\r\n    if ( heroInfo && atkCapability) {\r\n        return heroInfo.AttackCapabilities && heroInfo.AttackCapabilities.split(\" | \").includes(atkCapability);\r\n    }\r\n    return false;\r\n}","import { DOTAHeroes } from \"../data/dota2/json/npc_heroes.json\";\r\nimport { lang as EngAbilStrings } from \"../data/dota2/languages/abilities_english.json\";\r\nimport { lang as EngDotaStrings } from \"../data/dota2/languages/dota_english.json\";\r\n\r\nimport {\r\n    parseNameFromModel,\r\n} from \"../utils\";\r\nimport {\r\n    getAllHeroAbilities,\r\n    getHeroTalents,\r\n} from \"../utility/dataHelperHero\";\r\n\r\nconst initialState = {\r\n    /// Current selected hero info by the user\r\n    selectedHero: DOTAHeroes.npc_dota_hero_abaddon,\r\n    /// Internal string name of the hero\r\n    selectedHeroName: \"npc_dota_hero_abaddon\",\r\n    /// Array of abilities of the selectedHero\r\n    heroAbilities: getAllHeroAbilities(DOTAHeroes.npc_dota_hero_abaddon),\r\n    heroAbilityLevels: getAllHeroAbilities(DOTAHeroes.npc_dota_hero_abaddon).map((val, index) => {\r\n        return {\r\n            ability: index,\r\n            level: 1,\r\n        };\r\n    }),\r\n    /// Array of talents of the selectedHero\r\n    heroTalents: getHeroTalents(DOTAHeroes.npc_dota_hero_abaddon),\r\n    /// Array of talents selected by the user\r\n    selectedTalents: [ ],\r\n    /// Current level of the hero set by the user\r\n    heroLevel: 1,\r\n\r\n    /// Current items that have been selected\r\n    items: [\r\n        { slot: 0, item: \"\" },\r\n        { slot: 1, item: \"\" },\r\n        { slot: 2, item: \"\" },\r\n        { slot: 3, item: \"\" },\r\n        { slot: 4, item: \"\" },\r\n        { slot: 5, item: \"\" },\r\n    ],\r\n    /// Current backpack selected by user\r\n    backpack: [\r\n        { slot: 0, item: \"\" },\r\n        { slot: 1, item: \"\" },\r\n        { slot: 2, item: \"\" },\r\n    ],\r\n    /// Current neutral item selected by user\r\n    neutralItem: { item: \"\" },\r\n    /// Is Aghanims Shard enabled for the current hero?\r\n    shard: false,\r\n\r\n    // Current code of the selected UI language\r\n    lang: \"en\",\r\n    stringsAbilities: EngAbilStrings,\r\n    stringsDota: EngDotaStrings,\r\n\r\n    /// Selected enemy hero \r\n    selectedEnemyHero: DOTAHeroes.npc_dota_hero_target_dummy,\r\n    selectedEnemyHeroName: parseNameFromModel(DOTAHeroes.npc_dota_hero_target_dummy.Model[1]),\r\n    enemyHeroTalents: getHeroTalents(DOTAHeroes.npc_dota_hero_target_dummy),\r\n    enemyHeroAbilities: getAllHeroAbilities(DOTAHeroes.npc_dota_hero_target_dummy),\r\n    selectedEnemyTalents: [ ],\r\n    enemyHeroItems: [\r\n        { slot: 0, item: \"ultimate_scepter\" },\r\n        { slot: 1, item: \"\" },\r\n        { slot: 2, item: \"\" },\r\n        { slot: 3, item: \"\" },\r\n        { slot: 4, item: \"\" },\r\n        { slot: 5, item: \"\" },\r\n    ],\r\n};\r\n\r\nexport default initialState;","/// Parses a display name from a hero info Model string\r\nexport function parseNameFromModel (modelString) {\r\n    let dashSplit = modelString.split('.')[0].split('/');\r\n    return dashSplit[dashSplit.length - 1];\r\n};","import initialState from \"./initialState\";\r\n\r\nimport {\r\n    SELECTED_HERO,\r\n    SELECTED_ITEM,\r\n    SELECTED_BACKPACK_ITEM,\r\n    SELECTED_NEUTRAL,\r\n    SELECTED_TALENT,\r\n    UNSELECTED_TALENT,\r\n    NEW_HERO_LEVEL,\r\n    SELECTED_ABILITY_LEVEL,\r\n    SHARD_SET\r\n} from \"../constants/actionTypes\";\r\n\r\nimport {\r\n    parseNameFromModel,\r\n} from \"../utils\";\r\n\r\nimport {\r\n    getAllHeroAbilities,\r\n    getHeroAbilityLevels,\r\n    getHeroTalents,\r\n} from \"../utility/dataHelperHero\";\r\n\r\n/* DotA 2 Import Data */\r\nimport { DOTAHeroes } from \"../data/dota2/json/npc_heroes.json\";\r\n\r\nfunction replaceUpdatedAbilityLevel (abilityLevelArray, newAbilityLevel) {\r\n    let newArray = abilityLevelArray.filter((val) => {\r\n        if (val.ability !== newAbilityLevel.ability) {\r\n            return val;\r\n        }\r\n    });\r\n    newArray.push({\r\n        ability: newAbilityLevel.ability,\r\n        level: newAbilityLevel.level,\r\n    });\r\n    newArray.sort((a, b) => (a.ability > b.ability) ? 1 : -1);\r\n    return newArray;\r\n}\r\n\r\n/// Takes the existing itemArray and removes the current slot item and\r\n/// replaces with the newItem\r\nfunction replaceUpdatedItem(itemArray, newItem) {\r\n    /// Remove old slot insert new and sort by Slot\r\n    let newArray = itemArray.filter((val) => {\r\n        if (val.slot !== newItem.slot) {\r\n            return val;\r\n        }\r\n    })\r\n    newArray.push({ \r\n        slot: newItem.slot,\r\n        item: newItem.item,\r\n        extra: newItem.extra,\r\n    });\r\n    /// Sort by slot order 0 - 5\r\n    newArray.sort((a, b) => (a.slot > b.slot) ? 1 : -1);\r\n    return newArray;\r\n}\r\n\r\nfunction getNewTalentArray(talentArray, newTalent) {\r\n    let newArray = talentArray.map((value => { return value }));\r\n    newArray.push(newTalent);\r\n    return newArray;\r\n}\r\n\r\nfunction removeTalent (talentArray, unselectedTalent) {\r\n    /// Filter to get all but the unselectedTalent\r\n    var array = talentArray.filter((talent) => {\r\n        if (talent && talent !== unselectedTalent) {\r\n            return talent;\r\n        }\r\n    });\r\n    return array;\r\n}\r\n\r\nfunction reducer(state = initialState, action) {\r\n    switch(action.type)\r\n    {\r\n        case SELECTED_HERO:\r\n            let heroInfo = DOTAHeroes[action.value];\r\n            let allHeroAbilities = getAllHeroAbilities(heroInfo);\r\n            // If retrieved abilities, map them to index and level\r\n            let heroAbilLevels = null;\r\n            if (allHeroAbilities) {\r\n                heroAbilLevels = allHeroAbilities.map((abil, index) => {\r\n                    return {\r\n                        ability: index,\r\n                        level: 1,\r\n                    };\r\n                });\r\n            }\r\n            return {\r\n                ...state,\r\n                selectedHero: heroInfo,\r\n                selectedHeroName: action.value,\r\n                heroAbilities: allHeroAbilities,\r\n                heroTalents: getHeroTalents(heroInfo),\r\n                heroAbilityLevels: heroAbilLevels,\r\n\r\n                // reset selected talents when new hero selected\r\n                selectedTalents: [ ],\r\n            };\r\n        case SELECTED_ITEM:\r\n            return {\r\n                ...state,\r\n                items: replaceUpdatedItem(state.items, action.value),\r\n            };\r\n        case SELECTED_BACKPACK_ITEM:\r\n            return {\r\n                ...state,\r\n                backpack: replaceUpdatedItem(state.backpack, action.value),\r\n            }\r\n        case SELECTED_NEUTRAL:\r\n            return {\r\n                ...state,\r\n                neutralItem: action.value,\r\n            };\r\n        case SELECTED_TALENT:\r\n            return {\r\n                ...state,\r\n               selectedTalents: getNewTalentArray(state.selectedTalents, action.value),\r\n            }\r\n        case UNSELECTED_TALENT:\r\n            return {\r\n                ...state,\r\n                selectedTalents: removeTalent(state.selectedTalents, action.value),\r\n            }\r\n        case NEW_HERO_LEVEL:\r\n            return {\r\n                ...state,\r\n                heroLevel: action.value,\r\n            };\r\n        case SELECTED_ABILITY_LEVEL:\r\n            return {\r\n                ...state,\r\n                heroAbilityLevels: replaceUpdatedAbilityLevel(state.heroAbilityLevels, action.value),\r\n            };\r\n        case SHARD_SET:\r\n            return {\r\n                ...state,\r\n                shard: action.value,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","export const SELECTED_HERO = \"SELECT_HERO\";\r\nexport const SELECTED_NEUTRAL = \"SELECTED_NEUTRAL\";\r\nexport const SELECTED_ITEM = \"SELECTED_ITEM\";\r\nexport const SELECTED_BACKPACK_ITEM = \"SELECTED_BACKPACK_ITEM\";\r\nexport const SELECTED_TALENT = \"SELECTED_TALENT\";\r\nexport const UNSELECTED_TALENT = \"UNSELECTED_TALENT\";\r\nexport const NEW_HERO_LEVEL = \"NEW_HERO_LEVEL\";\r\nexport const ITEM_EXTRAS_CHANGED = \"ITEM_EXTRAS_CHANGED\";\r\nexport const SELECTED_ABILITY_LEVEL = \"SELECTED_ABILITY_LEVEL\";\r\nexport const SHARD_SET = \"SHARD_SET\";\r\n\r\nexport const LANGUAGE_CHANGED = \"LANGUAGE_CHANGED\";\r\n\r\nexport const ENEMY_SELECTED = \"ENEMY_SELECTED\";\r\nexport const ENEMY_SELECTED_TALENT = \"ENEMY_SELECTED_TALENT\";\r\n","/// Enum of all supported languages\r\nexport const ELanguages = {\r\n    SCHINESE: \"szh\",\r\n    ENGLISH: \"en\",\r\n    //RUSSIAN: \"ru\",\r\n};","import {\r\n    LANGUAGE_CHANGED\r\n} from \"../constants/actionTypes\";\r\nimport { ELanguages } from \"../enums/languages\";\r\nimport initialState from \"./initialState\";\r\n\r\nimport { lang as EngAbilStrings } from \"../data/dota2/languages/abilities_english.json\";\r\nimport { lang as EngDotaStrings } from \"../data/dota2/languages/dota_english.json\";\r\n\r\nimport { lang as SChineseAbilStrings } from \"../data/dota2/languages/abilities_schinese.json\";\r\nimport { lang as SChineseDotaStrings } from \"../data/dota2/languages/dota_schinese.json\";\r\n\r\nfunction getAbilityStrings(langCode) {\r\n    switch(langCode) {\r\n        case ELanguages.ENGLISH:\r\n            return EngAbilStrings;\r\n        case ELanguages.SCHINESE:\r\n            return SChineseAbilStrings;\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\nfunction getGeneralStrings(langCode) {\r\n    switch(langCode) {\r\n        case ELanguages.ENGLISH:\r\n            return EngDotaStrings;\r\n        case ELanguages.SCHINESE:\r\n            return SChineseDotaStrings;\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\nexport default (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case LANGUAGE_CHANGED:\r\n            console.log(`${LANGUAGE_CHANGED}: ${action.value}`);\r\n            return {\r\n                ...state,\r\n                lang: action.value,\r\n\r\n                stringsAbilities: getAbilityStrings(action.value),\r\n                stringsDota: getGeneralStrings(action.value),\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import { createStore, combineReducers } from \"redux\";\r\nimport hero from \"../reducers/hero\";\r\nimport language from \"../reducers/language\";\r\nimport enemy from \"../reducers/enemy\";\r\n\r\nconst allReducers = combineReducers({\r\n    language,\r\n    hero,\r\n    enemy,\r\n});\r\n\r\nconst store = createStore(allReducers);\r\n\r\nexport default store;","import initialState from \"./initialState\";\r\n\r\nimport {\r\n    ENEMY_SELECTED,\r\n    ENEMY_SELECTED_TALENT\r\n} from \"../constants/actionTypes\";\r\n\r\nexport default (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case ENEMY_SELECTED:\r\n            return {\r\n                ...state,\r\n\r\n                enemy: action.value,\r\n            };\r\n        case ENEMY_SELECTED_TALENT:\r\n            return {\r\n                ...state,\r\n\r\n                selectedEnemyTalents: [ ],\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Form } from 'react-bootstrap';\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { LANGUAGE_CHANGED } from \"../../constants/actionTypes\";\r\nimport { ELanguages } from \"../../enums/languages\";\r\n\r\nfunction getSupportedLanguages() {\r\n    let langs = Object.values(ELanguages);\r\n    return langs.map((value) => {\r\n        return (\r\n            <option value={value} key={value}>{value}</option>\r\n        )\r\n    });\r\n}\r\n\r\nclass LanguageSelect extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.onLanguageChanged = this.onLanguageChanged.bind(this);\r\n    }\r\n\r\n    onLanguageChanged(event) {\r\n        let newLanguage = event.target.value;\r\n        this.props.dispatch({ type: LANGUAGE_CHANGED, value: newLanguage });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Form.Control \r\n                    className=\"foresight-dropdown\"\r\n                    as=\"select\" \r\n                    onChange={this.onLanguageChanged} \r\n                    defaultValue={this.props.lang}>\r\n                    { getSupportedLanguages() }\r\n                </Form.Control>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    lang: state.language.lang,\r\n});\r\n\r\nexport default connect(mapStateToProps)(LanguageSelect);","import LanguageSelect from \"./LanguageSelect\";\r\n\r\nexport default LanguageSelect;","import React, { Component } from 'react';\r\nimport { \r\n    Nav,\r\n    Navbar,\r\n    Container,\r\n    Button,\r\n}from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\r\n\r\nimport LanguageSelect from '../LanguageSelect';\r\n\r\nimport \"./Navigation.css\";\r\n\r\nlet pkg = require('../../../package.json');\r\n\r\nclass Navigation extends Component {\r\n    render() {\r\n        return (\r\n            <Navbar className=\"foresite-navbar\">\r\n                <Container>\r\n                    <Navbar.Brand \r\n                        className=\"navbar-brand-name\"\r\n                        to=\"/\" as={Link}>\r\n                        { pkg ? pkg.name : \"?\" }\r\n                    </Navbar.Brand>\r\n                    <Nav.Link \r\n                        className=\"px-1 align-bottom mr-2\"\r\n                        style={{ fontSize: \"0.85rem\" }}\r\n                        eventKey=\"disabled\" \r\n                        disabled>\r\n                            {\r\n                                pkg ? \"v\" + pkg.version : \"v0.0.0\"\r\n                            }\r\n                    </Nav.Link>\r\n                    <Nav.Link\r\n                        className=\"px-1 align-bottom mr-2\"\r\n                        style={{ fontSize: \"0.85rem\" }}\r\n                        eventKey=\"disabled\"\r\n                        disabled>\r\n                        {\r\n                            pkg ? pkg.dotaVersion : \"Unknown\"\r\n                        }\r\n                    </Nav.Link>\r\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                        <Nav className=\"mr-auto\">\r\n                            <Nav.Link to=\"/\" as={Link}>home</Nav.Link>\r\n                            <Nav.Link to=\"/app\" as={Link}>app</Nav.Link>\r\n                        </Nav>\r\n                        <div className=\"mr-2\">\r\n                            <LanguageSelect/>\r\n                        </div>\r\n                        <a href=\"https://github.com/JoshLmao/foresight\">\r\n                            <Button variant=\"outline-secondary\">\r\n                                <FontAwesomeIcon icon={faGithub} />\r\n                            </Button>\r\n                        </a>\r\n                    </Navbar.Collapse>\r\n                </Container>\r\n            </Navbar>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Navigation;","import Navigation from \"./Navigation\";\r\n\r\nexport default Navigation;","import FourOhFour from \"./FourOhFour\";\r\n\r\nexport default FourOhFour;","import React, { Component } from 'react';\r\n\r\nclass FourOhFour extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                404 page\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FourOhFour;","export const EDamageType = {\r\n    MAGICAL: \"DAMAGE_TYPE_MAGICAL\",\r\n    PURE: \"DAMAGE_TYPE_PURE\",\r\n    PHYSICAL: \"DAMAGE_TYPE_PHYSICAL\",\r\n};\r\n\r\n/// All Ability Behaviour types\r\nexport const EAbilityBehaviour = {\r\n    UNIT_TARGET: \"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET\",\r\n    POINT: \"DOTA_ABILITY_BEHAVIOR_POINT\",\r\n    AOE: \"DOTA_ABILITY_BEHAVIOR_AOE\",\r\n    HIDDEN: \"DOTA_ABILITY_BEHAVIOR_HIDDEN\",\r\n    PASSIVE: \"DOTA_ABILITY_BEHAVIOR_PASSIVE\",\r\n    NO_TARGET: \"DOTA_ABILITY_BEHAVIOR_NO_TARGET\",\r\n    IMMEDIATE: \"DOTA_ABILITY_BEHAVIOR_IMMEDIATE\",\r\n    IGNORE_CHANNEL: \"DOTA_ABILITY_BEHAVIOR_IGNORE_CHANNEL\",\r\n    SHOW_IN_GUIDES: \"DOTA_ABILITY_BEHAVIOR_SHOW_IN_GUIDES\",\r\n    AURA: \"DOTA_ABILITY_BEHAVIOR_AURA\",\r\n}\r\n\r\n/// Enum of all spell immune types, if the ability pierces spell immunity\r\nexport const ESpellImmunityType = {\r\n    YES: \"SPELL_IMMUNITY_ENEMIES_YES\",\r\n    NO: \"SPELL_IMMUNITY_ENEMIES_NO\",\r\n    ALLIES_YES_ENEMIES_NO: \"SPELL_IMMUNITY_ALLIES_YES_ENEMIES_NO\",\r\n    ALLIES_NO: \"SPELL_IMMUNITY_ALLIES_NO\",\r\n}\r\n\r\n// Enum of all special bonus operations inside AbilityInfo AbilitySpecials\r\nexport const ESpecialBonusOperation = {\r\n    MULTIPLY: \"SPECIAL_BONUS_MULTIPLY\",\r\n    SUBTRACT: \"SPECIAL_BONUS_SUBTRACT\",\r\n    PERCENT_ADD: \"SPECIAL_BONUS_PERCENTAGE_ADD\",\r\n}","import { DOTAAbilities } from \"../data/dota2/json/npc_abilities.json\";\r\nimport {\r\n    getAbilityInfoFromName,\r\n    getAbilitySpecialAbilityValue\r\n} from \"./dataHelperAbilities\";\r\n\r\n/// Gets info and formattable display name of a talent\r\n/// Returns both display name of talent and it's info in an object\r\nexport function getTalentInfoFromName(talent) {\r\n    if (talent) {\r\n        let talentInfo = DOTAAbilities[talent];\r\n        return talentInfo;    \r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\n/// Checks if the talent name includes the phrase, then attempts to get the data value of that talent\r\nexport function tryGetTalentValueInclude (talentName, includePhrase) {\r\n    if (talentName.includes(includePhrase)) {\r\n        return tryGetTalentSpecialAbilityValue(talentName, \"value\");\r\n    }\r\n}\r\n\r\n/// Attempts to get the data value of a talent from the AbilitySpecial array that matches \"specialValueKey\".\r\n/// Tries to cast it to the \"var_type\" property if \"shouldTryParseValue\" is true\r\nexport function tryGetTalentSpecialAbilityValue (talent, specialValueKey, level = 1, shouldTryParseValue = true) {\r\n    let talentInfo = getAbilityInfoFromName(talent);\r\n    if(talentInfo) {\r\n        let specialValue = getAbilitySpecialAbilityValue(talentInfo, specialValueKey, level, shouldTryParseValue);\r\n        if (specialValue) {\r\n            return specialValue;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/// Checks the selected talents array to see if the targetTalent has been selected\r\nexport function talentsInclude(selectedTalents, targetTalent) {\r\n    if (!selectedTalents) {\r\n        return null;\r\n    }\r\n\r\n    for (let talent of selectedTalents) {\r\n        if (talent === targetTalent) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}","// * Helper and utility functions to provide for retrieving data from \"npc_abilities.json\"\r\n// * \r\n\r\nimport { DOTAAbilities } from \"../data/dota2/json/npc_abilities.json\";\r\nimport { \r\n    EAbilityBehaviour, \r\n    EDamageType, \r\n    ESpellImmunityType,\r\n    ESpecialBonusOperation\r\n} from \"../enums/abilities\";\r\n\r\nimport {\r\n    lang as DOTAEngAbilityStrings\r\n} from \"../data/dota2/languages/abilities_english.json\";\r\nimport { containsLocalizedString } from \"./data-helpers/language\";\r\nimport { itemsContainsScepter } from \"./dataHelperItems\";\r\nimport { \r\n    tryGetTalentSpecialAbilityValue,\r\n    talentsInclude\r\n} from \"./dataHelperTalents\";\r\n\r\nexport function getAbilityInfoFromName(abilityName) {\r\n    if (abilityName) {\r\n        return DOTAAbilities[abilityName];\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport function tryGetAbilitySpecialAbilityValue (ability, specialValueKey, abilityLevel = 1) {\r\n    let abilityInfo = getAbilityInfoFromName(ability);\r\n    if (abilityInfo) {\r\n        let specialValue = getAbilitySpecialAbilityValue(abilityInfo, specialValueKey, abilityLevel);\r\n        if (specialValue) {\r\n            return specialValue;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/// Searches through the AbilitySpecial array for the matching \"specialAbilityKey\" and \r\n/// attempts to parse the value from its \"var_type\" property if set in \r\nexport function getAbilitySpecialAbilityValue(abilityInfo, specialAbilityKey, abilityLevel = 1, shouldTryParse = true) {\r\n    if (abilityInfo && abilityInfo.AbilitySpecial) {\r\n        for(let i = 0; i < abilityInfo.AbilitySpecial.length; i++) {\r\n            let keys = Object.keys(abilityInfo.AbilitySpecial[i]);\r\n            let matchingKey = keys.find(element => {\r\n                return element === specialAbilityKey;\r\n            });\r\n\r\n            if (matchingKey) {\r\n                let specialAbilityInfo = abilityInfo.AbilitySpecial[i];\r\n\r\n                // If value contains a space, it can be levelled up needs to be split up\r\n                let dataValue = specialAbilityInfo[matchingKey];\r\n                if (typeof dataValue === \"string\" && dataValue.includes(' ')) {\r\n                    let split = dataValue.split(' ');\r\n                    dataValue = split[abilityLevel - 1];\r\n                }\r\n\r\n                /// If wanting it for it's value, correctly convert and return\r\n                if (shouldTryParse && specialAbilityInfo.var_type) { //matchingKey.includes(\"value\") || specialAbilityInfo.var_type\r\n                    if (specialAbilityInfo.var_type === \"FIELD_INTEGER\") {\r\n                        return parseInt(dataValue);\r\n                    } \r\n                    else if(specialAbilityInfo.var_type === \"FIELD_FLOAT\") {\r\n                        return parseFloat(dataValue);\r\n                    }\r\n                } \r\n\r\n                return dataValue;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/// Gets \r\nexport function getAbilitySpecialCastRangeValue (abilityInfo, includePhrase, abilityLevel = 1) {\r\n    if (abilityInfo && abilityInfo.AbilitySpecial) {\r\n        for(let i = 0; i < abilityInfo.AbilitySpecial.length; i++) {\r\n            let keys = Object.keys(abilityInfo.AbilitySpecial[i]);\r\n            let matchingKey = keys.find(element => {\r\n                return element.includes(includePhrase) && !element.includes(\"scepter\");\r\n            });\r\n\r\n            if (matchingKey) {\r\n                let specialAbilityInfo = abilityInfo.AbilitySpecial[i];\r\n\r\n                /// ignore if scepter \r\n                if (specialAbilityInfo.RequiresScepter) {\r\n                    return null;\r\n                }\r\n\r\n                // If value contains a space, it can be levelled up needs to be split up\r\n                let dataValue = specialAbilityInfo[matchingKey];\r\n                \r\n                /// Return dataValue in format\r\n                return tryParseAbilitySpecialValue(specialAbilityInfo, dataValue, abilityLevel)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/// Searches an AbilityInfo's AbilitySpecial array for a property that includes the the \"includePhrase\"\r\n/// in it's key. For example includePhrase = \"charges\" would return value of voice spirit's \"max_charges\"\r\nexport function getIncludesAbilitySpecialAbilityValue(abilityInfo, includePhrase, abilityLevel) {\r\n    if (abilityInfo && abilityInfo.AbilitySpecial) {\r\n        for(let i = 0; i < abilityInfo.AbilitySpecial.length; i++) {\r\n            let keys = Object.keys(abilityInfo.AbilitySpecial[i]);\r\n            let matchingKey = keys.find(element => {\r\n                return element.includes(includePhrase);\r\n            });\r\n\r\n            if (matchingKey) {\r\n                let specialAbilityInfo = abilityInfo.AbilitySpecial[i];\r\n                let dataValue = specialAbilityInfo[matchingKey];\r\n\r\n                /// Return dataValue in format\r\n                return tryParseAbilitySpecialValue(specialAbilityInfo, dataValue, abilityLevel);\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/// Gets the standard output damage of an ability from its level\r\nexport function getAbilityOutputDamage(abilityInfo, abilityLevel) {\r\n    let abilityDmg = {\r\n        min: null,\r\n        max: null,\r\n        damage: null,\r\n        isPercent: null,\r\n    };\r\n\r\n    if (abilityInfo && abilityLevel) {\r\n        if (abilityInfo.AbilityDamage) {\r\n            let dmgValue = abilityInfo.AbilityDamage.split(' ')[abilityLevel - 1];\r\n            abilityDmg = {\r\n                ...abilityDmg,\r\n                damage: parseFloat(dmgValue),\r\n            };\r\n        }\r\n        else if (abilityInfo.AbilitySpecial) \r\n        {\r\n            for (let i = 0; i < abilityInfo.AbilitySpecial.length; i++) {\r\n                let specialAbilityElement = abilityInfo.AbilitySpecial[i];\r\n                \r\n                let abilSpecKeys = Object.keys(specialAbilityElement);\r\n                for(let key of abilSpecKeys) {\r\n                    // AbilitySpecial contains damage under a property\r\n                    let lowerKey = key.toLowerCase();\r\n                    \r\n                    // Includes dmg & not scepter\r\n                    if (lowerKey.includes(\"damage\") && !lowerKey.includes(\"scepter\")) \r\n                    {\r\n                        let value = parseAbilityValueByLevel(specialAbilityElement[key], abilityLevel);\r\n                        let dmgValue = parseFloat(value);\r\n\r\n                        if (lowerKey.includes(\"min\")) {\r\n                            //min_damage\r\n                            abilityDmg.min =  dmgValue;\r\n                        }\r\n                        if (lowerKey.includes(\"max\")) {\r\n                            abilityDmg.max = dmgValue;\r\n                        } \r\n                        if (lowerKey.includes(\"pct\")) {\r\n                            abilityDmg.isPercent = true;\r\n                        }\r\n\r\n                        if (!abilityDmg.min && !abilityDmg.max) {\r\n                            abilityDmg.damage = dmgValue;\r\n                        }\r\n                    }\r\n\r\n                    // Stop iterate if have min&max or dmg\r\n                    if (abilityDmg.min && abilityDmg.max || abilityDmg.damage) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return abilityDmg;\r\n}\r\n\r\n/// Gets all behaviour options of an ability such as if it goes through BKB, damage type, etc\r\nexport function getAbilityBehaviours(abilityInfo) {\r\n    if (!abilityInfo) {\r\n        return null;\r\n    }\r\n\r\n    let behaviours = [];\r\n\r\n    if (abilityInfo.AbilityBehavior) {\r\n        let targeting = [];\r\n        let splitBehaviours = abilityInfo.AbilityBehavior.split(' | ');\r\n        for(let b of splitBehaviours) {\r\n            switch(b) {\r\n                case EAbilityBehaviour.UNIT_TARGET:\r\n                    targeting.push(\"DOTA_ToolTip_Ability_Target\");\r\n                    break;\r\n                case EAbilityBehaviour.POINT:\r\n                    targeting.push(\"DOTA_ToolTip_Ability_Point\");\r\n                    break;\r\n                case EAbilityBehaviour.PASSIVE:\r\n                    targeting.push(\"DOTA_ToolTip_Ability_Passive\");\r\n                    break;\r\n                case EAbilityBehaviour.NO_TARGET:\r\n                    targeting.push(\"DOTA_ToolTip_Ability_NoTarget\");\r\n                    break;\r\n            }\r\n        }\r\n    \r\n        behaviours.push({\r\n            key: \"DOTA_ToolTip_Ability\",\r\n            value: targeting,\r\n        });\r\n    }\r\n\r\n    if (abilityInfo.AbilityUnitDamageType) {\r\n        let dmgTypeVal = \"\";\r\n        let splitDmgTypes = abilityInfo.AbilityUnitDamageType.split(\" | \");\r\n        for(let type of splitDmgTypes) {\r\n            switch(type) {\r\n                case EDamageType.MAGICAL:\r\n                    dmgTypeVal = \"DOTA_Plus_Death_Screen_MagicalDamage\";\r\n                    break;\r\n                case EDamageType.PURE:\r\n                    dmgTypeVal = \"DOTA_Plus_Death_Screen_PureDamage\";\r\n                    break;\r\n                case EDamageType.PHYSICAL:\r\n                    dmgTypeVal = \"DOTA_Plus_Death_Screen_PhysicalDamage\";\r\n                    break;\r\n                default:\r\n                    dmgTypeVal = \"Not Implemented\";\r\n                    break;\r\n            }\r\n        }\r\n\r\n        behaviours.push({\r\n            key: \"DOTA_ToolTip_Damage\",\r\n            value: dmgTypeVal,\r\n        });\r\n    }\r\n\r\n    if (abilityInfo.SpellImmunityType) {\r\n        let pierceValue = \"\";\r\n        switch(abilityInfo.SpellImmunityType) {\r\n            case ESpellImmunityType.YES:\r\n                pierceValue = \"DOTA_ToolTip_PiercesSpellImmunity_Yes\";\r\n                break;\r\n            case ESpellImmunityType.NO:\r\n            case ESpellImmunityType.ALLIES_NO:\r\n                pierceValue = \"DOTA_ToolTip_PiercesSpellImmunity_No\";\r\n                break;\r\n            case ESpellImmunityType.ALLIES_YES_ENEMIES_NO:\r\n                pierceValue = \"DOTA_ToolTip_PiercesSpellImmunity_AlliesYesEnemiesNo\";\r\n                break;\r\n            default:\r\n                pierceValue = \"Unknown\";\r\n                break;\r\n        }\r\n\r\n        behaviours.push({\r\n            key: \"DOTA_ToolTip_PiercesSpellImmunity\",\r\n            value: pierceValue,\r\n        });\r\n    }\r\n\r\n    return behaviours;\r\n}\r\n\r\n/// Parses an AbilitySpecial\r\nexport function parseAbilitySpecialValueByLevel (abilitySpecials, key, level = 1) {\r\n    let valuesSplit = abilitySpecials[key].split(' ');\r\n    if (valuesSplit.length > 1) {\r\n        return valuesSplit[level - 1];\r\n    } else {\r\n        return abilitySpecials[key];\r\n    }\r\n}\r\n\r\n/// Parses a value in an abilityInfo that could be alone or have multiple values per level\r\nexport function parseAbilityValueByLevel (value, level = 1) {\r\n    if (level < 1) {\r\n        return null;\r\n    }\r\n    \r\n    let abilValue = 0;\r\n    if (typeof value === \"string\") {\r\n        let splitValues = value.split(\" \");\r\n        if (splitValues.length > 1) {\r\n            abilValue = splitValues[level - 1];\r\n        } else {\r\n            abilValue = value;\r\n        }\r\n\r\n        abilValue = parseFloat(abilValue);\r\n    } else {\r\n        abilValue = value;\r\n    }\r\n\r\n    return abilValue;\r\n}\r\n\r\nexport function isCooldownTalent (talent) {\r\n    return isTalent(talent, \"cooldown\");\r\n}\r\n\r\nexport function isDamageTalent (talent) {\r\n    return isTalent(talent, \"damage\");\r\n}\r\n\r\nexport function isCastRangeTalent (talent) {\r\n    return isTalent(talent, \"cast range\");\r\n}\r\n\r\n// Checks if the given talent includes the given lower case phrase.\r\n// For example, talent=\"special_bonus_attack_damage_45\" lowerCasePhrase=\"damage\" is true\r\nexport function isTalent (talent, lowerCasePhrase) {\r\n    let abilityString = DOTAEngAbilityStrings.Tokens[\"DOTA_Tooltip_ability_\" + talent];\r\n    return abilityString && abilityString.toLowerCase().includes(lowerCasePhrase);\r\n}\r\n\r\n/// Checks the AbilityBehavior string on an AbilityInfo to\r\n/// see if it contains all EBehaviours in array\r\nexport function isAbilityBehaviour (abilityBehaviour, ebehaviours) {\r\n    if (abilityBehaviour) {\r\n        // Split behaviours if contains \" | \"\r\n        let splitBehaviours = abilityBehaviour.split(' | ');\r\n        // Determine if it contains\r\n        let contains = splitBehaviours.some((b) => ebehaviours.includes(b));\r\n        return contains;\r\n    }\r\n    return false;\r\n}\r\n\r\n/// Gets all AbilitySpecial extra information values with it's translation key \r\nexport function getAbilitySpecialExtraValues (abilityName, abilityInfo, abilityLevel, items, selectedTalents) {\r\n    if (!abilityInfo || (abilityInfo && !abilityInfo.AbilitySpecial)) {\r\n        return null;\r\n    }\r\n\r\n    let abilitySpecials = [];\r\n    let containsScepter = itemsContainsScepter(items);\r\n\r\n    for (let specialInfo of abilityInfo.AbilitySpecial) {\r\n        let abilitySpecialKeys = Object.keys(specialInfo);\r\n        let currentAbilitySpecialObject = null;\r\n        for (let key of abilitySpecialKeys) {\r\n\r\n            // Store specific properties inside object for later\r\n            if (key === \"LinkedSpecialBonus\") {\r\n                currentAbilitySpecialObject = {\r\n                    ...currentAbilitySpecialObject,\r\n                    specialBonus: specialInfo[key],\r\n                };\r\n            } else if (key === \"LinkedSpecialBonusOperation\") {\r\n                currentAbilitySpecialObject = {\r\n                    ...currentAbilitySpecialObject,\r\n                    specialBonusOperation: specialInfo[key],\r\n                };\r\n            }\r\n\r\n            // Skip specific properties we don't need\r\n            if (key.includes(\"var_type\") || key.includes(\"RequiresScepter\") || key === \"damage\") {\r\n                continue;\r\n            }\r\n            \r\n            // Ignore scepter info if no aghs in inventory\r\n            if (key.includes(\"scepter\") && !containsScepter) {\r\n                continue;\r\n            }\r\n\r\n            // Create key for indexing inside locale files\r\n            let translationKey = `DOTA_Tooltip_ability_${abilityName}_${key}`;\r\n\r\n            let abilityValue = null;\r\n            // if AbilitySpecial key doesn't contain an underscore, it references property on master AbilityInfo object\r\n            if (!key.includes(\"_\") && !key.includes(\"Linked\")) {\r\n                let containsKey = tryGetAbilityInfoValueFromKey(abilityInfo, key);\r\n                if (containsKey) {\r\n                    abilityValue = tryParseAbilitySpecialValue(abilityInfo, abilityInfo[containsKey], abilityLevel);\r\n                }\r\n            } else {\r\n                abilityValue = tryParseAbilitySpecialValue(specialInfo, specialInfo[key], abilityLevel);\r\n            }\r\n            \r\n            if (translationKey && abilityValue) {\r\n                currentAbilitySpecialObject = {\r\n                    ...currentAbilitySpecialObject,\r\n                    key: translationKey,\r\n                    value: abilityValue,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (currentAbilitySpecialObject && currentAbilitySpecialObject.value) {\r\n            let value = currentAbilitySpecialObject.value;\r\n\r\n            // If AbilitySpecial has special bonus modifier and is selected\r\n            if ( talentsInclude(selectedTalents, currentAbilitySpecialObject.specialBonus) ) {\r\n                let specialBonusValue = tryGetTalentSpecialAbilityValue(currentAbilitySpecialObject.specialBonus, \"value\");\r\n\r\n                /// Apply bonus operation to value\r\n                if (currentAbilitySpecialObject.specialBonusOperation) {\r\n                    switch (currentAbilitySpecialObject.specialBonusOperation) {\r\n                        case ESpecialBonusOperation.SUBTRACT:\r\n                            value -= specialBonusValue;\r\n                            break;\r\n                        case ESpecialBonusOperation.MULTIPLY:\r\n                            value *= specialBonusValue;\r\n                            break;\r\n                        case ESpecialBonusOperation.PERCENT_ADD:\r\n                            let percentBonus = (value / 100) * specialBonusValue;\r\n                            value += percentBonus;\r\n                            break;\r\n                        default:\r\n                            console.log(`Unknown SpecialBonusOperation: ${currentAbilitySpecialObject.specialBonusOperation}`);\r\n                            break;\r\n                    };\r\n                } else {\r\n                    /// If no special bonus operation, add new value on original\r\n                    if (specialBonusValue) {\r\n                        value += specialBonusValue;\r\n                    }\r\n                }\r\n            }\r\n\r\n            abilitySpecials.push({\r\n                key: currentAbilitySpecialObject.key,\r\n                value: value,\r\n            });\r\n        }\r\n    }\r\n\r\n    return abilitySpecials;\r\n}\r\n\r\nexport function tryParseAbilitySpecialValue (abilSpecialinfo, value, abilityLevel = 1) {\r\n    if (typeof value === \"string\" && value.includes(' ')) {\r\n        let split = value.split(' ');\r\n        value = split[abilityLevel - 1];\r\n    }\r\n\r\n    if (abilSpecialinfo) {\r\n        if (abilSpecialinfo.var_type === \"FIELD_INTEGER\") {\r\n            return parseInt(value);\r\n        } \r\n        else if(abilSpecialinfo.var_type === \"FIELD_FLOAT\") {\r\n            return parseFloat(value);\r\n        }\r\n    }\r\n    return value;\r\n}\r\n\r\n/// Try get's a value on an AbilityInfo object from it's key, which can be upper/lower/CamelCase\r\nexport function tryGetAbilityInfoValueFromKey (abilityInfo, key) {\r\n    let abilInfoKeys = Object.keys(abilityInfo);\r\n    for(let abilInfoKey of abilInfoKeys) {\r\n        if (abilInfoKey.toLowerCase() === key.toLowerCase()) {\r\n            return  abilInfoKey;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n// Returns if the ability is a passive ability\r\nexport function isAbilityPassive (abilityName) {\r\n    let info = getAbilityInfoFromName(abilityName);\r\n    if (info) {\r\n        return isAbilityBehaviour(info.AbilityBehavior, [ EAbilityBehaviour.PASSIVE ]);\r\n    } else {\r\n        return false;\r\n    }\r\n}","/// Takes a locale string that contains \"%word_word%\" phrases that are required to be replaced with the data value.\r\nexport function insertLocaleStringDataValues (localeString, infoObject, abilitySpecials) {\r\n    if (!localeString) {\r\n        return null;\r\n    }\r\n\r\n    // Regex to find a \"%word_word%\" phrase\r\n    let replaceRegex = /%\\w*?%/;\r\n    // special character to use in placeholder of replacing in final string with ?\r\n    let REPLACE_CHAR = \"~\";\r\n    // Loop through all matches of the regex in the string\r\n    while (localeString.match(replaceRegex)?.length > 0) {\r\n        let phrase = localeString.match(replaceRegex)[0];\r\n        if (phrase) {\r\n            // Create key by removing %\r\n            let infoKey = phrase.split(\"%\").join(\"\");\r\n            let specialAbilityValue = null;\r\n            // If no characters inbetween, needs to be a normal percentage sign\r\n            if (infoKey === \"\") \r\n            {\r\n                /// use the special REPLACE_CHAR\r\n                specialAbilityValue = REPLACE_CHAR;\r\n            }\r\n            // if is an AbilitySpecial key as all contain a '_' \r\n            else if (infoKey.includes(\"_\")) \r\n            {\r\n                specialAbilityValue = getAbilitySpecialValue(abilitySpecials, infoKey);\r\n            } \r\n            else \r\n            {\r\n                // Check if infoKey is a key on the main itemInfo object\r\n                specialAbilityValue = tryGetInfoValue(infoObject, infoKey);\r\n\r\n                // could be AbilitySpecial key that contains no _\r\n                if (!specialAbilityValue) {\r\n                    specialAbilityValue = getAbilitySpecialValue(abilitySpecials, infoKey);\r\n                }\r\n            }\r\n            \r\n            // If not able to find a data value, use a question mark\r\n            if (!specialAbilityValue) {\r\n                specialAbilityValue = \"?\";\r\n                console.error(`Unable to replace '${phrase}' phrase in locale string`);\r\n            }\r\n            // Replace and set\r\n            localeString = localeString.replace(phrase, specialAbilityValue);\r\n        }\r\n    }\r\n\r\n    /// replace REPLACE_CHAR with actual percentage sign\r\n    let regexExp = new RegExp(REPLACE_CHAR, \"g\");\r\n    localeString = localeString.replace(regexExp, \"%\");\r\n    \r\n    return localeString;\r\n}\r\n\r\n/// Searches an AbilitySpecial array for a key and get the key's value\r\nexport function getAbilitySpecialValue(abilitySpecials, key, abilityLevel = 1) {\r\n    if (abilitySpecials && key) {\r\n        // Loop through all AbilitySpecial and determine for a match\r\n        for(let i = 0; i < abilitySpecials.length; i++) {\r\n            let keys = Object.keys(abilitySpecials[i]);\r\n            let matchingKey = keys.find(element => {\r\n                return element === key;\r\n            });\r\n            // If has key, atempt parse\r\n            if (matchingKey) {\r\n                let specialAbilityInfo = abilitySpecials[i];\r\n                return tryParseAbilitySpecialValue(specialAbilityInfo, specialAbilityInfo[matchingKey], abilityLevel);\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n// Attempts to parse the value of an AbilitySpecial value entry.\r\n// For example: \"spell_shield_resistance\": \"20 30 40 50\" -> 40\r\nexport function tryParseAbilitySpecialValue (abilSpecialInfo, value, abilityLevel = 1) {\r\n    // If data value is a string and has spaces to indicate the value at certain level, parse it\r\n    if (typeof value === \"string\" && value.includes(' ')) {\r\n        let split = value.split(' ');\r\n        value = split[abilityLevel - 1];\r\n    }\r\n\r\n    /// Determine cast type and return\r\n    if (abilSpecialInfo) {\r\n        if (abilSpecialInfo.var_type === \"FIELD_INTEGER\") {\r\n            return parseInt(value);\r\n        } \r\n        else if(abilSpecialInfo.var_type === \"FIELD_FLOAT\") {\r\n            return parseFloat(value);\r\n        }\r\n    }\r\n    return value;\r\n}\r\n\r\n/// Try to get a value on the original Ability/Item object from a key\r\nexport function tryGetInfoValue (infoObject, key) {\r\n    if (infoObject && key) {\r\n        let keys = Object.keys(infoObject);\r\n        let matchingKey = keys.find(element => {\r\n            return element.toLowerCase() === key.toLowerCase();\r\n        });\r\n\r\n        if (matchingKey) {\r\n            let infoValue = infoObject[matchingKey];\r\n            if (infoValue.includes(\".\")) {\r\n                return parseFloat(infoValue);\r\n            } else {\r\n                return parseInt(infoValue);\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}","\r\n// * Helper and utility functions to provide for retrieving data from \"npc_items.json\"\r\n// * \r\nimport { DOTAAbilities as DOTAItems } from \"../data/dota2/json/items.json\";\r\nimport { neutral_items as DOTANeutralsTierList } from \"../data/dota2/json/neutral_items.json\";\r\nimport { EAttributes } from \"../enums/attributes\";\r\nimport React from \"react\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faClock } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport { tryParseAbilitySpecialValue } from \"./dataHelperAbilities\";\r\nimport { \r\n    getAbilitySpecialValue, \r\n    insertLocaleStringDataValues, \r\n    tryGetInfoValue \r\n} from \"./dataHelperGeneric\";\r\nimport { \r\n    getLocalizedString, \r\n    getFuzzyEngAbilityLocalizedString \r\n} from \"./data-helpers/language\";\r\n\r\nexport function getItemInfoFromName (itemName) {\r\n    if (itemName)\r\n        return DOTAItems[itemName];\r\n    else\r\n        return null;\r\n}\r\n\r\n/// Try Gets a item info and sepcial value from it's item's Ability Special array\r\nexport function tryGetItemSpecialValue (item, specialAbilityValueKey, itemLvl = 1) {\r\n    let itemInfo = getItemInfoFromName(item.item);\r\n    if (itemInfo) {\r\n        var specialValue = getAbilitySpecialValue(itemInfo.AbilitySpecial, specialAbilityValueKey, itemLvl);\r\n        if (specialValue) {\r\n            return specialValue;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/// Try Gets a neutral item info and special value from it's items' AbilitySpecial array\r\nexport function tryGetNeutralSpecialValue (neutral, specialValueKey) {\r\n    let foundNeutralInfo = getItemInfoFromName(neutral.item);\r\n    if (foundNeutralInfo) {\r\n        var specialValue = getAbilitySpecialValue(foundNeutralInfo.AbilitySpecial, specialValueKey);\r\n        if (specialValue) {\r\n            return specialValue;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/// Gets all normal items in dota\r\nexport function getAllItems () {\r\n    let selectableItems = Object.keys(DOTAItems).filter((value) => {\r\n        let key = value.toLowerCase();\r\n        let ability = DOTAItems[value];\r\n        if (key !== \"version\" && !key.includes(\"recipe\") && !ability.ItemIsNeutralDrop && !ability.IsObsolete) {\r\n            return true;\r\n        }\r\n        return false;\r\n    });\r\n\r\n    // Convert keys to item data\r\n    selectableItems = selectableItems.map((key) => {\r\n        return {\r\n            item:  DOTAItems[key],\r\n            name: key,\r\n        };\r\n    })\r\n    selectableItems.sort();\r\n\r\n    return selectableItems;\r\n}\r\n\r\n/// Returns all neutral items\r\nexport function getAllNeutrals() {\r\n     /// Filter out unused or unnecessary keys in items.json\r\n     let selectableNeutrals = Object.keys(DOTAItems).filter((value, index, array) => {\r\n        let key = value.toLowerCase();\r\n        let ability = DOTAItems[value];\r\n        \r\n        // Make sure it's a neutral\r\n        if (ability.ItemIsNeutralDrop === \"1\") {\r\n            // Filter irrelevant results, ignore any neutral recipes and return full item\r\n            if (key !== \"version\" && !ability.IsObsolete && !key.includes(\"recipe\")) {\r\n                return true;\r\n            }    \r\n        }\r\n        \r\n        return false;\r\n    });\r\n    selectableNeutrals.sort();\r\n\r\n    // Map to an object\r\n    selectableNeutrals = selectableNeutrals.map((key) => {\r\n        let itemKey = key;\r\n        if (itemKey.includes(\"recipe\")) {\r\n            // remove recipe and retrieve item version\r\n            itemKey = itemKey.replace(\"_recipe\", \"\");\r\n        }\r\n\r\n        let itemInfo = DOTAItems[itemKey];\r\n        if (itemInfo.ItemIsNeutralDrop === \"1\") {\r\n            return {\r\n                item: itemKey,\r\n                itemInfo: itemInfo,\r\n            };\r\n        }\r\n    });\r\n\r\n    return selectableNeutrals;\r\n}\r\n\r\n/// Gets the correct key inside items.json for the hero's primary attribute\r\nexport function primaryAttributeToItemBonusKey(primaryAttr) {\r\n    switch(primaryAttr) {\r\n        case EAttributes.ATTR_STRENGTH:\r\n            return [ \"bonus_strength\" ];\r\n        case EAttributes.ATTR_AGILITY:\r\n            return [ \"bonus_agility\" ];\r\n        case EAttributes.ATTR_INTELLIGENCE:\r\n            return [ \"bonus_intellect\", \"bonus_intelligence\" ];\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\n/// Checks if the items array contains an aghanims scepter\r\nexport function itemsContainsScepter (allItems) {\r\n    return itemsIncludesItem(allItems, \"ultimate_scepter\");\r\n}\r\n\r\n/// Checks if allItems contains an item by performing .include() with \"itemName\" on each item's name\r\nexport function itemsIncludesItem (allItems, itemName) {\r\n    for (let item of allItems) {\r\n        if (item.item && item.item.includes(itemName)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n/// Replaces a localized string with it's data values found inside AbilitySpecial \r\n/// or on ItemInfo object\r\nexport function replaceStringWithDataValues (string, itemInfo) {\r\n    if (!string) {\r\n        return null;\r\n    }\r\n\r\n    // Regex to find a \"%word_word%\" phrase\r\n    let replaceRegex = /%\\w*?%/;\r\n    // special character to use in placeholder of replacing in final string with ?\r\n    let REPLACE_CHAR = \"~\";\r\n\r\n    // Loop through all matches of the regex in the string\r\n    while (string.match(replaceRegex)?.length > 0) {\r\n        let phrase = string.match(replaceRegex)[0];\r\n        if (phrase) {\r\n            let infoKey = phrase.split(\"%\").join(\"\");\r\n            let specialAbilityValue = null;\r\n            // no characters inbetween, needs to be a normal percentage sign\r\n            if (infoKey === \"\") {\r\n                /// use the special REPLACE_CHAR\r\n                specialAbilityValue = REPLACE_CHAR;\r\n            }\r\n            // if is an AbilitySpecial key as all contain a '_' \r\n            else if (infoKey.includes(\"_\")) {\r\n                specialAbilityValue = getAbilitySpecialValue(itemInfo.AbilitySpecial, infoKey);\r\n            }\r\n            else {\r\n                // Check if infoKey is a key on the main itemInfo object\r\n                specialAbilityValue = tryGetInfoValue(itemInfo, infoKey);\r\n\r\n                // could be AbilitySpecial key that contains no _\r\n                if (!specialAbilityValue) {\r\n                    specialAbilityValue = getAbilitySpecialValue(itemInfo.AbilitySpecial, infoKey);\r\n                }\r\n            }\r\n            \r\n            // If not able to find a data value, use a question mark\r\n            if (!specialAbilityValue) {\r\n                specialAbilityValue = \"?\";\r\n            }\r\n            // Replace and set\r\n            string = string.replace(phrase, specialAbilityValue);\r\n        }\r\n    }\r\n\r\n\r\n    /// replace REPLACE_CHAR with actual percentage sign\r\n    let regexExp = new RegExp(REPLACE_CHAR, \"g\");\r\n    string = string.replace(regexExp, \"%\");\r\n    \r\n    return string;\r\n}\r\n\r\n/// Converts a item description localized string into the correct displayable HTML\r\nexport function convertItemDescToHtml(itemDescString, itemName, itemInfo) {\r\n    /// Replace active/passive item ability with the data values inside the itemInfo\r\n    let dataString = insertLocaleStringDataValues(itemDescString, itemInfo, itemInfo.AbilitySpecial);\r\n    if (!dataString) {\r\n        return null;\r\n    }\r\n\r\n    /// Get english string to be able to check for \"Active:\" phrase\r\n    let engDataString = getFuzzyEngAbilityLocalizedString(`${itemName}_Description`);\r\n    let engSplitString = engDataString.split(\"\\\\n\");\r\n\r\n    /// Also split localized string to iterate over\r\n    let localizedSplit = dataString.split(\"\\\\n\");\r\n\r\n    let totalHtmlSections = [];\r\n    for(let i = 0; i < localizedSplit.length; i++) {\r\n        let section = localizedSplit[i];\r\n        let isActive = engSplitString[i].includes(\"Active:\");\r\n        if (isActive) {\r\n            // Return HTML for an active ability on item\r\n            totalHtmlSections.push(\r\n                <div className=\"my-3 item-active\" key={i}>\r\n                    <div\r\n                        className=\"d-flex justify-content-between align-items-center\" \r\n                        style={{ position: \"absolute\", right: \"1rem\" }}>\r\n                        {\r\n                            itemInfo && itemInfo.AbilityManaCost &&\r\n                            <div className=\"d-flex\">\r\n                                <div className=\"mx-1 my-1 mana-cost-box-icon\" />\r\n                                <div>\r\n                                    { parseInt(itemInfo.AbilityManaCost) }\r\n                                </div>\r\n                            </div>\r\n                        }\r\n                        <div className=\"px-1\" />\r\n                        {\r\n                            itemInfo && itemInfo.AbilityCooldown &&\r\n                            <div className=\"d-flex\">\r\n                                <FontAwesomeIcon \r\n                                    className=\"mx-1 my-1\" \r\n                                    icon={faClock} />\r\n                                <div>\r\n                                    { parseFloat(itemInfo.AbilityCooldown)  }\r\n                                </div>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                    <div dangerouslySetInnerHTML={{ __html: section }}>\r\n                    </div>\r\n                </div>\r\n            )\r\n        } else {\r\n            /// HTML for passive ability on item\r\n            totalHtmlSections.push(\r\n                <div\r\n                    key={i} \r\n                    className={`my-3 ${itemInfo.ItemQuality === \"consumable\" ? \"item-consumable\" : \"item-passive\"}`} \r\n                    dangerouslySetInnerHTML={{ __html: section }}>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    return totalHtmlSections;\r\n}\r\n\r\n/// Gets all bonuses the item provides, returning a key value list\r\nexport function getItemStatistics (itemInfo, itemExtras) {\r\n    if (!itemInfo || !itemInfo?.AbilitySpecial) {\r\n        return null;\r\n    }\r\n\r\n    let statistics = [];\r\n    // Array of phrases/keys to include check on AbilitySpecial keys\r\n    let itemStatIncludePhrases = [\r\n        \"bonus\", \"spell\", \"attack\", \"multiplier\", \"regen\",\r\n        \"resistance\", \"night_vision\"\r\n    ];\r\n\r\n    let itmLevel = 1;\r\n    if (itemExtras && itemExtras.level) {\r\n        itmLevel = itemExtras.level;\r\n    }\r\n\r\n    for (let i = 0; i < itemInfo.AbilitySpecial.length; i++) {\r\n        let keys = Object.keys(itemInfo.AbilitySpecial[i]);\r\n        // Iterate over each AbilitySpecial key and take \r\n        // matching keys in phrase array\r\n        for(let key of keys) {\r\n            for(let phrase of itemStatIncludePhrases) {\r\n                if (key.includes(phrase)) {\r\n                    let val = tryParseAbilitySpecialValue(itemInfo.AbilitySpecial[i], itemInfo.AbilitySpecial[i][key], itmLevel);\r\n                    statistics.push({\r\n                        key: key,\r\n                        value: val,\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return statistics;\r\n}\r\n\r\n/// Checks an ItemInfo Disassemble rule if it matches the given rule\r\nexport function isDissassembleRule(itemInfo, eDisassembleRule) {\r\n    if (itemInfo && itemInfo.ItemDisassembleRule) {\r\n        let split = itemInfo.ItemDisassembleRule.split(\" | \");\r\n        for(let rule of split) {\r\n            if (rule === eDisassembleRule) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n/// Checks if an item requires charges to function\r\nexport function itemRequiresCharges (itemName) {\r\n    let itemInfo = getItemInfoFromName(itemName);\r\n    if (itemInfo) {\r\n        return itemInfo.ItemRequiresCharges === \"1\";\r\n    }\r\n    return false;\r\n}\r\n\r\n/// Checks an item alias from an ItemInfo to see if the phrase is included\r\nexport function itemAliasIncludes (itemAlias, includePhrase) {\r\n    if (itemAlias && includePhrase) {\r\n        let split = itemAlias.split(\";\");\r\n        for (let alias of split) {\r\n            if (alias.toLowerCase().indexOf(includePhrase.toLowerCase()) !== -1) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n/// Gets the list of enabled/disabled Neutrals in their tiers\r\nexport function getNeutralTierLayout () {\r\n    if (DOTANeutralsTierList) {\r\n        return DOTANeutralsTierList;\r\n    }\r\n    return null;\r\n}\r\n\r\n/// Attempts to get a DOTA_Tooltip_[Aa]bility_{tooltipKey} string in the \r\nexport function getFuzzyTooltipAbilityString (abilityStrings, key) {\r\n    let str = getLocalizedString(abilityStrings, `DOTA_Tooltip_ability_${key}`);\r\n    if (!str) {\r\n        str = getLocalizedString(abilityStrings, `DOTA_Tooltip_Ability_${key}`);\r\n    }\r\n    return str;\r\n}","import { lang as DOTAEngAbilityStrings } from \"../../data/dota2/languages/abilities_english.json\";\r\nimport { getFuzzyTooltipAbilityString } from \"../dataHelperItems\";\r\n\r\n/// Searches the passed strings file for the related string\r\n/// Very resource intensive\r\nexport function tryGetLocalizedString(languageStrings, stringKey) {\r\n    if (!languageStrings || !stringKey) {\r\n        return null;\r\n    }\r\n\r\n    let languageKeys = Object.keys(languageStrings.Tokens);\r\n    let matchingKeys = languageKeys.filter((key) => {\r\n        if (key.toLowerCase() === stringKey.toLowerCase()) {\r\n            return key;\r\n        } else {\r\n            return null;\r\n        }\r\n    });\r\n\r\n    if (matchingKeys && matchingKeys.length > 0) {\r\n        let displayName = languageStrings.Tokens[matchingKeys[0]];\r\n        return displayName;\r\n    } else {\r\n        return \"?\";\r\n    }\r\n}\r\n\r\nexport function tryGetTalentLocalizedString(languageStrings, stringKey) {\r\n    if (!languageStrings || !stringKey) {\r\n        return null;\r\n    }\r\n\r\n    let languageKeys = Object.keys(languageStrings.Tokens);\r\n    let matchingKeys = languageKeys.filter((key) => {\r\n        if (key.includes(stringKey)) {\r\n            return key;\r\n        } else {\r\n            return null;\r\n        }\r\n    });\r\n\r\n    if (matchingKeys && matchingKeys.length > 0) {\r\n        let displayName = languageStrings.Tokens[matchingKeys[0]];\r\n        return displayName;\r\n    } else {\r\n        return \"?\";\r\n    }\r\n}\r\n\r\n/// Quick method for retrieving localized string.\r\n/// Main fast method to retrieve an exact key from strings. Requires case sensitive match of 'key' otherwise will fail\r\nexport function getLocalizedString(localeStrings, key) {\r\n    let string = localeStrings.Tokens[key];\r\n    return string ?? null;\r\n}\r\n\r\n/// Check if the localeStrings contains the key\r\nexport function containsLocalizedString (localeStrings, key) {\r\n    let containsVal = localeStrings.Tokens[key];\r\n    return containsVal != null;\r\n}\r\n\r\n/// Gets a string from the dota strings that contain the prefix \"DOTA_Toolip_\"\r\n/// Useful for getting general tooltip UI strings\r\nexport function getTooltipString(dotaStrings, tooltipKey) {\r\n    if (!dotaStrings || !tooltipKey) {\r\n        return null;\r\n    }\r\n\r\n    if (!tooltipKey.includes(\"DOTA_ToolTip_\")) {\r\n        tooltipKey = \"DOTA_ToolTip_\" + tooltipKey;\r\n    }\r\n    var match = dotaStrings.Tokens[tooltipKey];\r\n    return match;\r\n}\r\n\r\n/// Gets a string from the abilities strings that contain the prefix \"DOTA_Tooltip_ability\"\r\n/// Useful for retrieving localized strings of ability names\r\nexport function getTooltipAbilityString(abilityStrings, abilityKey) {\r\n    if (!abilityStrings || !abilityKey) {\r\n        return null;\r\n    }\r\n    if (!abilityKey.includes(\"DOTA_Tooltip_ability\")) {\r\n        abilityKey = \"DOTA_Tooltip_ability_\" + abilityKey;\r\n    }\r\n    var match = abilityStrings.Tokens[abilityKey];\r\n    return match;\r\n}\r\n\r\n/// Places a value in a translation string that contains a \"{s:value}\" inside\r\nexport function replaceStringValue(string, value) {\r\n    if (!string || value === undefined || value === null) {\r\n        return \"?\";\r\n    }\r\n\r\n    string = string.replace(/{.*}/, value);\r\n    return string;\r\n}\r\n\r\n/// Gets the english localized ability string\r\nexport function getEngAbilityLocalizedString (key) {\r\n    return getLocalizedString(DOTAEngAbilityStrings, key);\r\n}\r\n\r\n/// Gets the english localized DOTA_Tooltip_[Aa]bility_{key} string\r\nexport function getFuzzyEngAbilityLocalizedString (key) {\r\n    return getFuzzyTooltipAbilityString(DOTAEngAbilityStrings, key);\r\n}","/// Adds together stacked multiple sources as percentages to get their actual total as a percent\r\n/// Also known as multiplicative stacking\r\n/// 1 - (1 - sourceOne) * (1 - sourceTwo) * (1 - sourceThree) ...etc\r\nexport function calculateMultiplicativeStackingTotal(allStackedSources) {\r\n    if (!allStackedSources || (allStackedSources && allStackedSources.length <= 0)) {\r\n        return 0;\r\n    }\r\n\r\n    // Divide original value into 0.x and minus from 1 to get the reverse\r\n    let decimals = []\r\n    for(let source of allStackedSources) {\r\n        decimals.push(1 - (source / 100));\r\n    }\r\n\r\n    // multiply them all together \r\n    let total = decimals[0];\r\n    for(let i = 1; i < decimals.length; i++) {\r\n        total *= decimals[i];\r\n    }\r\n \r\n    // then minus from 1, and multiply by 100 to get value as a percentage\r\n    let percent = (1 - total) * 100;\r\n    return percent;\r\n}","// Enum for all Attack types\r\nexport const EAttackCapabilities = {\r\n    MELEE: \"DOTA_UNIT_CAP_MELEE_ATTACK\",\r\n    RANGED: \"DOTA_UNIT_CAP_RANGED_ATTACK\",\r\n};","import {\r\n    getAbilitySpecialValue\r\n} from \"./dataHelperGeneric\";\r\n\r\nimport { \r\n    getItemInfoFromName,\r\n    tryGetItemSpecialValue,\r\n    tryGetNeutralSpecialValue,\r\n    primaryAttributeToItemBonusKey,\r\n    itemsContainsScepter\r\n} from \"./dataHelperItems\";\r\n\r\nimport {\r\n    getAbilityInfoFromName,\r\n    getAbilitySpecialAbilityValue,\r\n    getAbilityOutputDamage,\r\n    tryGetAbilitySpecialAbilityValue,\r\n    parseAbilityValueByLevel,\r\n    isCooldownTalent,\r\n    isDamageTalent,\r\n    isCastRangeTalent,\r\n    getAbilitySpecialCastRangeValue,\r\n    getIncludesAbilitySpecialAbilityValue,\r\n    isAbilityBehaviour,\r\n    isAbilityPassive\r\n} from \"./dataHelperAbilities\";\r\n\r\nimport {\r\n    getTalentInfoFromName,\r\n    tryGetTalentSpecialAbilityValue,\r\n    tryGetTalentValueInclude,\r\n} from \"./dataHelperTalents\";\r\n\r\nimport {\r\n    getDotaBaseHero,\r\n    getSpecificAttributeStats,\r\n    getPrimaryAttributeStats,\r\n    getPrimaryAttribute,\r\n    isHeroAttackCapability\r\n} from \"./dataHelperHero\";\r\n\r\nimport {\r\n    calculateMultiplicativeStackingTotal\r\n} from \"./generalMath\";\r\n\r\nimport { EAttributes } from \"../enums/attributes\";\r\nimport { EAttackCapabilities } from \"../enums/hero\";\r\nimport { EAbilityBehaviour } from \"../enums/abilities\";\r\n\r\nimport { DOTAHeroes } from \"../data/dota2/json/npc_heroes.json\";\r\nimport { DOTAAbilities } from \"../data/dota2/json/npc_abilities.json\";\r\n\r\n/// Calculates the health of a hero\r\n/// https://dota2.gamepedia.com/Health\r\nexport function calculateHealth(hero, heroLevel, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }\r\n    \r\n    let HEALTH_PER_STRENGTH_POINT = 20;\r\n    let baseStrength = parseInt(hero.AttributeBaseStrength)\r\n    let strengthGain = parseFloat(hero.AttributeStrengthGain);\r\n\r\n    let baseHealth = 0;\r\n    if (DOTAHeroes && DOTAHeroes.npc_dota_hero_base && DOTAHeroes.npc_dota_hero_base.StatusHealth) {\r\n        baseHealth = parseInt(DOTAHeroes.npc_dota_hero_base.StatusHealth);\r\n    } else {\r\n        console.error(\"Can't add baseHealth to heroes health pool\");\r\n    }\r\n\r\n    let totalStr = baseStrength + (strengthGain * (heroLevel - 1));\r\n    let totalHealth = baseHealth + (totalStr * HEALTH_PER_STRENGTH_POINT);\r\n\r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            let itmLevel = item.extra?.level ?? 1;\r\n\r\n            let bonusHealth = tryGetItemSpecialValue(item, \"bonus_health\");\r\n            if (bonusHealth) {\r\n                totalHealth += bonusHealth;\r\n            }\r\n\r\n            let bonusStr = tryGetItemSpecialValue(item, \"bonus_strength\");\r\n            if (bonusStr) {\r\n                totalHealth += bonusStr * HEALTH_PER_STRENGTH_POINT;\r\n            }\r\n\r\n            bonusStr = tryGetItemSpecialValue(item, \"bonus_str\", itmLevel);\r\n            if (bonusStr) {\r\n                totalHealth += bonusStr * HEALTH_PER_STRENGTH_POINT;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalHealth += bonusAllStats * HEALTH_PER_STRENGTH_POINT;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let bonusHealth = tryGetNeutralSpecialValue(neutral, \"bonus_health\");\r\n        if (bonusHealth) {\r\n            totalHealth += bonusHealth;\r\n        }\r\n\r\n        let bonusStr = tryGetNeutralSpecialValue(neutral, \"bonus_strength\");\r\n        if (bonusStr) {\r\n            totalHealth += bonusStr * HEALTH_PER_STRENGTH_POINT;\r\n        }\r\n\r\n        let bonusAllStats = tryGetNeutralSpecialValue(neutral, \"bonus_all_stats\");\r\n        if (bonusAllStats) {\r\n            totalHealth += bonusAllStats * HEALTH_PER_STRENGTH_POINT;\r\n        }\r\n\r\n        let maxHealth = tryGetNeutralSpecialValue(neutral, \"max_health\");\r\n        if (maxHealth) {\r\n            totalHealth += maxHealth;\r\n        }\r\n    }\r\n\r\n    if (abilities && abilities.length > 0) {\r\n        \r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            let bonusHealth = tryGetTalentValueInclude(talent, \"bonus_hp\");\r\n            if (bonusHealth) {\r\n                totalHealth += bonusHealth;\r\n            }\r\n\r\n            let bonusStr = tryGetTalentValueInclude(talent, \"bonus_strength\");\r\n            if (bonusStr) {\r\n                totalHealth += bonusStr * HEALTH_PER_STRENGTH_POINT;\r\n            }\r\n\r\n            let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalHealth += bonusAllStats * HEALTH_PER_STRENGTH_POINT;\r\n            }\r\n        }\r\n    }\r\n\r\n    return totalHealth.toFixed(0);\r\n}\r\n\r\n/// Calculates the mana pool of a hero\r\n/// https://dota2.gamepedia.com/Mana\r\nexport function calculateMana(hero, heroLevel, items, neutral, abilities, talents, abilityLevels) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }    \r\n\r\n    let MANA_PER_INT_POINT = 12;\r\n    let baseInt = parseInt(hero.AttributeBaseIntelligence);\r\n    let intGain = parseFloat(hero.AttributeIntelligenceGain);\r\n\r\n    let baseMana = 0;\r\n    if (DOTAHeroes && DOTAHeroes.npc_dota_hero_base && DOTAHeroes.npc_dota_hero_base.StatusMana) {\r\n        baseMana = parseInt(DOTAHeroes.npc_dota_hero_base.StatusMana);\r\n    } else {\r\n        console.error(\"Can't add baseMana to heroes mana pool\");\r\n    }\r\n\r\n    let totalInt = baseInt + (intGain * (heroLevel - 1));\r\n    let totalMana = baseMana + (totalInt * MANA_PER_INT_POINT);\r\n\r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            let itmLevel = item.extra?.level ?? 1;\r\n            \r\n            let bonusMana = tryGetItemSpecialValue(item, \"bonus_mana\");\r\n            if (bonusMana) {\r\n                totalMana += bonusMana;\r\n            }\r\n\r\n            let bonusInt = tryGetItemSpecialValue(item, \"bonus_intellect\");\r\n            if (bonusInt) {\r\n                totalMana += bonusInt * MANA_PER_INT_POINT;\r\n            }\r\n\r\n            bonusInt = tryGetItemSpecialValue(item, \"bonus_int\", itmLevel);\r\n            if (bonusInt) {\r\n                totalMana += bonusInt * MANA_PER_INT_POINT;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalMana += bonusAllStats * MANA_PER_INT_POINT;\r\n            }\r\n        }\r\n    }\r\n    \r\n    if (neutral) {\r\n        let bonusMana = tryGetNeutralSpecialValue(neutral, \"bonus_mana\");\r\n        if (bonusMana) {\r\n            totalMana += bonusMana;\r\n        }\r\n\r\n        let bonusInt = tryGetNeutralSpecialValue(neutral, \"bonus_intellect\");\r\n        if (bonusInt) {\r\n            totalMana += bonusInt * MANA_PER_INT_POINT;\r\n        }\r\n\r\n        let bonusAllStats = tryGetNeutralSpecialValue(neutral, \"bonus_all_stats\");\r\n        if (bonusAllStats) {\r\n            totalMana += bonusAllStats * MANA_PER_INT_POINT;\r\n        }\r\n\r\n        // If witless shako, remove from total mana pool\r\n        if (neutral.item === \"item_witless_shako\") {\r\n            let maxMana = tryGetNeutralSpecialValue(neutral, \"max_mana\");\r\n            if (maxMana) {\r\n                totalMana -= maxMana;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (abilities && abilities.length > 0) {\r\n        for(let i in abilities) {\r\n            // Get name and level of ability\r\n            let ability = abilities[i];\r\n            let abilityLevel = abilityLevels[i]?.level ?? 1;\r\n            \r\n            let bonusMana = tryGetAbilitySpecialAbilityValue(ability, \"bonus_mana\", abilityLevel);\r\n            if (bonusMana) {\r\n                totalMana += bonusMana;\r\n            }\r\n\r\n            let bonusInt = tryGetAbilitySpecialAbilityValue(ability, \"bonus_intellect\", abilityLevel);\r\n            if (bonusInt) {\r\n                totalMana += bonusInt * MANA_PER_INT_POINT;\r\n            }\r\n\r\n            let bonusAllStats = tryGetAbilitySpecialAbilityValue(ability, \"bonus_all_stats\", abilityLevel);\r\n            if (bonusAllStats) {\r\n                totalMana += bonusAllStats * MANA_PER_INT_POINT;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            let bonusMana = tryGetTalentValueInclude(talent, \"bonus_mp\");\r\n            if (bonusMana) {\r\n                totalMana += bonusMana;\r\n            }\r\n            let bonusInt = tryGetTalentValueInclude(talent, \"bonus_intelligence\");\r\n            if (bonusInt) {\r\n                totalMana += bonusInt * MANA_PER_INT_POINT;\r\n            }\r\n            let bonusAllStats = tryGetTalentValueInclude(talent, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalMana += bonusAllStats * MANA_PER_INT_POINT;\r\n            }\r\n        }\r\n    }\r\n\r\n    return totalMana.toFixed(0);\r\n}\r\n\r\n/* Hero gains +0.1 regen per each point of strength\r\n* https://dota2.gamepedia.com/Health_regeneration */\r\nexport function calculateHealthRegen(hero, heroLevel, items, neutral, abilities, talents, abilityLevels) {\r\n    if(!hero) {\r\n        return \"?\";\r\n    }\r\n\r\n    let HP_REGEN_PER_STRENGTH = 0.1;\r\n    let baseStr = parseInt(hero.AttributeBaseStrength);\r\n    let strPerLvl = parseFloat(hero.AttributeStrengthGain);\r\n\r\n    let totalHpRegen = (baseStr + (strPerLvl * (heroLevel - 1))) * HP_REGEN_PER_STRENGTH;\r\n    if (hero.StatusHealthRegen) {\r\n        totalHpRegen += parseFloat(hero.StatusHealthRegen);\r\n    }\r\n\r\n    // total additional hp regen from sources that provide flat hp regen\r\n    let additionalHpRegen = 0;\r\n    // total from sources that give hp regen amplification\r\n    let allHpRegenAmpSources = [];\r\n    // total from sources that provide max health regen\r\n    let totalMaxHealthRegenPercent = 0;\r\n\r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            let regenAmt = tryGetItemSpecialValue(item, \"bonus_health_regen\");\r\n            if (regenAmt) {\r\n                additionalHpRegen += regenAmt;\r\n            }\r\n\r\n            let bonusRegen = tryGetItemSpecialValue(item, \"bonus_regen\");\r\n            if (bonusRegen) {\r\n                additionalHpRegen += bonusRegen;\r\n            }\r\n\r\n            let healthRegen = tryGetNeutralSpecialValue(item, \"hp_regen\");\r\n            if (healthRegen) {\r\n                additionalHpRegen += healthRegen;\r\n            }\r\n\r\n            let bonusStr = tryGetItemSpecialValue(item, \"bonus_strength\");\r\n            if(bonusStr) {\r\n                totalHpRegen += bonusStr * HP_REGEN_PER_STRENGTH;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalHpRegen += bonusAllStats * HP_REGEN_PER_STRENGTH;\r\n            }\r\n\r\n            let regenAmp = tryGetItemSpecialValue(item, \"hp_regen_amp\");\r\n            if (regenAmp) {\r\n                allHpRegenAmpSources.push(regenAmp);\r\n            }\r\n\r\n            let healthRegenPct = tryGetItemSpecialValue(item, \"health_regen_pct\");\r\n            if (healthRegenPct) {\r\n                totalMaxHealthRegenPercent = healthRegenPct;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let healthRegen = tryGetNeutralSpecialValue(neutral, \"hp_regen\");\r\n        if (healthRegen) {\r\n            additionalHpRegen += healthRegen;\r\n        }\r\n\r\n        let bonusHealthRegen = tryGetNeutralSpecialValue(neutral, \"bonus_health_regen\");\r\n        if (bonusHealthRegen) {\r\n            additionalHpRegen += bonusHealthRegen;\r\n        }\r\n\r\n        let bonusHpRegen = tryGetNeutralSpecialValue(neutral, \"bonus_hp_regen\");\r\n        if (bonusHpRegen) {\r\n            additionalHpRegen += bonusHpRegen;\r\n        }\r\n\r\n        let bonusStr = tryGetNeutralSpecialValue(neutral, \"bonus_strength\");\r\n        if (bonusStr) {\r\n            totalHpRegen += bonusStr * HP_REGEN_PER_STRENGTH;\r\n        }\r\n        \r\n        let bonusAllStats = tryGetNeutralSpecialValue(neutral, \"bonus_all_stats\");\r\n        if (bonusAllStats) {\r\n            totalHpRegen += bonusAllStats * HP_REGEN_PER_STRENGTH;\r\n        }\r\n\r\n        let regenAmp = tryGetNeutralSpecialValue(neutral, \"hp_regen_amp\");\r\n        if (regenAmp) {\r\n            allHpRegenAmpSources.push(regenAmp);\r\n        }\r\n    } \r\n\r\n    if (abilities && abilities.length > 0 && abilityLevels) {\r\n        for (let i in abilities) {\r\n            // Determine ability & level\r\n            let ability = abilities[i];\r\n            let abilityLevel = abilityLevels[i]?.level ?? 1;\r\n            \r\n            let bonusRegen = tryGetAbilitySpecialAbilityValue(ability, \"bonus_health_regen\", abilityLevel);\r\n            if (bonusRegen) {\r\n                totalHpRegen += bonusRegen;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for (let talent of talents) {\r\n            // Only get bonus_hp_regen talents\r\n            if (talent.includes(\"bonus_hp_regen\")) {\r\n                let bonusRegen = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusRegen) {\r\n                    additionalHpRegen += bonusRegen;\r\n                }\r\n            } else if(talent.includes(\"bonus_strength\")) {\r\n                let bonusStr = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusStr) {\r\n                    totalHpRegen += bonusStr * HP_REGEN_PER_STRENGTH;\r\n                }\r\n            } else if (talent.includes(\"bonus_all_stats\")) {\r\n                let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAllStats) {\r\n                    totalHpRegen += bonusAllStats * HP_REGEN_PER_STRENGTH;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    let totalMaxHpRegen = 0;\r\n    if (totalMaxHealthRegenPercent > 0) {\r\n        let totalHealth = parseFloat(calculateHealth(hero, heroLevel, items, neutral, abilities, talents));\r\n        totalMaxHpRegen = (totalHealth / 100) * totalMaxHealthRegenPercent;\r\n    }\r\n\r\n    // Merge all stacked amp sources\r\n    let regenAmpTotalPercent = calculateMultiplicativeStackingTotal(allHpRegenAmpSources);\r\n\r\n    // Finally apply hp regen amp to total and additional\r\n    let ampedHpRegen = 0;\r\n    if (regenAmpTotalPercent > 0) {\r\n        ampedHpRegen = ((totalHpRegen + totalMaxHpRegen) / 100) * regenAmpTotalPercent;\r\n    }\r\n\r\n    // Add up additional sources from item hp regen, max hp regen & hp regen amp\r\n    let finalAdditional = additionalHpRegen + totalMaxHpRegen + ampedHpRegen;\r\n    return {\r\n        total: totalHpRegen,\r\n        additional: finalAdditional,\r\n    };\r\n}\r\n\r\n/* Each point of intelligence increases the hero's mana regeneration by 0.05.\r\n * https://dota2.gamepedia.com/Mana_regeneration */\r\nexport function calculateManaRegen(hero, heroLevel, items, neutral, abilities, talents) {\r\n    if(!hero) {\r\n        return \"?\";\r\n    }\r\n    let MANA_REGEN_PER_INT = 0.05;\r\n    let baseInt = parseInt(hero.AttributeBaseIntelligence);\r\n    let intGain = parseFloat(hero.AttributeIntelligenceGain);\r\n\r\n    let totalManaRegen = (baseInt + (intGain * (heroLevel - 1))) * MANA_REGEN_PER_INT;\r\n    if (hero.StatusManaRegen) {\r\n        totalManaRegen += parseFloat(hero.StatusManaRegen);\r\n    }\r\n\r\n    let totalManaRegenPercentAmp = 100;\r\n\r\n    if(items && items.length > 0) {\r\n        for(let item of items) {\r\n            let bonusManaRegen = tryGetItemSpecialValue(item, \"bonus_mana_regen\");\r\n            if (bonusManaRegen) {\r\n                totalManaRegen += bonusManaRegen;\r\n            }\r\n\r\n            let bonusInt = tryGetItemSpecialValue(item, \"bonus_intelligence\");\r\n            if(bonusInt) {\r\n                let regen = bonusInt * MANA_REGEN_PER_INT; \r\n                totalManaRegen += regen;\r\n            }\r\n\r\n            let bonusIntellect = tryGetItemSpecialValue(item, \"bonus_intellect\");\r\n            if (bonusIntellect) {\r\n                let regen = bonusIntellect * MANA_REGEN_PER_INT; \r\n                totalManaRegen += regen;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalManaRegen += bonusAllStats * MANA_REGEN_PER_INT;\r\n            }\r\n\r\n            // If bloodstone mp regen per charge\r\n            let regenPerCharge = tryGetItemSpecialValue(item, \"regen_per_charge\");\r\n            if (item.extra?.charges && regenPerCharge) {\r\n                let bloodstoneCharges = item.extra.charges;\r\n                totalManaRegen += regenPerCharge * bloodstoneCharges;\r\n            }\r\n\r\n            /// any mana regen percentage multiplier\r\n            let manaRegenAmp = tryGetItemSpecialValue(item, \"mana_regen_multiplier\");\r\n            if (manaRegenAmp) {\r\n                totalManaRegenPercentAmp += manaRegenAmp;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let bonusInt = tryGetNeutralSpecialValue(neutral, \"bonus_intelligence\");\r\n        if (bonusInt) {\r\n            let manaRegen = bonusInt * MANA_REGEN_PER_INT;\r\n            totalManaRegen += manaRegen;\r\n        }\r\n\r\n        let bonusIntellect = tryGetNeutralSpecialValue(neutral, \"bonus_intellect\");\r\n        if (bonusIntellect) {\r\n            let regen = bonusIntellect * MANA_REGEN_PER_INT; \r\n            totalManaRegen += regen;\r\n        }\r\n\r\n        let bonusAllStats = tryGetNeutralSpecialValue(neutral, \"bonus_all_stats\");\r\n        if (bonusAllStats) {\r\n            totalManaRegen += bonusAllStats * MANA_REGEN_PER_INT;\r\n        }\r\n\r\n        let bonusRegen = tryGetNeutralSpecialValue(neutral, \"mana_regen\");\r\n        if (bonusRegen) {\r\n            totalManaRegen += bonusRegen;\r\n        }\r\n    }\r\n\r\n    if(abilities && abilities.length > 0) {\r\n        for (let ability of abilities) {\r\n            let manaRegen = tryGetAbilitySpecialAbilityValue(ability, \"mana_regen\", 1);\r\n            if (manaRegen) {\r\n                totalManaRegen += manaRegen;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            // Only includes bonus mana point regen talents\r\n            if(talent.includes(\"bonus_mp_regen\")) {\r\n                let value = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (value) {\r\n                    totalManaRegen += parseFloat(value);\r\n                }\r\n            } else if (talent.includes(\"bonus_intelligence\")) {\r\n                let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAllStats) {\r\n                    totalManaRegen += bonusAllStats * MANA_REGEN_PER_INT;\r\n                }\r\n            } else if (talent.includes(\"bonus_all_stats\")) {\r\n                let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAllStats) {\r\n                    totalManaRegen += bonusAllStats * MANA_REGEN_PER_INT;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    let totalMP = totalManaRegen * (totalManaRegenPercentAmp / 100);\r\n    return totalMP.toFixed(1);\r\n}\r\n\r\n// Calculates the main armor of the hero\r\n// Each point of agility increases a hero's armor by 0.167 (1/6) https://dota2.gamepedia.com/Armor\r\nexport function calculateMainArmor(hero, level, items, neutral, abilities, talents, abilityLevels) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }\r\n\r\n    let ARMOR_PER_AGI = 0.167;\r\n    let baseArmor = parseInt(hero.ArmorPhysical);\r\n    let baseAgility = parseInt(hero.AttributeBaseAgility);\r\n    let agiPerLevel = parseFloat(hero.AttributeAgilityGain);\r\n\r\n    // Determine bonus agility from perLevel. Then work out main armor\r\n    let agiPer = (agiPerLevel * (level - 1));\r\n    let totalArmor = baseArmor + ((baseAgility + agiPer) * ARMOR_PER_AGI);\r\n    let totalBonusArmor = 0;\r\n    \r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            let bonusArmor = tryGetItemSpecialValue(item, \"bonus_armor\");\r\n            if (bonusArmor) {\r\n                totalBonusArmor += bonusArmor;\r\n            }\r\n\r\n            let bonusAgility = tryGetItemSpecialValue(item, \"bonus_agility\");\r\n            if (bonusAgility) {\r\n                let armor = bonusAgility * ARMOR_PER_AGI;\r\n                totalArmor += armor;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                let armor = bonusAllStats * ARMOR_PER_AGI;\r\n                totalArmor += armor;\r\n            }\r\n        }\r\n    }\r\n    \r\n    if(neutral) {\r\n        /// If item is nether_shawl, armor needs to be removed\r\n        if (neutral.item === \"item_nether_shawl\") {\r\n            let bonusArmor = tryGetNeutralSpecialValue(neutral, \"bonus_armor\");\r\n            if (bonusArmor) {\r\n                totalBonusArmor -= bonusArmor;\r\n            }\r\n        } else {\r\n            let bonusArmor = tryGetNeutralSpecialValue(neutral, \"bonus_armor\");\r\n            if (bonusArmor) {\r\n                totalBonusArmor += bonusArmor;\r\n            }\r\n        }\r\n        \r\n\r\n        let armorBonus = tryGetNeutralSpecialValue(neutral, \"armor_bonus\");\r\n        if (armorBonus) {\r\n            totalBonusArmor += armorBonus;\r\n        }\r\n\r\n        let bonusAgi = tryGetNeutralSpecialValue(neutral, \"bonus_agility\");\r\n        if (bonusAgi) {\r\n            totalArmor += bonusAgi * ARMOR_PER_AGI;\r\n        }\r\n\r\n        let bonusAllStats = tryGetNeutralSpecialValue(neutral, \"bonus_all_stats\");\r\n        if (bonusAllStats) {\r\n            let armor = bonusAllStats * ARMOR_PER_AGI;\r\n            totalArmor += armor;\r\n        }\r\n    }\r\n\r\n    if (abilities && abilities.length > 0 && abilityLevels) {\r\n        for(let i in abilities) {\r\n            // Determine ability & level\r\n            let ability = abilities[i];\r\n            let abilityLevel = abilityLevels[i]?.level ?? 1;\r\n\r\n            /// if a passive, add as bonus armor depending on ability level\r\n            let abilInfo = getAbilityInfoFromName(ability);\r\n            if (isAbilityBehaviour(abilInfo.AbilityBehavior, [ EAbilityBehaviour.PASSIVE ])) {\r\n                // Get bonus_armor value with abilityLevel\r\n                let bonusArmor = tryGetAbilitySpecialAbilityValue(ability, \"bonus_armor\", abilityLevel);\r\n                if (bonusArmor) {\r\n                    totalBonusArmor += bonusArmor;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if(talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            if (talent.includes(\"bonus_armor\")) {\r\n                let bonusArmor = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusArmor) {\r\n                    totalBonusArmor += bonusArmor;\r\n                }\r\n            } else if (talent.includes(\"bonus_agility\")) {\r\n                let bonusAgility = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAgility) {\r\n                    totalArmor += bonusAgility * ARMOR_PER_AGI;\r\n                }\r\n            } else if (talent.includes(\"bonus_all_stats\")) {\r\n                let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAllStats) {\r\n                    totalArmor += bonusAllStats * ARMOR_PER_AGI;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Round to one decimal place\r\n    return {\r\n        armor: totalArmor,\r\n        additional: totalBonusArmor,\r\n    };\r\n}\r\n\r\n/// Returns the total amount of spell amplification as a percentage applied to the hero\r\nexport function calculateTotalSpellAmp (talents, items, neutral) {\r\n    let totalSpellAmp = 0;\r\n    \r\n    // Determine if any talents provide spell amp\r\n    if (talents && talents.length > 0) {\r\n        let ampTalent = talents.find(element => element.includes(\"spell_amplify\"));\r\n        if (ampTalent) {\r\n            let talentInfo = DOTAAbilities[ampTalent.name];\r\n            if (talentInfo) {\r\n                let spellAmpInfo = talentInfo.AbilitySpecial.find(element => element.value);\r\n                if (spellAmpInfo) {\r\n                    let spellAmpAmt = parseInt(spellAmpInfo.value);\r\n                    totalSpellAmp += spellAmpAmt;\r\n\r\n                    //console.log(`Talent ${ampTalent.name} provides ${spellAmpAmt}% spell amp`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Determine if current neutral item provides any spell amplification\r\n    if (neutral) {\r\n        let foundNeutral = getItemInfoFromName(neutral.item);\r\n        if (foundNeutral) {\r\n            let spellAmpAmount = getAbilitySpecialValue(foundNeutral, \"spell_amp\");\r\n            if (spellAmpAmount) {\r\n                totalSpellAmp += spellAmpAmount;\r\n                //console.log(`Neutral ${neutral.item} provides ${spellAmpAmount}% spell amp`);\r\n            }\r\n        }\r\n    }\r\n\r\n    /// Determine if any items provide spell amp\r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            let spellAmpAmount = tryGetItemSpecialValue(item, \"spell_amp\");\r\n            if (spellAmpAmount) {\r\n                totalSpellAmp += spellAmpAmount;\r\n                //console.log(`Item ${items[i].item} provides ${spellAmpAmt}% spell amp`);\r\n            }\r\n\r\n            let bonusSpellAmp = tryGetItemSpecialValue(item, \"bonus_spell_amp\");\r\n            if (bonusSpellAmp) {\r\n                totalSpellAmp += bonusSpellAmp;\r\n            }\r\n\r\n            let ampPerCharge = tryGetItemSpecialValue(item, \"amp_per_charge\");\r\n            if (item.extra?.charges && ampPerCharge) {\r\n                let bloodstoneCharges = item.extra.charges;\r\n                totalSpellAmp += ampPerCharge * bloodstoneCharges;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    return totalSpellAmp.toFixed(1);\r\n}\r\n\r\nexport function calculateStatusResist(items, neutral) {\r\n    let totalStatusResist = 0.0;\r\n\r\n    if (items && items.length > 0) {\r\n        for(let i = 0; i < items.length; i++) {\r\n            if (items[i].item) {\r\n                let itemInfo = getItemInfoFromName(items[i].item);\r\n                if (itemInfo) {\r\n                    let statusResistAmount = getAbilitySpecialValue(itemInfo.AbilitySpecial, \"status_resistance\");\r\n                    if (statusResistAmount) {\r\n                        totalStatusResist += statusResistAmount;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let statusResistAmount = tryGetNeutralSpecialValue(neutral, \"status_resistance\");\r\n        if (statusResistAmount) {\r\n            totalStatusResist += statusResistAmount;\r\n        }\r\n    }\r\n\r\n    return totalStatusResist;\r\n}\r\n\r\nexport function calculateMagicResist (items, neutral, abilities, talents, abilityLevels) {\r\n    // Formula from Wiki\r\n    // Total magic resistance = 1 − ((1 − natural resistance) × (1 − first resistance bonus) × (1 − second resistance bonus) × (1 + first resistance reduction) × (1 + second resistance reduction))\r\n    \r\n    // Array of magic resistance values\r\n    let resistanceBonuses = [ ];\r\n    \r\n    if (DOTAHeroes && DOTAHeroes?.npc_dota_hero_base?.MagicalResistance) {\r\n        let baseResist = parseInt(DOTAHeroes.npc_dota_hero_base.MagicalResistance);\r\n        resistanceBonuses.push(baseResist);\r\n    }\r\n\r\n    if (items && items.length > 0) {\r\n        for(let i = 0; i < items.length; i++) {\r\n            let itemInfo = getItemInfoFromName(items[i].item);\r\n            if (itemInfo) {\r\n                let magicResistAmount = getAbilitySpecialValue(itemInfo.AbilitySpecial, \"bonus_magic_resistance\");\r\n                if (magicResistAmount) {\r\n                    resistanceBonuses.push(magicResistAmount);\r\n                }\r\n\r\n                magicResistAmount = getAbilitySpecialValue(itemInfo.AbilitySpecial, \"magic_resistance\");\r\n                if (magicResistAmount) {\r\n                    resistanceBonuses.push(magicResistAmount);\r\n                }\r\n\r\n                magicResistAmount = getAbilitySpecialValue(itemInfo.AbilitySpecial, \"bonus_magical_armor\");\r\n                if (magicResistAmount) {\r\n                    resistanceBonuses.push(magicResistAmount);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let magicResistAmount = tryGetNeutralSpecialValue(neutral, \"magic_resistance\");\r\n        if (magicResistAmount) {\r\n            resistanceBonuses.push(magicResistAmount);\r\n        }\r\n    }\r\n\r\n    if (abilities && abilities.length > 0 && abilityLevels) { \r\n        for(let i in abilities) {\r\n            let abilityName = abilities[i];\r\n            let abilityLevel = abilityLevels[i]?.level ?? 1;\r\n\r\n            let magicResistAmount = tryGetAbilitySpecialAbilityValue(abilityName, \"magic_resistance\", abilityLevel);\r\n            if (magicResistAmount) {\r\n                resistanceBonuses.push(magicResistAmount);\r\n            }\r\n            \r\n            magicResistAmount = tryGetAbilitySpecialAbilityValue(abilityName, \"bonus_magic_resistance\", abilityLevel);\r\n            if (magicResistAmount) {\r\n                resistanceBonuses.push(magicResistAmount);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (talents) {\r\n        for (let talent of talents) {\r\n            let magicResist = tryGetTalentValueInclude(talent, \"magic_resistance\");\r\n            if (magicResist) {\r\n                resistanceBonuses.push(magicResist);\r\n            }\r\n        }\r\n    }\r\n\r\n    // magic resistance stacks multiplicatively\r\n    let percent = calculateMultiplicativeStackingTotal(resistanceBonuses);\r\n    return percent.toFixed(2);\r\n}\r\n\r\n/// Calculates the total magic resistance of the hero\r\n/// https://dota2.gamepedia.com/Magic_resistance\r\nexport function calculatePhysicalResist (totalArmor) {\r\n    // Formula from https://www.dotabuff.com/blog/2018-11-30-understanding-720-armor-changes\r\n    //( 0.052 * armor ) ÷ ( 0.9 + 0.048 * |armor|)\r\n    let physResist = (0.052 * totalArmor) / (0.9 + 0.048 * Math.abs(totalArmor));\r\n    let percent = physResist * 100;\r\n    return percent < 0 ? 0 : percent.toFixed(0);\r\n}\r\n\r\n/// Calculates evasion. Every instance stacks multiplicatively\r\nexport function calculateEvasion(items, neutral, abilities, talents, abilityLevels) {\r\n    let evasionInstances = [];\r\n\r\n    if (abilities && abilities.length > 0 && abilityLevels) {\r\n        for (let i in abilities) {\r\n            let abilityName = abilities[i];\r\n            let abilityLevel = abilityLevels[i]?.level ?? 1;\r\n\r\n            let evasionBonus = tryGetAbilitySpecialAbilityValue(abilityName, \"bonus_evasion\", abilityLevel);\r\n            if (evasionBonus) {\r\n                evasionInstances.push(evasionBonus);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            let bonusEvasion = tryGetTalentValueInclude(talent, \"bonus_evasion\");\r\n            if (bonusEvasion) {\r\n                evasionInstances.push(bonusEvasion);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (items && items.length > 0) {\r\n        for(let i = 0; i < items.length; i++) {\r\n            if (items[i].item) {\r\n                let itemInfo = getItemInfoFromName(items[i].item);\r\n                if (itemInfo) {\r\n                    let evasionAmount = getAbilitySpecialValue(itemInfo.AbilitySpecial, \"bonus_evasion\");\r\n                    if (evasionAmount) {\r\n                        evasionInstances.push(evasionAmount);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let evasion = tryGetNeutralSpecialValue(neutral, \"evasion\");\r\n        if (evasion) {\r\n            evasionInstances.push(evasion);\r\n        }\r\n    }\r\n\r\n    // Calculate multiplicative stacking calculation\r\n    let actualEvasion = calculateMultiplicativeStackingTotal(evasionInstances);\r\n    return actualEvasion.toFixed(2);\r\n}\r\n\r\n/// Returns the minimum and maximum right click damage of a hero\r\n// atkMin, atkMax, primaryAttributeStats, heroLevel = 1\r\nexport function calculateRightClickDamage(hero, level, items, neutral, abilities, talents, abilityLevels) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }\r\n    \r\n    let heroMainAttribute = getPrimaryAttribute(hero);\r\n    let atkMin = parseInt(hero.AttackDamageMin);\r\n    let atkMax = parseInt(hero.AttackDamageMax);\r\n    let primaryAttributeStats = getPrimaryAttributeStats(hero);\r\n\r\n    // Check if the hero attack is melee or ranged\r\n    let heroIsMelee = isHeroAttackCapability(hero, EAttackCapabilities.MELEE);\r\n\r\n    // Work out how much bonus attack hero recieves from their primary attribute\r\n    let totalPrimaryAttribute = primaryAttributeStats.base + (primaryAttributeStats.perLevel * (level - 1));\r\n    // Calc additional damage from sources\r\n    let totalAdditional = 0;\r\n\r\n    /* Iterate over all items, neutral, abilities and talents to\r\n        get all primary attribute and all stat bonuses\r\n        */\r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            let allAttrKeys = primaryAttributeToItemBonusKey(heroMainAttribute);\r\n            for(let key of allAttrKeys) {\r\n                let bonusPrimaryAttr = tryGetItemSpecialValue(item, key);\r\n                if (bonusPrimaryAttr) {\r\n                    totalPrimaryAttribute += bonusPrimaryAttr;\r\n                }\r\n            }\r\n\r\n            let bonusPrimaryStat = tryGetItemSpecialValue(item, \"bonus_primary_stat\");\r\n            if (bonusPrimaryStat) {\r\n                totalPrimaryAttribute += bonusPrimaryStat;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalPrimaryAttribute += bonusAllStats;\r\n            }\r\n\r\n            let bonusDmg = tryGetItemSpecialValue(item, \"bonus_damage\");\r\n            if (bonusDmg) {\r\n                totalAdditional += bonusDmg;\r\n            }\r\n\r\n            if (heroIsMelee) {\r\n                let bonusMeleeDmg = tryGetItemSpecialValue(item, \"bonus_damage_melee\");\r\n                if (bonusMeleeDmg) {\r\n                    totalAdditional += bonusMeleeDmg;\r\n                }\r\n            } else {\r\n                let bonusRangedDmg = tryGetItemSpecialValue(item, \"bonus_damage_ranged\");\r\n                if (bonusRangedDmg) {\r\n                    totalAdditional += bonusRangedDmg;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (abilities && abilities.length > 0 && abilityLevels) {\r\n        for (let i in abilities) {\r\n            let abilityName = abilities[i];\r\n            let abilityLevel = abilityLevels[i]?.level ?? 1;\r\n\r\n            // Add ability dmg if is a passive ability\r\n            let dmg = tryGetAbilitySpecialAbilityValue(abilityName, \"bonus_damage\", abilityLevel);\r\n            if (isAbilityPassive(abilityName) && dmg) {\r\n                totalAdditional += dmg;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let allAttrKeys = primaryAttributeToItemBonusKey(heroMainAttribute);\r\n        for(let key of allAttrKeys) {\r\n            let bonusPrimaryAttr = tryGetNeutralSpecialValue(neutral, key);\r\n            if (bonusPrimaryAttr) {\r\n                totalPrimaryAttribute += bonusPrimaryAttr;\r\n            }\r\n        }\r\n\r\n        let bonusPrimaryStat = tryGetNeutralSpecialValue(neutral, \"primary_stat\");\r\n        if (bonusPrimaryStat) {\r\n            totalPrimaryAttribute += bonusPrimaryStat;\r\n        }\r\n\r\n        let bonusAllStats = tryGetNeutralSpecialValue(neutral, \"bonus_all_stats\");\r\n        if (bonusAllStats) {\r\n            totalPrimaryAttribute += bonusAllStats;\r\n        }\r\n\r\n        let bonusDmg = tryGetNeutralSpecialValue(neutral, \"bonus_damage\");\r\n        if (bonusDmg) {\r\n            totalAdditional += bonusDmg;\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            let allAttrKeys = primaryAttributeToItemBonusKey(heroMainAttribute);\r\n            for(let key of allAttrKeys) {\r\n                if (talent.includes(key)) {\r\n                    let bonusPrimaryAttr = tryGetNeutralSpecialValue(talent, \"value\");\r\n                    if (bonusPrimaryAttr) {\r\n                        totalPrimaryAttribute += bonusPrimaryAttr;\r\n                    }\r\n                }\r\n            }\r\n            \r\n            if (talent.includes(\"bonus_all_stats\")) {\r\n                let allStats = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (allStats) {\r\n                    totalPrimaryAttribute += allStats;\r\n                }\r\n            } else if (talent.includes(\"bonus_attack_damage\")) {\r\n                let bonusDmg = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusDmg) {\r\n                    totalAdditional += bonusDmg;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /// Damage from primary attribute counts as part of the Min-Max\r\n    /// whereas bonus damage (+5 damage) from sources count as additional\r\n\r\n    let min = atkMin + totalPrimaryAttribute;\r\n    let max = atkMax + totalPrimaryAttribute;\r\n\r\n    return {\r\n        /// minimum attack damage of the hero\r\n        min: Math.floor(min),\r\n        /// maximum attack damage of the hero\r\n        max: Math.floor(max),\r\n        additional: totalAdditional,\r\n    };\r\n}\r\n\r\n/// Returns info on the attack time of the hero\r\nexport function calculateAttackTime(hero, level, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }\r\n    \r\n    let MAX_ATTACK_SPEED = 700;\r\n\r\n    // Check if hero has different attack rate or attack speed than base hero\r\n    let totalAttackSpeed = parseInt(getDotaBaseHero()?.BaseAttackSpeed);\r\n\r\n    /// Get base agi stats\r\n    let agiStats = getSpecificAttributeStats(EAttributes.ATTR_AGILITY, hero);\r\n    let baseAgi = agiStats.base;\r\n    let agiPerLevel = agiStats.perLevel;\r\n\r\n    let totalAgi = baseAgi + (agiPerLevel * (level - 1));\r\n\r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            let bonusAttackSpeed = tryGetItemSpecialValue(item, \"bonus_attack_speed\");\r\n            if (bonusAttackSpeed) {\r\n                totalAttackSpeed += bonusAttackSpeed;\r\n            }\r\n\r\n            let bonusAgility = tryGetItemSpecialValue(item, \"bonus_agility\");\r\n            if (bonusAgility) {\r\n                totalAgi += bonusAgility;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalAgi += bonusAllStats;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let bonusAttackSpeed = tryGetNeutralSpecialValue(neutral, \"bonus_attack_speed\");\r\n        if (bonusAttackSpeed) {\r\n            totalAttackSpeed += bonusAttackSpeed;\r\n        }\r\n\r\n        let attackSpeed = tryGetNeutralSpecialValue(neutral, \"attack_speed\");\r\n        if (attackSpeed) {\r\n            totalAttackSpeed += attackSpeed;\r\n        }\r\n    }\r\n\r\n    // Only actives that gives attack speed bonuses\r\n    // if (abilities && abilities.length > 0) {\r\n    // }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            let bonusAttackSpeed = tryGetTalentValueInclude (talent, \"bonus_attack_speed\");\r\n            if (bonusAttackSpeed) {\r\n                totalAttackSpeed += bonusAttackSpeed;\r\n            }\r\n\r\n            let bonusAgility = tryGetTalentValueInclude(talent, \"bonus_all_stats\");\r\n            if (bonusAgility) {\r\n                totalAgi += bonusAgility;\r\n            }\r\n\r\n            bonusAgility = tryGetTalentValueInclude(talent, \"bonus_agility\");\r\n            if (bonusAgility) {\r\n                totalAgi += bonusAgility;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// Check that max atk speed hasn't been reached\r\n    if ((totalAttackSpeed + totalAgi) > MAX_ATTACK_SPEED) {\r\n        // Use totalAttackSpeed at max if so, reset agi since 1 agi = 1 atk speed\r\n        totalAttackSpeed = MAX_ATTACK_SPEED;\r\n        totalAgi = 0;\r\n    }\r\n\r\n    let attacksPerSec = ((totalAttackSpeed + totalAgi) * 0.01) / 1.7;\r\n    let attackTime = 1.7 / ((totalAttackSpeed + totalAgi) * 0.01);\r\n    attackTime = 1 / attacksPerSec;\r\n\r\n    let atkSpeed = totalAttackSpeed + totalAgi;\r\n\r\n    return {\r\n        /// Amount of seconds inbetween attacks\r\n        attackTime: attackTime.toFixed(2),\r\n        /// Amount of attacks per second\r\n        attacksPerSecond: attacksPerSec.toFixed(2),\r\n        /// Attack speed value shown in UI of dota\r\n        attackSpeed: atkSpeed.toFixed(0),\r\n    };\r\n}\r\n\r\n/// Calculates how much output damage an ability will do to an enemy, factoring in any items\r\nexport function calculateSpellDamage(abilityName, abilityInfo, abilityLevel, items, neutral, talents) {\r\n    if (!abilityLevel || !abilityInfo) {\r\n        return -1;\r\n    }\r\n\r\n    // Get normal dmg output of ability\r\n    let abilityDamageInfo = getAbilityOutputDamage(abilityInfo, abilityLevel);\r\n    \r\n    // Add up spellAmp from all bonuses to calculate at end\r\n    let totalSpellAmpPercent = 0;\r\n\r\n    /// Value bonus from talent\r\n    let talentBonus = 0;\r\n\r\n    if (items) {\r\n        // Add item spell damage increase\r\n        for(let item of items) {\r\n            let spellAmp = tryGetItemSpecialValue(item, \"spell_amp\");\r\n            if (spellAmp) {\r\n                totalSpellAmpPercent += spellAmp;\r\n            }\r\n\r\n            let bonusSpellAmp = tryGetItemSpecialValue(item, \"bonus_spell_amp\");\r\n            if (bonusSpellAmp) {\r\n                totalSpellAmpPercent += bonusSpellAmp;\r\n            }\r\n\r\n            // get current bloodstone charges and amp correctly\r\n            let chargeCount = item.extra?.charges;\r\n            let ampPerCharge = tryGetItemSpecialValue(item, \"amp_per_charge\");\r\n            if (ampPerCharge && chargeCount) {\r\n                totalSpellAmpPercent += (ampPerCharge * chargeCount);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        //Add neutral item spell dmg\r\n        let neutralInfo = getItemInfoFromName(neutral.item);\r\n        if (neutralInfo && neutralInfo.AbilitySpecial) {\r\n            for (let i = 0; i < neutralInfo.AbilitySpecial.length; i++) {\r\n                let special = neutralInfo.AbilitySpecial[i];\r\n                // Spell amp\r\n                if (special.bonus_spell_amp) {\r\n                    let bonusSpellAmp = parseInt(special.bonus_spell_amp);\r\n                    totalSpellAmpPercent += bonusSpellAmp; \r\n                }\r\n\r\n                if (special.spell_amp) {\r\n                    let bonusSpellAmp = parseInt(special.spell_amp);\r\n                    totalSpellAmpPercent += bonusSpellAmp;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        // Add spell amplify from any selected talents\r\n        for(let talent of talents) {\r\n            if (talent.includes(\"spell_amplify\")) {\r\n                let ampTalentValue = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (ampTalentValue) {\r\n                    totalSpellAmpPercent += ampTalentValue;\r\n                }\r\n            } \r\n            /// if a unique talent specific to a hero ability\r\n            else if (talent.includes(\"special_bonus_unique\")) {\r\n                /// Search Abilities_English.json for string of talent to \r\n                /// check if it is a damage talent modifier and apply\r\n                if (isDamageTalent(talent)) {\r\n                    let linkedAbility = tryGetTalentSpecialAbilityValue(talent, \"ad_linked_ability\");\r\n\r\n                    // if linked ability is equal to current one\r\n                    if (linkedAbility && linkedAbility === abilityName) {\r\n                        let value = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                        if (value) {\r\n                            talentBonus = value;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    let totalAbilDmg = abilityDamageInfo.damage + talentBonus;\r\n    let abilityDamage = calculateSpellAmp(totalAbilDmg, totalSpellAmpPercent);\r\n\r\n    return {\r\n        damage: abilityDamage === 0 ? null : abilityDamage,\r\n        isPercent: abilityDamageInfo.isPercent,\r\n    };\r\n}\r\n\r\n/// Calculates and applies spell amp to the spell damage and returns the result\r\nexport function calculateSpellAmp (spellDamage, spellAmpPercent) {\r\n    return spellDamage + ((spellDamage / 100) * spellAmpPercent);\r\n}\r\n\r\n/// Calculates ability mana cost with items, neutrals and talents that contain reductions\r\nexport function calculateManaCost(abilityInfo, abilityLevel, items, neutral, talents) {\r\n    if (abilityLevel <= 0) {\r\n        return null;\r\n    }\r\n    \r\n    let manaCost = null;\r\n\r\n    // Get inital mana cost amount\r\n    if (abilityInfo && abilityInfo.AbilityManaCost) {\r\n        manaCost = parseAbilityValueByLevel(abilityInfo.AbilityManaCost, abilityLevel);\r\n    }\r\n\r\n    // Determine mana reductions from items, neutral, talents\r\n    // Take all percentages and calculate at end\r\n    let totalManaCostReducePercent = 0;\r\n\r\n    if (items) {\r\n        for(let item of items) {\r\n            let itemInfo = getItemInfoFromName(item.item);\r\n            if(itemInfo) {\r\n                let manaCostReduceAmount = getAbilitySpecialValue(itemInfo.AbilitySpecial, \"manacost_reduction\");\r\n                if(manaCostReduceAmount) {\r\n                    totalManaCostReducePercent += manaCostReduceAmount;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let neutralInfo = getItemInfoFromName(neutral.item);\r\n        if (neutralInfo) {\r\n            let costReductionAmount = getAbilitySpecialValue(neutralInfo.AbilitySpecial, \"manacost_reduction\");\r\n            if (costReductionAmount) {\r\n                totalManaCostReducePercent += costReductionAmount;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (talents) {\r\n        for(let talent of talents) {\r\n            // Only apply mana reducing talents\r\n            if (talent.includes(\"mana_reduction\")) {\r\n                let reduceAmount = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (reduceAmount) {\r\n                    totalManaCostReducePercent += reduceAmount;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // If ability has a mana value and has mana reductions\r\n    if (manaCost && totalManaCostReducePercent > 0) {\r\n        let removeManaAmt = (manaCost / 100) * totalManaCostReducePercent;\r\n        manaCost -= removeManaAmt;\r\n    }\r\n\r\n    return manaCost;\r\n}\r\n\r\n/// Calculates ability cooldown with items, neutrals, talents and abilities\r\n/// https://liquipedia.net/dota2/Cooldown_Reduction\r\nexport function calculateAbilityCooldown(abilityName, abilityInfo, abilityLevel, items, neutral, talents) {\r\n    if (abilityLevel <= 0) {\r\n        return null;\r\n    }\r\n    \r\n    let cooldown = null;\r\n    let charges = null;\r\n    let fixedAmtReductionSeconds = 0;\r\n\r\n    if (abilityInfo && abilityInfo.AbilityCooldown) {\r\n        cooldown = parseAbilityValueByLevel(abilityInfo.AbilityCooldown, abilityLevel);\r\n\r\n        /// if ability uses charges, use charge cooldown\r\n        if (cooldown === 0 && abilityInfo.AbilityCharges && abilityInfo.AbilityChargeRestoreTime) {\r\n            cooldown = parseInt(abilityInfo.AbilityChargeRestoreTime);\r\n            charges = parseInt(abilityInfo.AbilityCharges);\r\n        }\r\n\r\n        // if AbilityInfo has a Scepter upgrade and items contains scepter\r\n        let requiresScepter = getAbilitySpecialAbilityValue(abilityInfo, \"RequiresScepter\") === \"1\";\r\n        if (requiresScepter && itemsContainsScepter(items)) {\r\n            let scepterCharges = getIncludesAbilitySpecialAbilityValue(abilityInfo, \"charges\", abilityLevel);\r\n            charges = scepterCharges;\r\n        }\r\n    }\r\n\r\n    let allReductions = [];\r\n    if (items) {\r\n        for (let item of items) {\r\n            if (item && item.item) {\r\n                let itemInfo = getItemInfoFromName(item.item);\r\n                if (itemInfo) {\r\n                    let bonusCooldown = getAbilitySpecialValue(itemInfo.AbilitySpecial, \"bonus_cooldown\");\r\n                    if (bonusCooldown) {\r\n                        allReductions.push(bonusCooldown);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let neutralInfo = getItemInfoFromName(neutral.item);\r\n        if (neutralInfo) {\r\n            let bonusCooldown = getAbilitySpecialValue(neutralInfo.AbilitySpecial, \"bonus_cooldown\");\r\n            if (bonusCooldown) {\r\n                allReductions.push(bonusCooldown);\r\n            } \r\n        }\r\n    }\r\n\r\n    if (talents) {\r\n        for(let talent of talents) {\r\n            // Ignore talent if it isn't a cd reduction one\r\n            if (talent.includes(\"cooldown_reduction\")) {\r\n                let reduction = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (reduction) {\r\n                    allReductions.push(reduction);\r\n                }\r\n            }\r\n            else if (talent.includes(\"special_bonus_unique\")) {\r\n                if (isCooldownTalent(talent)) {\r\n                    let linkedAbility = tryGetTalentSpecialAbilityValue(talent, \"ad_linked_ability\", 1, false);\r\n                    if (linkedAbility === abilityName) {\r\n                        let value = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                        if (value) {\r\n                            fixedAmtReductionSeconds += value;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /// Remove any fixed amount cooldown reductions first before\r\n    /// applying any other reductions\r\n    let totalCooldown = cooldown - fixedAmtReductionSeconds;\r\n\r\n    let sourceOfReductions = [];\r\n    for(let reduction of allReductions) {\r\n        let decimal = reduction / 100;\r\n        sourceOfReductions.push((1 - decimal));\r\n    }\r\n\r\n    for(let reduce of sourceOfReductions) {\r\n        totalCooldown *= reduce;\r\n    }\r\n\r\n    return {\r\n        charges: charges,\r\n        cooldown: totalCooldown > 0 ? totalCooldown.toFixed(2) : null,\r\n    };\r\n}\r\n\r\n/// Calculates the movement speed of the hero, factoring in their items, neutral, abilities and talents\r\nexport function calculateMoveSpeed (hero, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }\r\n\r\n    let baseSpeed = parseInt(hero.MovementSpeed);\r\n    let flatBonus = 0;\r\n    let percentageBasedBonuses = 0;\r\n\r\n    if (items && items.length > 0) {\r\n        for (let item of items) {\r\n            let moveSpeed = tryGetItemSpecialValue(item, \"bonus_movement_speed\");\r\n            if (moveSpeed) {\r\n                flatBonus += moveSpeed;\r\n            }\r\n            \r\n            let bonusMovement = tryGetItemSpecialValue(item, \"bonus_movement\");\r\n            if (bonusMovement) {\r\n                flatBonus += bonusMovement;\r\n            }\r\n\r\n            let moveSpeedPercentBonus = tryGetItemSpecialValue(item, \"movement_speed_percent_bonus\");\r\n            if (moveSpeedPercentBonus) {\r\n                percentageBasedBonuses += moveSpeedPercentBonus;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let bonusMoveSpeed = tryGetNeutralSpecialValue(neutral, \"bonus_movement_speed\");\r\n        if (bonusMoveSpeed) {\r\n            flatBonus += bonusMoveSpeed;\r\n        }\r\n\r\n        let moveSpeedPercentBonus = tryGetNeutralSpecialValue(neutral, \"movement_speed_percent_bonus\");\r\n        if (moveSpeedPercentBonus) {\r\n            percentageBasedBonuses += moveSpeedPercentBonus;\r\n        }\r\n    }\r\n\r\n    /// Abilities are actives so dont include since no way in UI to activate an ability yet\r\n    // if (abilities && abilities.length > 0) {\r\n    //     for(let ability of abilities) {\r\n    //         let bonusMoveSpeed = tryGetAbilitySpecialAbilityValue(ability, \"bonus_movespeed\");\r\n    //         if (bonusMoveSpeed) {\r\n    //             flatBonus += bonusMoveSpeed;\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            if (talent.includes(\"bonus_movement_speed\")) {\r\n                let bonusSpeed = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusSpeed) {\r\n                    flatBonus += bonusSpeed;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    let additional = flatBonus;\r\n    // Calculate base plus flat bonuses\r\n    let combinedMS = baseSpeed + flatBonus;\r\n    // If have any percentaged based ms increases\r\n    if (percentageBasedBonuses > 0) {\r\n        // Determine percentage bonus and add to existing flat bonus\r\n        // Convert value to 0.00 something to get percentage\r\n        let decimalPercent = (percentageBasedBonuses / 100);\r\n        additional += combinedMS * decimalPercent;\r\n    }\r\n    return {\r\n        baseSpeed: baseSpeed,\r\n        additional: additional,\r\n    };\r\n}\r\n\r\nexport function calculateAttackRange (hero, level, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }\r\n\r\n    let isHeroRanged = isHeroAttackCapability(hero, EAttackCapabilities.RANGED);\r\n\r\n    let baseRange = parseInt(hero.AttackRange);\r\n    let totalAttackRange = baseRange;\r\n\r\n    // Dont add bonuses if hero isn't ranged\r\n    if (isHeroRanged) {\r\n        if (items && items.length > 0) {\r\n            for(let item of items) {\r\n                let baseRange = tryGetItemSpecialValue(item, \"base_attack_range\");\r\n                if (baseRange) {\r\n                    totalAttackRange += baseRange;\r\n                }\r\n            }\r\n        }\r\n    \r\n        if (neutral) {\r\n            let rangeBonus = tryGetNeutralSpecialValue(neutral, \"attack_range_bonus\");\r\n            if (rangeBonus) {\r\n                totalAttackRange += rangeBonus;\r\n            }\r\n    \r\n            let bonusAttackRange = tryGetNeutralSpecialValue(neutral, \"bonus_attack_range\");\r\n            if (bonusAttackRange) {\r\n                totalAttackRange += bonusAttackRange;\r\n            }\r\n        }\r\n\r\n        if (abilities && abilities.length > 0) {\r\n            for(let ability of abilities) {\r\n                let bonusAttackRange = tryGetAbilitySpecialAbilityValue(ability, \"bonus_attack_range\", 1);\r\n                if (bonusAttackRange) {\r\n                    totalAttackRange += bonusAttackRange;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (talents && talents.length > 0) {\r\n            for(let talent of talents) {\r\n                if (talent.includes(\"bonus_attack_range\")) {\r\n                    let bonusAttackRange = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                    if (bonusAttackRange) {\r\n                        totalAttackRange += bonusAttackRange;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        // Melee units, apply any melee attack range bonuses\r\n        if (neutral) {\r\n            let bonusMeleeAttackRange = tryGetNeutralSpecialValue(neutral, \"melee_attack_range\");\r\n            if (bonusMeleeAttackRange) {\r\n                totalAttackRange += bonusMeleeAttackRange;\r\n            }\r\n        }\r\n    }\r\n\r\n    return totalAttackRange;\r\n}\r\n\r\n/// Calculates the correct attribute stats for a given hero\r\nexport function calculateAttribute(attribute, hero, level, items, neutral, abilities, talents, abilityLevels) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }\r\n\r\n    let attributeStats = getSpecificAttributeStats(attribute, hero);\r\n    let baseAttribute = attributeStats.base;\r\n    let attributePerLevel = attributeStats.perLevel;\r\n\r\n    let totalAttribute = baseAttribute + (attributePerLevel * (level - 1));\r\n    let additionalAttribute = 0;\r\n\r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            let itmLevel = item.extra?.level ?? 1;\r\n\r\n            switch(attribute) {\r\n                case EAttributes.ATTR_STRENGTH:\r\n                    {\r\n                        let bonusStr = tryGetItemSpecialValue(item, \"bonus_strength\");\r\n                        if (bonusStr) {\r\n                            additionalAttribute += bonusStr;\r\n                        }\r\n\r\n                        bonusStr = tryGetItemSpecialValue(item, \"bonus_str\", itmLevel);\r\n                        if (bonusStr) {\r\n                            additionalAttribute += bonusStr;\r\n                        }\r\n                        break;\r\n                    }\r\n                case EAttributes.ATTR_AGILITY:\r\n                    {\r\n                        let bonusAgi = tryGetItemSpecialValue(item, \"bonus_agility\");\r\n                        if (bonusAgi) {\r\n                            additionalAttribute += bonusAgi;\r\n                        }\r\n\r\n                        bonusAgi = tryGetItemSpecialValue(item, \"bonus_agi\", itmLevel);\r\n                        if (bonusAgi) {\r\n                            additionalAttribute += bonusAgi;\r\n                        }\r\n                        break;\r\n                    }\r\n                case EAttributes.ATTR_INTELLIGENCE:\r\n                    {\r\n                        let bonusIntellect = tryGetItemSpecialValue(item, \"bonus_intellect\");\r\n                        if (bonusIntellect) {\r\n                            additionalAttribute += bonusIntellect;\r\n                        }\r\n\r\n                        let bonusInt = tryGetItemSpecialValue(item, \"bonus_intelligence\");\r\n                        if (bonusInt) {\r\n                            additionalAttribute += bonusInt;\r\n                        }\r\n\r\n                        bonusInt = tryGetItemSpecialValue(item, \"bonus_int\", itmLevel);\r\n                        if (bonusInt) {\r\n                            additionalAttribute += bonusInt;\r\n                        }\r\n                        break;    \r\n                    }\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                additionalAttribute += bonusAllStats;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        switch(attribute) {\r\n            case EAttributes.ATTR_STRENGTH:\r\n                    {\r\n                        let bonusStr = tryGetNeutralSpecialValue(neutral, \"bonus_strength\");\r\n                        if (bonusStr) {\r\n                            additionalAttribute += bonusStr;\r\n                        }\r\n                        break;\r\n                    }\r\n            case EAttributes.ATTR_AGILITY:\r\n                {\r\n                    let bonusAgi = tryGetNeutralSpecialValue(neutral, \"bonus_agility\");\r\n                    if (bonusAgi) {\r\n                        additionalAttribute += bonusAgi;\r\n                    }\r\n                    break;\r\n                }\r\n            case EAttributes.ATTR_INTELLIGENCE:\r\n                {\r\n                    let bonusInt = tryGetNeutralSpecialValue(neutral, \"bonus_intelligence\");\r\n                    if (bonusInt) {\r\n                        additionalAttribute += bonusInt;\r\n                    }\r\n\r\n                    let bonusIntellect = tryGetNeutralSpecialValue(neutral, \"bonus_intellect\");\r\n                    if (bonusIntellect) {\r\n                        additionalAttribute += bonusIntellect;\r\n                    }\r\n                    break;    \r\n                }\r\n            default:\r\n                break;\r\n        }\r\n\r\n        let bonusAllStats = tryGetNeutralSpecialValue(neutral, \"bonus_all_stats\");\r\n        if (bonusAllStats) {\r\n            additionalAttribute += bonusAllStats;\r\n        }\r\n\r\n        /// Add primary stat bonus if current attribute matches hero's primary\r\n        if (attribute == hero.AttributePrimary) {\r\n            let primaryStat = tryGetNeutralSpecialValue(neutral, \"primary_stat\");\r\n            if (primaryStat) {\r\n                additionalAttribute += primaryStat;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (abilities && abilities.length > 0 && abilityLevels) {\r\n        for (let i in abilities) {\r\n            let abilityName = abilities[i];\r\n            let abilityLevel = abilityLevels[i]?.level ?? 1;\r\n\r\n            switch(attribute) {\r\n                case EAttributes.ATTR_STRENGTH:\r\n                    {\r\n                        // Only add flesh heap str bonus per stack.\r\n                        let bonusStr = tryGetAbilitySpecialAbilityValue(abilityName, \"flesh_heap_strength_buff_amount\", abilityLevel);\r\n                        let fleshHeapStacks = 0;\r\n                        if (bonusStr) {\r\n                            additionalAttribute += (bonusStr * fleshHeapStacks);\r\n                        }\r\n                    }\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            switch(attribute) {\r\n                case EAttributes.ATTR_STRENGTH:\r\n                        {\r\n                            if (talent.includes(\"bonus_strength\")) {\r\n                                let bonusStr = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                                if (bonusStr) {\r\n                                    additionalAttribute += bonusStr;\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                case EAttributes.ATTR_AGILITY:\r\n                    {\r\n                        if (talent.includes(\"bonus_agility\")) {\r\n                            let bonusAgi = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                            if (bonusAgi) {\r\n                                additionalAttribute += bonusAgi;\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                case EAttributes.ATTR_INTELLIGENCE:\r\n                    {\r\n                        if (talent.includes(\"bonus_intelligence\")) {\r\n                            let bonusInt = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                            if (bonusInt) {\r\n                                additionalAttribute += bonusInt;\r\n                            }\r\n                        }\r\n                        break;    \r\n                    }\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            if (talent.includes(\"all_stats\")) {\r\n                let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAllStats) {\r\n                    additionalAttribute += bonusAllStats;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // If primary attribute, round down else us normal rounding\r\n    let isPrimaryAttr = getPrimaryAttribute(hero) === attribute;\r\n    if (isPrimaryAttr) {\r\n        totalAttribute = Math.floor(totalAttribute)\r\n    } else {\r\n        totalAttribute = parseInt(totalAttribute.toFixed(0));\r\n    }\r\n\r\n    return {\r\n        /// Base attribute amount, includes per level\r\n        attribute: totalAttribute,\r\n        /// Additional attribute amount, from items/neutral/abils/talents\r\n        additionalAttribute: additionalAttribute.toFixed(0),\r\n        /// Amount of attribute per level\r\n        perLevel: attributePerLevel,\r\n    };\r\n}\r\n\r\nexport function calculateAbilityCastRange (abilityName, abilityInfo, abilityLevel, items, neutral, talents) {\r\n    if (!abilityInfo) {\r\n        return \"?\";\r\n    }\r\n\r\n    /// Use CastRange or find range inside AbilitySpecial\r\n    let baseCastRange = parseInt(abilityInfo.AbilityCastRange);\r\n    if (!baseCastRange) {\r\n        let foundRange = getAbilitySpecialCastRangeValue(abilityInfo, \"_range\", abilityLevel.level);\r\n        if (foundRange) {\r\n            baseCastRange = foundRange;\r\n        } else {\r\n            // Cant determine a cast range, none\r\n            return null;\r\n        }\r\n    }\r\n\r\n    let totalBonusRange = 0;\r\n\r\n    if (items && items.length > 0) {\r\n        for (let item of items) {\r\n            let rangeBonus = tryGetItemSpecialValue(item, \"cast_range_bonus\");\r\n            if (rangeBonus) {\r\n                totalBonusRange += rangeBonus;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let rangeBonus = tryGetNeutralSpecialValue(neutral, \"cast_range_bonus\");\r\n        if (rangeBonus) {\r\n            totalBonusRange += rangeBonus;\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for (let talent of talents) {\r\n            if (talent.includes(\"bonus_cast_range\")) {\r\n                let rangeBonus = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (rangeBonus) {\r\n                    totalBonusRange += rangeBonus;\r\n                }\r\n            }\r\n            else if (talent.includes(\"special_bonus_unique\")) {\r\n                if (isCastRangeTalent(talent)) {\r\n                    let linkedAbility = tryGetTalentSpecialAbilityValue(talent, \"ad_linked_ability\");\r\n                    if (linkedAbility === abilityName) {\r\n                        let value = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                        if (value) {\r\n                            totalBonusRange += value;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return baseCastRange + totalBonusRange;\r\n}\r\n\r\n/// Calculates the normal sell price of an item from it's ItemInfo\r\nexport function calculateItemSellCost (itemInfo) {\r\n    if (itemInfo && itemInfo.ItemCost) {\r\n        let cost = parseInt(itemInfo.ItemCost);\r\n        // value rounded down\r\n        return Math.floor(cost / 2);\r\n    }\r\n    return 0;\r\n}\r\n\r\nexport function calculateTotalLifesteal (items, neutral, abilities, talents) {\r\n    \r\n    let totalLifestealPercent = 0;\r\n    let totalLifestealAmp = 0;\r\n\r\n    if (items && items.length > 0) {\r\n        for (let item of items) {\r\n            let lifestealPercent = tryGetItemSpecialValue(item, \"lifesteal_percent\");\r\n            if (lifestealPercent) {\r\n                totalLifestealPercent += lifestealPercent;\r\n            }\r\n\r\n            let lifestealAmp = tryGetItemSpecialValue(item, \"hp_regen_amp\");\r\n            if (lifestealAmp) {\r\n                totalLifestealAmp += lifestealAmp;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let bonusLifesteal = tryGetNeutralSpecialValue(neutral, \"bonus_lifesteal\");\r\n        if (bonusLifesteal) {\r\n            totalLifestealPercent += bonusLifesteal;\r\n        }\r\n    }\r\n\r\n    // if (abilities && abilities.length > 0) {\r\n    //     for (let ability of abilities) {\r\n    //         let abilityInfo = getAbilityInfoFromName(ability);\r\n    //         // If ability is passive, add lifesteal depending on lvl\r\n    //         if (isAbilityBehaviour(abilityInfo.isAbilityBehaviour, EAbilityBehaviour.PASSIVE)) {\r\n                \r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            if (talent.includes(\"lifesteal\")) {\r\n                let bonusLifesteal = tryGetNeutralSpecialValue(neutral, \"value\");\r\n                if (bonusLifesteal) {\r\n                    totalLifestealPercent += bonusLifesteal;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    // Take total amp by the total lifesteal % to get actual amp percentage\r\n    let lifestealPercentAmp = totalLifestealPercent / 100 * totalLifestealAmp;\r\n    return totalLifestealPercent + lifestealPercentAmp;\r\n}\r\n\r\n/// Calculates the total cleave damage percentage\r\nexport function calculateTotalCleaveDmgPercent(heroInfo, items, neutral, abilities, talents) {\r\n    if (!heroInfo) {\r\n        return 0;\r\n    }\r\n\r\n    // No cleave on ranged heroes\r\n    if ( isHeroAttackCapability(heroInfo, EAttackCapabilities.RANGED) ) {\r\n        return 0;\r\n    }\r\n\r\n    let totalCleaveDmgPercent = 0;\r\n\r\n    if (items && items.length > 0) {\r\n        for (let item of items) {\r\n            let cleaveDmgPercent = tryGetItemSpecialValue(item, \"cleave_damage_percent\");\r\n            if (cleaveDmgPercent) {\r\n                totalCleaveDmgPercent += cleaveDmgPercent;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (abilities && abilities.length > 0) {\r\n        for (let ability of abilities) {\r\n            let cleaveDmg = tryGetAbilitySpecialAbilityValue(ability, \"cleave_damage\");\r\n            if (cleaveDmg) {\r\n                totalCleaveDmgPercent += cleaveDmg;\r\n            }\r\n\r\n            let greatCleaveDmg = tryGetAbilitySpecialAbilityValue(ability, \"great_cleave_damage\", 1);\r\n            if (greatCleaveDmg) {\r\n                totalCleaveDmgPercent += greatCleaveDmg;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for (let talent of talents) {\r\n            if (talent.includes(\"cleave\")) {\r\n                let cleavePercent = tryGetTalentSpecialAbilityValue(talent,  \"value\");\r\n                if (cleavePercent) {\r\n                    totalCleaveDmgPercent += cleavePercent;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return totalCleaveDmgPercent;\r\n}\r\n\r\n/// Calculates the current highest crit percent the hero can do\r\n/// Crit will only take the highest crit damage percent\r\nexport function calculateCritPercent (items, neutral, abilities, talents) {\r\n    let highestCritPercent = 0;\r\n    \r\n    if (items && items.length > 0) {\r\n        for (let item of items) {\r\n            let critMultiplier = tryGetItemSpecialValue(item, \"crit_multiplier\");\r\n            if (critMultiplier && critMultiplier > highestCritPercent) {\r\n                highestCritPercent = critMultiplier;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (abilities && abilities.length > 0) {\r\n        for (let ability of abilities) {\r\n            let abilityLevel = 1;\r\n            let critBonus = tryGetAbilitySpecialAbilityValue(ability, \"crit_bonus\", abilityLevel);\r\n            if (critBonus && critBonus > highestCritPercent) {\r\n                highestCritPercent = critBonus;\r\n            }\r\n\r\n            let bladeDanceCrit = tryGetAbilitySpecialAbilityValue(ability, \"blade_dance_crit_mult\", abilityLevel);\r\n            if (bladeDanceCrit && bladeDanceCrit > highestCritPercent) {\r\n                highestCritPercent = bladeDanceCrit;\r\n            }\r\n        }\r\n    }\r\n\r\n    // if (talents && talents.length > 0) {\r\n    //     for (let talent of talents) {\r\n    //         if (talent.includes(\"pl crit talent\")) {\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    return highestCritPercent;\r\n}\r\n\r\n/// Calculates the percent chance to crit on attack, stacks with other crit chances\r\nexport function calculateCritChancePercent (items, neutral, abilities, talents) {\r\n    let totalCritChancePercent = 0;\r\n\r\n    if (items && items.length > 0) {\r\n        for (let item of items) {\r\n            let critChance = tryGetItemSpecialValue(item, \"crit_chance\");\r\n            if (critChance) {\r\n                totalCritChancePercent += critChance;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (abilities && abilities.length > 0) {\r\n        for (let ability of abilities) {\r\n            let abilityLevel = 1;\r\n            let critChance = tryGetAbilitySpecialAbilityValue(ability, \"crit_chance\", abilityLevel);\r\n            if (critChance) {\r\n                totalCritChancePercent += critChance;\r\n            }\r\n\r\n            let bladeDanceCritChance = tryGetAbilitySpecialAbilityValue(ability, \"blade_dance_crit_chance\", abilityLevel);\r\n            if (bladeDanceCritChance) {\r\n                totalCritChancePercent += bladeDanceCritChance;\r\n            }\r\n        }\r\n    }\r\n\r\n    return totalCritChancePercent;\r\n}\r\n\r\nexport function calculateTotalSpellLifesteal (items, neutral, abilities, talents) {\r\n    let totalAllPercent = 0;\r\n    let totalHeroLsPerc = 0;\r\n    let totalCreepLsPerc = 0;\r\n\r\n    let octarineCount = 0;\r\n    if (items && items.length > 0) {\r\n        for (let item of items) {\r\n            //Check for multiple octarines and only add one\r\n            if (item.item === \"item_octarine_core\") {\r\n                octarineCount++;\r\n                if (octarineCount > 1) {\r\n                    continue;\r\n                }\r\n            }\r\n\r\n            let heroLifesteal = tryGetItemSpecialValue(item, \"hero_lifesteal\");\r\n            if (heroLifesteal) {\r\n                totalHeroLsPerc += heroLifesteal;\r\n            }\r\n\r\n            let creepLifesteal = tryGetItemSpecialValue(item, \"creep_lifesteal\");\r\n            if (creepLifesteal) {\r\n                totalCreepLsPerc += creepLifesteal;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let spellLifesteal = tryGetNeutralSpecialValue(neutral, \"spell_lifesteal\");\r\n        if (spellLifesteal) {\r\n            totalAllPercent += spellLifesteal;\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for (let talent of talents) {\r\n            if (talent.includes(\"spell_lifesteal\")) {\r\n                let spellLifesteal = tryGetNeutralSpecialValue(neutral, \"value\");\r\n                if (spellLifesteal) {\r\n                    totalAllPercent += spellLifesteal;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return {\r\n        heroLifesteal: totalAllPercent + totalHeroLsPerc,\r\n        creepLifesteal: totalAllPercent + totalCreepLsPerc,\r\n    };\r\n}","import React, { Component } from 'react';\r\n\r\nimport {\r\n    calculateSpellDamage\r\n} from \"../../utility/calculate\";\r\nimport { \r\n    tryGetLocalizedString, \r\n    getTooltipAbilityString,\r\n} from \"../../utility/data-helpers/language\";\r\n\r\n/// Retrieves ability damage and returns display value\r\nfunction parseDamage(abilityName, abilInfo, abilLvl, items, neutral, talents) {\r\n    let abilityDamage = calculateSpellDamage(abilityName, abilInfo, abilLvl, items, neutral, talents);\r\n    if (abilityDamage && abilityDamage.damage) {\r\n        // force to be to two decimal places\r\n        let damage = abilityDamage.damage.toFixed(2);\r\n        if (abilityDamage.isPercent) {\r\n            damage += \"%\";\r\n        }\r\n        return damage;\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nfunction getAbilityNameFromStrings(strings, key) {\r\n    if (strings && key) {\r\n        return tryGetLocalizedString(strings, key);\r\n    } else {\r\n        return \"?\";\r\n    }\r\n}\r\n\r\nclass DamageOutput extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            ability: props.ability,\r\n            abilityInfo: props.abilityInfo,\r\n            levelInfo: props.levelInfo,\r\n\r\n            items: props.items,\r\n            neutral: props.neutral,\r\n            selectedTalents: props.selectedTalents,\r\n\r\n            abilityStrings: props.abilityStrings,\r\n            dotaStrings: props.dotaStrings,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(prevProps.abilityInfo !== this.props.abilityInfo) {\r\n            this.setState({ abilityInfo: this.props.abilityInfo });\r\n        }\r\n\r\n        if (prevProps.levelInfo !== this.props.levelInfo) {\r\n            this.setState({ levelInfo: this.props.levelInfo });\r\n        }\r\n\r\n        if (prevProps.items !== this.props.items) {\r\n            this.setState({ items: this.props.items });\r\n        }\r\n\r\n        if (prevProps.neutral !== this.props.neutral) {\r\n            this.setState({ neutral: this.props.neutral });\r\n        }\r\n\r\n        if (prevProps.selectedTalents !== this.props.selectedTalents) {\r\n            this.setState({ selectedTalents: this.props.selectedTalents });\r\n        }\r\n\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ abilityStrings: this.props.abilityStrings });\r\n        }\r\n        if (prevProps.dotaStrings !== this.props.dotaStrings) {\r\n            this.setState({ dotaStrings: this.props.dotaStrings });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let abilityDamage = parseDamage(this.state.ability, this.state.abilityInfo, this.state.levelInfo?.level, this.state.items, this.state.neutral, this.state.selectedTalents);\r\n        return (\r\n            <div className=\"w-100 h-100\">\r\n                <h5>{getTooltipAbilityString(this.state.abilityStrings, this.state.ability)}</h5>\r\n                {\r\n                    abilityDamage && \r\n                    <h6>\r\n                        { (getAbilityNameFromStrings(this.state.abilityStrings, \"dota_ability_variable_damage\") + \":\")}\r\n                        {' '}\r\n                        { abilityDamage }\r\n                    </h6>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DamageOutput;","import React, { Component } from 'react';\r\nimport {\r\n    calculateAbilityCooldown\r\n} from \"../../utility/calculate\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faClock, faCircle }from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nclass Cooldown extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            abilityLevels: props.abilityLevels,\r\n            abilityCooldown: props.cooldown,\r\n\r\n            ability: props.ability,\r\n            abilityInfo: props.abilityInfo,\r\n            items: props.items,\r\n            neutral: props.neutral,\r\n            selectedTalents: props.selectedTalents,\r\n\r\n            cooldown: null,\r\n            charges: null,\r\n        };\r\n\r\n        this.updateCooldown = this.updateCooldown.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateCooldown();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                abilityLevel: this.props.abilityLevel,\r\n                abilityCooldown: this.props.cooldown,\r\n\r\n                ability: this.props.ability,\r\n                items: this.props.items,\r\n                neutral: this.props.neutral,\r\n                selectedTalents: this.props.selectedTalents,\r\n            }, () => this.updateCooldown() );\r\n        }\r\n    }\r\n\r\n    updateCooldown() {\r\n        let currentCooldownInfo = calculateAbilityCooldown(this.state.ability, this.state.abilityInfo, this.state.abilityLevel, this.state.items, this.state.neutral, this.state.selectedTalents);\r\n        \r\n        this.setState({\r\n            cooldown: currentCooldownInfo?.cooldown,\r\n            charges: currentCooldownInfo?.charges,\r\n        });\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                {\r\n                    this.state.cooldown &&\r\n                        <div className=\"d-flex\" title=\"cooldown\">\r\n                            <FontAwesomeIcon className=\"my-auto mr-1\" icon={faClock} />\r\n                            <div>\r\n                                { this.state.cooldown }\r\n                            </div>\r\n                        </div>\r\n                }\r\n                {\r\n                    this.state.charges &&\r\n                        <div className=\"d-flex\" title=\"charges\">\r\n                            <FontAwesomeIcon className=\"my-auto mr-1\" icon={faCircle} />\r\n                            <div>\r\n                                { this.state.charges }\r\n                            </div>\r\n                        </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Cooldown;","import React, { Component } from 'react';\r\nimport { \r\n    calculateManaCost \r\n} from '../../utility/calculate';\r\n\r\nclass ManaCost extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            ability: props.ability,\r\n            abilityLevel: props.abilityLevel,\r\n\r\n            items: props.items,\r\n            neutral: props.neutral,\r\n            selectedTalents: props.selectedTalents,\r\n        };\r\n\r\n        this.updateMana = this.updateMana.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                ability: this.props.ability,\r\n                abilityLevel: this.props.abilityLevel,\r\n\r\n                items: this.props.items,\r\n                neutral: this.props.neutral,\r\n                selectedTalents: this.props.selectedTalents,\r\n            });\r\n        }\r\n    }\r\n\r\n    updateMana() {\r\n        let manaCost = -1;\r\n        if (this.state.ability) {\r\n            manaCost = calculateManaCost(this.state.ability, this.state.abilityLevel, this.state.items, this.state.neutral, this.state.selectedTalents);\r\n        }\r\n        \r\n        // this.setState({\r\n        //     abilityManaCost: manaCost,\r\n        // });\r\n        return manaCost;\r\n    }\r\n\r\n    render() {\r\n        let manaCost = this.updateMana();\r\n        return (\r\n            <div>\r\n                { \r\n                    manaCost &&\r\n                        <div className=\"mana-cost d-flex\" title=\"mana cost\">\r\n                            <div className=\"my-auto mr-1\" style={{ \r\n                                height: \"10px\",\r\n                                width: \"10px\",\r\n                                backgroundColor: \"rgb(69, 148, 207)\",\r\n                            }}/>\r\n                            <div>{ manaCost }</div>\r\n                        </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ManaCost;","import React, { Component } from 'react';\r\nimport { \r\n    getAbilityBehaviours,\r\n    getAbilitySpecialExtraValues\r\n\r\n} from \"../../utility/dataHelperAbilities\";\r\nimport { \r\n    getTooltipString,\r\n    getLocalizedString,\r\n    containsLocalizedString\r\n} from \"../../utility/data-helpers/language\";\r\nimport {\r\n    calculateAbilityCastRange\r\n} from \"../../utility/calculate\";\r\n\r\nfunction stringContainsHtml (str) {\r\n    return typeof(str) === \"string\" && str.includes(\"</font>\");\r\n}\r\n\r\n/// Displays a Type/Value props used inside Ability descriptions\r\nfunction TypeValueUI (props) {\r\n    /// Check if localized type value contains percent and remove\r\n    let isPercentage = false;\r\n    let typeStr = props.type;\r\n    let valueStr = props.value;\r\n    if (props.type.includes(\"%\")) {\r\n        typeStr = typeStr.replace(\"%\", \"\");\r\n        isPercentage = true;\r\n    }\r\n\r\n    return (\r\n        <div className=\"d-flex\" style={{ fontSize: \"0.85rem\"}}>\r\n            {/* Type Key */}\r\n            {\r\n                stringContainsHtml(typeStr) ?\r\n                <div dangerouslySetInnerHTML={{ __html: typeStr.replace(\"\\\\\", \"\") }}></div>\r\n                :\r\n                <div>{ typeStr }</div>\r\n            }\r\n            <div className=\"mx-1\" />\r\n            {/* Value */}\r\n            {\r\n                stringContainsHtml(valueStr) ?    \r\n                <div dangerouslySetInnerHTML={{ __html: valueStr.replace(\"\\\\\", \"\") }}></div>\r\n                :\r\n                <div>{ valueStr }</div>\r\n            }\r\n            {\r\n                // Give percent sign after value if isPercent\r\n                isPercentage && \"%\"\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nclass AbilityDetails extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            ability: props.ability,\r\n            abilityInfo: props.abilityInfo,\r\n            levelInfo: props.levelInfo,\r\n\r\n            items: props.items,\r\n            neutral: props.neutral,\r\n            selectedTalents: props.selectedTalents,\r\n\r\n            abilityBehaviours: null,\r\n            castRange: 0,\r\n\r\n            abilityStrings: props.abilityStrings,\r\n            dotaStrings: props.dotaStrings,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(prevProps.abilityInfo !== this.props.abilityInfo) {\r\n            this.setState({ \r\n                abilityInfo: this.props.abilityInfo,\r\n            });\r\n        }\r\n\r\n        if (prevProps.levelInfo !== this.props.levelInfo) {\r\n            this.setState({ \r\n                levelInfo: this.props.levelInfo \r\n            });\r\n        }\r\n\r\n        if (prevProps.items !== this.props.items) {\r\n            this.setState({ \r\n                items: this.props.items \r\n            });\r\n        }\r\n\r\n        if (prevProps.neutral !== this.props.neutral) {\r\n            this.setState({ \r\n                neutral: this.props.neutral \r\n            });\r\n        }\r\n\r\n        if (prevProps.selectedTalents !== this.props.selectedTalents) {\r\n            this.setState({ \r\n                selectedTalents: this.props.selectedTalents \r\n            });\r\n        }\r\n\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ \r\n                abilityStrings: this.props.abilityStrings \r\n            });\r\n        }\r\n        if (prevProps.dotaStrings !== this.props.dotaStrings) {\r\n            this.setState({ \r\n                dotaStrings: this.props.dotaStrings \r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let castRangeAmt = calculateAbilityCastRange(this.state.ability, this.state.abilityInfo, this.state.levelInfo, this.state.items, this.state.neutral, this.state.selectedTalents);\r\n        let valuesInformation = getAbilitySpecialExtraValues(this.state.ability, this.state.abilityInfo, this.state.levelInfo.level, this.state.items, this.state.selectedTalents);\r\n        let abilityBehaviours = getAbilityBehaviours(this.state.abilityInfo);\r\n        return (\r\n            <div className=\"mb-2\">\r\n                {\r\n                    abilityBehaviours && abilityBehaviours.map((value, index) => {\r\n                        return (\r\n                            <TypeValueUI \r\n                                key={index}\r\n                                type={ getLocalizedString(this.state.dotaStrings, value.key) } \r\n                                value={ typeof value.value === \"object\" ? value.value.map((val) => {\r\n                                        return getLocalizedString(this.state.dotaStrings, val)\r\n                                    }).join(', ') : getLocalizedString(this.state.dotaStrings, value.value) \r\n                                } />\r\n                        );\r\n                    })\r\n                }\r\n                <div className=\"py-1\" />\r\n                {\r\n                    castRangeAmt &&\r\n                        <TypeValueUI \r\n                            type={getLocalizedString(this.state.abilityStrings, \"dota_ability_variable_cast_range\").toUpperCase() + \":\"}\r\n                            value={castRangeAmt} />\r\n                }\r\n                <div className=\"py-1\" />\r\n                {\r\n                    valuesInformation && valuesInformation.map((value, index) => {\r\n                        if (containsLocalizedString(this.state.abilityStrings, value.key)) {\r\n                            return (\r\n                                <TypeValueUI \r\n                                    key={ `${value.key}-${index}` }\r\n                                    type={ getLocalizedString(this.state.abilityStrings, value.key) }\r\n                                    value={ value.value } />\r\n                            );   \r\n                        }\r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AbilityDetails;","\r\n/// Gets the icon url of an ability\r\nexport function getAbilityIconURL (ability) {\r\n    return `https://cdn.cloudflare.steamstatic.com/apps/dota2/images/dota_react/abilities/${ability}.png`;\r\n}","import React, { Component } from 'react';\r\nimport {\r\n    Row, \r\n    Col,\r\n    Button\r\n} from \"react-bootstrap\";\r\n\r\nimport { DOTAAbilities } from \"../../data/dota2/json/npc_abilities.json\";\r\n\r\nimport {\r\n    itemsContainsScepter\r\n} from \"../../utility/dataHelperItems\";\r\n\r\nimport DamageOutput from \"./DamageOutput\";\r\nimport Cooldown from \"./Cooldown\";\r\nimport ManaCost from \"./ManaCost\";\r\nimport AbilityDetails from \"./AbilityDetails\";\r\nimport \"./Abilities.css\";\r\nimport { getAbilityIconURL } from './abilities-helper';\r\nimport { isAbilityBehaviour } from '../../utility/dataHelperAbilities';\r\nimport { EAbilityBehaviour } from '../../enums/abilities';\r\n\r\n/// Returns array of html elements to represent the levels of the ability\r\nfunction getAbilityLevelHtml (levelInfo, abilityIndex, abilityInfo, onLevelChanged) {\r\n    if (levelInfo && abilityInfo)\r\n    {\r\n        /// Determine max level of ability\r\n        let maxLvl = abilityInfo.AbilityType === \"DOTA_ABILITY_TYPE_ULTIMATE\" ? 3 : 4;\r\n        if (abilityInfo.MaxLevel)\r\n            maxLvl = parseInt(abilityInfo.MaxLevel);\r\n        \r\n        let html = [];\r\n        for(let i = 0; i < maxLvl; i++) {\r\n            html.push(\r\n                <Button \r\n                    key={i} \r\n                    variant=\"outline-secondary\"\r\n                    className=\"p-1\"\r\n                    onClick={(e) => onLevelChanged(e)}\r\n                    data-lvlindex={abilityIndex}\r\n                    data-btnindex={i}>\r\n                    <div className={ i < levelInfo.level ? \"levelled\" : \"unlevelled\"}></div>\r\n                </Button>\r\n            );\r\n        }\r\n        return html;\r\n    }\r\n    else\r\n    {\r\n        return <div>?</div>\r\n    }\r\n}\r\n\r\nfunction getLevelInfo (abilities) {\r\n    if (abilities) {\r\n        return abilities.map((abil, index) => {\r\n            return { ability: index, level: 1 };\r\n        });\r\n    }\r\n    return null;\r\n}\r\n\r\n/// Max amount of abilities to show in one row\r\nconst ABILITY_ROW_MAX = 6;\r\n\r\nclass Abilities extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            heroName: props.heroName,\r\n            items: props.items,\r\n            neutral: props.neutral,\r\n            selectedTalents: props.selectedTalents,\r\n            displayDamage: props.displayDamage,\r\n            shard: props.shard,\r\n\r\n            abilityStrings: props.abilityStrings,\r\n            dotaStrings: props.dotaStrings,\r\n\r\n            abilities: props.abilities,\r\n            abilityLevels: props.abilityLevels,\r\n\r\n            onAbilityLevelChanged: props.onAbilityLevelChanged,\r\n        };\r\n\r\n        this.onLevelChanged = this.onLevelChanged.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.heroName !== this.props.heroName) {\r\n            this.setState({ heroName: this.props.heroName });\r\n        }\r\n\r\n        if (prevProps.abilities !== this.props.abilities) {\r\n            this.setState({ abilities: this.props.abilities });\r\n        }\r\n        if (prevProps.abilityLevels !== this.props.abilityLevels) {\r\n            this.setState({ abilityLevels: this.props.abilityLevels });\r\n        }\r\n\r\n        if (prevProps.items !== this.props.items) {\r\n            this.setState({ items: this.props.items });\r\n        }\r\n        if (prevProps.neutral !== this.props.neutral) {\r\n            this.setState({ neutral: this.props.neutral });\r\n        }\r\n        if (prevProps.selectedTalents !== this.props.selectedTalents) {\r\n            this.setState({ selectedTalents: this.props.selectedTalents });\r\n        }\r\n        if (prevProps.shard !== this.props.shard) {\r\n            this.setState({ shard: this.props.shard });\r\n        }\r\n\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ abilityStrings: this.props.abilityStrings });\r\n        }\r\n        if (prevProps.dotaStrings !== this.props.dotaStrings) {\r\n            this.setState({ dotaStrings: this.props.dotaStrings });\r\n        }\r\n    }\r\n\r\n    onLevelChanged(e) {\r\n        // If click on inner element\r\n        if (e.target.tagName.toLowerCase() !== \"button\") {\r\n            e.target = e.target.parentElement;\r\n        }\r\n\r\n        let abilityIndex = parseInt(e.target.dataset.lvlindex);\r\n        let abilities = this.state.abilityLevels;\r\n        let targetLevel = parseInt(e.target.dataset.btnindex) + 1;\r\n        // Clicked same level, set to 0\r\n        if (abilities[abilityIndex].level === targetLevel) {\r\n            targetLevel = 0;\r\n        }\r\n\r\n        this.state.onAbilityLevelChanged({\r\n            ability: abilityIndex,\r\n            level: targetLevel\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Row \r\n                md={this.state.abilities?.length > ABILITY_ROW_MAX ? ABILITY_ROW_MAX : 0}>\r\n                {\r\n                    this.state.abilities && this.state.abilityLevels && this.state.abilities.map((abilName, index) => {\r\n                        // Get ability info from name\r\n                        let ability = DOTAAbilities[abilName];\r\n                        if (!ability) {\r\n                            console.log(`Unable to find info on ability '${abilName}'`);\r\n                            return (<div key={abilName}>?</div>);\r\n                        }\r\n\r\n                        // Get current level information of the ability\r\n                        let levelInfo = this.state.abilityLevels.find(abilVal => abilVal.ability === index);\r\n                        if (!levelInfo) {\r\n                            console.error(`Unable to find levelInfo for ${abilName}`);\r\n                            return;\r\n                        }\r\n\r\n                        // Hide Ability if AbiltyBehaviour contains HIDDEN and isn't scepter/shard given\r\n                        if ( isAbilityBehaviour(ability.AbilityBehavior, [ EAbilityBehaviour.HIDDEN ]) && (!ability.IsGrantedByScepter && !ability.IsGrantedByShard)) {\r\n                            return;\r\n                        }\r\n\r\n                        // Dont add any scepter abilities unless hero has scepter\r\n                        if (ability.IsGrantedByScepter && !itemsContainsScepter(this.state.items)) {\r\n                            return;\r\n                        }\r\n                        // Ignore Shard ability if shard isn't enabled\r\n                        if (ability.IsGrantedByShard && !this.state.shard) {\r\n                            return;\r\n                        }\r\n\r\n                        return (\r\n                            <Col key={ability.ID} className=\"d-flex flex-column justify-content-top\">\r\n                                <img\r\n                                    className=\"h-100 align-self-center\"\r\n                                    style={{ maxWidth: \"90px\", maxHeight: \"90px\" }}\r\n                                    src={ getAbilityIconURL(abilName) } \r\n                                    alt={ `${ability.ID}-${abilName}` } />\r\n                                <Row className=\"px-4\">\r\n                                    <Col md={6}>\r\n                                        {/* Cooldown */}\r\n                                        <Cooldown \r\n                                            ability={abilName} \r\n                                            abilityInfo={ability}\r\n                                            abilityLevel={levelInfo.level} \r\n                                            cooldown={ability.AbilityCooldown}\r\n                                            items={this.state.items}\r\n                                            neutral={this.state.neutral}\r\n                                            selectedTalents={this.state.selectedTalents} />\r\n                                    </Col>\r\n                                    <Col md={6}>\r\n                                        {/* Mana Cost */}\r\n                                        <ManaCost \r\n                                            ability={ability}\r\n                                            abilityLevel={levelInfo.level} \r\n                                            items={this.state.items}\r\n                                            neutral={this.state.neutral}\r\n                                            selectedTalents={this.state.selectedTalents} />\r\n                                    </Col>\r\n                                </Row>\r\n                                <div className=\"align-self-center pt-2 d-flex\">\r\n                                    {\r\n                                        this.state.abilityLevels && !ability.IsGrantedByScepter && \r\n                                            getAbilityLevelHtml(levelInfo, index, ability, this.onLevelChanged)\r\n                                    }\r\n                                </div>\r\n                                <div className=\"py-1\">\r\n                                    {\r\n                                        this.state.displayDamage && \r\n                                            <DamageOutput \r\n                                                ability={abilName}\r\n                                                abilityInfo={ability} \r\n                                                levelInfo={levelInfo}\r\n                                                items={this.state.items}\r\n                                                neutral={this.state.neutral} \r\n                                                selectedTalents={this.state.selectedTalents} \r\n                                                abilityStrings={this.state.abilityStrings} \r\n                                                dotaStrings={this.state.dotaStrings} />\r\n                                    }\r\n                                </div>\r\n                                <div className=\"py-1\">\r\n                                    <AbilityDetails \r\n                                        ability={abilName}\r\n                                        abilityInfo={ability} \r\n                                        levelInfo={levelInfo}\r\n                                        items={this.state.items}\r\n                                        neutral={this.state.neutral} \r\n                                        selectedTalents={this.state.selectedTalents}\r\n                                        abilityStrings={this.state.abilityStrings} \r\n                                        dotaStrings={this.state.dotaStrings} />\r\n                                </div>\r\n                            </Col>\r\n                        );\r\n                    })\r\n                }\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Abilities;","import Abilities from \"./Abilities\";\r\n\r\nexport default Abilities;","import React from \"react\";\r\n\r\nexport function filterItemName (name) {\r\n    if (name) {\r\n        let item = name.split('_');\r\n        item.shift();\r\n        item = item.join('_');\r\n        return item;\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\n/// Gets an item icon from it's name. For exmaple \"item_mango_tree\"\r\nexport function getItemIcon (itemName, width, height, scale) {\r\n    // Remove 'item_' prefix, split by _, remove \"item\" and join again\r\n    let item = filterItemName(itemName);\r\n\r\n    // Width and height of each item in item_stylesheet\r\n    if (item) {\r\n        return <span \r\n                    className={ 'dota-item dota-item-' + item + '_png '} \r\n                    alt={item} \r\n                    data-item={itemName} \r\n                    style={{ transform: `scale(${scale}, ${scale})`, transformOrigin: \"top left\" }} />\r\n    } else {\r\n        return <span \r\n                style={{ backgroundColor: \"#212121\", width: width, height: height, transform: `scale(${scale}, ${scale})`, display: \"block\", transformOrigin: \"top left\" }} />\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport {\r\n    Tabs,\r\n    Tab,\r\n    Button,\r\n    Form,\r\n    ListGroup\r\n} from \"react-bootstrap\";\r\nimport { getLocalizedString } from '../../utility/data-helpers/language';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faMinus } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport {\r\n    getItemIcon\r\n} from \"../../utility/spriteHelper\";\r\n\r\nimport \"../../css/dota_items.css\";\r\nimport { \r\n    itemAliasIncludes, \r\n    getAllItems \r\n} from '../../utility/dataHelperItems';\r\n\r\nfunction getItemsByQuality(itemsArray, matchArray) {\r\n    return itemsArray.filter((itemInfo) => {\r\n        let quality = itemInfo.item.ItemQuality;\r\n        if (quality) { //(quality === \"consumable\" || quality === \"component\" || quality === \"secret_shop\")) {\r\n            for(let i = 0; i < matchArray.length; i++) {\r\n                if (quality === matchArray[i]) {\r\n                    return itemInfo;\r\n                }\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction ItemIcon(props) {\r\n    return (\r\n            <div \r\n                key={props.keyName} \r\n                title={props.localizedName} \r\n                onClick={props.onClick}\r\n                data-item={props.itemName}\r\n                className=\"m-1\" \r\n                style={{ width: `calc(88px * ${props.scale})`, height: `calc(64px * ${props.scale})` }}>\r\n                { \r\n                    getItemIcon(props.itemName, \"88px\", \"64px\", props.scale) \r\n                }\r\n            </div>\r\n    );\r\n}\r\n\r\nfunction TabHeading(props) {\r\n    return (\r\n        <h6 className=\"px-3 mb-0\">{props.text}</h6>\r\n    );\r\n}\r\n\r\nclass ItemSelector extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // Get all selectable items in dota\r\n        let allItems = getAllItems();\r\n        // Split into basic and upgrade items to sort into tabs\r\n        let basicItems = getItemsByQuality(allItems, [\"consumable\", \"component\", \"secret_shop\"]);\r\n        let upgradesItems = getItemsByQuality(allItems, [\"common\", \"rare\", \"epic\", \"artifact\"]);\r\n\r\n        this.state = {\r\n            allItems: allItems,\r\n            queryItems: null,\r\n\r\n            onSelectedItem: props.onSelectedItem,\r\n            dotaStrings: props.dotaStrings,\r\n            abilityStrings: props.abilityStrings,\r\n\r\n            basicItems: basicItems,\r\n            upgradesItems: upgradesItems,\r\n        };\r\n\r\n        this.onSearchChanged = this.onSearchChanged.bind(this);\r\n        this.onSearchItemSelected = this.onSearchItemSelected.bind(this);\r\n        this.onShopItemSelected = this.onShopItemSelected.bind(this);\r\n        this.onRemoveItemSelected = this.onRemoveItemSelected.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(prevProps !== this.props) {\r\n            this.setState({\r\n                dotaStrings: this.props.dotaStrings,\r\n                abilityStrings: this.props.abilityStrings,\r\n                onSelectedItem: this.props.onSelectedItem,\r\n            });\r\n        }\r\n    }\r\n\r\n    onSearchChanged(e) {\r\n        let query = e.target.value;\r\n        let filteredItems = null;\r\n        if (query) {\r\n            filteredItems = this.state.allItems.filter((item) => {\r\n                // Check query for match in localized string, should work most of the time\r\n                let localizedName = getLocalizedString(this.state.abilityStrings, `DOTA_Tooltip_Ability_${item.name}`)?.toLowerCase();\r\n                if (localizedName && localizedName.indexOf(query.toLowerCase()) !== -1) {\r\n                    return true;\r\n                }\r\n\r\n                // Match query with any item aliases (only works for english)\r\n                let aliasMatch = itemAliasIncludes(item.item.ItemAliases, query);\r\n                if (aliasMatch) {\r\n                    return true;\r\n                }\r\n            });\r\n        }\r\n\r\n        this.setState({\r\n            queryItems: filteredItems,\r\n        });\r\n    }\r\n\r\n    onSearchItemSelected(e) {\r\n        let val = e.target.dataset?.item;\r\n        this.state.onSelectedItem(val);\r\n    }\r\n\r\n    onShopItemSelected (e) {\r\n        let item = e.target.dataset?.item;\r\n        this.state.onSelectedItem(item);\r\n    }\r\n\r\n    onRemoveItemSelected(e) {\r\n        let item = null;\r\n        this.state.onSelectedItem(item);\r\n    }\r\n\r\n    render() {\r\n        let scale = 0.5;\r\n        let searchIconScale = 0.45;\r\n        return (\r\n            <div className=\"item-card\">\r\n                <div className=\"item-card header d-flex p-2\">\r\n                    <div>\r\n                        <Form.Control \r\n                            className=\"foresight-input-control\"\r\n                            type=\"text\" \r\n                            placeholder=\"Search...\" \r\n                            onChange={this.onSearchChanged}/>\r\n                    </div>\r\n                    <div className=\"ml-auto\">\r\n                        <Button variant=\"outline-danger\" onClick={this.onRemoveItemSelected}>\r\n                            <FontAwesomeIcon icon={faMinus} />\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"item-card content\">\r\n                    <div className=\"p-1\">\r\n                        {\r\n                            this.state.queryItems && \r\n                            <div style={{ color: \"white\" }}>\r\n                                <h5 >\r\n                                    { getLocalizedString(this.state.dotaStrings, \"DOTA_Shop_Search_Results_Title\") }\r\n                                </h5>\r\n                                <ListGroup className=\"foresight-list-group\">\r\n                                    {\r\n                                        // Query search term\r\n                                        this.state.queryItems.map((item) => {\r\n                                            // Add L char at end of dagons to show their level\r\n                                            let itmName = item.name;\r\n                                            if (item.name.includes(\"item_dagon_\")) {\r\n                                                itmName += \"L\";\r\n                                            }\r\n                                            \r\n                                            let localizedName = getLocalizedString(this.state.abilityStrings, `DOTA_Tooltip_Ability_${itmName}`);\r\n                                            return (\r\n                                                <ListGroup.Item \r\n                                                    key={item.name} \r\n                                                    data-item={item.name} \r\n                                                    onClick={this.onSearchItemSelected} \r\n                                                    action>\r\n                                                    <div className=\"d-flex\" data-item={item.name}>\r\n                                                        <ItemIcon \r\n                                                            itemName={item.name}\r\n                                                            localizedName={localizedName}\r\n                                                            onClick={this.onSearchItemSelected} \r\n                                                            scale={searchIconScale}/>\r\n\r\n                                                        <h6 className=\"mx-1 my-auto\" data-item={item.name}>\r\n                                                            { localizedName ?? itmName }\r\n                                                        </h6>\r\n                                                    </div>\r\n                                                </ListGroup.Item>\r\n                                            )\r\n                                        })\r\n                                    }   \r\n                                </ListGroup>\r\n                                {\r\n                                    this.state.queryItems && this.state.queryItems.length <= 0 &&\r\n                                        <h6>\r\n                                            { getLocalizedString(this.state.dotaStrings, \"DOTA_Shop_Search_No_Results\") }\r\n                                        </h6>\r\n                                }\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                    {/* Regular view */}\r\n                    {\r\n                        !this.state.queryItems && \r\n                            <div>\r\n                                <Tabs\r\n                                    className=\"foresight-tabs\"\r\n                                    defaultActiveKey=\"basic\" \r\n                                    transition={false} \r\n                                    id=\"shop-tabs\">\r\n                                    <Tab \r\n                                        eventKey=\"basic\" \r\n                                        title={<TabHeading text={getLocalizedString(this.state.dotaStrings, \"DOTA_Shop_Category_Basics\")} />} >\r\n                                        <div className=\"d-flex flex-wrap\">\r\n                                            {\r\n                                                this.state.basicItems && this.state.basicItems.map((item) => {\r\n                                                    let localizedName = getLocalizedString(this.state.abilityStrings, `DOTA_Tooltip_Ability_${item.name}`);\r\n                                                    return (\r\n                                                        <ItemIcon \r\n                                                            key={item.item.ID}\r\n                                                            itemName={item.name}\r\n                                                            localizedName={localizedName}\r\n                                                            onClick={this.onShopItemSelected} \r\n                                                            scale={scale} />\r\n                                                    )\r\n                                                })\r\n                                            }\r\n                                        </div>\r\n                                    </Tab>\r\n                                    <Tab \r\n                                        eventKey=\"upgrades\" \r\n                                        title={<TabHeading text={getLocalizedString(this.state.dotaStrings, \"DOTA_Shop_Category_Upgrades\")} />} >\r\n                                        <div className=\"d-flex flex-wrap\">\r\n                                            {\r\n                                                this.state.upgradesItems && this.state.upgradesItems.map((item) => {\r\n                                                    let localizedName = getLocalizedString(this.state.abilityStrings, `DOTA_Tooltip_Ability_${item.name}`);\r\n                                                    return (\r\n                                                        <ItemIcon \r\n                                                            key={item.item.ID}\r\n                                                            itemName={item.name}\r\n                                                            localizedName={localizedName}\r\n                                                            onClick={this.onShopItemSelected} \r\n                                                            scale={scale} />\r\n                                                    );\r\n                                                })\r\n                                            }\r\n                                        </div>\r\n                                    </Tab>\r\n                                </Tabs>\r\n                            </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ItemSelector;","/// All Disassemble rules of an item\r\nexport const EDisassembleRule = {\r\n    ALWAYS: \"DOTA_ITEM_DISASSEMBLE_ALWAYS\",\r\n    NEVER: \"DOTA_ITEM_DISASSEMBLE_NEVER\",\r\n};\r\n\r\n/// All ItemQuality properties on ItemInfo's\r\nexport const EItemQuality = {\r\n    SECRET_SHOP: \"secret_shop\",\r\n    COMPONENT: \"component\",\r\n};","import React, { Component } from 'react';\r\n\r\nimport {\r\n    getItemInfoFromName, \r\n    convertItemDescToHtml,\r\n    getItemStatistics,\r\n    isDissassembleRule,\r\n    getFuzzyTooltipAbilityString\r\n} from \"../../utility/dataHelperItems\";\r\nimport { \r\n    getLocalizedString\r\n} from '../../utility/data-helpers/language';\r\nimport { calculateItemSellCost } from \"../../utility/calculate\";\r\nimport {\r\n    EDisassembleRule, EItemQuality\r\n} from \"../../enums/items\";\r\n\r\nimport \"./ItemTooltip.css\";\r\nimport { getItemIcon } from '../../utility/spriteHelper';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faHome, faCampground } from '@fortawesome/free-solid-svg-icons';\r\n\r\nfunction replaceItemStatLocalizeString (localizeString, value) {\r\n    // If generic one tha contains $value, split and insert value\r\n    if(localizeString.includes(\"$\")) {\r\n        let split = localizeString.split('$');\r\n        split.splice(1, 0, value);\r\n        return split.join(\" \");\r\n    } \r\n    // If contains %, arrange it correctly\r\n    else if (localizeString.includes(\"%\")) {\r\n        return localizeString.replace(\"%+\", `+ ${value}% `);\r\n    }\r\n    /// If negative value\r\n    else if (localizeString.includes(\"-\")) {\r\n        return localizeString.replace(\"-\", `- ${Math.abs(value)} `);\r\n    }\r\n    /// If fallen this far and contains a + value, just split and give the value\r\n    else if (localizeString.includes(\"+\")) {\r\n        return localizeString.replace(\"+\", `+ ${Math.abs(value)} `);\r\n    }\r\n    return localizeString;\r\n}\r\n\r\nclass ItemTooltip extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            itemName: props.itemName,\r\n            itemExtra: props.itemExtra,\r\n            dotaStrings: props.dotaStrings,\r\n            abilityStrings: props.abilityStrings,\r\n\r\n            itemInfo: getItemInfoFromName(props.itemName),  \r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                itemName: this.props.itemName,\r\n                itemExtra: this.props.itemExtra,\r\n                dotaStrings: this.props.dotaStrings,\r\n                abilityStrings: this.props.abilityStrings,\r\n                itemInfo: getItemInfoFromName(this.props.itemName),  \r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let scale = 0.7;\r\n        let width = \"88px\";\r\n        let height = \"64px\";\r\n        let goldIconSize = 20;\r\n\r\n        let itemStats = getItemStatistics(this.state.itemInfo, this.state.itemExtra);\r\n        let loreString = getFuzzyTooltipAbilityString(this.state.abilityStrings, `${this.state.itemName}_Lore`);\r\n        /// Get localized string and filter it to correct html\r\n        let descString = getFuzzyTooltipAbilityString(this.state.abilityStrings, `${this.state.itemName}_Description`);\r\n        let descFiltered = convertItemDescToHtml(descString, this.state.itemName, this.state.itemInfo);\r\n        return (\r\n            <div className=\"item-tooltip\">\r\n                <div className=\"d-flex p-1\">\r\n                    <div className=\"m-2\" style={{ width: `calc(${width} * ${scale})`, height: `calc(${height} * ${scale})` }}>\r\n                        {  \r\n                            getItemIcon(this.state.itemName, width, height, 0.7) \r\n                        }\r\n                    </div>\r\n                    <div>\r\n                        <h4>\r\n                            { getFuzzyTooltipAbilityString(this.state.abilityStrings, `${this.state.itemName}`) }\r\n                        </h4>\r\n                        {\r\n                            //If has an item cost and is more than 0\r\n                            this.state.itemInfo?.ItemCost && this.state.itemInfo?.ItemCost > 0 &&\r\n                            <div className=\"d-flex\">\r\n                                {\r\n                                    this.state.itemInfo?.ItemQuality &&\r\n                                        <FontAwesomeIcon icon={this.state.itemInfo?.ItemQuality == EItemQuality.SECRET_SHOP ? faCampground : faHome } className=\"align-item-center\" />\r\n                                }\r\n                                <img \r\n                                    className=\"mx-1\"\r\n                                    src={process.env.PUBLIC_URL + \"/images/dota2/gold_icon_ui.png\"} \r\n                                    height={goldIconSize}\r\n                                    width={goldIconSize} />\r\n                                <h6 className=\"gold-amount\">\r\n                                    { parseInt(this.state.itemInfo?.ItemCost) }\r\n                                </h6>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <div className=\"item-content p-2\">\r\n                    {/* item stat info */}\r\n                    {\r\n                        itemStats &&\r\n                            <div className=\"pb-1\">\r\n                                { \r\n                                    itemStats.map((value) => {\r\n                                        /// attempt to get localized string and display\r\n                                        let string = getFuzzyTooltipAbilityString(this.state.abilityStrings, `${this.state.itemName}_${value.key}`);\r\n                                        \r\n                                        if (string) {\r\n                                            /// Check if item stat is a generic one that can be applied to most items and replace variable with localized string\r\n                                            let genericKeys = [\r\n                                                \"health\", \"mana\", \"armor\", \"damage\", \"str\", \"int\", \"agi\", \"all\", \"attack\", \"hp_regen\",\r\n                                                \"mana_regen\", \"spell_amp\", \"move_speed\", \"evasion\", \"spell_resist\", \"selected_attrib\",\r\n                                                \"attack_range\", \"attack_range_melee\", \"cast_range\", \"status_resist\"\r\n                                            ];\r\n                                            // split and use variable to compare\r\n                                            let splitCompare = string.split(\"$\")[1];\r\n                                            for (let key of genericKeys) {\r\n                                                if (splitCompare === key) {\r\n                                                    /// get localized generic and replace variable in existing string\r\n                                                    let localized = getLocalizedString(this.state.abilityStrings, `dota_ability_variable_${key}`);\r\n                                                    string = string.replace(key.toString(), localized);\r\n                                                    break;\r\n                                                }\r\n                                            }\r\n                                            \r\n                                            return (\r\n                                                <div key={value.key} dangerouslySetInnerHTML={{ __html: replaceItemStatLocalizeString(string, value.value) }}>\r\n                                                </div>\r\n                                            );\r\n                                        }\r\n                                    })\r\n                                }\r\n                            </div>\r\n                    }\r\n\r\n                    {/* abilities */}\r\n                    {\r\n                        descString && descString != \"?\" &&\r\n                            <div className=\"p-1\">\r\n                                { descFiltered }\r\n                            </div>\r\n                    }\r\n\r\n                    {/* lore */}\r\n                    {\r\n                        loreString && loreString != \"?\" &&   \r\n                            <div className=\"p-1 m-1 lore\">\r\n                                { loreString }\r\n                            </div>\r\n                    }\r\n\r\n                    {/* sell price */}\r\n                    {\r\n                        this.state.itemInfo?.ItemCost && !this.state.itemInfo?.ItemIsNeutralDrop &&\r\n                            <div className=\"px-1\"> \r\n                                {\r\n                                    getLocalizedString(this.state.dotaStrings, \"DOTA_Item_Tooltip_Sell_Price\")\r\n                                    .replace(\"%s1\", calculateItemSellCost(this.state.itemInfo))\r\n                                }\r\n                            </div>\r\n                    }\r\n\r\n                    {/* dissassemble */}\r\n                    {\r\n                        isDissassembleRule(this.state.itemInfo, EDisassembleRule.ALWAYS) && \r\n                            <div className=\"px-1\">\r\n                                { getLocalizedString(this.state.dotaStrings, \"DOTA_Item_Tooltip_Disassemble\") }\r\n                            </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ItemTooltip;","import ItemTooltip from \"./ItemTooltip\";\r\n\r\nexport default ItemTooltip;","import React, { Component } from 'react';\r\nimport Popup from 'reactjs-popup';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { \r\n    faInfo, \r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport {\r\n    Form\r\n} from \"react-bootstrap\";\r\n\r\nimport { getItemIcon } from \"../../utility/spriteHelper\"\r\nimport { \r\n    getItemInfoFromName,\r\n    itemRequiresCharges\r\n} from '../../utility/dataHelperItems';\r\n\r\nimport ItemSelector from \"./ItemSelector\";\r\nimport ItemTooltip from '../ItemTooltip';\r\nimport \"../../css/dota_hero_icons_big.css\";\r\n\r\n/// Single item that contains a popup to change the item\r\nclass Item extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            item: props.item,\r\n            slot: props.slot, \r\n            isBackpack: props.isBackpack,\r\n\r\n            onItemChanged: props.onItemChanged,\r\n            onItemExtraChanged: props.onItemExtraChanged,\r\n\r\n            dotaStrings: props.dotaStrings,\r\n            abilityStrings: props.abilityStrings,\r\n\r\n            itemExtra: { },\r\n\r\n            itemSelectorDisabled: false,\r\n        };\r\n\r\n        //console.log(`slot: ${this.state.slot} - item: ${this.state.item}`);\r\n        this.onSelectedItem = this.onSelectedItem.bind(this);\r\n        this.onBloodstoneChargesChanged = this.onBloodstoneChargesChanged.bind(this);\r\n        this.setCharges = this.setCharges.bind(this);\r\n        this.onItemUpdated = this.onItemUpdated.bind(this);\r\n        this.triggerOnItemChangedEvent = this.triggerOnItemChangedEvent.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.item !== this.props.item) {\r\n            this.setState({ \r\n                item: this.props.item, \r\n            });\r\n        }\r\n\r\n        if (prevProps.slot !== this.props.slot) {\r\n            this.setState({ slot: this.props.slot });\r\n        }\r\n\r\n        if (prevProps.isBackpack !== this.props.isBackpack) {\r\n            this.setState({ isBackpack: this.props.isBackpack });\r\n        }\r\n\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ abilityStrings: this.props.abilityStrings });\r\n        }\r\n\r\n        if (prevProps.dotaStrings !== this.props.dotaStrings) {\r\n            this.setState({ dotaStrings: this.props.dotaStrings });\r\n        }\r\n    }\r\n\r\n    triggerOnItemChangedEvent (item = null) {\r\n        this.state.onItemChanged({ \r\n            slot: this.state.slot, \r\n            item: item ?? this.state.item,\r\n            extra: this.state.itemExtra,\r\n            isBackpack: this.state.isBackpack ? true : false,\r\n        });\r\n    }\r\n\r\n    onItemUpdated (newItem = null, callback) {\r\n        if (newItem && newItem.includes(\"item_dagon\")) {\r\n            let split = newItem.split(\"_\");\r\n            // Lowest dagon is level 1 (item_dagon). If higher one, parse level (item_dagon_{level})\r\n            let dagonLvl = 1;\r\n            if (split.length > 2) {\r\n                dagonLvl = parseInt(split[2]);\r\n            }\r\n            this.setState({\r\n                item: newItem,\r\n                itemExtra: {\r\n                    level: dagonLvl,\r\n                },\r\n            }, () => {\r\n                callback();\r\n            });\r\n        } else if (newItem && newItem === \"item_bloodstone\") {\r\n            /// Set inital charges of bloodstone\r\n            let itemInfo = getItemInfoFromName(newItem);\r\n            this.setState({\r\n                item: newItem,\r\n                itemExtra: {\r\n                    charges: itemInfo?.ItemInitialCharges ?? 0,\r\n                },\r\n            }, () => {\r\n                /// Update state to new init value\r\n                this.setCharges(this.state.itemExtra.charges);\r\n                callback();\r\n            });\r\n        } else {\r\n            // No item & item extra to add, clear itemExtra and callback\r\n            this.setState({\r\n                item: null,\r\n                itemExtra: null,\r\n            }, () => {\r\n                callback();\r\n            })\r\n        }\r\n    }\r\n\r\n    onSelectedItem (item) {\r\n        // Close item selector popup by disabling\r\n        this.setState({\r\n            itemSelectorDisabled: true,\r\n        });\r\n\r\n        // Update item locally, then trigger itemChanged event\r\n        this.onItemUpdated(item, () => {\r\n            this.triggerOnItemChangedEvent(item);\r\n        });\r\n    }\r\n\r\n    onBloodstoneChargesChanged (e) {\r\n        let newVal = parseInt(e.target.value);\r\n        this.setCharges(newVal);\r\n    }\r\n\r\n    setCharges(newChargeAmt) {\r\n        // If null or not exist, set to 0\r\n        if (!newChargeAmt) {\r\n            newChargeAmt = 0;\r\n        }\r\n\r\n        // Value must be more than 0 and less than 999\r\n        if (newChargeAmt < 0) {\r\n            newChargeAmt = 0;\r\n        } else if (newChargeAmt > 999) {\r\n            newChargeAmt = 999;\r\n        }\r\n        \r\n        this.setState({\r\n            itemExtra: {\r\n                ...this.state.itemExtra,\r\n                charges: newChargeAmt,\r\n            },\r\n        });\r\n    }\r\n\r\n    render() {\r\n        // If last render was disabled, enable again\r\n        if (this.state.itemSelectorDisabled) {\r\n            this.setState({ itemSelectorDisabled: false });\r\n        }\r\n\r\n        let scale = 0.7;\r\n        let width = \"88px\";\r\n        let height = \"64px\";\r\n        return (\r\n            // Relative to make positioning work on children\r\n            <div style={{ \r\n                position:\"relative\"\r\n                }}>\r\n                {\r\n                    // Hover popup for Item information tooltip\r\n                    this.state.item &&\r\n                        <Popup\r\n                            trigger={isOpen => (\r\n                                // Info icon on item to display tooltip\r\n                                <div\r\n                                    className=\"ml-2 mt-1\" \r\n                                    style={{ position:\"absolute\", zIndex: 1 }}>\r\n                                    <FontAwesomeIcon icon={faInfo} />\r\n                                </div>\r\n                            )}\r\n                            position=\"right center\"\r\n                            on=\"hover\"\r\n                            className=\"foresight-tooltip\"\r\n                            contentStyle={{ width: \"350px\" }}>\r\n                                <ItemTooltip\r\n                                    itemName={this.state.item}\r\n                                    itemExtra={this.state.itemExtra}\r\n                                    dotaStrings={this.state.dotaStrings}\r\n                                    abilityStrings={this.state.abilityStrings}\r\n                                    />\r\n                        </Popup>\r\n                }\r\n                {/* Item selector popup to allow for changing to new item */}\r\n                <Popup\r\n                    trigger={isOpen => (\r\n                        // Item icon\r\n                        <div className=\"m-1\">\r\n                            <div \r\n                                style={{ \r\n                                    cursor: \"pointer\",\r\n                                    width: `calc(${width} * ${scale})`, \r\n                                    height: `calc(${height} * ${scale})` \r\n                                }}>\r\n                                {  getItemIcon(this.state.item, width, height, 0.7) }\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                    closeOnDocumentClick \r\n                    disabled={this.state.itemSelectorDisabled}\r\n                    position=\"right center\"\r\n                    on=\"click\"\r\n                    className=\"foresight-tooltip\"\r\n                    contentStyle={{ \r\n                        width: \"350px\", \r\n                        height: \"450px\",\r\n                    }}>\r\n                        <ItemSelector \r\n                            onSelectedItem={this.onSelectedItem}\r\n                            dotaStrings={this.state.dotaStrings}\r\n                            abilityStrings={this.state.abilityStrings} />\r\n                </Popup>\r\n                {\r\n                    // Charge counter UI for bloodstone or charge based items\r\n                    (this.state.item === \"item_bloodstone\" || itemRequiresCharges(this.state.item)) &&\r\n                    <div style={{ \r\n                        position: \"absolute\", \r\n                        zIndex: 1, \r\n                        width: `calc(${width} * ${scale})`, \r\n                        height: `calc(${height} * ${scale})`,\r\n                        top: `calc(${height} * ${scale} - 17px)`,\r\n                        left: `calc(${width} * ${scale} - 27px)`, \r\n                    }}>\r\n                        <Form.Control \r\n                            size=\"sm\" \r\n                            value={ this.state.itemExtra?.charges ?? 0 } \r\n                            onChange={this.onBloodstoneChargesChanged} \r\n                            style={{ \r\n                                width: \"30px\",\r\n                                height: \"20px\",\r\n                                padding: 0,\r\n                                textAlign: \"center\",\r\n                                background: \"rgba(0, 0, 0, 0.5)\",\r\n                                border: 0,\r\n                                color: \"white\"\r\n                            }} />\r\n                    </div>\r\n                }\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default Item;","import React, { Component } from 'react';\r\nimport {\r\n    Button,\r\n    Form,\r\n    ListGroup\r\n} from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faMinus } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport {\r\n    getAllNeutrals, getItemInfoFromName, getNeutralTierLayout, itemAliasIncludes,\r\n} from \"../../utility/dataHelperItems\";\r\n\r\nimport { getItemIcon } from '../../utility/spriteHelper';\r\nimport { \r\n    getLocalizedString, \r\n    replaceStringValue,\r\n} from '../../utility/data-helpers/language';\r\n\r\nfunction ItemIcon(props) {\r\n    let searchIconScale = 0.45;\r\n    return (\r\n        <div \r\n            key={props.keyName} \r\n            title={props.itemName} \r\n            onClick={props.onClick}\r\n            data-item={props.itemName}\r\n            className=\"m-1\" \r\n            style={{ width: `calc(88px * ${searchIconScale})`, height: `calc(64px * ${searchIconScale})` }}>\r\n            { \r\n                getItemIcon(props.itemName, \"88px\", \"64px\", searchIconScale) \r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\n/// HTML for one level of tiered neutral items\r\nfunction NeutralTier (props) {\r\n    return (\r\n        <div>\r\n            <div className=\"d-flex\" style={{ color:\"white\" }}>\r\n                <h6>\r\n                    { replaceStringValue( getLocalizedString(props.dotaStrings, \"DOTA_Shop_NeutralTier\"), props.tier) } \r\n                </h6>\r\n                <h6 className=\"ml-auto text-muted\">\r\n                    { props.time + \"+\" }\r\n                </h6>\r\n            </div>\r\n            <div className=\"d-flex flex-wrap\">\r\n                {\r\n                    props.neutrals && Object.keys(props.neutrals).map((neutralKey, index) => {\r\n                        // Replace any recipes with actual item\r\n                        let neutral = neutralKey;\r\n                        if (neutral.includes(\"_recipe\")) {\r\n                            neutral = neutral.replace(\"_recipe\", \"\");\r\n                        }\r\n\r\n                        let localizedName = getLocalizedString(props.abilityStrings, `DOTA_Tooltip_Ability_${neutral}`);\r\n                        return (\r\n                            <div \r\n                                className=\"m-1\" \r\n                                key={ `${neutral}-${index}` } \r\n                                title={ localizedName }\r\n                                onClick={ props.onNeutralSelected }\r\n                                data-neutral={ neutral }\r\n                                style={{ width: `calc(88px * ${props.iconScale})`, height: `calc(64px * ${props.iconScale})` }}>\r\n                                { \r\n                                    getItemIcon(neutral, \"88px\", \"64px\", props.iconScale)\r\n                                }\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nclass NeutralItemSelector extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let allNeutrals = getAllNeutrals();\r\n        let neutralTierList = getNeutralTierLayout();\r\n        this.state = {\r\n            allNeutrals: allNeutrals,\r\n            queryNeutrals: null,\r\n            neutralTierList: neutralTierList,\r\n\r\n            iconScale: 0.49,\r\n            onNewNeutralSelected: props.onNeutralSelected,\r\n\r\n            dotaStrings: props.dotaStrings,\r\n            abilityStrings: props.abilityStrings,\r\n        };\r\n\r\n        this.onNeutralSelected = this.onNeutralSelected.bind(this);\r\n        this.onSearchChanged = this.onSearchChanged.bind(this);\r\n    }\r\n\r\n    onNeutralSelected(e) {\r\n        let neutral = e.target.parentElement.dataset.neutral;\r\n        this.state.onNewNeutralSelected({ item: neutral });\r\n    }\r\n\r\n    onSearchChanged (e) {\r\n        let query = e.target.value;\r\n        let filteredNeutrals = null;\r\n        if (query) {\r\n            filteredNeutrals = this.state.allNeutrals.filter((neutral, index) => {\r\n                // Check query for match in localized string, should work most of the time\r\n                let localizedName = getLocalizedString(this.state.abilityStrings, `DOTA_Tooltip_Ability_${neutral.item}`)?.toLowerCase();\r\n                if (localizedName && localizedName.indexOf(query.toLowerCase()) !== -1) {\r\n                    return true;\r\n                }\r\n\r\n                // Match query with any item aliases (only works for english)\r\n                let aliasMatch = itemAliasIncludes(neutral.itemInfo.ItemAliases, query);\r\n                if (aliasMatch) {\r\n                    return true;\r\n                }\r\n            });\r\n        }\r\n\r\n        /// If no query, show all neutrals\r\n        this.setState({\r\n            queryNeutrals: filteredNeutrals,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"neutral-item-card\" style={{ color: \"black\" }}>\r\n                <div className=\"neutral-item-card header d-flex p-2\">\r\n                    <div>\r\n                        <Form.Control \r\n                            className=\"foresight-input-control\"\r\n                            type=\"text\" \r\n                            placeholder=\"Search...\" \r\n                            onChange={this.onSearchChanged}/>\r\n                    </div>\r\n                    <Button className=\"ml-auto\" variant=\"outline-danger\" onClick={this.onNeutralSelected} data-neutral={null}>\r\n                        <FontAwesomeIcon icon={faMinus} data-neutral={null} />\r\n                    </Button>\r\n                </div>\r\n                <div className=\"neutral-item-card content p-2\">\r\n                    {/* Query search term UI */}\r\n                    {\r\n                        this.state.queryNeutrals && \r\n                            <ListGroup className=\"foresight-list-group\">\r\n                                {\r\n                                    <h6>\r\n                                        { getLocalizedString(this.state.dotaStrings, \"DOTA_Shop_Search_Results_Title\") }\r\n                                    </h6>\r\n                                }\r\n                                {\r\n                                    this.state.queryNeutrals.map((itemInfo, index) => {\r\n                                        let localizedName = getLocalizedString(this.state.abilityStrings, `DOTA_Tooltip_Ability_${itemInfo.item}`);\r\n                                        return ( \r\n                                            <ListGroup.Item\r\n                                                key={ `${itemInfo.item}-${index}`}\r\n                                                onClick={this.onNeutralSelected}\r\n                                                title={localizedName}\r\n                                                data-neutral={itemInfo.item}\r\n                                                action>\r\n                                                <div className=\"d-flex\" data-neutral={itemInfo.item}>\r\n                                                    <ItemIcon \r\n                                                        itemName={itemInfo.item}\r\n                                                        onClick={this.onNeutralSelected}  />\r\n                                                    <h6 className=\"mx-1 my-auto\" data-neutral={itemInfo.item}>\r\n                                                        { localizedName ?? itemInfo.item }\r\n                                                    </h6>\r\n                                                </div>\r\n                                            </ListGroup.Item>\r\n                                        )\r\n                                    })\r\n                                }\r\n                                {\r\n                                    this.state.queryNeutrals.length <= 0 &&\r\n                                        <h6>\r\n                                            { \r\n                                                getLocalizedString(this.state.dotaStrings, \"DOTA_Shop_Search_No_Results\")\r\n                                            }\r\n                                        </h6>\r\n                                }\r\n                            </ListGroup>\r\n                    }\r\n                    \r\n                    <div>\r\n                        {\r\n                            !this.state.queryNeutrals && this.state.neutralTierList && this.state.neutralTierList.map((tier, index) => {\r\n                                let time = Object.keys(tier.drop_rates).filter((key) => {\r\n                                    if (key.includes(\":\")) {\r\n                                        return true;\r\n                                    }\r\n                                });\r\n                                let array = tier.drop_rates[time[0]];\r\n                                let tierDropAmt = Object.keys(array).length;\r\n\r\n                                return (\r\n                                    <NeutralTier \r\n                                        tier={index + 1}\r\n                                        neutrals={tier.items}\r\n                                        time={time}\r\n                                        dropAmount={tierDropAmt}\r\n                                        iconScale={this.state.iconScale}\r\n                                        onNeutralSelected={this.onNeutralSelected}\r\n                                        dotaStrings={this.state.dotaStrings}\r\n                                        abilityStrings={this.state.abilityStrings}\r\n                                        />\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NeutralItemSelector;","import Neutral from \"./Neutral\";\r\n\r\nexport default Neutral;","import React, { Component } from 'react';\r\nimport Popup from \"reactjs-popup\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faInfo } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport NeutralItemSelector from \"./NeutralItemSelector\";\r\nimport ItemTooltip from '../ItemTooltip';\r\n\r\nimport { itemNameToElement } from \"../../utils\";\r\nimport { getItemIcon } from '../../utility/spriteHelper';\r\n\r\nclass Neutral extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            neutralItem: props.neutralItem,\r\n            onNewNeutralSelected: props.onNewNeutralSelected,\r\n            dotaStrings: props.dotaStrings,\r\n            abilityStrings: props.abilityStrings,\r\n\r\n            iconScale: 0.7,\r\n            neutralSelectorDisabled: false,\r\n        };\r\n\r\n        this.onNeutralSelected = this.onNeutralSelected.bind(this);\r\n    }\r\n\r\n    componentDidUpdate (prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                neutralItem: this.props.neutralItem,\r\n                dotaStrings: this.props.dotaStrings,\r\n                abilityStrings: this.props.abilityStrings,\r\n                onNewNeutralSelected: this.props.onNewNeutralSelected,\r\n            });\r\n        }\r\n    }\r\n\r\n    onNeutralSelected (neutral) {\r\n        this.setState({\r\n            neutralSelectorDisabled: true,\r\n        });\r\n\r\n        if (this.state.onNewNeutralSelected) {\r\n            this.state.onNewNeutralSelected(neutral);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if(this.state.neutralSelectorDisabled) {\r\n            this.setState({ neutralSelectorDisabled: false });\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                {\r\n                    this.state.neutralItem && this.state.neutralItem.item &&\r\n                        <Popup\r\n                            trigger={isOpen => (\r\n                                <div\r\n                                    className=\"ml-2 mt-1\" \r\n                                    style={{ position:\"absolute\", zIndex: 1 }}>\r\n                                    <FontAwesomeIcon icon={faInfo} />\r\n                                </div>\r\n                            )}\r\n                            position=\"right center\"\r\n                            on=\"hover\"\r\n                            className=\"foresight-tooltip\"\r\n                            contentStyle={{\r\n                                width: \"350px\",\r\n                            }}>\r\n                                <ItemTooltip\r\n                                    itemName={this.state.neutralItem.item}\r\n                                    dotaStrings={this.state.dotaStrings}\r\n                                    abilityStrings={this.state.abilityStrings}\r\n                                    />\r\n                        </Popup>\r\n                }\r\n                <Popup\r\n                    trigger={isOpen => {\r\n                        return (<div style={{\r\n                            cursor: \"pointer\",\r\n                        }}>\r\n                            { getItemIcon(this.state.neutralItem.item, \"88px\", \"64px\", this.state.iconScale) }\r\n                        </div>)\r\n                    }}\r\n                    position=\"right center\"\r\n                    disabled={this.state.neutralSelectorDisabled}\r\n                    className=\"foresight-tooltip\"\r\n                    contentStyle={{\r\n                        width: \"350px\",\r\n                        height: \"450px\"\r\n                    }}>\r\n                        <NeutralItemSelector \r\n                            onNeutralSelected={this.onNeutralSelected}\r\n                            dotaStrings={this.state.dotaStrings} \r\n                            abilityStrings={this.state.abilityStrings}\r\n                            />\r\n                </Popup>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Neutral;","import React, { Component } from 'react';\r\nimport {\r\n    Row, \r\n    Col\r\n} from \"react-bootstrap\";\r\n\r\nimport { \r\n    getLocalizedString\r\n} from '../../utility/data-helpers/language';\r\n\r\nimport Item from \"./Item\";\r\nimport Neutral from \"../Neutral\";\r\n\r\nclass ItemsBar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            items: props.items,\r\n            backpack: props.backpack,\r\n            neutral: props.neutral,\r\n            iconScale: 0.7,\r\n\r\n            onNeutralChanged: props.onNeutralChanged,\r\n            onItemChanged: props.onItemChanged,\r\n\r\n            dotaStrings: props.dotaStrings,\r\n            abilityStrings: props.abilityStrings,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        //Update if previous props have changed\r\n        if (prevProps.items !== this.props.items) {\r\n            this.setState({\r\n                items: this.props.items,\r\n            });\r\n        }\r\n\r\n        if (prevProps.backpack !== this.props.backpack) {\r\n            this.setState({\r\n                backpack: this.props.backpack,\r\n            });\r\n        }\r\n\r\n        if (prevProps.neutral !== this.props.neutral) {\r\n            this.setState({\r\n                neutral: this.props.neutral,\r\n            });\r\n        }\r\n\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ abilityStrings: this.props.abilityStrings });\r\n        }\r\n        if (prevProps.dotaStrings !== this.props.dotaStrings) {\r\n            this.setState({ dotaStrings: this.props.dotaStrings });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let itemsColWidth = 5;\r\n        let backpackColWidth = 5;\r\n        let neutralColWidth = 2;\r\n        return (\r\n            <div>\r\n                <Row>\r\n                    <Col md={itemsColWidth}>\r\n                        <h6>{ getLocalizedString(this.state.dotaStrings, \"DOTA_SHOP_ITEMS\") }</h6>\r\n                        <Row md={3} className=\"m-0 p-0\">\r\n                            {\r\n                                this.state.items && this.state.items.map((value) => {\r\n                                    return (\r\n                                        <Item \r\n                                            key={value.slot}\r\n                                            slot={value.slot}\r\n                                            item={value.item} \r\n                                            onItemChanged={this.state.onItemChanged}\r\n                                            onItemExtraChnaged={this.state.onItem}\r\n                                            dotaStrings={this.state.dotaStrings} \r\n                                            abilityStrings={this.state.abilityStrings} />\r\n                                    )\r\n                                })\r\n                            }\r\n                        </Row>\r\n                    </Col>\r\n                    <Col md={backpackColWidth}>\r\n                        <h6>{ getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_BackpackHintTitle\").toUpperCase() }</h6>\r\n                        <div className=\"d-flex flex-wrap\">\r\n                            {\r\n                                this.state.backpack && this.state.backpack.map((value) => {\r\n                                    return (\r\n                                        <Item\r\n                                            key={value.slot}\r\n                                            slot={value.slot}\r\n                                            item={value.item}\r\n\r\n                                            isBackpack={true}\r\n                                            onItemChanged={this.state.onItemChanged}\r\n                                            dotaStrings={this.state.dotaStrings}\r\n                                            abilityStrings={this.state.abilityStrings} />\r\n                                    )\r\n                                })\r\n                            }\r\n                        </div>\r\n                    </Col>\r\n                    <Col md={neutralColWidth}>\r\n                        <h6>{ getLocalizedString(this.state.dotaStrings, \"UI_NEUTRALS\") }</h6>\r\n                        {/* Neutral Item */}\r\n                        <div>\r\n                            <Neutral \r\n                                neutralItem={this.state.neutral} \r\n                                onNewNeutralSelected={this.state.onNeutralChanged}\r\n                                dotaStrings={this.state.dotaStrings}\r\n                                abilityStrings={this.state.abilityStrings} />\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ItemsBar;","import ItemsBar from \"./ItemsBar\";\r\n\r\nexport default ItemsBar;","import React, { Component } from 'react';\r\n\r\nimport { EAttributes } from \"../../enums/attributes.js\";\r\n\r\nimport \"./Attributes.css\";\r\nimport { getLocalizedString, replaceStringValue } from '../../utility/data-helpers/language.js';\r\nimport { calculateAttribute } from '../../utility/calculate.js';\r\n\r\nfunction Attribute(props) {\r\n    return (\r\n        <div className=\"d-flex my-2 align-items-center\">\r\n            <div className={props.isPrimaryAttribute ? \" primary-attribute\" : \"\"}>\r\n                <span className={'attribute ' + props.type} alt=\"attribute\" />\r\n            </div>\r\n            <div className=\"ml-2\">{props.value}</div>\r\n            {\r\n                props.additional && props.additional > 0 &&\r\n                <div   \r\n                    className=\"mx-1\" \r\n                    style={{ color: \"green\" }}>\r\n                    {\"+\" + props.additional}\r\n                </div>\r\n            }\r\n            <div\r\n                className=\"ml-3\"\r\n                style={{ fontSize: \"0.75rem\" }}>\r\n                {\r\n                    replaceStringValue(props.perLevelString, props.per)\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nclass Attributes extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            hero: props.hero,\r\n            level: props.heroLevel,\r\n            items: props.items,\r\n            talents: props.talents,\r\n            neutral: props.neutral,\r\n            abilities: props.abilities,\r\n\r\n            dotaStrings: props.dotaStrings,\r\n            abilityStrings: props.abilityStrings,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                hero: this.props.hero,\r\n                level: this.props.heroLevel,\r\n                items: this.props.items,\r\n                talents: this.props.talents,\r\n                neutral: this.props.neutral,\r\n                abilities: this.props.abilities,\r\n                abilityLevels: this.props.abilityLevels,\r\n\r\n                dotaStrings: this.props.dotaStrings,\r\n                abilityStrings: this.props.abilityStrings,\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let strengthStats = calculateAttribute(EAttributes.ATTR_STRENGTH, this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents, this.state.abilityLevels);\r\n        let agilityStats = calculateAttribute(EAttributes.ATTR_AGILITY, this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents, this.state.abilityLevels);\r\n        let intStats = calculateAttribute(EAttributes.ATTR_INTELLIGENCE, this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents, this.state.abilityLevels);\r\n        return (\r\n            <div>\r\n                <h5>{getLocalizedString(this.state.dotaStrings, \"DOTA_Tooltip_topbar_stats\")}</h5>\r\n                <h6>{getLocalizedString(this.state.dotaStrings, \"DOTA_Attributes\")}</h6>\r\n                <Attribute \r\n                    type=\"strength\" \r\n                    value={ strengthStats.attribute }\r\n                    additional= { strengthStats.additionalAttribute }\r\n                    per={ strengthStats.perLevel } \r\n                    isPrimaryAttribute={this.state.hero?.AttributePrimary === EAttributes.ATTR_STRENGTH}\r\n                    perLevelString={ getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_StrengthGain\") } />\r\n\r\n                <Attribute \r\n                    type=\"agility\"\r\n                    value={ agilityStats.attribute }\r\n                    additional= { agilityStats.additionalAttribute }\r\n                    per={ agilityStats.perLevel } \r\n                    isPrimaryAttribute={this.state.hero?.AttributePrimary === EAttributes.ATTR_AGILITY} \r\n                    perLevelString={ getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_AgilityGain\") } />\r\n\r\n                <Attribute \r\n                    type=\"intelligence\" \r\n                    value={ intStats.attribute }\r\n                    additional= { intStats.additionalAttribute }\r\n                    per={ intStats.perLevel } \r\n                    isPrimaryAttribute={this.state.hero?.AttributePrimary === EAttributes.ATTR_INTELLIGENCE} \r\n                    perLevelString={ getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_IntelligenceGain\") } />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Attributes;","import Attributes from \"./Attributes\";\r\n\r\nexport default Attributes;","import React, { Component } from 'react';\r\nimport {\r\n    Row, Col\r\n} from \"react-bootstrap\";\r\nimport { faEye, faEyeSlash } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport {\r\n    calculateHealthRegen,\r\n    calculateManaRegen,\r\n    calculateMainArmor,\r\n    calculateTotalSpellAmp,\r\n    calculateStatusResist,\r\n    calculateMagicResist,\r\n    calculatePhysicalResist,\r\n    calculateEvasion,\r\n    calculateRightClickDamage,\r\n    calculateAttackTime,\r\n    calculateMoveSpeed,\r\n    calculateAttackRange,\r\n    calculateTotalLifesteal,\r\n    calculateTotalCleaveDmgPercent,\r\n    calculateCritPercent,\r\n    calculateTotalSpellLifesteal,\r\n    calculateCritChancePercent\r\n} from \"../../utility/calculate\";\r\nimport {\r\n    getLocalizedString\r\n} from \"../../utility/data-helpers/language\";\r\n\r\nfunction StatArray(props) {\r\n    return (\r\n        <div style={{ backgroundColor: \"#171717\", color: \"white\", fontSize: \"0.8rem\" }} className=\"p-2 h-100\">\r\n            <h6 className=\"ml-auto\">{props.title}</h6>\r\n            {\r\n                props.stats &&\r\n                    props.stats.map((value) => {\r\n                        return (\r\n                        <Row \r\n                            key={value.name}\r\n                            className=\"mx-0\">\r\n                            <Col \r\n                                md={6}\r\n                                className=\"px-0\">\r\n                                {value.name}\r\n                            </Col>\r\n                            <Col \r\n                                md={6}\r\n                                className=\"px-0\">\r\n                                {value.value}\r\n                            </Col>\r\n                        </Row>\r\n                        );\r\n                    })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\n/// Gets the attack min/max and formats it for display in UI\r\nfunction formatAttackMinMax(hero, lvl, items, neutral, abilities, talents, abilityLevels) {\r\n    let standardAtkDmg = calculateRightClickDamage(hero, lvl, items, neutral, abilities, talents, abilityLevels);\r\n    \r\n    // Range string\r\n    //let dmgString = `${standardAtkDmg.min} - ${standardAtkDmg.max}`;\r\n    // Average damage inbetween range value\r\n    let dmgString = standardAtkDmg.min + ((standardAtkDmg.max - standardAtkDmg.min) / 2);\r\n    if (standardAtkDmg.additional) {\r\n        dmgString += \" \";\r\n        dmgString += `${ standardAtkDmg.additional >= 0 ? \"+\" : \"-\" } ${Math.abs(standardAtkDmg.additional)}`;\r\n    }\r\n    return dmgString;\r\n}\r\n\r\n/// Gets the atk time and formats it to display in UI\r\nfunction formatAttackTime(hero, lvl, items, neutral, abilities, talents) {\r\n    let attackInfo = calculateAttackTime(hero, lvl, items, neutral, abilities, talents);\r\n    return `${attackInfo.attackSpeed} (${attackInfo.attackTime} s)`;\r\n}\r\n\r\n/// Format a total value and additional value into a string,\r\n/// hiding and displaying the correct sign if additional value is +/- or 0\r\nfunction formatTotalAdditional (total, additional, toFixedAmt = -1) {\r\n    if (total == null) {\r\n        return null;\r\n    }\r\n\r\n    let val = total;\r\n    // Convert to fixed decimal place if value given\r\n    if (toFixedAmt >= 0) {\r\n        val = total.toFixed(toFixedAmt)\r\n    }\r\n    // If additional value, append \"+{value}\"\r\n    if (additional && additional > 0) {\r\n        let additionalValue = additional;\r\n        // If to fixed decimal place, do it\r\n        if (toFixedAmt >= 0) {\r\n            additionalValue = Math.abs(additionalValue.toFixed(toFixedAmt));\r\n        }\r\n\r\n        // Append space with formatting\r\n        val += \" \";\r\n        val += `${additional > 0 ? \"+\" : \"-\"} ${additionalValue}`;\r\n    }\r\n\r\n    return val;\r\n}\r\n\r\nclass Statistics extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            hero: props.hero,\r\n            level: props.heroLevel,\r\n            talents: props.talents,\r\n            items: props.items,\r\n            neutral: props.neutral,\r\n            abilities: props.abilities,\r\n            abilityLevels: props.abilityLevels,\r\n\r\n            dotaStrings: props.dotaStrings,\r\n            abilityStrings: props.abilityStrings,\r\n\r\n            otherOpen: false,\r\n        };\r\n\r\n        this.updateStatistics = this.updateStatistics.bind(this);\r\n        this.onToggleOtherDetails = this.onToggleOtherDetails.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateStatistics();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.hero !== this.props.hero) {\r\n            this.setState({ \r\n                hero: this.props.hero \r\n            }, () => {\r\n                this.updateStatistics();\r\n            });\r\n        }\r\n        if (prevProps.items !== this.props.items) {\r\n            this.setState({ \r\n                items: this.props.items \r\n            }, () => {\r\n                this.updateStatistics();\r\n            });\r\n        }\r\n        if (prevProps.neutral !== this.props.neutral) {\r\n            this.setState({ \r\n                neutral: this.props.neutral, \r\n            }, () => {\r\n                this.updateStatistics();\r\n            });\r\n        }\r\n        if (prevProps.talents !== this.props.talents) {\r\n            this.setState({ \r\n                talents: this.props.talents \r\n            }, () => {\r\n                this.updateStatistics();\r\n            });\r\n        }\r\n        if (prevProps.abilities !== this.props.abilities) {\r\n            this.setState({ \r\n                abilities: this.props.abilities \r\n            }, () => {\r\n                this.updateStatistics();\r\n            });\r\n        }\r\n        if (prevProps.heroLevel !== this.props.heroLevel) {\r\n            this.setState({ \r\n                level: this.props.heroLevel \r\n            }, () => {\r\n                this.updateStatistics();\r\n            });\r\n        }\r\n        if (prevProps.abilityLevels !== this.props.abilityLevels) {\r\n            this.setState({ \r\n                abilityLevels: this.props.abilityLevels, \r\n            }, () => {\r\n                this.updateStatistics();\r\n            });\r\n        }\r\n        if (prevProps.dotaStrings !== this.props.dotaStrings) {\r\n            this.setState({ dotaStrings: this.props.dotaStrings });\r\n        }\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ abilityStrings: this.props.abilityStrings });\r\n        }\r\n    }\r\n\r\n    onToggleOtherDetails () {\r\n        this.setState({\r\n            otherOpen: !this.state.otherOpen,\r\n        });\r\n    }\r\n\r\n    updateStatistics() {\r\n        let armorInfo =  calculateMainArmor(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents, this.state.abilityLevels);\r\n        let physResist = calculatePhysicalResist(armorInfo.armor + armorInfo.additional);\r\n        let moveSpeedInfo = calculateMoveSpeed(this.state.hero, this.state.items, this.state.neutral, this.state.abilities, this.state.talents);\r\n        this.setState({\r\n            // Attack\r\n            attackSpeed: formatAttackTime(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n            damage: formatAttackMinMax(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents, this.state.abilityLevels),\r\n            attackRange: calculateAttackRange(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n            moveSpeed: formatTotalAdditional(moveSpeedInfo?.baseSpeed, moveSpeedInfo?.additional),\r\n            spellAmp: calculateTotalSpellAmp(this.state.talents, this.state.items, this.state.neutral),\r\n            manaRegen: calculateManaRegen(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n\r\n            // Defence\r\n            armor: formatTotalAdditional(armorInfo?.armor, armorInfo?.additional, 2),\r\n            physicalResist: physResist,\r\n            magicResist: calculateMagicResist(this.state.items, this.state.neutral, this.state.abilities, this.state.talents, this.state.abilityLevels),\r\n            statusResist: calculateStatusResist(this.state.items, this.state.neutral),\r\n            evasion: calculateEvasion(this.state.items, this.state.neutral, this.state.abilities , this.state.talents, this.state.abilityLevels),\r\n            healthRegen: calculateHealthRegen(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n\r\n            // Other\r\n            totalLifesteal: calculateTotalLifesteal(this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n            totalSpellLifesteal: calculateTotalSpellLifesteal(this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n            totalCleaveAmount: calculateTotalCleaveDmgPercent(this.state.hero, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n            totalCritPercent: calculateCritPercent(this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n            totalCritChancePercent: calculateCritChancePercent(this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n            totalCooldownAmount: 0,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Row>\r\n                    {\r\n                        this.state.hero &&\r\n                        <Col md={6}>\r\n                            <StatArray title={getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_Attack\")} stats={[\r\n                                { \r\n                                    name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_AttackSpeed\"),\r\n                                    value: this.state.attackSpeed\r\n                                },\r\n                                { \r\n                                    name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_Damage\"), \r\n                                    value: this.state.damage \r\n                                },\r\n                                { \r\n                                    name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_AttackRange\"), \r\n                                    value: this.state.attackRange \r\n                                },\r\n                                { \r\n                                    name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_MoveSpeed\"), \r\n                                    value: this.state.moveSpeed \r\n                                },\r\n                                { \r\n                                    name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_SpellAmp\"), \r\n                                    value: this.state.spellAmp + \"%\" \r\n                                },\r\n                                { \r\n                                    name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_ManaRegenDetail\"), \r\n                                    value: this.state.manaRegen \r\n                                },\r\n                            ]} />\r\n                        </Col>\r\n                    }   \r\n                    {\r\n                        this.state.hero &&\r\n                        <Col md={6}>\r\n                            <StatArray title={getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_Defense\")} stats={[\r\n                                { \r\n                                    name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_Armor\"), \r\n                                    value: this.state.armor,\r\n                                },\r\n                                { \r\n                                    name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_PhysicalResist\"), \r\n                                    value: this.state.physicalResist + \"%\" \r\n                                },\r\n                                { \r\n                                    name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_MagicResist\"), \r\n                                    value: this.state.magicResist + \"%\" \r\n                                },\r\n                                { \r\n                                    name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_StatusResist\"), \r\n                                    value: this.state.statusResist + \"%\" \r\n                                },\r\n                                { \r\n                                    name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_Evasion\"), \r\n                                    value: this.state.evasion + \"%\" \r\n                                },\r\n                                { \r\n                                    name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_HealthRegenDetail\"), \r\n                                    value: formatTotalAdditional(this.state.healthRegen?.total, this.state.healthRegen?.additional, 2),\r\n                                },\r\n                            ]}/>\r\n                        </Col>\r\n                    }\r\n                </Row>\r\n                <FontAwesomeIcon \r\n                        icon={this.state.otherOpen ? faEyeSlash : faEye} \r\n                        onClick={this.onToggleOtherDetails} />\r\n                <Row className=\"my-1\">\r\n                    <Col className={!this.state.otherOpen ? \"collapse\" : \"\"}>\r\n                        <StatArray title={getLocalizedString(this.state.dotaStrings, \"DOTA_OtherType\").toUpperCase()} stats={[\r\n                            {\r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_SHOP_TAG_LIFESTEAL\"),\r\n                                value: this.state.totalLifesteal + \"%\",\r\n                            },\r\n                            {\r\n                                name: getLocalizedString(this.state.abilityStrings, \"DOTA_Tooltip_ability_special_bonus_spell_lifesteal_6\").split(\"% \")[1],\r\n                                value: `${getLocalizedString(this.state.dotaStrings, \"DOTA_Scoreboard_Header_Hero\")}: ${this.state.totalSpellLifesteal?.heroLifesteal + \"%\"}\r\n                                        ${getLocalizedString(this.state.dotaStrings, \"npc_dota_creep\")}: ${this.state.totalSpellLifesteal?.creepLifesteal + \"%\"}`,\r\n                            },\r\n                            {\r\n                                name: \"Critical Strike Amount\",\r\n                                value: this.state.totalCritPercent + \"%\",\r\n                            },\r\n                            {\r\n                                name: \"Critical Strike Chance\",\r\n                                value: this.state.totalCritChancePercent + \"%\",\r\n                            },\r\n                            {\r\n                                name: \"Cleave Damage Amount\",\r\n                                value: this.state.totalCleaveAmount + \"%\",\r\n                            },\r\n                            // {\r\n                            //     name: \"Total Cooldown Amount\",\r\n                            //     value: this.state.totalCooldownAmount + \"%\",\r\n                            // }\r\n                        ]} \r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Statistics;","import Statistics from \"./Statistics\";\r\n\r\nexport default Statistics;","import React, { Component } from 'react';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport {  faSearch } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { getLocalizedString } from '../../utility/data-helpers/language';\r\nimport { getAllPlayableHeroes } from '../../utility/dataHelperHero';\r\n\r\nimport \"./HeroSelector.css\";\r\nimport { itemAliasIncludes } from '../../utility/dataHelperItems';\r\n\r\nclass HeroSelector extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let selectableHeroes = getAllPlayableHeroes();\r\n        this.state = {\r\n            filteredHeroes: selectableHeroes,\r\n            allHeroes: selectableHeroes,\r\n\r\n            onSelectedHero: props.onSelectedHero,\r\n            dotaStrings: props.dotaStrings,\r\n        };\r\n\r\n        this.onSearchChanged = this.onSearchChanged.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                onSelectedHero: this.props.onSelectedHero,\r\n                dotaStrings: this.props.dotaStrings,\r\n            });\r\n        }\r\n    }\r\n\r\n    onSearchChanged(e) {\r\n        let searchTerm = e.target.value;\r\n        let filteredHeroes = this.state.allHeroes;\r\n        if (searchTerm) {\r\n            filteredHeroes = this.state.allHeroes.filter((hero) => {\r\n                /// Match against localized string\r\n                let localizedHeroName = getLocalizedString(this.state.dotaStrings, hero.name)?.toLowerCase();\r\n                if (localizedHeroName && localizedHeroName.indexOf(searchTerm.toLowerCase()) !== -1) {\r\n                    return true;\r\n                }\r\n\r\n                // Alias if localized string hasnt got a match, only works in english\r\n                let aliasMatch = itemAliasIncludes(hero.heroInfo.NameAliases, searchTerm);\r\n                if (aliasMatch) {\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n            });\r\n        }\r\n\r\n        this.setState({\r\n            filteredHeroes: filteredHeroes,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let iconScale = 0.5;\r\n        return (\r\n            <div className=\"hero-card\">\r\n                <div className=\"hero-card header d-flex p-2\">\r\n                    <div className=\"d-flex\">\r\n                        <h5 className=\"my-auto ml-2\">{ getLocalizedString(this.state.dotaStrings, \"DOTA_Hero_Selection_Intro_Header\") }</h5>\r\n                        <div className=\"ml-auto p-1\">\r\n                            <Form.Control \r\n                                className=\"foresight-input-control\"\r\n                                type=\"text\"\r\n                                placeholder=\"Search...\" \r\n                                onChange={this.onSearchChanged} />\r\n                        </div>\r\n                        <FontAwesomeIcon \r\n                            className=\"my-auto mx-2\"\r\n                            icon={faSearch} />\r\n                    </div>\r\n                </div>\r\n                <div className=\"hero-card content p-2\">\r\n                    <div className=\"d-flex flex-wrap\">\r\n                        {\r\n                            this.state.filteredHeroes && this.state.filteredHeroes.map((value) => {\r\n                                let localizedName = getLocalizedString(this.state.dotaStrings, value.name)\r\n                                return (\r\n                                    <div\r\n                                        key={value.name}  \r\n                                        title={localizedName}\r\n                                        onClick={this.state.onSelectedHero}\r\n                                        className=\"m-1\"\r\n                                        style={{ \r\n                                            height: `calc(72px * ${iconScale})`, \r\n                                            width: `calc(128px * ${iconScale})` \r\n                                        }}>\r\n                                        <span \r\n                                            className={`hero-icon-big hero-icon-big-${value.name}_png`} \r\n                                            style={{ transformOrigin: \"top left\", transform: `scale(${iconScale}, ${iconScale})` }}\r\n                                            data-heroname={value.displayName}\r\n                                            data-hero={value.name} \r\n                                            title={localizedName}/>\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n                        {\r\n                            this.state.filteredHeroes && this.state.filteredHeroes.length <= 0 &&\r\n                                <h6 className=\"p-1\">\r\n                                    { getLocalizedString(this.state.dotaStrings, \"DOTA_Shop_Search_No_Results\") }\r\n                                </h6>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HeroSelector;","import ChangeHeroBtn from \"./ChangeHeroBtn\";\r\n\r\nexport default ChangeHeroBtn;","import React, { Component } from 'react';\r\nimport {\r\n    Button\r\n} from \"react-bootstrap\";\r\nimport Popup from \"reactjs-popup\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport HeroSelector from \"./HeroSelector\";\r\n\r\nclass ChangeHeroBtn extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            onSelectHero: props.onSelectHero,\r\n            dotaStrings: props.dotaStrings,\r\n\r\n            heroSelectorDisabled: false,\r\n        };\r\n\r\n        this.onSelectHero = this.onSelectHero.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                dotaStrings: this.props.dotaStrings,\r\n                onSelectHero: this.props.onSelectHero,\r\n            });\r\n        }\r\n    }\r\n\r\n    onSelectHero (e) {\r\n        // Disable popup to force close\r\n        this.setState({\r\n            heroSelectorDisabled: true,\r\n        });\r\n\r\n        let hero = e.target.dataset.hero;\r\n        this.state.onSelectHero(hero);\r\n    }\r\n\r\n    render() {\r\n        // If last render popup was force disabled to close, then flip to false\r\n        // to allow reopening \r\n        if (this.state.heroSelectorDisabled) {\r\n            this.setState({ heroSelectorDisabled: false });\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <Popup \r\n                    trigger={isOpen => (\r\n                        <Button onClick={this.onToggleHeroSelect}><FontAwesomeIcon icon={faPencilAlt} /></Button>\r\n                    )} \r\n                    position=\"right top\"\r\n                    closeOnDocumentClick\r\n                    closeOnEscape\r\n                    disabled={this.state.heroSelectorDisabled}\r\n                    className=\"foresight-tooltip\"\r\n                    contentStyle={{ \r\n                        width: \"750px\"\r\n                    }}>\r\n                     <HeroSelector \r\n                        onSelectedHero={this.onSelectHero} \r\n                        dotaStrings={this.state.dotaStrings}\r\n                         />\r\n                </Popup>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChangeHeroBtn;","import React, { Component } from 'react';\r\nimport {\r\n    Row,\r\n    Col\r\n} from \"react-bootstrap\";\r\n\r\nimport {\r\n    getTalentInfoFromName,\r\n} from \"../../utility/dataHelperTalents\";\r\nimport { \r\n    tryGetTalentLocalizedString,\r\n    replaceStringValue,\r\n    getLocalizedString\r\n} from \"../../utility/data-helpers/language\";\r\n\r\nimport \"./Talents.css\";\r\n\r\nfunction isTalentSelected (selectedTalents, talent) {\r\n    return selectedTalents?.includes(talent);\r\n}\r\n\r\nclass TalentRow extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            leftTalent: props.leftTalent,\r\n            rightTalent: props.rightTalent,\r\n            level: props.lvl,\r\n\r\n            selectedTalents: this.props.selectedTalents,\r\n            onTalentSelected: this.props.onTalentSelected,\r\n            onTalentUnselected: this.props.onTalentUnselected,\r\n\r\n            abilityStrings: this.props.abilityStrings,\r\n        };\r\n\r\n        this.onSelectTalent = this.onSelectTalent.bind(this);\r\n        this.getTalentDisplayName = this.getTalentDisplayName.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.leftTalent !== this.props.leftTalent) {\r\n            this.setState({ leftTalent: this.props.leftTalent });\r\n        }\r\n\r\n        if(prevProps.rightTalent !== this.props.rightTalent) {\r\n            this.setState({ rightTalent: this.props.rightTalent });\r\n        }\r\n\r\n        if (prevProps.lvl !== this.props.lvl) {\r\n            this.setState({ level: this.props.lvl });\r\n        }\r\n\r\n        if (prevProps.selectedTalents !== this.props.selectedTalents) {\r\n            this.setState({ selectedTalents: this.props.selectedTalents });\r\n        }\r\n\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ abilityStrings: this.props.abilityStrings });\r\n        }\r\n    }\r\n\r\n    onSelectTalent(e) {\r\n        let selectedTalent = e.target.dataset.talent;\r\n        // if clicked twice, unselect the talent\r\n        if (isTalentSelected(this.state.selectedTalents, selectedTalent)) {\r\n            this.state.onTalentUnselected(selectedTalent);\r\n        } else {\r\n            this.state.onTalentSelected(selectedTalent);\r\n        }\r\n    }\r\n\r\n    getTalentDisplayName (talent) {\r\n        let talentInfo = getTalentInfoFromName(talent);\r\n        if (!talentInfo) {\r\n            return \"Unknown\";\r\n        }\r\n\r\n        // Prefix can be either DOTA_Tooltip_[Aa]bility.\r\n        // Newer ones seem to use 'A' instead of 'a'\r\n        let prefixPossibilities = [\r\n            \"DOTA_Tooltip_ability_\",\r\n            \"DOTA_Tooltip_Ability_\"\r\n        ];\r\n        let displayName;\r\n        for (let prefix of prefixPossibilities) {\r\n            displayName = getLocalizedString(this.state.abilityStrings, prefix + talent); \r\n            if (displayName) {\r\n                break;  // Stop once successful\r\n            }\r\n        }\r\n        // Insert value into displayName is successful, else set to 'Unknown'\r\n        if (displayName && talentInfo && talentInfo.AbilitySpecial) {\r\n            displayName = replaceStringValue(displayName, talentInfo.AbilitySpecial[0].value)\r\n        }\r\n        else {\r\n            displayName = \"Unknown\";\r\n        }\r\n\r\n        return displayName;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Row \r\n                className=\"my-1 py-2\" \r\n                    style={{ \r\n                        backgroundColor: \"rgb(24, 30, 33)\",\r\n                    }}>\r\n                {/* Left Talent */}\r\n                <Col \r\n                    md={5}\r\n                    className=\"text-center single-talent\"\r\n                    style={{ \r\n                        color: isTalentSelected(this.state.selectedTalents, this.state.leftTalent) ? \"#c4a66f\" : \"white\",\r\n                    }}>\r\n                    <div \r\n                        onClick={this.onSelectTalent} \r\n                        data-talent={this.state.leftTalent}>\r\n                        {\r\n                            this.getTalentDisplayName(this.state.leftTalent)\r\n                        }\r\n                    </div>\r\n                </Col>\r\n                {/* Talent Level */}\r\n                <Col md={2}>\r\n                    <h6 \r\n                        className=\"text-center\"\r\n                        style={{ color: \"#e7d291\"}}>\r\n                        {this.state.level}\r\n                    </h6>\r\n                </Col>\r\n                {/* Right Talent */}\r\n                <Col \r\n                    md={5}\r\n                    className=\"text-center single-talent\"\r\n                    style={{ \r\n                        color: isTalentSelected(this.state.selectedTalents, this.state.rightTalent) ? \"#c4a66f\" : \"white\",\r\n                    }}>\r\n                    <div \r\n                        onClick={this.onSelectTalent} \r\n                        data-talent={this.state.rightTalent}>\r\n                        {\r\n                            this.getTalentDisplayName(this.state.rightTalent)\r\n                        }\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TalentRow;\r\n","import TalentTree from \"./TalentTree\";\r\n\r\nexport default TalentTree;","import React, { Component } from 'react';\r\n\r\nimport TalentRow from \"./TalentRow\";\r\nimport { getLocalizedString } from '../../utility/data-helpers/language';\r\n\r\nclass TalentTree extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            talents: this.props.talents,\r\n            selectedTalents: this.props.selectedTalents,\r\n\r\n            onTalentSelected: this.props.onTalentSelected,\r\n            onTalentUnselected: this.props.onTalentUnselected,\r\n\r\n            dotaStrings: this.props.dotaStrings,\r\n            abilityStrings: this.props.abilityStrings,\r\n        };\r\n        this.findSelectedTalent = this.findSelectedTalent.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(prevProps.talents !== this.props.talents) {\r\n            this.setState({ talents: this.props.talents });\r\n        }\r\n        if (prevProps.selectedTalents !== this.props.selectedTalents) {\r\n            this.setState({ selectedTalents: this.props.selectedTalents });\r\n        }\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ abilityStrings: this.props.abilityStrings });\r\n        }\r\n        if (prevProps.dotaStrings !== this.props.dotaStrings) {\r\n            this.setState({ dotaStrings: this.props.dotaStrings });\r\n        }\r\n    }\r\n\r\n    findSelectedTalent(leftTalent, rightTalent) {\r\n        if (this.state.selectedTalents && this.state.selectedTalents.length > 0) {\r\n            let matchTalent = this.state.selectedTalents.find((val) => {\r\n                if (val.name === leftTalent) {\r\n                    return leftTalent;\r\n                } else if (val.name === rightTalent) {\r\n                    return rightTalent;\r\n                }\r\n                return null;\r\n            });\r\n            return matchTalent?.name;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h6 className=\"text-center\">{ getLocalizedString(this.state.dotaStrings, \"DOTA_StatBranch_TooltipTitle\") }</h6>\r\n                {/* <img src=\"/images/dota2/talent.jpg\" alt=\"talent tree\" /> */}\r\n                <div \r\n                    className=\"mr-2\"\r\n                    style={{ fontSize: \"0.8rem\" }}>\r\n                        {\r\n                            this.state.talents && this.state.talents.map((talentInfo) => {\r\n                                return <TalentRow \r\n                                                key={talentInfo.lvl}\r\n                                                lvl={talentInfo.lvl}\r\n                                                leftTalent={talentInfo.leftTalent} \r\n                                                rightTalent={talentInfo.rightTalent} \r\n                                                selectedTalents={this.state.selectedTalents}\r\n                                                onTalentSelected={this.state.onTalentSelected}\r\n                                                onTalentUnselected={this.state.onTalentUnselected} \r\n                                                \r\n                                                abilityStrings={this.state.abilityStrings} />\r\n                            })\r\n                        }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TalentTree;","import HealthManaBar from \"./HealthManaBar\";\r\n\r\nexport default HealthManaBar;","import React, { Component } from 'react';\r\n\r\nimport {\r\n    calculateHealth,\r\n    calculateMana,\r\n    calculateHealthRegen,\r\n    calculateManaRegen,\r\n} from \"../../utility/calculate\";\r\nimport { EAttributes } from \"../../enums/attributes\";\r\n\r\nimport \"./style.css\";\r\n\r\nclass HealthManaBar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            hero: props.hero,\r\n            level: props.heroLevel,\r\n            items: props.items,\r\n            talents: props.talents,\r\n            neutral: props.neutral,\r\n            abilities: props.abilities,\r\n            abilityLevels: props.abilityLevels,\r\n\r\n            maxHealth: 0,\r\n            maxMana: 0,\r\n        }\r\n\r\n        this.updateBar = this.updateBar.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateBar();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                hero: this.props.hero,\r\n                level: this.props.heroLevel,\r\n                items: this.props.items,\r\n                talents: this.props.talents,\r\n                neutral: this.props.neutral,\r\n                abilities: this.props.abilities,\r\n                abilityLevels: this.props.abilityLevels,\r\n\r\n                maxHealth: 0,\r\n                maxMana: 0,\r\n            }, () => this.updateBar());\r\n        }\r\n    }\r\n\r\n    updateBar() {\r\n        this.setState({\r\n            maxHealth: calculateHealth(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n            maxMana: calculateMana(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents, this.state.abilityLevels),\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let healthRegenInfo = calculateHealthRegen(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents, this.state.abilityLevels);\r\n        return (\r\n            <div>\r\n                <div className=\"bar health d-flex\">\r\n                    <h6 className=\"max-health-text my-auto mx-auto\">{this.state.maxHealth} / {this.state.maxHealth}</h6>\r\n                    <div className=\"health-bar-regen my-auto mr-1\">\r\n                        { \"+\" + (healthRegenInfo.total + healthRegenInfo.additional).toFixed(1) }\r\n                    </div>\r\n                </div>\r\n                <div className=\"bar mana d-flex\">\r\n                    <h6 className=\"max-mana-text my-auto mx-auto\">{this.state.maxMana} / {this.state.maxMana}</h6>\r\n                    <div className=\"mana-bar-regen my-auto mr-1\">\r\n                        { \"+\" + calculateManaRegen(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents) }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HealthManaBar;","import React, { Component } from 'react';\r\nimport { \r\n    Button, \r\n    Form\r\n} from 'react-bootstrap';\r\nimport { getLocalizedString } from '../../utility/data-helpers/language';\r\n\r\nconst MAX_LEVEL = 30;\r\nconst MIN_LEVEL = 1;\r\n\r\nfunction ModifyBtn (props) {\r\n    return (\r\n        <Button \r\n            className=\"py-1\"\r\n            variant=\"outline-secondary\" \r\n            onClick={props.onClick}>\r\n            { props.text }\r\n        </Button>\r\n    );\r\n}\r\n\r\nclass LevelSelector extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            level: props.heroLevel,\r\n            onHeroLevelChanged: props.onHeroLevelChanged,\r\n            dotaStrings: props.dotaStrings,\r\n        };\r\n\r\n        this.onIncrementHeroLevel = this.onIncrementHeroLevel.bind(this);\r\n        this.onDecrementHeroLevel = this.onDecrementHeroLevel.bind(this);\r\n        this.onLvlInputChanged = this.onLvlInputChanged.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.heroLevel !== this.props.heroLevel) {\r\n            this.setState({\r\n                level: this.props.heroLevel,\r\n            });\r\n        }\r\n        if (prevProps.dotaStrings !== this.props.dotaStrings) {\r\n            this.setState({ dotaStrings: this.props.dotaStrings });\r\n        }\r\n    }\r\n\r\n    onIncrementHeroLevel() {\r\n        let newLevel = this.state.level;\r\n        newLevel += 1;\r\n\r\n        if (newLevel >= MAX_LEVEL) {\r\n            newLevel = MAX_LEVEL;\r\n        }\r\n\r\n        this.state.onHeroLevelChanged(newLevel);\r\n    }\r\n\r\n    onDecrementHeroLevel() {\r\n        let newLevel = this.state.level;\r\n        newLevel -= 1;\r\n\r\n        if (newLevel < MIN_LEVEL) {\r\n            newLevel = MIN_LEVEL;\r\n        }\r\n\r\n        this.state.onHeroLevelChanged(newLevel);\r\n    }\r\n\r\n    onLvlInputChanged(e) {\r\n        let lvl = parseInt(e.target.value);\r\n        if (lvl) {\r\n            if (lvl > MAX_LEVEL) {\r\n                lvl = MAX_LEVEL;\r\n            }\r\n            else if (lvl < MIN_LEVEL) {\r\n                lvl = MIN_LEVEL;\r\n            }\r\n        } else {\r\n            lvl = MIN_LEVEL;\r\n        }\r\n\r\n        this.state.onHeroLevelChanged(lvl);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"mx-5\">\r\n                <h6>{ getLocalizedString(this.state.dotaStrings, \"dota_stat_dropdown_level\") }</h6>\r\n                <div className=\"d-flex\">\r\n                    <ModifyBtn \r\n                        onClick={this.onDecrementHeroLevel} \r\n                        text=\"-\" />\r\n                    <Form.Control\r\n                        className=\"foresight-input-control mx-3\" \r\n                        style={{ width: \"75px\" }}\r\n                        placeholder=\"lvl\" \r\n                        type=\"number\" \r\n                        value={this.state.level} \r\n                        onChange={this.onLvlInputChanged} />\r\n                    <ModifyBtn \r\n                        onClick={this.onIncrementHeroLevel} \r\n                        text=\"+\" />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LevelSelector;","import LevelSelector from \"./LevelSelector\";\r\n\r\nexport default LevelSelector;","import React, { Component } from 'react';\r\nimport {\r\n    Row,\r\n    Col,\r\n} from 'react-bootstrap';\r\n\r\nimport TalentTree from \"../TalentTree\";\r\nimport ItemsBar from '../ItemsBar/ItemsBar';\r\nimport Abilities from '../Abilities';\r\nimport HealthManaBar from \"../HealthManaBar\";\r\n\r\nclass EnemyHero extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            enemyHero: this.props.hero,\r\n            enemyHeroName: this.props.heroName,\r\n            heroTalents: this.props.heroTalents,\r\n            heroAbilities: this.props.heroAbilities,\r\n            selectedTalents: this.props.selectedTalents,\r\n            heroItems: this.props.heroItems,\r\n            heroNeutral: this.props.neutral,\r\n\r\n            abilityStrings: this.props.abilityStrings,\r\n            dotaStrings: this.props.dotaStrings,\r\n\r\n            heroLevel: 0,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.hero !== this.props.hero) {\r\n            this.setState({ enemyHero: this.props.hero });\r\n        }\r\n        if (prevProps.heroName !== this.props.heroName) {\r\n            this.setState({ enemyHeroName: this.props.heroName });\r\n        }\r\n        if (prevProps.heroTalents !== this.props.heroTalents) {\r\n            this.setState({ heroTalents: this.props.heroTalents });\r\n        }\r\n        if (prevProps.heroAbilities !== this.props.heroAbilities) {\r\n            this.setState({ heroAbilities: this.props.heroAbilities });\r\n        }\r\n        if (prevProps.selectedTalents !== this.props.selectedTalents) {\r\n            this.setState({ selectedTalents: this.props.selectedTalents });\r\n        }\r\n        if (prevProps.heroItems !== this.props.heroItems) {\r\n            this.setState({ heroItems: this.props.heroItems });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Row>\r\n                    <Col md={4}>\r\n                        {this.state.enemyHeroName}\r\n                    </Col>\r\n                    <Col md={8}>\r\n                        <HealthManaBar \r\n                                baseStrength ={ this.state.enemyHero?.AttributeBaseStrength }\r\n                                strengthGain={ this.state.enemyHero?.AttributeStrengthGain } \r\n                                baseIntelligence={this.state.enemyHero?.AttributeBaseIntelligence }\r\n                                intelligenceGain={ this.state.enemyHero?.AttributeIntelligenceGain }\r\n                                heroLevel={ this.state.heroLevel } \r\n                                primaryAttribute={ this.state.enemyHero?.AttributePrimary }\r\n                                bonusHealthRegen={ this.state.enemyHero?.StatusHealthRegen }\r\n                                bonusManaRegen={ this.state.enemyHero?.StatusManaRegen } />\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"\">\r\n                    {/* Talents */}\r\n                    <Col md={5}>\r\n                        <TalentTree\r\n                            talents={this.state.heroTalents} \r\n                            selectedTalents={this.state.selectedTalents}\r\n                            onTalentSelected={this.onTalentSelected} \r\n                            onTalentUnselected={this.onTalentUnselected} \r\n                            abilityStrings={this.state.abilityStrings} />\r\n                    </Col>\r\n                    {/* Abilities */}\r\n                    \r\n                    {/* Items */}\r\n                    <Col md={5}>\r\n                        <ItemsBar\r\n                            items={this.state.heroItems}  \r\n                            neutral={this.props.neutralItem}\r\n                            onItemChanged={this.onItemSelected}\r\n                            onNeutralChanged={this.onNeutralSelected} />\r\n                    </Col>\r\n                </Row>\r\n                <Abilities \r\n                        abilities={this.state.heroAbilities}\r\n                        items={this.state.heroItems}\r\n                        neutral={this.props.neutralItem} \r\n                        selectedTalents={this.props.selectedTalents} \r\n                        abilityStrings={this.props.abilityStrings}\r\n                        dotaStrings={this.state.dotaStrings} \r\n                        displayDamage={false} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EnemyHero;","export function getScepterIconPath (isEnabled) {\r\n    return `/images/dota2/aghs_scepter_${isEnabled ? \"on\" : \"off\"}.png`;\r\n}\r\n\r\nexport function getShardIconPath (isEnabled) {\r\n    return `/images/dota2/aghs_shard_${isEnabled ? \"on\" : \"off\"}.png`\r\n}","import React, { Component } from 'react';\r\nimport Popup from 'reactjs-popup';\r\nimport { getAbilityInfoFromName } from '../../utility/dataHelperAbilities';\r\nimport { itemsContainsScepter } from '../../utility/dataHelperItems';\r\n\r\nimport { \r\n    AghanimsDescriptorTooltip\r\n} from '.';\r\nimport { getScepterIconPath, getShardIconPath } from './aghs-helper';\r\n\r\nfunction determineScepterShardAbilities (heroAbilities) {\r\n    let shardAbility = null, scepterAbility = null;\r\n    if (heroAbilities) {\r\n        for (let abilityName of heroAbilities) {\r\n            let abilityInfo = getAbilityInfoFromName(abilityName);\r\n            // Check Shard/Scepter is an ability when bought\r\n            if (abilityInfo) {\r\n                // Ability is granted to hero with shard/scepter\r\n                // Single IF checks since one ability can be upgraded by both scepter/shard\r\n                if (abilityInfo.IsGrantedByShard === '1') {\r\n                    shardAbility = {\r\n                        abilityName: abilityName,\r\n                        type: \"DOTA_AbilityTooltip_Aghs_New_Ability\",\r\n                    };\r\n                } \r\n                if (abilityInfo.IsGrantedByScepter === '1') {\r\n                    scepterAbility = {\r\n                        abilityName: abilityName,\r\n                        type: \"DOTA_AbilityTooltip_Aghs_New_Ability\",\r\n                    };\r\n                }\r\n                // Ability has upgrade applied with shard/scepter\r\n                if (abilityInfo.HasShardUpgrade === '1') {\r\n                    shardAbility = {\r\n                        abilityName: abilityName,\r\n                        type: \"DOTA_AbilityTooltip_Upgrade\",\r\n                    };\r\n                }\r\n                if (abilityInfo.HasScepterUpgrade === '1') {\r\n                    scepterAbility = {\r\n                        abilityName: abilityName,\r\n                        type: \"DOTA_AbilityTooltip_Upgrade\",\r\n                    };\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return {\r\n        shard: shardAbility,\r\n        scepter: scepterAbility,\r\n    }\r\n}\r\n\r\nclass AghanimsUpgrades extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        // Determine shard/scepter abilities\r\n        \r\n        let scepterShardAbils = determineScepterShardAbilities(props.abilities);\r\n        let containsScepter = itemsContainsScepter(props.items);\r\n        this.state = {\r\n            shardOn: false,\r\n            shardAbility: scepterShardAbils.shard,\r\n            scepterOn: containsScepter,\r\n            scepterAbility: scepterShardAbils.scepter,\r\n            tooltipDisabled: false,\r\n\r\n            hero: props.hero,\r\n            abilities: props.abilities,\r\n            items: props.items,\r\n\r\n            dotaStrings: props.dotaStrings,\r\n            abilityStrings: props.abilityStrings,\r\n\r\n            onShardSet: props.onShardSet,\r\n        };\r\n\r\n        this.onShardClicked = this.onShardClicked.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.hero != prevProps.hero) {\r\n            this.setState({\r\n                hero: this.props.hero,\r\n            });\r\n        }\r\n        if (this.props.items != prevProps.items) {\r\n            let containsScepter = itemsContainsScepter(this.props.items);\r\n            this.setState({\r\n                items: this.props.items,\r\n                scepterOn: containsScepter,\r\n            });\r\n        }\r\n        if (this.props.abilities != prevProps.abilities) {\r\n            let shardScepterAbils = determineScepterShardAbilities(this.props.abilities);\r\n            this.setState({\r\n                abilities: this.props.abilities,\r\n                shardAbility: shardScepterAbils.shard,\r\n                scepterAbility: shardScepterAbils.scepter,\r\n            });\r\n        }\r\n        if (this.props.abilityStrings != prevProps.abilityStrings) {\r\n            this.setState({\r\n                abilityStrings: this.props.abilityStrings,\r\n            });\r\n        }\r\n        if (this.props.dotaStrings != prevProps.dotaStrings) {\r\n            this.setState({\r\n                dotaStrings: this.props.dotaStrings,\r\n            });\r\n        }\r\n    }\r\n\r\n    onShardClicked(e) {\r\n        // Toggle shard state and trigger event\r\n        this.setState({\r\n            shardOn: !this.state.shardOn,\r\n        }, () => {\r\n            this.state.onShardSet(this.state.shardOn);\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Popup\r\n                    trigger={isOpen => (\r\n                        <div>\r\n                            <div>\r\n                                <img \r\n                                    src={getScepterIconPath(this.state.scepterOn)}\r\n                                    />\r\n                            </div>\r\n                            <div \r\n                                onClick={this.onShardClicked}\r\n                                style={{ cursor: \"pointer\" }}>\r\n                                <img \r\n                                    src={getShardIconPath(this.state.shardOn)}\r\n                                    />\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                    position=\"bottom\"\r\n                    closeOnDocumentClick\r\n                    closeOnEscape\r\n                    disabled={this.state.tooltipDisabled}\r\n                    className=\"foresight-tooltip\"\r\n                    on=\"hover\"\r\n                    contentStyle={{ \r\n                        width: \"450px\",\r\n                        height: \"auto\"\r\n                    }}\r\n                    >\r\n                    <AghanimsDescriptorTooltip\r\n                        shardOn={this.state.shardOn}\r\n                        shardAbility={this.state.shardAbility}\r\n                        scepterOn={this.state.scepterOn}\r\n                        scepterAbility={this.state.scepterAbility}\r\n                        hero={this.state.hero}\r\n                        dotaStrings={this.state.dotaStrings}\r\n                        abilityStrings={this.state.abilityStrings}\r\n                        />\r\n                </Popup>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AghanimsUpgrades;","import React, { Component } from 'react';\r\nimport { \r\n    Row, \r\n    Col \r\n} from 'react-bootstrap';\r\nimport { getLocalizedString, getTooltipAbilityString } from '../../utility/data-helpers/language';\r\nimport { getAbilityIconURL } from '../Abilities/abilities-helper';\r\nimport { \r\n    getScepterIconPath,\r\n    getShardIconPath\r\n} from './aghs-helper';\r\n\r\nimport \"./Aghanims.css\";\r\nimport { getAbilityInfoFromName } from '../../utility/dataHelperAbilities';\r\nimport {\r\n    insertLocaleStringDataValues\r\n} from \"../../utility/dataHelperGeneric\";\r\n\r\n/// Builds the JSON key used in 'abilities_{language}.json' locale files to get the relevant locale string\r\nfunction buildDescriptionLocaleKey (upgradeInfo, scepterShard) {\r\n    if (upgradeInfo)\r\n    {\r\n        let key = upgradeInfo.abilityName;\r\n        if (upgradeInfo.type === \"DOTA_AbilityTooltip_Upgrade\") {\r\n            if (scepterShard === \"shard\") {\r\n                key += \"_shard\";\r\n            } else {\r\n                key += \"_scepter\";\r\n            }\r\n            key += \"_description\";\r\n        } else {\r\n            // New Ability JSON key has upper case d\r\n            key += \"_Description\";\r\n        }\r\n        return key;\r\n    }\r\n    else\r\n    {\r\n        return \"?\";\r\n    }\r\n}\r\n\r\n/// Single descriptor for the aghanim's scepter/shard tooltip\r\nfunction AghanimDescriptor(props) {\r\n    let iconWidth = \"35px\", iconHeight = \"30px\";\r\n    let isScepter = props.descriptorType === \"scepter\";\r\n    let isAbility = props.type === \"DOTA_AbilityTooltip_Aghs_New_Ability\";\r\n    // Does this scepter/shard upgrade give an upgrade/ability (Could be empty, Dawnbreaker initial release)\r\n    let hasUpgrade = props.ability;\r\n\r\n    // Get locale string, ability info\r\n    let descLocaleString = getTooltipAbilityString(props.abilityStrings, props.description);\r\n    if (descLocaleString && props.ability) {\r\n        let abilInfo = getAbilityInfoFromName(props.ability);\r\n        // Replace locale string's data values with data\r\n        descLocaleString = insertLocaleStringDataValues(descLocaleString, abilInfo, abilInfo.AbilitySpecial);\r\n        // Replace new line char with HTML break\r\n        descLocaleString = descLocaleString.split(\"\\\\n\").join(\"<br/>\");\r\n    }\r\n\r\n    return (\r\n        <div className=\"aghanim-container\">\r\n            {/* Title Bar */}\r\n            <div \r\n                className=\"d-flex descriptor-title-bar\">\r\n                {/* Descriptor's type image */}\r\n                <img \r\n                    src={isScepter ? getScepterIconPath(props.descriptorOn) : getShardIconPath(props.descriptorOn) }\r\n                    className=\"mx-2 my-auto\"\r\n                    style={{\r\n                        height:  isScepter ? iconHeight : \"\",\r\n                        width: !isScepter ? iconWidth : \"\",\r\n                    }}\r\n                    />\r\n                {/* Descriptor's title */}\r\n                <h6 className=\"my-auto aghanims-title\">\r\n                    { props.titleName }\r\n                </h6>\r\n            </div>\r\n            {/* Main Body */}\r\n            <div className={`d-flex m-2 description-container ${ isAbility ? \"ability\" : \"\" }`}>\r\n                {\r\n                    // If scepter/shard gives an upgrade or new ability display normally, else display none found\r\n                    hasUpgrade \r\n                    ?\r\n                    <div className=\"d-flex\">\r\n                        {/* Icon */}\r\n                        <div>\r\n                            <img \r\n                                className=\"m-1 aghanim-ability-icon\"\r\n                                src={ getAbilityIconURL(props.ability) }\r\n                                style={{\r\n                                    height: iconWidth,\r\n                                    width: iconWidth, \r\n                                }}\r\n                                />\r\n                        </div>\r\n                        <div>\r\n                            <div className=\"d-flex m-1 descriptor-title-box\">\r\n                                {/* Main title */}\r\n                                <h6 className=\"my-0 title\">\r\n                                    { props.title }\r\n                                </h6>\r\n                                {/* Type that is given with shard/scepter (Upgrade or Ability) */}\r\n                                <div className={`align-self-start mx-3 upgrade-type ${ isAbility ? \"ability-title\"  : \"upgrade-title\" }`}>\r\n                                    <h6 \r\n                                        className=\"mx-2 my-1\"\r\n                                        style={{\r\n                                            fontSize: \"0.5rem\",\r\n                                        }}>\r\n                                        { getLocalizedString(props.dotaStrings, props.type) }\r\n                                    </h6>\r\n                                </div>\r\n                            </div>\r\n                            {/* Descriptive body */}\r\n                            <div className=\"m-1\">\r\n                                <div dangerouslySetInnerHTML={{ __html: descLocaleString }} />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    :\r\n                    <div className=\"no-upgrade-container\">\r\n                        { getLocalizedString(props.dotaStrings, \"DOTA_AbilityTooltip_No_Aghs_Upgrade_Found\") }\r\n                    </div>\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nclass AghanimsDescriptorTooltip extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            shardOn: props.shardOn,\r\n            scepterOn: props.scepterOn,\r\n\r\n            scepterAbility: props.scepterAbility,\r\n            shardAbility: props.shardAbility,\r\n\r\n            dotaStrings: props.dotaStrings,\r\n            abilityStrings: props.abilityStrings,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.shardOn != prevProps.shardOn) {\r\n            this.setState({\r\n                shardOn: this.props.shardOn,\r\n            });\r\n        }\r\n        if (this.props.scepterOn != prevProps.scepterOn) {\r\n            this.setState({\r\n                scepterOn: this.props.scepterOn,\r\n            });\r\n        }\r\n        if (this.props.scepterAbility != prevProps.scepterAbility) {\r\n            this.setState({\r\n                scepterAbility: this.props.scepterAbility,\r\n            });\r\n        }\r\n        if (this.props.shardAbility != prevProps.shardAbility) {\r\n            this.setState({\r\n                shardAbility: this.props.shardAbility,\r\n            });\r\n        }\r\n        if (this.props.abilityStrings != prevProps.abilityStrings) {\r\n            this.setState({\r\n                abilityStrings: this.props.abilityStrings,\r\n            });\r\n        }\r\n        if (this.props.dotaStrings != prevProps.dotaStrings) {\r\n            this.setState({\r\n                dotaStrings: this.props.dotaStrings,\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                style={{\r\n                    background: \"black\",\r\n                    overflow: \"hidden\",\r\n                    display: \"flex\",\r\n                    flexDirection: \"column\",\r\n                    backgroundColor: \"transparent\",\r\n                    maxWidth: \"600px\",\r\n                    maxHeight: \"800px\",\r\n                }}>\r\n                {/* Aghanims Scepter */}\r\n                <AghanimDescriptor\r\n                    descriptorType=\"scepter\"\r\n                    descriptorOn={ this.state.scepterOn }\r\n                    titleName={ getLocalizedString(this.state.dotaStrings, \"DOTA_AbilityTooltip_Aghs_Scepter\") }\r\n                    ability={this.state.scepterAbility?.abilityName}\r\n                    title={ this.state.scepterAbility ? getTooltipAbilityString(this.state.abilityStrings, this.state.scepterAbility.abilityName) : \"?\" }\r\n                    description={ buildDescriptionLocaleKey(this.state.scepterAbility, \"scepter\") }\r\n                    type={ this.state.scepterAbility?.type ?? \"?\" }\r\n\r\n                    dotaStrings={this.state.dotaStrings}\r\n                    abilityStrings={this.state.abilityStrings}\r\n                    />\r\n                \r\n                {/* Separator */}\r\n                <div className=\"tooltip-aghs-separator\">\r\n                </div>\r\n\r\n                {/* Aghanims Shard */}\r\n                <AghanimDescriptor\r\n                    descriptorType=\"shard\"\r\n                    descriptorOn={ this.state.shardOn }\r\n                    titleName={ getLocalizedString(this.state.dotaStrings, \"DOTA_AbilityTooltip_Aghs_Shard\") }\r\n                    ability={ this.state.shardAbility?.abilityName }\r\n                    title={ this.state.shardAbility ? getTooltipAbilityString(this.state.abilityStrings, this.state.shardAbility.abilityName) : \"?\" }\r\n                    description={ buildDescriptionLocaleKey(this.state.shardAbility, \"shard\") }\r\n                    type={ this.state.shardAbility?.type ?? \"?\" }\r\n\r\n                    dotaStrings={this.state.dotaStrings}\r\n                    abilityStrings={this.state.abilityStrings}\r\n                    />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AghanimsDescriptorTooltip;","import React, { Component } from 'react';\r\nimport { Redirect, Link } from 'react-router-dom';\r\nimport {\r\n    Container,\r\n    Row,\r\n    Col,\r\n    Button,\r\n    Form,\r\n} from 'react-bootstrap';\r\nimport { connect } from \"react-redux\";\r\nimport copy from \"copy-to-clipboard\";\r\nimport { Base64 } from \"js-base64\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCopy, faFile, faChevronUp, faChevronDown, faShare } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport {\r\n    SELECTED_HERO,\r\n    SELECTED_ITEM,\r\n    SELECTED_NEUTRAL,\r\n    SELECTED_BACKPACK_ITEM,\r\n    SELECTED_TALENT,\r\n    UNSELECTED_TALENT,\r\n    NEW_HERO_LEVEL,\r\n    ENEMY_SELECTED_TALENT, \r\n    SELECTED_ABILITY_LEVEL,\r\n    SHARD_SET,\r\n} from \"../../constants/actionTypes\";\r\n\r\nimport { \r\n    getLocalizedString\r\n} from '../../utility/data-helpers/language';\r\n\r\nimport Abilities from \"../Abilities\";\r\nimport ItemsBar from \"../ItemsBar\";\r\nimport Attributes from \"../Attributes\";\r\nimport Statistics from \"../Statistics\";\r\nimport ChangeHeroBtn from \"../ChangeHeroBtn\";\r\nimport TalentTree from \"../TalentTree\";\r\nimport HealthManaBar from \"../HealthManaBar\";\r\nimport LevelSelector from \"../LevelSelector\";\r\nimport EnemyHero from '../EnemyHero';\r\nimport { \r\n    AghanimsUpgrades\r\n} from '../Aghanims';\r\n\r\nimport \"../../css/dota_hero_icons.css\";\r\nimport \"../../css/dota_attributes.css\";\r\nimport \"../../css/dota_items.css\";\r\nimport \"../../css/dota_hero_icons_big.css\";\r\nimport \"./Calculator.css\";\r\n\r\nclass Calculator extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            buildName: \"\",\r\n            buildCreator: \"\",\r\n            openBuildShare: false,\r\n            loadedFromParams: false,\r\n        };\r\n\r\n        this.onHeroSelected = this.onHeroSelected.bind(this);\r\n        this.onItemSelected = this.onItemSelected.bind(this);\r\n        this.onNeutralSelected = this.onNeutralSelected.bind(this);\r\n        this.onTalentSelected = this.onTalentSelected.bind(this);\r\n        this.onTalentUnselected = this.onTalentUnselected.bind(this);\r\n        this.onHeroLevelChanged = this.onHeroLevelChanged.bind(this);\r\n        this.onAbilityLevelChanged = this.onAbilityLevelChanged.bind(this);\r\n        this.onShardSet = this.onShardSet.bind(this);\r\n\r\n        this.onShareBuild = this.onShareBuild.bind(this);\r\n        this.onBuildNameChanged = this.onBuildNameChanged.bind(this);\r\n        this.onBuildCreatorChanged = this.onBuildCreatorChanged.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        /// Parse build data from url on start and set app state\r\n        if (this.props.location.search) {\r\n            let params = new URLSearchParams(this.props.location.search);\r\n            let buildData = params.get(\"build\");\r\n            if (buildData) {\r\n                let decoded = Base64.decode(buildData);\r\n                let buildObject = null;\r\n                try {\r\n                    buildObject = JSON.parse(decoded);\r\n                } catch(e) {\r\n                    console.error(\"Unable to parse build object\");\r\n                }\r\n\r\n                if (buildObject) {\r\n                    this.setState({\r\n                        buildCreator: buildObject.creator,\r\n                        buildName: buildObject.name,\r\n                        openBuildShare: true,\r\n                        loadedFromParams: true,\r\n                    });\r\n                    \r\n                    let build = buildObject.build;\r\n                    if (build?.selectedHeroName)\r\n                        this.props.dispatch({ type: SELECTED_HERO, value: build.selectedHeroName });\r\n                    if (build?.heroLevel)\r\n                        this.props.dispatch({ type: NEW_HERO_LEVEL, value: build.heroLevel });\r\n                    if (build?.selectedTalents) {\r\n                        for(let talent of  build.selectedTalents) {\r\n                            this.props.dispatch({ type: SELECTED_TALENT, value: talent });\r\n                        }\r\n                    }\r\n                    if (build?.heroAbilityLevels) {\r\n                        for (let abilLevel of build.heroAbilityLevels) {\r\n                            this.props.dispatch({ type: SELECTED_ABILITY_LEVEL, value: abilLevel });\r\n                        }\r\n                    }\r\n                    if (build?.items) {\r\n                        for (let item of build.items) {\r\n                            if (item.item) {\r\n                                this.props.dispatch({ type: SELECTED_ITEM, value: item });\r\n                            }\r\n                        }\r\n                    }\r\n                    if (build?.neutralItem) {\r\n                        this.props.dispatch({ type: SELECTED_NEUTRAL, value: build.neutralItem });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    onShareBuild() {\r\n        let buildObject = {\r\n            name: this.state.buildName ?? \"Unknown\",\r\n            creator: this.state.buildCreator ?? \"Unknown\",\r\n            build: {\r\n                selectedHeroName: this.props.selectedHeroName,\r\n                heroAbilities: this.props.heroAbilities,\r\n                heroAbilityLevels: this.props.heroAbilityLevels,\r\n                heroTalents: this.props.heroTalents,\r\n                heroLevel: this.props.heroLevel,\r\n\r\n                items: this.props.items,\r\n                backpack: this.props.backpack,\r\n                neutralItem: this.props.neutralItem,\r\n                selectedTalents: this.props.selectedTalents,\r\n            },\r\n        };\r\n        let str = JSON.stringify(buildObject);\r\n        let encoded = Base64.encode(str);\r\n        // set clipboard\r\n        copy(`${window.location.href}?build=${encoded}`);\r\n    }\r\n\r\n    onHeroSelected(heroName) {\r\n        console.log(`${SELECTED_HERO}: ${heroName}`);\r\n        this.props.dispatch({ type: SELECTED_HERO, value: heroName });\r\n    }\r\n\r\n    onItemSelected (item) {\r\n        if (item.isBackpack) \r\n        {\r\n            console.log(`${SELECTED_BACKPACK_ITEM}: Slot: ${item.slot} Item: ${item.item}`);\r\n            this.props.dispatch({ type: SELECTED_BACKPACK_ITEM, value: item });\r\n        }\r\n        else\r\n        {\r\n            // Build itemExtra string if item contains the data\r\n            let extraString = null;\r\n            if (item.extra) {\r\n                extraString = JSON.stringify(item.extra);\r\n            }\r\n            console.log(`${SELECTED_ITEM}: Slot: ${item.slot} Item: ${item.item} ${ extraString && extraString !== \"{}\" ? `Extra: ${extraString}` : \"\" }`);\r\n            this.props.dispatch({ type: SELECTED_ITEM, value: item });\r\n        }\r\n    }\r\n\r\n    onNeutralSelected(neutralItem) {\r\n        console.log(`${SELECTED_NEUTRAL}: ${neutralItem.item}`);\r\n        this.props.dispatch({ type: SELECTED_NEUTRAL, value: neutralItem });\r\n    }\r\n\r\n    onTalentSelected (talent) {\r\n        console.log(`${SELECTED_TALENT}: ${talent}`);\r\n        this.props.dispatch({ type: SELECTED_TALENT, value: talent });\r\n    }\r\n\r\n    onTalentUnselected (talent) {\r\n        console.log(`${UNSELECTED_TALENT}: ${talent}`);\r\n        this.props.dispatch({ type: UNSELECTED_TALENT, value: talent });\r\n    }\r\n\r\n    onEnemyTalentSelected (enemy, talent) {\r\n        console.log(`${ENEMY_SELECTED_TALENT}: ${enemy}, ${talent}`);\r\n        this.props.dispatch({ type: ENEMY_SELECTED_TALENT, value: talent });\r\n    }\r\n\r\n    onHeroLevelChanged(newLevel) {\r\n        //console.log(`${NEW_HERO_LEVEL}: ${newLevel}`);\r\n        this.props.dispatch({ type: NEW_HERO_LEVEL, value: newLevel });\r\n    }\r\n\r\n    onAbilityLevelChanged (abilLvlInfo) {\r\n        console.log(`${SELECTED_ABILITY_LEVEL}: Ability: ${abilLvlInfo.ability} Level: ${abilLvlInfo.level}`);\r\n        this.props.dispatch({ type: SELECTED_ABILITY_LEVEL, value: abilLvlInfo });\r\n    }\r\n\r\n    onBuildNameChanged(e) {\r\n        this.setState({ buildName: e.target.value });\r\n    }\r\n\r\n    onBuildCreatorChanged(e) {\r\n        this.setState({ buildCreator: e.target.value });\r\n    }\r\n\r\n    onShardSet(isSet) {\r\n        console.log(`${SHARD_SET}: Set: ${isSet}`)\r\n        this.props.dispatch({ type: SHARD_SET, value: isSet });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"foresite-app-container\">\r\n                <Container className=\"app-main-content py-3\" fluid=\"md\">\r\n                    {/* Top row, Inital Hero Information */}\r\n                    <Row>\r\n                        {/* Main Hero Info */}\r\n                        <Col className=\"my-auto\" md={3}>\r\n                            <span \r\n                                className={`hero-icon-big hero-icon-big-${this.props.selectedHeroName}_png mx-3`}\r\n                                height={50}\r\n                                alt=\"hero banner\" />\r\n                            <div className=\"d-flex mt-3\">\r\n                                <h5 className=\"my-auto px-3\">\r\n                                    { getLocalizedString(this.props.dotaStrings, this.props.selectedHeroName) }\r\n                                </h5>\r\n                                <ChangeHeroBtn \r\n                                    onSelectHero={this.onHeroSelected}\r\n                                    dotaStrings={this.props.dotaStrings} />\r\n                            </div>\r\n                        </Col>\r\n                        {/* Small Stats */}\r\n                        <Col md={3}>\r\n                            <Attributes \r\n                                hero={this.props.selectedHero} \r\n                                heroLevel={this.props.heroLevel}\r\n                                talents={this.props.selectedTalents}\r\n                                items={this.props.items}\r\n                                neutral={this.props.neutralItem} \r\n                                abilities={this.props.heroAbilities} \r\n                                abilityLevels={this.props.heroAbilityLevels}\r\n                                \r\n                                abilityStrings={this.props.abilityStrings}\r\n                                dotaStrings={this.props.dotaStrings}/>\r\n                        </Col>\r\n                        {/* Final Attack/Defence Stats */}\r\n                        <Col md={5}>\r\n                            <Statistics \r\n                                hero={this.props.selectedHero} \r\n                                heroLevel={this.props.heroLevel}\r\n                                talents={this.props.selectedTalents}\r\n                                items={this.props.items}\r\n                                neutral={this.props.neutralItem} \r\n                                abilities={this.props.heroAbilities} \r\n                                abilityLevels={this.props.heroAbilityLevels}\r\n\r\n                                abilityStrings={this.props.abilityStrings}\r\n                                dotaStrings={this.props.dotaStrings}  />\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    {/* Health/Mana and Hero Lvl  */}\r\n                    <Row className=\"my-2 py-2\">\r\n                        <Col md={7}>\r\n                            <HealthManaBar \r\n                                hero={this.props.selectedHero} \r\n                                heroLevel={this.props.heroLevel}\r\n                                talents={this.props.selectedTalents}\r\n                                items={this.props.items}\r\n                                neutral={this.props.neutralItem} \r\n                                abilities={this.props.heroAbilities}\r\n                                abilityLevels={this.props.heroAbilityLevels} />\r\n                        </Col>\r\n                        <Col md={4}>\r\n                            <LevelSelector \r\n                                heroLevel={ this.props.heroLevel } \r\n                                onHeroLevelChanged={ this.onHeroLevelChanged }\r\n                                dotaStrings={this.props.dotaStrings} />\r\n                        </Col>\r\n                        <Col md={1}>\r\n                            <AghanimsUpgrades\r\n                                hero={this.props.selectedHero} \r\n                                abilities={this.props.heroAbilities}\r\n                                items={this.props.items}\r\n\r\n                                dotaStrings={this.props.dotaStrings}\r\n                                abilityStrings={this.props.abilityStrings}\r\n                                \r\n                                onShardSet={this.onShardSet}\r\n                                />\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    {/* Items/Talent */}\r\n                    <Row className=\"items-row my-4\">\r\n                        <Col md={7}>\r\n                            <ItemsBar\r\n                                items={this.props.items} \r\n                                backpack={this.props.backpack} \r\n                                neutral={this.props.neutralItem} \r\n                                onItemChanged={this.onItemSelected}\r\n                                onNeutralChanged={this.onNeutralSelected} \r\n                                dotaStrings={this.props.dotaStrings}\r\n                                abilityStrings={this.props.abilityStrings} />\r\n                        </Col>\r\n                        <Col md={5}>\r\n                            <TalentTree\r\n                                talents={this.props.heroTalents} \r\n                                selectedTalents={this.props.selectedTalents}\r\n                                onTalentSelected={this.onTalentSelected} \r\n                                onTalentUnselected={this.onTalentUnselected} \r\n                                dotaStrings={this.props.dotaStrings}\r\n                                abilityStrings={this.props.abilityStrings} />\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    {/* Abilities */}\r\n                    <Abilities \r\n                        displayDamage={true}\r\n\r\n                        heroName={this.props.selectedHeroName}\r\n                        abilities={this.props.heroAbilities}\r\n                        abilityLevels={this.props.heroAbilityLevels}\r\n                        items={this.props.items}\r\n                        neutral={this.props.neutralItem} \r\n                        selectedTalents={this.props.selectedTalents} \r\n                        shard={this.props.shard}\r\n\r\n                        abilityStrings={this.props.abilityStrings}\r\n                        dotaStrings={this.props.dotaStrings} \r\n\r\n                        onAbilityLevelChanged={this.onAbilityLevelChanged}\r\n                        />\r\n\r\n                    {/* Share Build */}\r\n                    <div className=\"pb-4\">\r\n                        <Button \r\n                            className=\"d-flex py-2\"\r\n                            onClick={() => this.setState({ openBuildShare: !this.state.openBuildShare })}>\r\n                            <h6 className=\"mx-1 mr-2 mb-0\">Share</h6>\r\n                            <FontAwesomeIcon className=\"my-auto\" icon={this.state.openBuildShare ? faChevronUp : faChevronDown} />\r\n                        </Button>\r\n                        {\r\n                            this.state.openBuildShare &&\r\n                                <Row>\r\n                                    <Col md={4}>\r\n                                        <h4>Build Name</h4>\r\n                                        {\r\n                                            this.state.buildName && this.state.loadedFromParams \r\n                                            ?\r\n                                            <Form.Control \r\n                                                className=\"foresight-input-control mr-2 ml-0\"\r\n                                                type=\"text\" \r\n                                                placeholder=\"Build Name\" \r\n                                                value={this.state.buildName} \r\n                                                plaintext\r\n                                                readonly />\r\n                                            :\r\n                                            <Form.Control \r\n                                                className=\"foresight-input-control mr-2 ml-0\"\r\n                                                type=\"text\" \r\n                                                placeholder=\"Build Name\" \r\n                                                onChange={this.onBuildNameChanged} />\r\n                                        }\r\n                                    </Col>\r\n                                    <Col md={4}>\r\n                                        <h4>Creator</h4>\r\n                                        {\r\n                                            this.state.buildCreator && this.state.loadedFromParams\r\n                                            ?\r\n                                            <Form.Control \r\n                                                className=\"foresight-input-control mr-2 ml-0\"\r\n                                                type=\"text\" \r\n                                                placeholder=\"Creator\" \r\n                                                value={this.state.buildCreator} \r\n                                                plaintext\r\n                                                readonly />\r\n                                            :\r\n                                            <Form.Control \r\n                                                className=\"foresight-input-control mr-2 ml-0\"\r\n                                                type=\"text\" \r\n                                                placeholder=\"Creator\" \r\n                                                onChange={this.onBuildCreatorChanged} />\r\n                                        }\r\n                                    </Col>\r\n                                    <Col md={4}>\r\n                                        <div className=\"d-flex my-auto h-100\">\r\n                                            <Button className=\"mr-1 my-auto\" onClick={this.onShareBuild}>\r\n                                                <FontAwesomeIcon icon={faShare} />\r\n                                            </Button>\r\n                                            <div className=\"my-auto\">Share this build!</div>\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                        }\r\n                    </div>\r\n\r\n                    {/* Padding Separator */}\r\n                    {/* <div className=\"py-5\" /> */}\r\n                    \r\n                    {/* Enemy Hero */}\r\n                    {/* <EnemyHero \r\n                        hero={this.props.selectedEnemyHero}\r\n                        heroName={this.props.selectedEnemyHeroName} \r\n                        heroAbilities={this.props.enemyHeroAbilities} \r\n                        heroItems={this.props.enemyHeroItems}\r\n                        heroTalents={this.props.enemyHeroTalents} \r\n                        selectedTalents={this.props.selectedEnemyTalents}\r\n                        neutral={this.props.enemyNeutralItem}\r\n                        abilityStrings={this.props.abilityStrings} \r\n                        dotaStrings={this.props.dotaStrings} /> */}\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    selectedHero: state.hero.selectedHero,\r\n    selectedHeroName: state.hero.selectedHeroName,\r\n    \r\n    heroAbilities: state.hero.heroAbilities,\r\n    heroAbilityLevels: state.hero.heroAbilityLevels,\r\n\r\n    heroTalents: state.hero.heroTalents,\r\n    heroLevel: state.hero.heroLevel,\r\n\r\n    items: state.hero.items,\r\n    backpack: state.hero.backpack,\r\n    neutralItem: state.hero.neutralItem,\r\n    selectedTalents: state.hero.selectedTalents,\r\n\r\n    shard: state.hero.shard,\r\n\r\n    abilityStrings: state.language.stringsAbilities,\r\n    dotaStrings: state.language.stringsDota,\r\n\r\n    selectedEnemyHero: state.enemy.selectedEnemyHero,\r\n    selectedEnemyHeroName: state.enemy.selectedEnemyHeroName,\r\n    enemyHeroTalents: state.enemy.enemyHeroTalents,\r\n    enemyHeroAbilities: state.enemy.enemyHeroAbilities,\r\n    selectedEnemyTalents: state.enemy.selectedEnemyTalents,\r\n    enemyHeroItems: state.enemy.enemyHeroItems,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Calculator);","import Calculator from \"./Calculator\";\r\n\r\nexport default Calculator;","import Home from \"./Home\";\r\n\r\nexport default Home;","import { faTwitter } from '@fortawesome/free-brands-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { Component } from 'react';\r\nimport {\r\n    Container,\r\n    Button,\r\n    Col, \r\n    Row,\r\n} from \"react-bootstrap\";\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport \"./Home.css\";\r\n\r\nclass Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            redirect: \"\",\r\n        };\r\n\r\n        this.onGoToApp = this.onGoToApp.bind(this);\r\n    }\r\n\r\n    onGoToApp() {\r\n        this.setState({ \r\n            redirect: \"/app\"\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                className=\"bg-master\">\r\n                {/* Primary Title Container */}\r\n                <div className=\"primary-home-container py-5\">\r\n                    <div className=\"home-bg-image\" />\r\n                    <Container \r\n                        className=\"faded-background\"\r\n                        style={{\r\n                            height: \"auto\",\r\n                            paddingTop: \"7rem\",\r\n                            paddingBottom: \"7rem\",\r\n                        }}>\r\n                        <div className=\"text-center\">\r\n                            {/* App title */}\r\n                            <h1>\r\n                                foresight\r\n                            </h1>\r\n                            {/* Sub text & action */}\r\n                            <div>\r\n                                <h6 className=\"py-2\">\r\n                                    app for calculating damage output for heroes in DotA 2 \r\n                                </h6>\r\n                                <Button\r\n                                    className=\"mx-auto mt-2\"\r\n                                    variant=\"primary\"\r\n                                    onClick={this.onGoToApp}>\r\n                                    <h5 className=\"m-0 px-5 py-2\">Get Started!</h5>\r\n                                </Button>\r\n                            </div>\r\n                            <div className=\"d-flex justify-content-center mt-3\">\r\n                                <a \r\n                                    className=\"px-2 mr-1\"\r\n                                    href=\"https://joshlmao.com\" \r\n                                    style={{ color: \"white\" }}>\r\n                                    <h6 className=\"my-auto\">JoshLmao</h6>\r\n                                </a>\r\n                                <a href=\"https://twitter.com/JoshLmao\">\r\n                                    <FontAwesomeIcon icon={faTwitter} />\r\n                                </a>\r\n                            </div>\r\n                        </div>\r\n                    </Container>\r\n                    <div className=\"py-3\" />\r\n                    <Container className=\"\">\r\n                        <Row>\r\n                            <Col sm \r\n                                className=\"p-3 mr-3 faded-background\">\r\n                                <h3>Experiment</h3>\r\n                                <p>\r\n                                    Gaze into the future and see how much an item effects your overall build and view the raw numbers behind the game\r\n                                </p>\r\n                            </Col>\r\n                            <Col sm\r\n                                className=\"p-3 mx-3 faded-background\">\r\n                                <h3>Share</h3>\r\n                                <p>\r\n                                    Share your item and ability builds to get an in depth look at the statistics and numbers, all in one handy and sharable link.\r\n                                </p>\r\n                            </Col>\r\n                            <Col sm\r\n                                className=\"p-3 ml-3 faded-background\">\r\n                                <h3>Open Source</h3>\r\n                                <p>\r\n                                    The site is completly open source and available to view on Github. Created by JoshLmao <span>😊</span>\r\n                                </p>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </div>\r\n                {\r\n                    this.state.redirect && <Redirect to={this.state.redirect} />\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import App from \"./App\";\r\n\r\nexport default App;","import React, { Component } from 'react';\nimport { \n    HashRouter,\n    Route,\n    Switch\n} from 'react-router-dom';\n\nimport Navigation from \"../Navigation\";\nimport FourOhFour from \"../FourOhFour\";\nimport Calculator from \"../Calculator\";\nimport Home from \"../Home\";\n\nimport \"../../css/foresight-bs-styling.css\";\nimport \"../../css/foresight-generic.css\";\n\nclass App extends Component {\n    render() {\n        return (\n            <HashRouter>\n                <Navigation />\n\n                <Switch>\n                    <Route exact path=\"/\" component={Home} />\n\n                    <Route exact path=\"/app\" component={Calculator} />\n\n                    <Route component={FourOhFour} />\n                </Switch>\n            </HashRouter>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./store\";\n\nimport App from './components/App/';\n\n// Import Bootstrap component styles\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst app = (\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>\n);\n\nReactDOM.render(app, document.getElementById('root') );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}