{"version":3,"sources":["serviceWorker.js","enums/attributes.js","utility/dataHelperHero.js","reducers/initialState.js","utils.js","reducers/hero.js","constants/actionTypes.js","enums/languages.js","reducers/language.js","store/index.js","reducers/enemy.js","components/LanguageSelect/LanguageSelect.jsx","components/LanguageSelect/index.js","components/Navigation/Navigation.jsx","components/Navigation/index.js","components/FourOhFour/index.js","components/FourOhFour/FourOhFour.jsx","utility/data-helpers/language.js","enums/abilities.js","utility/dataHelperTalents.js","utility/dataHelperAbilities.js","utility/dataHelperItems.js","utility/calculate.js","components/Abilities/DamageOutput.jsx","components/Abilities/Cooldown.jsx","components/Abilities/ManaCost.jsx","components/Abilities/AbilityDetails.jsx","components/Abilities/Abilities.jsx","components/Abilities/index.js","utility/spriteHelper.js","components/ItemsBar/ItemSelector.jsx","enums/items.js","components/ItemsBar/ItemInfoTooltip.jsx","components/ItemsBar/Item.jsx","components/Neutral/NeutralItemSelector.jsx","components/Neutral/index.js","components/Neutral/Neutral.jsx","components/ItemsBar/ItemsBar.jsx","components/ItemsBar/index.js","components/Attributes/Attributes.jsx","components/Attributes/index.js","components/Statistics/Statistics.jsx","components/Statistics/index.js","components/ChangeHeroBtn/HeroSelector.jsx","components/ChangeHeroBtn/index.js","components/ChangeHeroBtn/ChangeHeroBtn.jsx","components/TalentTree/TalentRow.jsx","components/TalentTree/index.js","components/TalentTree/TalentTree.jsx","components/HealthManaBar/index.js","components/HealthManaBar/HealthManaBar.jsx","components/LevelSelector/LevelSelector.jsx","components/LevelSelector/index.js","components/Calculator/Calculator.jsx","components/EnemyHero/EnemyHero.jsx","components/Calculator/index.js","components/Home/index.js","components/Home/Home.jsx","components/App/index.js","components/App/App.jsx","index.js"],"names":["Boolean","window","location","hostname","match","EAttributes","getSpecificAttributeStats","specificAttribute","heroInfo","basePrimary","primaryPerLevel","parseInt","AttributeBaseStrength","parseFloat","AttributeStrengthGain","AttributeBaseAgility","AttributeAgilityGain","AttributeBaseIntelligence","AttributeIntelligenceGain","console","error","base","perLevel","getHeroTalents","keys","Object","talents","i","length","includes","ability","push","mappedTalents","lvlRow","lvl","rightTalent","leftTalent","sort","a","b","getAllHeroAbilities","abilities","getPrimaryAttribute","hero","AttributePrimary","initialState","selectedHero","DOTAHeroes","npc_dota_hero_zuus","selectedHeroName","heroAbilities","heroTalents","selectedTalents","heroLevel","items","slot","item","backpack","neutralItem","lang","stringsAbilities","EngAbilStrings","stringsDota","EngDotaStrings","selectedEnemyHero","npc_dota_hero_target_dummy","selectedEnemyHeroName","modelString","dashSplit","split","parseNameFromModel","Model","enemyHeroTalents","enemyHeroAbilities","selectedEnemyTalents","enemyHeroItems","replaceUpdatedItem","itemArray","newItem","newArray","filter","val","extra","getNewTalentArray","talentArray","newTalent","map","value","removeTalent","unselectedTalent","talent","reducer","state","action","type","log","ELanguages","SCHINESE","ENGLISH","getAbilityStrings","langCode","SChineseAbilStrings","getGeneralStrings","SChineseDotaStrings","allReducers","combineReducers","language","enemy","store","createStore","LanguageSelect","props","onLanguageChanged","bind","event","newLanguage","target","this","dispatch","Form","Control","as","onChange","defaultValue","values","key","Component","connect","pkg","require","Navigation","Navbar","className","Container","Brand","to","Link","name","Nav","style","fontSize","eventKey","disabled","version","dotaVersion","Toggle","aria-controls","Collapse","id","href","Button","variant","icon","faGithub","FourOhFour","getLocalizedString","localeStrings","string","Tokens","replaceStringValue","undefined","replace","EDamageType","EAbilityBehaviour","ESpellImmunityType","ESpecialBonusOperation","tryGetTalentSpecialAbilityValue","specialValueKey","talentInfo","getAbilityInfoFromName","specialValue","getAbilitySpecialAbilityValue","talentsInclude","targetTalent","abilityName","DOTAAbilities","tryGetAbilitySpecialAbilityValue","abilityLevel","abilityInfo","specialAbilityKey","AbilitySpecial","matchingKey","find","element","specialAbilityInfo","dataValue","var_type","parseAbilityValueByLevel","level","abilValue","splitValues","isCooldownTalent","isTalent","isDamageTalent","isCastRangeTalent","lowerCasePhrase","abilityString","DOTAEngAbilityStrings","toLowerCase","tryParseAbilitySpecialValue","abilSpecialinfo","tryGetAbilityInfoValueFromKey","abilInfoKey","getItemInfoFromName","itemName","DOTAItems","getItemSpecialAbilityValue","itemInfo","specialAbilityValueKey","tryGetItemSpecialValue","tryGetNeutralSpecialValue","neutral","foundNeutralInfo","primaryAttributeToItemBonusKey","primaryAttr","itemsContainsScepter","allItems","tryGetItemInfoValue","itemInfoKey","infoValue","convertItemDescToHtml","itemDescString","dataString","replaceRegex","phrase","infoKey","join","specialAbilityValue","replaceStringWithDataValues","engSplitString","localizedSplit","totalHtmlSections","section","position","right","AbilityManaCost","AbilityCooldown","faClock","dangerouslySetInnerHTML","__html","ItemQuality","calculateHealth","baseStrength","strengthGain","baseHealth","npc_dota_hero_base","StatusHealth","totalHealth","bonusHealth","bonusStr","bonusAllStats","maxHealth","toFixed","calculateMana","baseInt","intGain","baseMana","StatusMana","totalMana","bonusMana","bonusInt","maxMana","calculateHealthRegen","totalHpRegen","StatusHealthRegen","regenAmt","bonusHealthRegen","bonusRegen","calculateManaRegen","totalManaRegen","StatusManaRegen","totalManaRegenPercentAmp","bonusManaRegen","bonusIntellect","regenPerCharge","charges","manaRegenAmp","manaRegen","calculateTotalSpellAmp","totalSpellAmp","ampTalent","spellAmpInfo","foundNeutral","spellAmpAmount","ampPerCharge","calculateStatusResist","totalStatusResist","statusResistAmount","calculateMagicResist","resistanceBonuses","MagicalResistance","baseResist","magicResistAmount","edited","total","calculateEvasion","totalEvasion","bonusEvasion","evasionAmount","calculateRightClickDamage","heroMainAttribute","atkMin","AttackDamageMin","atkMax","AttackDamageMax","primaryAttributeStats","totalPrimaryAttribute","totalAdditional","allAttrKeys","bonusPrimaryAttr","bonusPrimaryStat","bonusDmg","allStats","min","max","Math","floor","additional","calculateAttackTime","totalAttackSpeed","BaseAttackSpeed","agiStats","totalAgi","bonusAttackSpeed","bonusAgility","attackSpeed","attacksPerSec","atkSpeed","attackTime","attacksPerSecond","calculateSpellDamage","abilityDamageInfo","abilityDmg","damage","isPercent","AbilityDamage","dmgValue","specialAbilityElement","lowerKey","getAbilityOutputDamage","totalSpellAmpPercent","talentBonus","spellAmp","bonusSpellAmp","chargeCount","neutralInfo","special","bonus_spell_amp","spell_amp","ampTalentValue","linkedAbility","spellDamage","totalAbilDmg","abilityDamage","calculateAbilityCooldown","cooldown","fixedAmtReductionSeconds","AbilityCharges","AbilityChargeRestoreTime","includePhrase","getIncludesAbilitySpecialAbilityValue","allReductions","bonusCooldown","amount","source","reduction","totalCooldown","sourceOfReductions","decimal","calculateMoveSpeed","baseSpeed","MovementSpeed","flatBonus","moveSpeed","bonusMovement","moveSpeedPercentBonus","bonusMoveSpeed","bonusSpeed","calculateAttackRange","isHeroRanged","AttackCapabilities","totalAttackRange","AttackRange","baseRange","rangeBonus","bonusAttackRange","calculateAttribute","attribute","attributeStats","baseAttribute","attributePerLevel","totalAttribute","additionalAttribute","bonusAgi","primaryStat","calculateAbilityCastRange","baseCastRange","AbilityCastRange","foundRange","RequiresScepter","getAbilitySpecialCastRangeValue","totalBonusRange","getAbilityNameFromStrings","strings","languageStrings","stringKey","matchingKeys","tryGetLocalizedString","DamageOutput","levelInfo","abilityStrings","dotaStrings","prevProps","setState","abilityKey","abilInfo","abilLvl","parseDamage","Cooldown","abilityCooldown","updateCooldown","currentCooldownInfo","title","faCircle","ManaCost","updateMana","manaCost","totalManaCostReducePercent","manaCostReduceAmount","costReductionAmount","reduceAmount","calculateManaCost","height","width","backgroundColor","stringContainsHtml","str","TypeValueUI","isPercentage","typeStr","valueStr","AbilityDetails","abilityBehaviours","castRange","castRangeAmt","valuesInformation","abilitySpecials","containsScepter","specialInfo","abilitySpecialKeys","currentAbilitySpecialObject","specialBonus","specialBonusOperation","translationKey","abilityValue","containsKey","specialBonusValue","getAbilitySpecialExtraValues","behaviours","AbilityBehavior","targeting","splitBehaviours","AbilityUnitDamageType","dmgTypeVal","splitDmgTypes","SpellImmunityType","pierceValue","getAbilityBehaviours","index","toUpperCase","getLevelInfo","abil","Abilities","abils","filterAbilities","abilLevels","heroName","abilityLevels","displayDamage","onLevelChanged","e","tagName","parentElement","levelIndex","dataset","lvlindex","targetLevel","btnindex","Row","md","abilVal","IsGrantedByScepter","Col","ID","maxWidth","maxHeight","src","alt","abilityIndex","maxLvl","AbilityType","MaxLevel","html","onClick","data-lvlindex","data-btnindex","getAbilityLevelHtml","getItemIcon","scale","shift","filterItemName","data-item","transform","transformOrigin","display","getItemsByQuality","itemsArray","matchArray","quality","ItemIcon","keyName","TabHeading","text","ItemSelector","selectableItems","ItemIsNeutralDrop","IsObsolete","basicItems","upgradesItems","queryItems","onSelectedItem","onSearchChanged","onSearchItemSelected","onShopItemSelected","onRemoveItemSelected","query","filteredItems","localizedName","indexOf","placeholder","faMinus","ListGroup","Item","Tabs","defaultActiveKey","transition","Tab","EDisassembleRule","EItemQuality","replaceItemStatLocalizeString","localizeString","splice","abs","ItemInfoTooltip","itemStats","statistics","getItemStatistics","loreString","descString","descFiltered","ItemCost","faCampground","faHome","splitCompare","localized","toString","cost","calculateItemSellCost","eDisassembleRule","ItemDisassembleRule","isDissassembleRule","isBackpack","onItemChanged","onItemExtraChanged","itemExtra","itemSelectorOpen","itemTooltipOpen","onBloodstoneChargesChanged","setCharges","ItemInitialCharges","newVal","newChargeAmt","trigger","isOpen","zIndex","faInfo","open","on","contentStyle","overflowY","padding","border","closeOnDocumentClick","ItemRequiresCharges","itemRequiresCharges","top","left","size","textAlign","background","color","NeutralItemSelector","allNeutrals","selectableNeutrals","array","itemKey","getAllNeutrals","queryNeutrals","iconScale","onNewNeutralSelected","onNeutralSelected","filteredNeutrals","data-neutral","Neutral","hoverOpen","ItemsBar","onNeutralChanged","onItemExtraChnaged","onItem","Attribute","isPrimaryAttribute","perLevelString","per","Attributes","strengthStats","agilityStats","intStats","StatArray","stats","formatAttackMinMax","standardAtkDmg","dmgString","formatAttackTime","attackInfo","formatArmor","armorInfo","armor","Statistics","updateStatistics","totalArmor","ArmorPhysical","totalBonusArmor","bonusArmor","armorBonus","calculateMainArmor","physResist","percent","calculatePhysicalResist","attackRange","physicalResist","magicResist","statusResist","evasion","neutrak","healthRegen","HeroSelector","selectableHeroes","workshop_guide_name","displayName","alias","NameAliases","getAllPlayableHeroes","filteredHeroes","allHeroes","onSelectedHero","heroes","searchTerm","localizedHeroName","faSearch","data-heroname","data-hero","ChangeHeroBtn","onSelectHero","onToggleHeroSelect","faPencilAlt","isTalentSelected","TalentRow","onTalentSelected","onTalentUnselected","onSelectTalent","getTalentDisplayName","selectedTalent","getTalentInfoFromName","data-talent","TalentTree","findSelectedTalent","matchTalent","HealthManaBar","updateBar","ModifyBtn","LevelSelector","onHeroLevelChanged","onIncrementHeroLevel","onDecrementHeroLevel","onLvlInputChanged","newLevel","Calculator","buildName","buildCreator","openBuildShare","loadedFromParams","onHeroSelected","onItemSelected","onShareBuild","onBuildNameChanged","onBuildCreatorChanged","search","buildData","URLSearchParams","get","decoded","Base64","decode","buildObject","JSON","parse","creator","build","stringify","encoded","encode","copy","fluid","faChevronUp","faChevronDown","plaintext","readonly","faShare","Home","redirect","onGoToCalc","App","exact","path","component","app","StrictMode","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.bca30fde.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// Enum of all attributes contained within npc_heroes\r\nexport const EAttributes = {\r\n    ATTR_STRENGTH: \"DOTA_ATTRIBUTE_STRENGTH\",\r\n    ATTR_AGILITY: \"DOTA_ATTRIBUTE_AGILITY\",\r\n    ATTR_INTELLIGENCE: \"DOTA_ATTRIBUTE_INTELLECT\"\r\n};","// * Helper and utility functions to provide for retrieving data from \"npc_heroes.json\"\r\n// * \r\n\r\nimport { EAttributes } from \"../enums/attributes\";\r\n\r\nimport { DOTAHeroes } from \"../data/dota2/json/npc_heroes.json\";\r\n\r\n/// Get the base and per level stats of a heroes primary attribute\r\nexport function getPrimaryAttributeStats(heroInfo) {\r\n    if (heroInfo && heroInfo.AttributePrimary) {\r\n        return getSpecificAttributeStats(heroInfo.AttributePrimary, heroInfo);\r\n    } else{\r\n        return null;\r\n    }\r\n}\r\n\r\n/// Get the base and per level stats of a specific attribute\r\nexport function getSpecificAttributeStats(specificAttribute, heroInfo) {\r\n    var basePrimary = 0;\r\n    var primaryPerLevel = 0;\r\n\r\n    switch(specificAttribute) {\r\n        case EAttributes.ATTR_STRENGTH:\r\n            {\r\n                basePrimary = parseInt(heroInfo.AttributeBaseStrength);\r\n                primaryPerLevel = parseFloat(heroInfo.AttributeStrengthGain);\r\n                break;\r\n            }\r\n        case EAttributes.ATTR_AGILITY:\r\n            {\r\n                basePrimary = parseInt(heroInfo.AttributeBaseAgility);\r\n                primaryPerLevel = parseFloat(heroInfo.AttributeAgilityGain);\r\n                break;\r\n            }\r\n        case EAttributes.ATTR_INTELLIGENCE:\r\n            {\r\n                basePrimary = parseInt(heroInfo.AttributeBaseIntelligence);\r\n                primaryPerLevel = parseFloat(heroInfo.AttributeIntelligenceGain);\r\n                break;\r\n            }\r\n        default:\r\n            console.error(`Unable to get attribute stats because of unknown specific attribute '${specificAttribute}'`);\r\n    }\r\n    \r\n    return {\r\n        base: basePrimary,\r\n        perLevel: primaryPerLevel,\r\n    };\r\n}\r\n\r\n/// Gets all hero talents from a hero info\r\nexport function getHeroTalents (heroInfo) {\r\n    // Get simple array of all talents from npc_heroes.json\r\n    // All abilities are stored in npc_heroes.json as \"Ability?\", where ? is a number. \r\n    // Not always in numberical order like 1, 2, 3\r\n\r\n    var keys = Object.keys(heroInfo);\r\n    var talents = [];\r\n    for(var i = 0; i < keys.length; i++) {\r\n        if (keys[i].includes(\"Ability\") && !keys[i].includes(\"AbilityDraft\")) {\r\n            var ability = heroInfo[keys[i]];\r\n            if (ability && typeof ability === \"string\") {\r\n                if (ability !== \"generic_hidden\" && ability.includes(\"special_bonus\")) {\r\n                    talents.push(ability);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // sort into nice list\r\n    var mappedTalents = [];\r\n    var lvlRow = 0;\r\n    for (i = 0 ; i < talents.length; i += 2) {\r\n        mappedTalents.push({\r\n            lvl: 10 + (5 * lvlRow),\r\n            rightTalent: talents[i],\r\n            leftTalent: talents[i + 1]\r\n        });\r\n\r\n        lvlRow++;\r\n    }\r\n\r\n    // Sort by lvl 25 talents first\r\n    mappedTalents.sort((a, b) => a.lvl < b.lvl ? 1 : -1);\r\n\r\n    return mappedTalents;\r\n}\r\n\r\n/// Gets all hero abilities from a hero info\r\nexport function getAllHeroAbilities (heroInfo) {\r\n    var keys = Object.keys(heroInfo);\r\n    var abilities = [];\r\n    for(var i = 0; i < keys.length; i++) {\r\n        if (keys[i].includes(\"Ability\") && !keys[i].includes(\"AbilityDraft\")) {\r\n            var ability = heroInfo[keys[i]];\r\n            if (ability && typeof ability === \"string\") {\r\n                if (ability !== \"generic_hidden\" && !ability.includes(\"special_bonus\")) {\r\n                    abilities.push(ability);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return abilities;\r\n}\r\n\r\n/// Returns the base hero information that all heroes are based on\r\nexport function getDotaBaseHero () {\r\n    return DOTAHeroes?.npc_dota_hero_base;\r\n}\r\n\r\n/// Gets the hero's primary attribute as the EAttribute enum\r\nexport function getPrimaryAttribute (hero) {\r\n    switch(hero.AttributePrimary) {\r\n        case EAttributes.ATTR_STRENGTH:\r\n            return EAttributes.ATTR_STRENGTH;\r\n        case EAttributes.ATTR_AGILITY:\r\n            return EAttributes.ATTR_AGILITY;\r\n        case EAttributes.ATTR_INTELLIGENCE:\r\n            return EAttributes.ATTR_INTELLIGENCE;\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\nexport function getAllPlayableHeroes() {\r\n    // Filter and remove any unwanted heroes\r\n    let selectableHeroes = Object.keys(DOTAHeroes).filter((value) => {\r\n        var key = value.toLowerCase();\r\n        if (key !== \"version\" && key !== \"npc_dota_hero_base\" && key !== \"npc_dota_hero_target_dummy\") {\r\n            return true;\r\n        }\r\n        return false;\r\n    })\r\n    // Map only necessary data\r\n    selectableHeroes = selectableHeroes.map((key) => {\r\n        if (DOTAHeroes[key].workshop_guide_name) {\r\n            return {\r\n                displayName: DOTAHeroes[key].workshop_guide_name,\r\n                name: key,\r\n                alias: DOTAHeroes[key].NameAliases ? DOTAHeroes[key].NameAliases.split(',') : null,\r\n            };\r\n        }\r\n    });\r\n    // sort by name property\r\n    selectableHeroes.sort((a, b) => (a.name > b.name) ? 1 : -1);\r\n    return selectableHeroes;\r\n}","import { DOTAHeroes } from \"../data/dota2/json/npc_heroes.json\";\r\nimport { lang as EngAbilStrings } from \"../data/dota2/languages/abilities_english.json\";\r\nimport { lang as EngDotaStrings } from \"../data/dota2/languages/dota_english.json\";\r\n\r\nimport {\r\n    parseNameFromModel,\r\n} from \"../utils\";\r\nimport {\r\n    getAllHeroAbilities,\r\n    getHeroTalents,\r\n} from \"../utility/dataHelperHero\";\r\n\r\nconst initialState = {\r\n    /// Current selected hero info by the user\r\n    selectedHero: DOTAHeroes.npc_dota_hero_zuus,\r\n    /// Internal string name of the hero\r\n    selectedHeroName: \"npc_dota_hero_zuus\",\r\n    /// Array of abilities of the selectedHero\r\n    heroAbilities: getAllHeroAbilities(DOTAHeroes.npc_dota_hero_zuus),\r\n    /// Array of talents of the selectedHero\r\n    heroTalents: getHeroTalents(DOTAHeroes.npc_dota_hero_zuus),\r\n    /// Array of talents selected by the user\r\n    selectedTalents: [ ],\r\n    /// Current level of the hero set by the user\r\n    heroLevel: 1,\r\n\r\n    /// Current items that have been selected\r\n    items: [\r\n        { slot: 0, item: \"item_mjollnir\" },\r\n        { slot: 1, item: \"\" },\r\n        { slot: 2, item: \"\" },\r\n        { slot: 3, item: \"\" },\r\n        { slot: 4, item: \"\" },\r\n        { slot: 5, item: \"\" },\r\n    ],\r\n    /// Current backpack selected by user\r\n    backpack: [\r\n        { slot: 0, item: \"\" },\r\n        { slot: 1, item: \"\" },\r\n        { slot: 2, item: \"\" },\r\n    ],\r\n    /// Current neutral item selected by user\r\n    neutralItem: { item: \"item_spell_prism\" },\r\n\r\n    // Current code of the selected UI language\r\n    lang: \"en\",\r\n    stringsAbilities: EngAbilStrings,\r\n    stringsDota: EngDotaStrings,\r\n\r\n    /// Selected enemy hero \r\n    selectedEnemyHero: DOTAHeroes.npc_dota_hero_target_dummy,\r\n    selectedEnemyHeroName: parseNameFromModel(DOTAHeroes.npc_dota_hero_target_dummy.Model[1]),\r\n    enemyHeroTalents: getHeroTalents(DOTAHeroes.npc_dota_hero_target_dummy),\r\n    enemyHeroAbilities: getAllHeroAbilities(DOTAHeroes.npc_dota_hero_target_dummy),\r\n    selectedEnemyTalents: [ ],\r\n    enemyHeroItems: [\r\n        { slot: 0, item: \"ultimate_scepter\" },\r\n        { slot: 1, item: \"\" },\r\n        { slot: 2, item: \"\" },\r\n        { slot: 3, item: \"\" },\r\n        { slot: 4, item: \"\" },\r\n        { slot: 5, item: \"\" },\r\n    ],\r\n};\r\n\r\nexport default initialState;","/// Parses a display name from a hero info Model string\r\nexport function parseNameFromModel (modelString) {\r\n    var dashSplit = modelString.split('.')[0].split('/');\r\n    return dashSplit[dashSplit.length - 1];\r\n};","import initialState from \"./initialState\";\r\n\r\nimport {\r\n    SELECTED_HERO,\r\n    SELECTED_ITEM,\r\n    SELECTED_BACKPACK_ITEM,\r\n    SELECTED_NEUTRAL,\r\n    SELECTED_TALENT,\r\n    UNSELECTED_TALENT,\r\n    NEW_HERO_LEVEL,\r\n} from \"../constants/actionTypes\";\r\n\r\nimport {\r\n    parseNameFromModel,\r\n} from \"../utils\";\r\n\r\nimport {\r\n    getAllHeroAbilities,\r\n    getHeroTalents,\r\n} from \"../utility/dataHelperHero\";\r\n\r\n/* DotA 2 Import Data */\r\nimport { DOTAHeroes } from \"../data/dota2/json/npc_heroes.json\";\r\n\r\n/// Takes the existing itemArray and removes the current slot item and\r\n/// replaces with the newItem\r\nfunction replaceUpdatedItem(itemArray, newItem) {\r\n    /// Remove old slot insert new and sort by Slot\r\n    let newArray = itemArray.filter((val) => {\r\n        if (val.slot !== newItem.slot) {\r\n            return val;\r\n        }\r\n    })\r\n    newArray.push({ \r\n        slot: newItem.slot,\r\n        item: newItem.item,\r\n        extra: newItem.extra,\r\n    });\r\n    /// Sort by slot order 0 - 5\r\n    newArray.sort((a, b) => (a.slot > b.slot) ? 1 : -1);\r\n    return newArray;\r\n}\r\n\r\nfunction getNewTalentArray(talentArray, newTalent) {\r\n    let newArray = talentArray.map((value => { return value }));\r\n    newArray.push(newTalent);\r\n    return newArray;\r\n}\r\n\r\nfunction removeTalent (talentArray, unselectedTalent) {\r\n    /// Filter to get all but the unselectedTalent\r\n    var array = talentArray.filter((talent) => {\r\n        if (talent && talent !== unselectedTalent) {\r\n            return talent;\r\n        }\r\n    });\r\n    return array;\r\n}\r\n\r\nfunction reducer(state = initialState, action) {\r\n    switch(action.type)\r\n    {\r\n        case SELECTED_HERO:\r\n            console.log(action);\r\n            let heroInfo = DOTAHeroes[action.value];\r\n            return {\r\n                ...state,\r\n                selectedHero: heroInfo,\r\n                selectedHeroName: action.value,\r\n                heroAbilities: getAllHeroAbilities(heroInfo),\r\n                heroTalents: getHeroTalents(heroInfo),\r\n                \r\n                // reset selected talents when new hero selected\r\n                selectedTalents: [ ],\r\n            };\r\n        case SELECTED_ITEM:\r\n            return {\r\n                ...state,\r\n                items: replaceUpdatedItem(state.items, action.value),\r\n            };\r\n        case SELECTED_BACKPACK_ITEM:\r\n            return {\r\n                ...state,\r\n                backpack: replaceUpdatedItem(state.backpack, action.value),\r\n            }\r\n        case SELECTED_NEUTRAL:\r\n            return {\r\n                ...state,\r\n                neutralItem: action.value,\r\n            };\r\n        case SELECTED_TALENT:\r\n            return {\r\n                ...state,\r\n               selectedTalents: getNewTalentArray(state.selectedTalents, action.value),\r\n            }\r\n            case UNSELECTED_TALENT:\r\n                return {\r\n                    ...state,\r\n                    selectedTalents: removeTalent(state.selectedTalents, action.value),\r\n                }\r\n        case NEW_HERO_LEVEL:\r\n            return {\r\n                ...state,\r\n                heroLevel: action.value,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","export const SELECTED_HERO = \"SELECT_HERO\";\r\nexport const SELECTED_NEUTRAL = \"SELECTED_NEUTRAL\";\r\nexport const SELECTED_ITEM = \"SELECTED_ITEM\";\r\nexport const SELECTED_BACKPACK_ITEM = \"SELECTED_BACKPACK_ITEM\";\r\nexport const SELECTED_TALENT = \"SELECTED_TALENT\";\r\nexport const UNSELECTED_TALENT = \"UNSELECTED_TALENT\";\r\nexport const NEW_HERO_LEVEL = \"NEW_HERO_LEVEL\";\r\nexport const C = \"ITEM_EXTRAS_CHANGED\";\r\n\r\nexport const LANGUAGE_CHANGED = \"LANGUAGE_CHANGED\";\r\n\r\nexport const ENEMY_SELECTED = \"ENEMY_SELECTED\";\r\nexport const ENEMY_SELECTED_TALENT = \"ENEMY_SELECTED_TALENT\";\r\n","/// Enum of all supported languages\r\nexport const ELanguages = {\r\n    SCHINESE: \"szh\",\r\n    ENGLISH: \"en\",\r\n    //RUSSIAN: \"ru\",\r\n};","import {\r\n    LANGUAGE_CHANGED\r\n} from \"../constants/actionTypes\";\r\nimport { ELanguages } from \"../enums/languages\";\r\nimport initialState from \"./initialState\";\r\n\r\nimport { lang as EngAbilStrings } from \"../data/dota2/languages/abilities_english.json\";\r\nimport { lang as EngDotaStrings } from \"../data/dota2/languages/dota_english.json\";\r\n\r\nimport { lang as SChineseAbilStrings } from \"../data/dota2/languages/abilities_schinese.json\";\r\nimport { lang as SChineseDotaStrings } from \"../data/dota2/languages/dota_schinese.json\";\r\n\r\nfunction getAbilityStrings(langCode) {\r\n    switch(langCode) {\r\n        case ELanguages.ENGLISH:\r\n            return EngAbilStrings;\r\n        case ELanguages.SCHINESE:\r\n            return SChineseAbilStrings;\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\nfunction getGeneralStrings(langCode) {\r\n    switch(langCode) {\r\n        case ELanguages.ENGLISH:\r\n            return EngDotaStrings;\r\n        case ELanguages.SCHINESE:\r\n            return SChineseDotaStrings;\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\nexport default (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case LANGUAGE_CHANGED:\r\n            console.log(`${LANGUAGE_CHANGED}: ${action.value}`);\r\n            return {\r\n                ...state,\r\n                lang: action.value,\r\n\r\n                stringsAbilities: getAbilityStrings(action.value),\r\n                stringsDota: getGeneralStrings(action.value),\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import { createStore, combineReducers } from \"redux\";\r\nimport hero from \"../reducers/hero\";\r\nimport language from \"../reducers/language\";\r\nimport enemy from \"../reducers/enemy\";\r\n\r\nconst allReducers = combineReducers({\r\n    language,\r\n    hero,\r\n    enemy,\r\n});\r\n\r\nconst store = createStore(allReducers);\r\n\r\nexport default store;","import initialState from \"./initialState\";\r\n\r\nimport {\r\n    ENEMY_SELECTED,\r\n    ENEMY_SELECTED_TALENT\r\n} from \"../constants/actionTypes\";\r\n\r\nexport default (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case ENEMY_SELECTED:\r\n            return {\r\n                ...state,\r\n\r\n                enemy: action.value,\r\n            };\r\n        case ENEMY_SELECTED_TALENT:\r\n            return {\r\n                ...state,\r\n\r\n                selectedEnemyTalents: [ ],\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Form } from 'react-bootstrap';\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { LANGUAGE_CHANGED } from \"../../constants/actionTypes\";\r\nimport { ELanguages } from \"../../enums/languages\";\r\n\r\nfunction getSupportedLanguages() {\r\n    var langs = Object.values(ELanguages);\r\n    return langs.map((value) => {\r\n        return (\r\n            <option value={value} key={value}>{value}</option>\r\n        )\r\n    });\r\n}\r\n\r\nclass LanguageSelect extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.onLanguageChanged = this.onLanguageChanged.bind(this);\r\n    }\r\n\r\n    onLanguageChanged(event) {\r\n        let newLanguage = event.target.value;\r\n        this.props.dispatch({ type: LANGUAGE_CHANGED, value: newLanguage });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Form.Control as=\"select\" onChange={this.onLanguageChanged} defaultValue={this.props.lang}>\r\n                    { getSupportedLanguages() }\r\n                </Form.Control>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    lang: state.language.lang,\r\n});\r\n\r\nexport default connect(mapStateToProps)(LanguageSelect);","import LanguageSelect from \"./LanguageSelect\";\r\n\r\nexport default LanguageSelect;","import React, { Component } from 'react';\r\nimport { \r\n    Nav,\r\n    Navbar,\r\n    Container,\r\n    Button,\r\n}from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\r\n\r\nimport LanguageSelect from '../LanguageSelect';\r\n\r\nimport \"./Navigation.css\";\r\n\r\nlet pkg = require('../../../package.json');\r\n\r\nclass Navigation extends Component {\r\n    render() {\r\n        return (\r\n            <Navbar className=\"foresite-navbar\">\r\n                <Container>\r\n                    <Navbar.Brand \r\n                        className=\"navbar-brand-name\"\r\n                        to=\"/\" as={Link}>\r\n                        { pkg ? pkg.name : \"?\" }\r\n                    </Navbar.Brand>\r\n                    <Nav.Link \r\n                        className=\"px-1 align-bottom mr-2\"\r\n                        style={{ fontSize: \"0.85rem\" }}\r\n                        eventKey=\"disabled\" \r\n                        disabled>\r\n                            {\r\n                                pkg ? \"v\" + pkg.version : \"v0.0.0\"\r\n                            }\r\n                    </Nav.Link>\r\n                    <Nav.Link\r\n                        className=\"px-1 align-bottom mr-2\"\r\n                        style={{ fontSize: \"0.85rem\" }}\r\n                        eventKey=\"disabled\"\r\n                        disabled>\r\n                        {\r\n                            pkg ? pkg.dotaVersion : \"Unknown\"\r\n                        }\r\n                    </Nav.Link>\r\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                        <Nav className=\"mr-auto\">\r\n                            <Nav.Link to=\"/\" as={Link}>home</Nav.Link>\r\n                            <Nav.Link to=\"/app\" as={Link}>calculator</Nav.Link>\r\n                        </Nav>\r\n                        <div className=\"mr-2\">\r\n                            <LanguageSelect/>\r\n                        </div>\r\n                        <a href=\"https://github.com/JoshLmao/foresight\">\r\n                            <Button variant=\"outline-secondary\">\r\n                                <FontAwesomeIcon icon={faGithub} />\r\n                            </Button>\r\n                        </a>\r\n                    </Navbar.Collapse>\r\n                </Container>\r\n            </Navbar>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Navigation;","import Navigation from \"./Navigation\";\r\n\r\nexport default Navigation;","import FourOhFour from \"./FourOhFour\";\r\n\r\nexport default FourOhFour;","import React, { Component } from 'react';\r\n\r\nclass FourOhFour extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                404 page\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FourOhFour;","import { lang as DOTAEngAbilityStrings } from \"../../data/dota2/languages/abilities_english.json\";\r\n\r\n/// Searches the passed strings file for the related string\r\n/// Very resource intensive\r\nexport function tryGetLocalizedString(languageStrings, stringKey) {\r\n    if (!languageStrings || !stringKey) {\r\n        return null;\r\n    }\r\n\r\n    let languageKeys = Object.keys(languageStrings.Tokens);\r\n    let matchingKeys = languageKeys.filter((key) => {\r\n        if (key.toLowerCase() === stringKey.toLowerCase()) {\r\n            return key;\r\n        } else {\r\n            return null;\r\n        }\r\n    });\r\n\r\n    if (matchingKeys && matchingKeys.length > 0) {\r\n        let displayName = languageStrings.Tokens[matchingKeys[0]];\r\n        return displayName;\r\n    } else {\r\n        return \"?\";\r\n    }\r\n}\r\n\r\nexport function tryGetTalentLocalizedString(languageStrings, stringKey) {\r\n    if (!languageStrings || !stringKey) {\r\n        return null;\r\n    }\r\n\r\n    let languageKeys = Object.keys(languageStrings.Tokens);\r\n    let matchingKeys = languageKeys.filter((key) => {\r\n        if (key.includes(stringKey)) {\r\n            return key;\r\n        } else {\r\n            return null;\r\n        }\r\n    });\r\n\r\n    if (matchingKeys && matchingKeys.length > 0) {\r\n        let displayName = languageStrings.Tokens[matchingKeys[0]];\r\n        return displayName;\r\n    } else {\r\n        return \"?\";\r\n    }\r\n}\r\n\r\n/// Quick method for retrieving localized string\r\n/// Main fast method to retrieve an exact key from strings\r\nexport function getLocalizedString(localeStrings, key) {\r\n    let string = localeStrings.Tokens[key];\r\n    return string ?? null;\r\n}\r\n\r\n/// Check if the localeStrings contains the key\r\nexport function containsLocalizedString (localeStrings, key) {\r\n    let containsVal = localeStrings.Tokens[key];\r\n    return containsVal != null;\r\n}\r\n\r\n/// Gets a string from the dota strings that contain the prefix \"DOTA_Toolip_\"\r\n/// Useful for getting general tooltip UI strings\r\nexport function getTooltipString(dotaStrings, tooltipKey) {\r\n    if (!dotaStrings || !tooltipKey) {\r\n        return null;\r\n    }\r\n\r\n    if (!tooltipKey.includes(\"DOTA_ToolTip_\")) {\r\n        tooltipKey = \"DOTA_ToolTip_\" + tooltipKey;\r\n    }\r\n    var match = dotaStrings.Tokens[tooltipKey];\r\n    return match;\r\n}\r\n\r\n/// Gets a string from the abilities strings that contain the prefix \"DOTA_Tooltip_ability\"\r\n/// Useful for retrieving localized strings of ability names\r\nexport function getTooltipAbilityString(abilityStrings, abilityKey) {\r\n    if (!abilityStrings || !abilityKey) {\r\n        return null;\r\n    }\r\n    if (!abilityKey.includes(\"DOTA_Tooltip_ability\")) {\r\n        abilityKey = \"DOTA_Tooltip_ability_\" + abilityKey;\r\n    }\r\n    var match = abilityStrings.Tokens[abilityKey];\r\n    return match;\r\n}\r\n\r\n/// Places a value in a translation string that contains a \"{s:value}\" inside\r\nexport function replaceStringValue(string, value) {\r\n    if (!string || value === undefined || value === null) {\r\n        return \"?\";\r\n    }\r\n\r\n    string = string.replace(/{.*}/, value);\r\n    return string;\r\n}\r\n\r\n/// Gets the english localized ability string\r\nexport function getEngAnilityLocalizedString (key) {\r\n    return getLocalizedString(DOTAEngAbilityStrings, key);\r\n}","export const EDamageType = {\r\n    MAGICAL: \"DAMAGE_TYPE_MAGICAL\",\r\n    PURE: \"DAMAGE_TYPE_PURE\",\r\n    PHYSICAL: \"DAMAGE_TYPE_PHYSICAL\",\r\n};\r\n\r\n/// All Ability Behaviour types\r\nexport const EAbilityBehaviour = {\r\n    UNIT_TARGET: \"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET\",\r\n    POINT: \"DOTA_ABILITY_BEHAVIOR_POINT\",\r\n    AOE: \"DOTA_ABILITY_BEHAVIOR_AOE\",\r\n    HIDDEN: \"DOTA_ABILITY_BEHAVIOR_HIDDEN\",\r\n    PASSIVE: \"DOTA_ABILITY_BEHAVIOR_PASSIVE\",\r\n    NO_TARGET: \"DOTA_ABILITY_BEHAVIOR_NO_TARGET\",\r\n    IMMEDIATE: \"DOTA_ABILITY_BEHAVIOR_IMMEDIATE\",\r\n    IGNORE_CHANNEL: \"DOTA_ABILITY_BEHAVIOR_IGNORE_CHANNEL\",\r\n    SHOW_IN_GUIDES: \"DOTA_ABILITY_BEHAVIOR_SHOW_IN_GUIDES\",\r\n    AURA: \"DOTA_ABILITY_BEHAVIOR_AURA\",\r\n}\r\n\r\n/// Enum of all spell immune types, if the ability pierces spell immunity\r\nexport const ESpellImmunityType = {\r\n    YES: \"SPELL_IMMUNITY_ENEMIES_YES\",\r\n    NO: \"SPELL_IMMUNITY_ENEMIES_NO\",\r\n}\r\n\r\n// Enum of all special bonus operations inside AbilityInfo AbilitySpecials\r\nexport const ESpecialBonusOperation = {\r\n    MULTIPLY: \"SPECIAL_BONUS_MULTIPLY\",\r\n    SUBTRACT: \"SPECIAL_BONUS_SUBTRACT\",\r\n    PERCENT_ADD: \"SPECIAL_BONUS_PERCENTAGE_ADD\",\r\n}","import { DOTAAbilities } from \"../data/dota2/json/npc_abilities.json\";\r\nimport {\r\n    getAbilityInfoFromName,\r\n    getAbilitySpecialAbilityValue\r\n} from \"./dataHelperAbilities\";\r\n\r\n/// Gets info and formattable display name of a talent\r\n/// Returns both display name of talent and it's info in an object\r\nexport function getTalentInfoFromName(talent) {\r\n    if (talent) {\r\n        var talentInfo = DOTAAbilities[talent];\r\n        return talentInfo;    \r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport function tryGetTalentSpecialAbilityValue (talent, specialValueKey) {\r\n    let talentInfo = getAbilityInfoFromName(talent);\r\n    if(talentInfo) {\r\n        let specialValue = getAbilitySpecialAbilityValue(talentInfo, specialValueKey);\r\n        if (specialValue) {\r\n            return specialValue;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/// Checks the selected talents array to see if the targetTalent has been selected\r\nexport function talentsInclude(selectedTalents, targetTalent) {\r\n    if (!selectedTalents) {\r\n        return null;\r\n    }\r\n\r\n    for (let talent of selectedTalents) {\r\n        if (talent === targetTalent) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}","// * Helper and utility functions to provide for retrieving data from \"npc_abilities.json\"\r\n// * \r\n\r\nimport { DOTAAbilities } from \"../data/dota2/json/npc_abilities.json\";\r\nimport { \r\n    EAbilityBehaviour, \r\n    EDamageType, \r\n    ESpellImmunityType,\r\n    ESpecialBonusOperation\r\n} from \"../enums/abilities\";\r\n\r\nimport {\r\n    lang as DOTAEngAbilityStrings\r\n} from \"../data/dota2/languages/abilities_english.json\";\r\nimport { containsLocalizedString } from \"./data-helpers/language\";\r\nimport { itemsContainsScepter } from \"./dataHelperItems\";\r\nimport { \r\n    tryGetTalentSpecialAbilityValue,\r\n    talentsInclude\r\n} from \"./dataHelperTalents\";\r\n\r\nexport function getAbilityInfoFromName(abilityName) {\r\n    if (abilityName) {\r\n        return DOTAAbilities[abilityName];\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport function tryGetAbilitySpecialAbilityValue (ability, specialValueKey, abilityLevel = 1) {\r\n    let abilityInfo = getAbilityInfoFromName(ability);\r\n    if (abilityInfo) {\r\n        let specialValue = getAbilitySpecialAbilityValue(abilityInfo, specialValueKey, abilityLevel);\r\n        if (specialValue) {\r\n            return specialValue;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nexport function getAbilitySpecialAbilityValue(abilityInfo, specialAbilityKey, abilityLevel = 1) {\r\n    if (abilityInfo && abilityInfo.AbilitySpecial) {\r\n        for(let i = 0; i < abilityInfo.AbilitySpecial.length; i++) {\r\n            let keys = Object.keys(abilityInfo.AbilitySpecial[i]);\r\n            let matchingKey = keys.find(element => {\r\n                return element === specialAbilityKey;\r\n            });\r\n\r\n            if (matchingKey) {\r\n                let specialAbilityInfo = abilityInfo.AbilitySpecial[i];\r\n\r\n                // If value contains a space, it can be levelled up needs to be split up\r\n                let dataValue = specialAbilityInfo[matchingKey];\r\n                if (typeof dataValue === \"string\" && dataValue.includes(' ')) {\r\n                    let split = specialAbilityInfo[matchingKey].split(' ');\r\n                    dataValue = split[abilityLevel - 1];\r\n                }\r\n\r\n                /// If wanting it for it's value, correctly convert and return\r\n                if (matchingKey.includes(\"value\") && specialAbilityInfo.var_type) {\r\n                    if (specialAbilityInfo.var_type === \"FIELD_INTEGER\") {\r\n                        return parseInt(dataValue);\r\n                    } \r\n                    else if(specialAbilityInfo.var_type === \"FIELD_FLOAT\") {\r\n                        return parseFloat(dataValue);\r\n                    }\r\n                } \r\n                /// else return whatever the value is\r\n                else {\r\n                    return dataValue;\r\n                }\r\n                \r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/// Gets \r\nexport function getAbilitySpecialCastRangeValue (abilityInfo, includePhrase, abilityLevel = 1) {\r\n    if (abilityInfo && abilityInfo.AbilitySpecial) {\r\n        for(let i = 0; i < abilityInfo.AbilitySpecial.length; i++) {\r\n            let keys = Object.keys(abilityInfo.AbilitySpecial[i]);\r\n            let matchingKey = keys.find(element => {\r\n                return element.includes(includePhrase) && !element.includes(\"scepter\");\r\n            });\r\n\r\n            if (matchingKey) {\r\n                let specialAbilityInfo = abilityInfo.AbilitySpecial[i];\r\n\r\n                /// ignore if scepter \r\n                if (specialAbilityInfo.RequiresScepter) {\r\n                    return null;\r\n                }\r\n\r\n                // If value contains a space, it can be levelled up needs to be split up\r\n                let dataValue = specialAbilityInfo[matchingKey];\r\n                \r\n                /// Return dataValue in format\r\n                return tryParseAbilitySpecialValue(specialAbilityInfo, dataValue, abilityLevel)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/// Searches an AbilityInfo's AbilitySpecial array for a property that includes the the \"includePhrase\"\r\n/// in it's key. For example includePhrase = \"charges\" would return value of voice spirit's \"max_charges\"\r\nexport function getIncludesAbilitySpecialAbilityValue(abilityInfo, includePhrase, abilityLevel) {\r\n    if (abilityInfo && abilityInfo.AbilitySpecial) {\r\n        for(let i = 0; i < abilityInfo.AbilitySpecial.length; i++) {\r\n            let keys = Object.keys(abilityInfo.AbilitySpecial[i]);\r\n            let matchingKey = keys.find(element => {\r\n                return element.includes(includePhrase);\r\n            });\r\n\r\n            if (matchingKey) {\r\n                let specialAbilityInfo = abilityInfo.AbilitySpecial[i];\r\n                let dataValue = specialAbilityInfo[matchingKey];\r\n\r\n                /// Return dataValue in format\r\n                return tryParseAbilitySpecialValue(specialAbilityInfo, dataValue, abilityLevel);\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/// Gets the standard output damage of an ability from its level\r\nexport function getAbilityOutputDamage(abilityInfo, abilityLevel) {\r\n    let abilityDmg = {\r\n        min: null,\r\n        max: null,\r\n        damage: null,\r\n        isPercent: null,\r\n    };\r\n\r\n    if (abilityInfo && abilityLevel) {\r\n        if (abilityInfo.AbilityDamage) {\r\n            let dmgValue = abilityInfo.AbilityDamage.split(' ')[abilityLevel - 1];\r\n            abilityDmg = {\r\n                ...abilityDmg,\r\n                damage: parseFloat(dmgValue),\r\n            };\r\n        }\r\n        else if (abilityInfo.AbilitySpecial) \r\n        {\r\n            for (let i = 0; i < abilityInfo.AbilitySpecial.length; i++) {\r\n                let specialAbilityElement = abilityInfo.AbilitySpecial[i];\r\n                \r\n                let abilSpecKeys = Object.keys(specialAbilityElement);\r\n                for(let key of abilSpecKeys) {\r\n                    // AbilitySpecial contains damage under a property\r\n                    let lowerKey = key.toLowerCase();\r\n                    \r\n                    // Includes dmg & not scepter\r\n                    if (lowerKey.includes(\"damage\") && !lowerKey.includes(\"scepter\")) \r\n                    {\r\n                        let value = parseAbilityValueByLevel(specialAbilityElement[key], abilityLevel);\r\n                        let dmgValue = parseFloat(value);\r\n\r\n                        if (lowerKey.includes(\"min\")) {\r\n                            //min_damage\r\n                            abilityDmg.min =  dmgValue;\r\n                        }\r\n                        if (lowerKey.includes(\"max\")) {\r\n                            abilityDmg.max = dmgValue;\r\n                        } \r\n                        if (lowerKey.includes(\"pct\")) {\r\n                            abilityDmg.isPercent = true;\r\n                        }\r\n\r\n                        if (!abilityDmg.min && !abilityDmg.max) {\r\n                            abilityDmg.damage = dmgValue;\r\n                        }\r\n                    }\r\n\r\n                    // Stop iterate if have min&max or dmg\r\n                    if (abilityDmg.min && abilityDmg.max || abilityDmg.damage) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return abilityDmg;\r\n}\r\n\r\n/// Gets all behaviour options of an ability such as if it goes through BKB, damage type, etc\r\nexport function getAbilityBehaviours(abilityInfo) {\r\n    if (!abilityInfo) {\r\n        return null;\r\n    }\r\n\r\n    let behaviours = [];\r\n\r\n    if (abilityInfo.AbilityBehavior) {\r\n        let targeting = [];\r\n        let splitBehaviours = abilityInfo.AbilityBehavior.split(' | ');\r\n        for(let b of splitBehaviours) {\r\n            switch(b) {\r\n                case EAbilityBehaviour.UNIT_TARGET:\r\n                    targeting.push(\"DOTA_ToolTip_Ability_Target\");\r\n                    break;\r\n                case EAbilityBehaviour.POINT:\r\n                    targeting.push(\"DOTA_ToolTip_Ability_Point\");\r\n                    break;\r\n                case EAbilityBehaviour.PASSIVE:\r\n                    targeting.push(\"DOTA_ToolTip_Ability_Passive\");\r\n                    break;\r\n                case EAbilityBehaviour.NO_TARGET:\r\n                    targeting.push(\"DOTA_ToolTip_Ability_NoTarget\");\r\n                    break;\r\n            }\r\n        }\r\n    \r\n        behaviours.push({\r\n            key: \"DOTA_ToolTip_Ability\",\r\n            value: targeting,\r\n        });\r\n    }\r\n\r\n    if (abilityInfo.AbilityUnitDamageType) {\r\n        let dmgTypeVal = \"\";\r\n        let splitDmgTypes = abilityInfo.AbilityUnitDamageType.split(\" | \");\r\n        for(let type of splitDmgTypes) {\r\n            switch(type) {\r\n                case EDamageType.MAGICAL:\r\n                    dmgTypeVal = \"DOTA_Plus_Death_Screen_MagicalDamage\";\r\n                    break;\r\n                case EDamageType.PURE:\r\n                    dmgTypeVal = \"DOTA_Plus_Death_Screen_PureDamage\";\r\n                    break;\r\n                case EDamageType.PHYSICAL:\r\n                    dmgTypeVal = \"DOTA_Plus_Death_Screen_PhysicalDamage\";\r\n                    break;\r\n                default:\r\n                    dmgTypeVal = \"Not Implemented\";\r\n                    break;\r\n            }\r\n        }\r\n\r\n        behaviours.push({\r\n            key: \"DOTA_ToolTip_Damage\",\r\n            value: dmgTypeVal,\r\n        });\r\n    }\r\n\r\n    if (abilityInfo.SpellImmunityType) {\r\n        let pierceValue = \"\";\r\n        switch(abilityInfo.SpellImmunityType) {\r\n            case ESpellImmunityType.YES:\r\n                pierceValue = \"DOTA_ToolTip_PiercesSpellImmunity_Yes\";\r\n                break;\r\n            case ESpellImmunityType.NO:\r\n                pierceValue = \"DOTA_ToolTip_PiercesSpellImmunity_No\";\r\n                break;\r\n            default:\r\n                pierceValue = \"Unknown\";\r\n                break;\r\n        }\r\n\r\n        behaviours.push({\r\n            key: \"DOTA_ToolTip_PiercesSpellImmunity\",\r\n            value: pierceValue,\r\n        });\r\n    }\r\n\r\n    return behaviours;\r\n}\r\n\r\n/// Parses an AbilitySpecial\r\nexport function parseAbilitySpecialValueByLevel (abilitySpecials, key, level = 1) {\r\n    let valuesSplit = abilitySpecials[key].split(' ');\r\n    if (valuesSplit.length > 1) {\r\n        return valuesSplit[level - 1];\r\n    } else {\r\n        return abilitySpecials[key];\r\n    }\r\n}\r\n\r\n/// Parses a value in an abilityInfo that could be alone or have multiple values per level\r\nexport function parseAbilityValueByLevel (value, level = 1) {\r\n    if (level < 1) {\r\n        return null;\r\n    }\r\n    \r\n    let abilValue = 0;\r\n    if (typeof value === \"string\") {\r\n        let splitValues = value.split(\" \");\r\n        if (splitValues.length > 1) {\r\n            abilValue = splitValues[level - 1];\r\n        } else {\r\n            abilValue = value;\r\n        }\r\n\r\n        abilValue = parseFloat(abilValue);\r\n    } else {\r\n        abilValue = value;\r\n    }\r\n\r\n    return abilValue;\r\n}\r\n\r\nexport function isCooldownTalent (talent) {\r\n    return isTalent(talent, \"cooldown\");\r\n}\r\n\r\nexport function isDamageTalent (talent) {\r\n    return isTalent(talent, \"damage\");\r\n}\r\n\r\nexport function isCastRangeTalent (talent) {\r\n    return isTalent(talent, \"cast range\");\r\n}\r\n\r\nexport function isTalent (talent, lowerCasePhrase) {\r\n    let abilityString = DOTAEngAbilityStrings.Tokens[\"DOTA_Tooltip_ability_\" + talent];\r\n    return abilityString && abilityString.toLowerCase().includes(lowerCasePhrase);\r\n}\r\n\r\n/// Checks the AbilityBehavior string on an AbilityInfo to\r\n/// see if it contains all EBehaviours in array\r\nexport function isAbilityBehaviour (abilityBehaviour, ebehaviours) {\r\n    if (abilityBehaviour) {\r\n        let splitBehaviours = abilityBehaviour.split(' | ');\r\n        \r\n        let contains = splitBehaviours.some((b) => ebehaviours.includes(b));\r\n        return contains;\r\n    }\r\n    return false;\r\n}\r\n\r\n/// Gets all AbilitySpecial extra information values with it's translation key \r\nexport function getAbilitySpecialExtraValues (abilityName, abilityInfo, abilityLevel, items, selectedTalents) {\r\n    if (!abilityInfo || (abilityInfo && !abilityInfo.AbilitySpecial)) {\r\n        return null;\r\n    }\r\n\r\n    let abilitySpecials = [];\r\n    let containsScepter = itemsContainsScepter(items);\r\n\r\n    for (let specialInfo of abilityInfo.AbilitySpecial) {\r\n        let abilitySpecialKeys = Object.keys(specialInfo);\r\n        let currentAbilitySpecialObject = null;\r\n        for (let key of abilitySpecialKeys) {\r\n\r\n            // Store specific properties inside object for later\r\n            if (key === \"LinkedSpecialBonus\") {\r\n                currentAbilitySpecialObject = {\r\n                    ...currentAbilitySpecialObject,\r\n                    specialBonus: specialInfo[key],\r\n                };\r\n            } else if (key === \"LinkedSpecialBonusOperation\") {\r\n                currentAbilitySpecialObject = {\r\n                    ...currentAbilitySpecialObject,\r\n                    specialBonusOperation: specialInfo[key],\r\n                };\r\n            }\r\n\r\n            // Skip specific properties we don't need\r\n            if (key.includes(\"var_type\") || key.includes(\"RequiresScepter\") || key === \"damage\") {\r\n                continue;\r\n            }\r\n            \r\n            // Ignore scepter info if no aghs in inventory\r\n            if (key.includes(\"scepter\") && !containsScepter) {\r\n                continue;\r\n            }\r\n\r\n            // Create key for indexing inside locale files\r\n            let translationKey = `DOTA_Tooltip_ability_${abilityName}_${key}`;\r\n\r\n            let abilityValue = null;\r\n            // if AbilitySpecial key doesn't contain an underscore, it references property on master AbilityInfo object\r\n            if (!key.includes(\"_\") && !key.includes(\"Linked\")) {\r\n                let containsKey = tryGetAbilityInfoValueFromKey(abilityInfo, key);\r\n                if (containsKey) {\r\n                    abilityValue = tryParseAbilitySpecialValue(abilityInfo, abilityInfo[containsKey], abilityLevel);\r\n                }\r\n            } else {\r\n                abilityValue = tryParseAbilitySpecialValue(specialInfo, specialInfo[key], abilityLevel);\r\n            }\r\n            \r\n            if (translationKey && abilityValue) {\r\n                currentAbilitySpecialObject = {\r\n                    ...currentAbilitySpecialObject,\r\n                    key: translationKey,\r\n                    value: abilityValue,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (currentAbilitySpecialObject && currentAbilitySpecialObject.value) {\r\n            let value = currentAbilitySpecialObject.value;\r\n\r\n            // If AbilitySpecial has special bonus modifier and is selected\r\n            if ( talentsInclude(selectedTalents, currentAbilitySpecialObject.specialBonus) ) {\r\n                let specialBonusValue = tryGetTalentSpecialAbilityValue(currentAbilitySpecialObject.specialBonus, \"value\");\r\n               \r\n                /// Apply bonus operation to value\r\n                if (currentAbilitySpecialObject.specialBonusOperation) {\r\n                    switch (currentAbilitySpecialObject.specialBonusOperation) {\r\n                        case ESpecialBonusOperation.SUBTRACT:\r\n                            value -= specialBonusValue;\r\n                            break;\r\n                        case ESpecialBonusOperation.MULTIPLY:\r\n                            value *= specialBonusValue;\r\n                            break;\r\n                        case ESpecialBonusOperation.PERCENT_ADD:\r\n                            let percentBonus = (value / 100) * specialBonusValue;\r\n                            value += percentBonus;\r\n                            break;\r\n                        default:\r\n                            console.log(`Unknown SpecialBonusOperation: ${currentAbilitySpecialObject.specialBonusOperation}`);\r\n                            break;\r\n                    };\r\n                } else {\r\n                    /// If no special bonus operation, just replace new values on original\r\n                    if (specialBonusValue) {\r\n                        value = specialBonusValue;\r\n                    }\r\n                }\r\n            }\r\n\r\n            abilitySpecials.push({\r\n                key: currentAbilitySpecialObject.key,\r\n                value: value,\r\n            });\r\n        }\r\n    }\r\n\r\n    return abilitySpecials;\r\n}\r\n\r\nexport function tryParseAbilitySpecialValue (abilSpecialinfo, value, abilityLevel = 1) {\r\n    if (typeof value === \"string\" && value.includes(' ')) {\r\n        let split = value.split(' ');\r\n        value = split[abilityLevel - 1];\r\n    }\r\n\r\n    if (abilSpecialinfo) {\r\n        if (abilSpecialinfo.var_type === \"FIELD_INTEGER\") {\r\n            return parseInt(value);\r\n        } \r\n        else if(abilSpecialinfo.var_type === \"FIELD_FLOAT\") {\r\n            return parseFloat(value);\r\n        }\r\n    }\r\n    return value;\r\n}\r\n\r\n/// Try get's a value on an AbilityInfo object from it's key, which can be upper/lower/CamelCase\r\nexport function tryGetAbilityInfoValueFromKey (abilityInfo, key) {\r\n    let abilInfoKeys = Object.keys(abilityInfo);\r\n    for(let abilInfoKey of abilInfoKeys) {\r\n        if (abilInfoKey.toLowerCase() === key.toLowerCase()) {\r\n            return  abilInfoKey;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n","\r\n// * Helper and utility functions to provide for retrieving data from \"npc_items.json\"\r\n// * \r\nimport { DOTAAbilities as DOTAItems } from \"../data/dota2/json/items.json\";\r\nimport { EAttributes } from \"../enums/attributes\";\r\nimport React from \"react\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faClock } from '@fortawesome/free-solid-svg-icons';\r\nimport { tryParseAbilitySpecialValue } from \"./dataHelperAbilities\";\r\nimport { \r\n    getLocalizedString, \r\n    getEngAnilityLocalizedString \r\n} from \"./data-helpers/language\";\r\n\r\nexport function getItemInfoFromName (itemName) {\r\n    if (itemName)\r\n        return DOTAItems[itemName];\r\n    else\r\n        return null;\r\n}\r\n\r\n/// Gets the value of an item's AbilitySpecial array\r\nexport function getItemSpecialAbilityValue (itemInfo, specialAbilityValueKey) {\r\n    if (itemInfo && itemInfo.AbilitySpecial) {\r\n        for(let i = 0; i < itemInfo.AbilitySpecial.length; i++) {\r\n            let keys = Object.keys(itemInfo.AbilitySpecial[i]);\r\n            let matchingKey = keys.find(element => {\r\n                return element === specialAbilityValueKey;\r\n            });\r\n\r\n            if (matchingKey) {\r\n                let specialAbilityInfo = itemInfo.AbilitySpecial[i];\r\n                return tryParseAbilitySpecialValue(specialAbilityInfo, specialAbilityInfo[matchingKey], 1);\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/// Try Gets a item info and sepcial value from it's item's Ability Special array\r\nexport function tryGetItemSpecialValue (item, specialAbilityValueKey) {\r\n    let itemInfo = getItemInfoFromName(item.item);\r\n    if (itemInfo) {\r\n        var specialValue = getItemSpecialAbilityValue(itemInfo, specialAbilityValueKey);\r\n        if (specialValue) {\r\n            return specialValue;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/// Try Gets a neutral item info and special value from it's items' AbilitySpecial array\r\nexport function tryGetNeutralSpecialValue (neutral, specialValueKey) {\r\n    let foundNeutralInfo = getItemInfoFromName(neutral.item);\r\n    if (foundNeutralInfo) {\r\n        var specialValue = getItemSpecialAbilityValue(foundNeutralInfo, specialValueKey);\r\n        if (specialValue) {\r\n            return specialValue;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/// Returns all neutral items\r\nexport function getAllNeutrals() {\r\n     /// Filter out unused or unnecessary keys in items.json\r\n     let selectableNeutrals = Object.keys(DOTAItems).filter((value, index, array) => {\r\n        let key = value.toLowerCase();\r\n        let ability = DOTAItems[value];\r\n        \r\n        // Make sure it's a neutral\r\n        if (ability.ItemIsNeutralDrop === \"1\") {\r\n            // Filter irrelevant results, ignore any neutral recipes and return full item\r\n            if (key !== \"version\" && !ability.IsObsolete && !key.includes(\"recipe\")) {\r\n                return true;\r\n            }    \r\n        }\r\n        \r\n        return false;\r\n    });\r\n    selectableNeutrals.sort();\r\n\r\n    // Map to an object\r\n    selectableNeutrals = selectableNeutrals.map((key) => {\r\n        let itemKey = key;\r\n        if (itemKey.includes(\"recipe\")) {\r\n            // remove recipe and retrieve item version\r\n            itemKey = itemKey.replace(\"_recipe\", \"\");\r\n        }\r\n\r\n        let itemInfo = DOTAItems[itemKey];\r\n        if (itemInfo.ItemIsNeutralDrop === \"1\") {\r\n            return {\r\n                item: itemKey,\r\n                itemInfo: itemInfo,\r\n            };\r\n        }\r\n    });\r\n\r\n    return selectableNeutrals;\r\n}\r\n\r\n/// Gets the correct key inside items.json for the hero's primary attribute\r\nexport function primaryAttributeToItemBonusKey(primaryAttr) {\r\n    switch(primaryAttr) {\r\n        case EAttributes.ATTR_STRENGTH:\r\n            return [ \"bonus_strength\" ];\r\n        case EAttributes.ATTR_AGILITY:\r\n            return [ \"bonus_agility\" ];\r\n        case EAttributes.ATTR_INTELLIGENCE:\r\n            return [ \"bonus_intellect\", \"bonus_intelligence\" ];\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\n/// Checks if the items array contains an aghanims scepter\r\nexport function itemsContainsScepter (allItems) {\r\n    for (let item of allItems) {\r\n        if (item.item && item.item.includes(\"ultimate_scepter\")) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n/// Replaces a localized string with it's data values found inside AbilitySpecial \r\n/// or on ItemInfo object\r\nexport function replaceStringWithDataValues (string, itemInfo) {\r\n    if (!string) {\r\n        return null;\r\n    }\r\n\r\n    let replaceRegex = /(%.*?%)/;\r\n    \r\n    while (string.match(replaceRegex)?.length > 0) {\r\n        let phrase = string.match(replaceRegex)[0];\r\n        if (phrase) {\r\n            let infoKey = phrase.split(\"%\").join(\"\");\r\n            let specialAbilityValue = \"?\";\r\n            // no characters inbetween, needs to be a normal percentage sign\r\n            if (infoKey === \"\") {\r\n                /// use ~ for now, replace later\r\n                specialAbilityValue = \"~\";\r\n            }\r\n            // if is an AbilitySpecial key as all contain a '_' \r\n            else if (infoKey.includes(\"_\")) {\r\n                specialAbilityValue = getItemSpecialAbilityValue(itemInfo, infoKey);\r\n            }\r\n            // is a key on the main ItemInfo object \r\n            else {\r\n                specialAbilityValue = tryGetItemInfoValue(itemInfo, infoKey);\r\n            }\r\n            \r\n            string = string.replace(phrase, specialAbilityValue);\r\n        }\r\n    }\r\n\r\n    /// replace ! with actual percentage sign\r\n    string = string.replace(/[~]/g, \"%\");\r\n    \r\n    return string;\r\n}\r\n\r\n/// Try Get's a ItemInfo value on the original object from a key\r\nexport function tryGetItemInfoValue (itemInfo, itemInfoKey) {\r\n    if (itemInfo) {\r\n        let keys = Object.keys(itemInfo);\r\n        let matchingKey = keys.find(element => {\r\n            return element.toLowerCase() === itemInfoKey.toLowerCase();\r\n        });\r\n\r\n        if (matchingKey) {\r\n            let infoValue = itemInfo[matchingKey];\r\n            if (infoValue.includes(\".\")) {\r\n                return parseFloat(infoValue);\r\n            } else {\r\n                return parseInt(infoValue);\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/// Converts a item description localized string into the correct displayable HTML\r\nexport function convertItemDescToHtml(itemDescString, itemName, itemInfo) {\r\n    let dataString = replaceStringWithDataValues(itemDescString, itemInfo);\r\n    if (!dataString) {\r\n        return null;\r\n    }\r\n\r\n    /// Get english string to be able to check for \"Active:\" phrase\r\n    let engDataString = getEngAnilityLocalizedString(`DOTA_Tooltip_ability_${itemName}_Description`);\r\n    let engSplitString = engDataString.split(\"\\\\n\");\r\n\r\n    /// Also split localized string to iterate over\r\n    let localizedSplit = dataString.split(\"\\\\n\");\r\n\r\n    let totalHtmlSections = [];\r\n    for(let i = 0; i < localizedSplit.length; i++) {\r\n        let section = localizedSplit[i];\r\n        let isActive = engSplitString[i].includes(\"Active:\");\r\n        if (isActive) {\r\n            totalHtmlSections.push(\r\n                <div className=\"my-3 item-active\" key={i}>\r\n                    <div\r\n                        className=\"d-flex justify-content-between align-items-center\" \r\n                        style={{ position: \"absolute\", right: \"1rem\" }}>\r\n                        {\r\n                            itemInfo && itemInfo.AbilityManaCost &&\r\n                            <div className=\"d-flex\">\r\n                                <div className=\"mx-1 my-1 mana-cost-box-icon\" />\r\n                                <div>\r\n                                    { parseInt(itemInfo.AbilityManaCost) }\r\n                                </div>\r\n                            </div>\r\n                        }\r\n                        <div className=\"px-1\" />\r\n                        {\r\n                            itemInfo && itemInfo.AbilityCooldown &&\r\n                            <div className=\"d-flex\">\r\n                                <FontAwesomeIcon \r\n                                    className=\"mx-1 my-1\" \r\n                                    icon={faClock} />\r\n                                <div>\r\n                                    { parseFloat(itemInfo.AbilityCooldown)  }\r\n                                </div>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                    <div dangerouslySetInnerHTML={{ __html: section }}>\r\n                    </div>\r\n                </div>\r\n            )\r\n        } else {\r\n            totalHtmlSections.push(\r\n                <div\r\n                    key={i} \r\n                    className={`my-3 ${itemInfo.ItemQuality === \"consumable\" ? \"item-consumable\" : \"item-passive\"}`} \r\n                    dangerouslySetInnerHTML={{ __html: section }}>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    return totalHtmlSections;\r\n}\r\n\r\n/// Gets all bonuses the item provides, returning a key value list\r\nexport function getItemStatistics (itemInfo) {\r\n    if (!itemInfo) {\r\n        return null;\r\n    }\r\n\r\n    let statistics = [];\r\n\r\n    for (let i = 0; i < itemInfo.AbilitySpecial.length; i++) {\r\n        let keys = Object.keys(itemInfo.AbilitySpecial[i]);\r\n        for(let key of keys) {\r\n            if (key.includes(\"bonus\") || \r\n                key.includes(\"spell\") || \r\n                key.includes(\"multiplier\") || \r\n                key.includes(\"regen\") || \r\n                key.includes(\"resistance\") ) {\r\n                let val = tryParseAbilitySpecialValue(itemInfo.AbilitySpecial[i], itemInfo.AbilitySpecial[i][key]);\r\n                statistics.push({\r\n                    key: key,\r\n                    value: val,\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    return statistics;\r\n}\r\n\r\n/// Checks an ItemInfo Disassemble rule if it matches the given rule\r\nexport function isDissassembleRule(itemInfo, eDisassembleRule) {\r\n    if (itemInfo && itemInfo.ItemDisassembleRule) {\r\n        let split = itemInfo.ItemDisassembleRule.split(\" | \");\r\n        for(let rule of split) {\r\n            if (rule === eDisassembleRule) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n/// Checks if an item requires charges to function\r\nexport function itemRequiresCharges (itemName) {\r\n    let itemInfo = getItemInfoFromName(itemName);\r\n    if (itemInfo) {\r\n        return itemInfo.ItemRequiresCharges === \"1\";\r\n    }\r\n    return false;\r\n}","import { \r\n    getItemInfoFromName,\r\n    getItemSpecialAbilityValue,\r\n    tryGetItemSpecialValue,\r\n    tryGetNeutralSpecialValue,\r\n    primaryAttributeToItemBonusKey,\r\n    itemsContainsScepter\r\n} from \"./dataHelperItems\";\r\n\r\nimport {\r\n    getAbilityInfoFromName,\r\n    getAbilitySpecialAbilityValue,\r\n    getAbilityOutputDamage,\r\n    tryGetAbilitySpecialAbilityValue,\r\n    parseAbilityValueByLevel,\r\n    isCooldownTalent,\r\n    isDamageTalent,\r\n    isCastRangeTalent,\r\n    getAbilitySpecialCastRangeValue,\r\n    getIncludesAbilitySpecialAbilityValue,\r\n    isAbilityBehaviour\r\n} from \"./dataHelperAbilities\";\r\n\r\nimport {\r\n    getTalentInfoFromName,\r\n    tryGetTalentSpecialAbilityValue,\r\n} from \"./dataHelperTalents\";\r\n\r\nimport {\r\n    getDotaBaseHero,\r\n    getSpecificAttributeStats,\r\n    getPrimaryAttributeStats,\r\n    getPrimaryAttribute\r\n} from \"./dataHelperHero\";\r\n\r\nimport { EAttributes } from \"../enums/attributes\";\r\n\r\nimport { DOTAHeroes } from \"../data/dota2/json/npc_heroes.json\";\r\nimport { DOTAAbilities } from \"../data/dota2/json/npc_abilities.json\";\r\nimport { EAbilityBehaviour } from \"../enums/abilities\";\r\n\r\n/// Calculates the health of a hero\r\n/// https://dota2.gamepedia.com/Health\r\nexport function calculateHealth(hero, heroLevel, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }\r\n    \r\n    let HEALTH_PER_STRENGTH_POINT = 20;\r\n    let baseStrength = parseInt(hero.AttributeBaseStrength)\r\n    let strengthGain = parseFloat(hero.AttributeStrengthGain);\r\n\r\n    let baseHealth = 0;\r\n    if (DOTAHeroes && DOTAHeroes.npc_dota_hero_base && DOTAHeroes.npc_dota_hero_base.StatusHealth) {\r\n        baseHealth = parseInt(DOTAHeroes.npc_dota_hero_base.StatusHealth);\r\n    } else {\r\n        console.error(\"Can't add baseHealth to heroes health pool\");\r\n    }\r\n\r\n    let totalStr = baseStrength + (strengthGain * (heroLevel - 1));\r\n    let totalHealth = baseHealth + (totalStr * HEALTH_PER_STRENGTH_POINT);\r\n\r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            let bonusHealth = tryGetItemSpecialValue(item, \"bonus_health\");\r\n            if (bonusHealth) {\r\n                totalHealth += bonusHealth;\r\n            }\r\n\r\n            let bonusStr = tryGetItemSpecialValue(item, \"bonus_strength\");\r\n            if (bonusStr) {\r\n                totalHealth += bonusStr * HEALTH_PER_STRENGTH_POINT;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalHealth += bonusAllStats * HEALTH_PER_STRENGTH_POINT;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let bonusHealth = tryGetNeutralSpecialValue(neutral, \"bonus_health\");\r\n        if (bonusHealth) {\r\n            totalHealth += bonusHealth;\r\n        }\r\n\r\n        let bonusStr = tryGetNeutralSpecialValue(neutral, \"bonus_strength\");\r\n        if (bonusStr) {\r\n            totalHealth += bonusStr * HEALTH_PER_STRENGTH_POINT;\r\n        }\r\n\r\n        let bonusAllStats = tryGetNeutralSpecialValue(neutral, \"bonus_all_stats\");\r\n        if (bonusAllStats) {\r\n            totalHealth += bonusAllStats * HEALTH_PER_STRENGTH_POINT;\r\n        }\r\n\r\n        let maxHealth = tryGetNeutralSpecialValue(neutral, \"max_health\");\r\n        if (maxHealth) {\r\n            totalHealth += maxHealth;\r\n        }\r\n    }\r\n\r\n    if (abilities && abilities.length > 0) {\r\n        \r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            if (talent.includes(\"bonus_hp\")) {\r\n                let bonusHealth = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusHealth) {\r\n                    totalHealth += bonusHealth;\r\n                }\r\n            } else if (talent.includes(\"bonus_strength\")) {\r\n                let bonusStr = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusStr) {\r\n                    totalHealth += bonusStr * HEALTH_PER_STRENGTH_POINT;\r\n                }\r\n            } else if (talent.includes(\"bonus_all_stats\")) {\r\n                let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAllStats) {\r\n                    totalHealth += bonusAllStats * HEALTH_PER_STRENGTH_POINT;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return totalHealth.toFixed(0);\r\n}\r\n\r\n/// Calculates the mana pool of a hero\r\n/// https://dota2.gamepedia.com/Mana\r\nexport function calculateMana(hero, heroLevel, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }    \r\n\r\n    let MANA_PER_INT_POINT = 12;\r\n    let baseInt = parseInt(hero.AttributeBaseIntelligence);\r\n    let intGain = parseFloat(hero.AttributeIntelligenceGain);\r\n\r\n    let baseMana = 0;\r\n    if (DOTAHeroes && DOTAHeroes.npc_dota_hero_base && DOTAHeroes.npc_dota_hero_base.StatusMana) {\r\n        baseMana = parseInt(DOTAHeroes.npc_dota_hero_base.StatusMana);\r\n    } else {\r\n        console.error(\"Can't add baseMana to heroes mana pool\");\r\n    }\r\n\r\n    let totalInt = baseInt + (intGain * (heroLevel - 1));\r\n    let totalMana = baseMana + (totalInt * MANA_PER_INT_POINT);\r\n\r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            let bonusMana = tryGetItemSpecialValue(item, \"bonus_mana\");\r\n            if (bonusMana) {\r\n                totalMana += bonusMana;\r\n            }\r\n\r\n            let bonusInt = tryGetItemSpecialValue(item, \"bonus_intellect\");\r\n            if (bonusInt) {\r\n                totalMana += bonusInt * MANA_PER_INT_POINT;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalMana += bonusAllStats * MANA_PER_INT_POINT;\r\n            }\r\n        }\r\n    }\r\n    \r\n    if (neutral) {\r\n        let bonusMana = tryGetNeutralSpecialValue(neutral, \"bonus_mana\");\r\n        if (bonusMana) {\r\n            totalMana += bonusMana;\r\n        }\r\n\r\n        let bonusInt = tryGetNeutralSpecialValue(neutral, \"bonus_intellect\");\r\n        if (bonusInt) {\r\n            totalMana += bonusInt * MANA_PER_INT_POINT;\r\n        }\r\n\r\n        let bonusAllStats = tryGetNeutralSpecialValue(neutral, \"bonus_all_stats\");\r\n        if (bonusAllStats) {\r\n            totalMana += bonusAllStats * MANA_PER_INT_POINT;\r\n        }\r\n\r\n        // If witless shako, remove from total mana pool\r\n        if (neutral.item === \"item_witless_shako\") {\r\n            let maxMana = tryGetNeutralSpecialValue(neutral, \"max_mana\");\r\n            if (maxMana) {\r\n                totalMana -= maxMana;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (abilities && abilities.length > 0) {\r\n        for(let ability of abilities) {\r\n            let bonusMana = tryGetAbilitySpecialAbilityValue(ability, \"bonus_mana\");\r\n            if (bonusMana) {\r\n                totalMana += bonusMana;\r\n            }\r\n\r\n            let bonusInt = tryGetAbilitySpecialAbilityValue(ability, \"bonus_intellect\");\r\n            if (bonusInt) {\r\n                totalMana += bonusInt * MANA_PER_INT_POINT;\r\n            }\r\n\r\n            let bonusAllStats = tryGetAbilitySpecialAbilityValue(ability, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalMana += bonusAllStats * MANA_PER_INT_POINT;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            if (talent.includes(\"bonus_mp\")) {\r\n                let bonusMana = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusMana) {\r\n                    totalMana += bonusMana;\r\n                }\r\n            } else if (talent.includes(\"bonus_intelligence\")) {\r\n                let bonusInt = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusInt) {\r\n                    totalMana += bonusInt * MANA_PER_INT_POINT;\r\n                }\r\n            } else if (talent.includes(\"bonus_all_stats\")) {\r\n                let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAllStats) {\r\n                    totalMana += bonusAllStats * MANA_PER_INT_POINT;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return totalMana.toFixed(0);\r\n}\r\n\r\n/* Hero gains +0.1 regen per each point of strength\r\n* https://dota2.gamepedia.com/Health_regeneration */\r\nexport function calculateHealthRegen(hero, heroLevel, items, neutral, abilities, talents) {\r\n    if(!hero) {\r\n        return \"?\";\r\n    }\r\n\r\n    let HP_REGEN_PER_STRENGTH = 0.1;\r\n    let baseStr = parseInt(hero.AttributeBaseStrength);\r\n    let strPerLvl = parseFloat(hero.AttributeStrengthGain);\r\n\r\n    let totalHpRegen = (baseStr + (strPerLvl * (heroLevel - 1))) * HP_REGEN_PER_STRENGTH;\r\n    if (hero.StatusHealthRegen) {\r\n        totalHpRegen += parseFloat(hero.StatusHealthRegen);\r\n    }\r\n\r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            let regenAmt = tryGetItemSpecialValue(item, \"bonus_health_regen\");\r\n            if (regenAmt) {\r\n                totalHpRegen += regenAmt;\r\n            }\r\n\r\n            let bonusStr = tryGetItemSpecialValue(item, \"bonus_strength\");\r\n            if(bonusStr) {\r\n                totalHpRegen += bonusStr * HP_REGEN_PER_STRENGTH;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalHpRegen += bonusAllStats * HP_REGEN_PER_STRENGTH;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let bonusHealthRegen = tryGetNeutralSpecialValue(neutral, \"bonus_health_regen\");\r\n        if (bonusHealthRegen) {\r\n            totalHpRegen += bonusHealthRegen;\r\n        }\r\n\r\n        let bonusStr = tryGetNeutralSpecialValue(neutral, \"bonus_strength\");\r\n        if (bonusStr) {\r\n            totalHpRegen += bonusStr * HP_REGEN_PER_STRENGTH;\r\n        }\r\n        \r\n        let bonusAllStats = tryGetNeutralSpecialValue(neutral, \"bonus_all_stats\");\r\n        if (bonusAllStats) {\r\n            totalHpRegen += bonusAllStats * HP_REGEN_PER_STRENGTH;\r\n        }\r\n    } \r\n\r\n    // if (abilities && abilities.length > 0) {\r\n    //     for (let ability of abilities) {\r\n    //         let bonusRegen = tryGetAbilitySpecialAbilityValue(ability, \"bonus_health_regen\", 1);\r\n    //         if (bonusRegen) {\r\n    //             totalHpRegen += bonusRegen;\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for (let talent of talents) {\r\n            // Only get bonus_hp_regen talents\r\n            if (talent.includes(\"bonus_hp_regen\")) {\r\n                let bonusRegen = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusRegen) {\r\n                    totalHpRegen += bonusRegen;\r\n                }\r\n            } else if(talent.includes(\"bonus_strength\")) {\r\n                let bonusStr = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusStr) {\r\n                    totalHpRegen += bonusStr * HP_REGEN_PER_STRENGTH;\r\n                }\r\n            } else if (talent.includes(\"bonus_all_stats\")) {\r\n                let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAllStats) {\r\n                    totalHpRegen += bonusAllStats * HP_REGEN_PER_STRENGTH;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return totalHpRegen.toFixed(1);\r\n}\r\n\r\n/* Each point of intelligence increases the hero's mana regeneration by 0.05.\r\n * https://dota2.gamepedia.com/Mana_regeneration */\r\nexport function calculateManaRegen(hero, heroLevel, items, neutral, abilities, talents) {\r\n    if(!hero) {\r\n        return \"?\";\r\n    }\r\n    let MANA_REGEN_PER_INT = 0.05;\r\n    let baseInt = parseInt(hero.AttributeBaseIntelligence);\r\n    let intGain = parseFloat(hero.AttributeIntelligenceGain);\r\n\r\n    let totalManaRegen = (baseInt + (intGain * (heroLevel - 1))) * MANA_REGEN_PER_INT;\r\n    if (hero.StatusManaRegen) {\r\n        totalManaRegen += parseFloat(hero.StatusManaRegen);\r\n    }\r\n\r\n    let totalManaRegenPercentAmp = 100;\r\n\r\n    if(items && items.length > 0) {\r\n        for(let item of items) {\r\n            let bonusManaRegen = tryGetItemSpecialValue(item, \"bonus_mana_regen\");\r\n            if (bonusManaRegen) {\r\n                totalManaRegen += bonusManaRegen;\r\n            }\r\n\r\n            let bonusInt = tryGetItemSpecialValue(item, \"bonus_intelligence\");\r\n            if(bonusInt) {\r\n                let regen = bonusInt * MANA_REGEN_PER_INT; \r\n                totalManaRegen += regen;\r\n            }\r\n\r\n            let bonusIntellect = tryGetItemSpecialValue(item, \"bonus_intellect\");\r\n            if (bonusIntellect) {\r\n                let regen = bonusIntellect * MANA_REGEN_PER_INT; \r\n                totalManaRegen += regen;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalManaRegen += bonusAllStats * MANA_REGEN_PER_INT;\r\n            }\r\n\r\n            // If bloodstone mp regen per charge\r\n            let regenPerCharge = tryGetItemSpecialValue(item, \"regen_per_charge\");\r\n            if (item.extra?.charges && regenPerCharge) {\r\n                let bloodstoneCharges = item.extra.charges;\r\n                totalManaRegen += regenPerCharge * bloodstoneCharges;\r\n            }\r\n\r\n            /// any mana regen percentage multiplier\r\n            let manaRegenAmp = tryGetItemSpecialValue(item, \"mana_regen_multiplier\");\r\n            if (manaRegenAmp) {\r\n                totalManaRegenPercentAmp += manaRegenAmp;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let bonusInt = tryGetNeutralSpecialValue(neutral, \"bonus_intelligence\");\r\n        if (bonusInt) {\r\n            let manaRegen = bonusInt * MANA_REGEN_PER_INT;\r\n            totalManaRegen += manaRegen;\r\n        }\r\n\r\n        let bonusIntellect = tryGetNeutralSpecialValue(neutral, \"bonus_intellect\");\r\n        if (bonusIntellect) {\r\n            let regen = bonusIntellect * MANA_REGEN_PER_INT; \r\n            totalManaRegen += regen;\r\n        }\r\n\r\n        let bonusAllStats = tryGetNeutralSpecialValue(neutral, \"bonus_all_stats\");\r\n        if (bonusAllStats) {\r\n            totalManaRegen += bonusAllStats * MANA_REGEN_PER_INT;\r\n        }\r\n\r\n        let bonusRegen = tryGetNeutralSpecialValue(neutral, \"mana_regen\");\r\n        if (bonusRegen) {\r\n            totalManaRegen += bonusRegen;\r\n        }\r\n    }\r\n\r\n    if(abilities && abilities.length > 0) {\r\n        for (let ability of abilities) {\r\n            let manaRegen = tryGetAbilitySpecialAbilityValue(ability, \"mana_regen\", 1);\r\n            if (manaRegen) {\r\n                totalManaRegen += manaRegen;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            // Only includes bonus mana point regen talents\r\n            if(talent.includes(\"bonus_mp_regen\")) {\r\n                let value = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (value) {\r\n                    totalManaRegen += parseFloat(value);\r\n                }\r\n            } else if (talent.includes(\"bonus_intelligence\")) {\r\n                let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAllStats) {\r\n                    totalManaRegen += bonusAllStats * MANA_REGEN_PER_INT;\r\n                }\r\n            } else if (talent.includes(\"bonus_all_stats\")) {\r\n                let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAllStats) {\r\n                    totalManaRegen += bonusAllStats * MANA_REGEN_PER_INT;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    let totalMP = totalManaRegen * (totalManaRegenPercentAmp / 100);\r\n    return totalMP.toFixed(1);\r\n}\r\n\r\n// Calculates the main armor of the hero\r\n// Each point of agility increases a hero's armor by 0.167 (1/6) https://dota2.gamepedia.com/Armor\r\nexport function calculateMainArmor(hero, level, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }\r\n\r\n    let ARMOR_PER_AGI = 0.167;\r\n    let baseArmor = parseInt(hero.ArmorPhysical);\r\n    let baseAgility = parseInt(hero.AttributeBaseAgility);\r\n    let agiPerLevel = parseFloat(hero.AttributeAgilityGain);\r\n\r\n    // Determine bonus agility from perLevel. Then work out main armor\r\n    let agiPer = (agiPerLevel * (level - 1));\r\n    let totalArmor = baseArmor + ((baseAgility + agiPer) * ARMOR_PER_AGI);\r\n    let totalBonusArmor = 0;\r\n    \r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            let bonusArmor = tryGetItemSpecialValue(item, \"bonus_armor\");\r\n            if (bonusArmor) {\r\n                totalBonusArmor += bonusArmor;\r\n            }\r\n\r\n            let bonusAgility = tryGetItemSpecialValue(item, \"bonus_agility\");\r\n            if (bonusAgility) {\r\n                let armor = bonusAgility * ARMOR_PER_AGI;\r\n                totalArmor += armor;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                let armor = bonusAllStats * ARMOR_PER_AGI;\r\n                totalArmor += armor;\r\n            }\r\n        }\r\n    }\r\n    \r\n    if(neutral) {\r\n        /// If item is nether_shawl, armor needs to be removed\r\n        if (neutral.item === \"item_nether_shawl\") {\r\n            let bonusArmor = tryGetNeutralSpecialValue(neutral, \"bonus_armor\");\r\n            if (bonusArmor) {\r\n                totalBonusArmor -= bonusArmor;\r\n            }\r\n        } else {\r\n            let bonusArmor = tryGetNeutralSpecialValue(neutral, \"bonus_armor\");\r\n            if (bonusArmor) {\r\n                totalBonusArmor += bonusArmor;\r\n            }\r\n        }\r\n        \r\n\r\n        let armorBonus = tryGetNeutralSpecialValue(neutral, \"armor_bonus\");\r\n        if (armorBonus) {\r\n            totalBonusArmor += armorBonus;\r\n        }\r\n\r\n        let bonusAgi = tryGetNeutralSpecialValue(neutral, \"bonus_agility\");\r\n        if (bonusAgi) {\r\n            totalArmor += bonusAgi * ARMOR_PER_AGI;\r\n        }\r\n\r\n        let bonusAllStats = tryGetNeutralSpecialValue(neutral, \"bonus_all_stats\");\r\n        if (bonusAllStats) {\r\n            let armor = bonusAllStats * ARMOR_PER_AGI;\r\n            totalArmor += armor;\r\n        }\r\n    }\r\n\r\n    /// ToDo: If abilities active, add active ability armor\r\n    /// or if ability is passive, apply bonus\r\n    // if (abilities && abilities.length > 0) {\r\n    //     for(let ability of abilities) {\r\n    //         /// if a passive, add armor depending on ability level\r\n    //         let abilInfo = getAbilityInfoFromName(ability);\r\n    //         if (isAbilityBehaviour(abilInfo.AbilityBehavior, [ EAbilityBehaviour.PASSIVE ])) {\r\n    //             let bonusArmor = tryGetAbilitySpecialAbilityValue(ability, \"bonus_armor\");\r\n    //             if (bonusArmor) {\r\n    //                 totalArmor += bonusArmor;\r\n    //             }\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    if(talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            if (talent.includes(\"bonus_armor\")) {\r\n                let bonusArmor = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusArmor) {\r\n                    totalBonusArmor += bonusArmor;\r\n                }\r\n            } else if (talent.includes(\"bonus_agility\")) {\r\n                let bonusAgility = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAgility) {\r\n                    totalArmor += bonusAgility * ARMOR_PER_AGI;\r\n                }\r\n            } else if (talent.includes(\"bonus_all_stats\")) {\r\n                let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAllStats) {\r\n                    totalArmor += bonusAllStats * ARMOR_PER_AGI;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Round to one decimal place\r\n    return {\r\n        armor: totalArmor,\r\n        additional: totalBonusArmor,\r\n    };\r\n}\r\n\r\n/// Returns the total amount of spell amplification as a percentage applied to the hero\r\nexport function calculateTotalSpellAmp (talents, items, neutral) {\r\n    let totalSpellAmp = 0;\r\n    \r\n    // Determine if any talents provide spell amp\r\n    if (talents && talents.length > 0) {\r\n        let ampTalent = talents.find(element => element.includes(\"spell_amplify\"));\r\n        if (ampTalent) {\r\n            let talentInfo = DOTAAbilities[ampTalent.name];\r\n            if (talentInfo) {\r\n                let spellAmpInfo = talentInfo.AbilitySpecial.find(element => element.value);\r\n                if (spellAmpInfo) {\r\n                    let spellAmpAmt = parseInt(spellAmpInfo.value);\r\n                    totalSpellAmp += spellAmpAmt;\r\n\r\n                    //console.log(`Talent ${ampTalent.name} provides ${spellAmpAmt}% spell amp`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Determine if current neutral item provides any spell amplification\r\n    if (neutral) {\r\n        let foundNeutral = getItemInfoFromName(neutral.item);\r\n        if (foundNeutral) {\r\n            let spellAmpAmount = getItemSpecialAbilityValue(foundNeutral, \"spell_amp\");\r\n            if (spellAmpAmount) {\r\n                totalSpellAmp += spellAmpAmount;\r\n                //console.log(`Neutral ${neutral.item} provides ${spellAmpAmount}% spell amp`);\r\n            }\r\n        }\r\n    }\r\n\r\n    /// Determine if any items provide spell amp\r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            let spellAmpAmount = tryGetItemSpecialValue(item, \"spell_amp\");\r\n            if (spellAmpAmount) {\r\n                totalSpellAmp += spellAmpAmount;\r\n                //console.log(`Item ${items[i].item} provides ${spellAmpAmt}% spell amp`);\r\n            }\r\n\r\n            let ampPerCharge = tryGetItemSpecialValue(item, \"amp_per_charge\");\r\n            if (item.extra?.charges && ampPerCharge) {\r\n                let bloodstoneCharges = item.extra.charges;\r\n                totalSpellAmp += ampPerCharge * bloodstoneCharges;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    return totalSpellAmp.toFixed(1);\r\n}\r\n\r\nexport function calculateStatusResist(items, neutral) {\r\n    let totalStatusResist = 0.0;\r\n\r\n    if (items && items.length > 0) {\r\n        for(let i = 0; i < items.length; i++) {\r\n            if (items[i].item) {\r\n                let itemInfo = getItemInfoFromName(items[i].item);\r\n                if (itemInfo) {\r\n                    let statusResistAmount = getItemSpecialAbilityValue(itemInfo, \"status_resistance\");\r\n                    if (statusResistAmount) {\r\n                        totalStatusResist += statusResistAmount;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let statusResistAmount = tryGetNeutralSpecialValue(neutral, \"status_resistance\");\r\n        if (statusResistAmount) {\r\n            totalStatusResist += statusResistAmount;\r\n        }\r\n    }\r\n\r\n    return totalStatusResist;\r\n}\r\n\r\nexport function calculateMagicResist (items, neutral, abilities) {\r\n    // Formula from Wiki\r\n    // Total magic resistance = 1 − ((1 − natural resistance) × (1 − first resistance bonus) × (1 − second resistance bonus) × (1 + first resistance reduction) × (1 + second resistance reduction))\r\n    \r\n    // Array of magic resistance values\r\n    let resistanceBonuses = [ ];\r\n    \r\n    if (DOTAHeroes && DOTAHeroes?.npc_dota_hero_base?.MagicalResistance) {\r\n        let baseResist = parseInt(DOTAHeroes.npc_dota_hero_base.MagicalResistance);\r\n        resistanceBonuses.push(baseResist);\r\n    }\r\n\r\n    if (items && items.length > 0) {\r\n        for(let i = 0; i < items.length; i++) {\r\n            let itemInfo = getItemInfoFromName(items[i].item);\r\n            if (itemInfo) {\r\n                let magicResistAmount = getItemSpecialAbilityValue(itemInfo, \"bonus_magic_resistance\");\r\n                if (magicResistAmount) {\r\n                    resistanceBonuses.push(magicResistAmount);\r\n                }\r\n\r\n                magicResistAmount = getItemSpecialAbilityValue(itemInfo, \"magic_resistance\");\r\n                if (magicResistAmount) {\r\n                    resistanceBonuses.push(magicResistAmount);\r\n                }\r\n\r\n                magicResistAmount = getItemSpecialAbilityValue(itemInfo, \"bonus_magical_armor\");\r\n                if (magicResistAmount) {\r\n                    resistanceBonuses.push(magicResistAmount);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let magicResistAmount = tryGetNeutralSpecialValue(neutral, \"magic_resistance\");\r\n        if (magicResistAmount) {\r\n            resistanceBonuses.push(magicResistAmount);\r\n        }\r\n    }\r\n\r\n    if (abilities && abilities.length > 0) { \r\n        for(let ability of abilities) {\r\n            // let magicResistAmount = tryGetAbilitySpecialAbilityValue(ability, \"magic_resistance\");\r\n            // if (magicResistAmount) {\r\n            //     resistanceBonuses.push(magicResistAmount);\r\n            // }\r\n            \r\n            let magicResistAmount = tryGetAbilitySpecialAbilityValue(ability, \"bonus_magic_resistance\");\r\n            if (magicResistAmount) {\r\n                resistanceBonuses.push(magicResistAmount);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Divide original value into 0.x and minus from 1 to get the reverse\r\n    let edited = []\r\n    for(let i = 0; i < resistanceBonuses.length; i++) {\r\n        edited.push(1 - (resistanceBonuses[i] / 100));\r\n    }\r\n\r\n    // multiply them all together \r\n    let total = edited[0];\r\n    for(let i = 1; i < edited.length; i++) {\r\n        total *= edited[i];\r\n    }\r\n\r\n    // then minus from 1, and multiply by 100 to get value as a percentage\r\n    let percent = (1 - total) * 100;\r\n    return percent.toFixed(2);\r\n}\r\n\r\n/// Calculates the total magic resistance of the hero\r\n/// https://dota2.gamepedia.com/Magic_resistance\r\nexport function calculatePhysicalResist (totalArmor) {\r\n    // Formula from https://www.dotabuff.com/blog/2018-11-30-understanding-720-armor-changes\r\n    //( 0.052 * armor ) ÷ ( 0.9 + 0.048 * |armor|)\r\n    let physResist = (0.052 * totalArmor) / (0.9 + 0.048 * Math.abs(totalArmor));\r\n    let percent = physResist * 100;\r\n    return percent < 0 ? 0 : percent.toFixed(0);\r\n}\r\n\r\n/// Calculates evasion\r\nexport function calculateEvasion(items, neutral, abilities, talents) {\r\n    let totalEvasion = 0.0;\r\n\r\n    if (abilities && abilities.length > 0) {\r\n        for(let ability of abilities) {\r\n            let bonusEvasion = tryGetAbilitySpecialAbilityValue(ability, \"bonus_evasion\");\r\n            if (bonusEvasion) {\r\n                totalEvasion += bonusEvasion;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            if (talent.includes(\"bonus_evasion\")) {\r\n                let bonusEvasion = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusEvasion) {\r\n                    totalEvasion += bonusEvasion;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (items && items.length > 0) {\r\n        for(let i = 0; i < items.length; i++) {\r\n            if (items[i].item) {\r\n                let itemInfo = getItemInfoFromName(items[i].item);\r\n                if (itemInfo) {\r\n                    let evasionAmount = getItemSpecialAbilityValue(itemInfo, \"bonus_evasion\");\r\n                    if (evasionAmount) {\r\n                        totalEvasion += evasionAmount;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return totalEvasion;\r\n}\r\n\r\n/// Returns the minimum and maximum right click damage of a hero\r\n// atkMin, atkMax, primaryAttributeStats, heroLevel = 1\r\nexport function calculateRightClickDamage(hero, level, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }\r\n    \r\n    let heroMainAttribute = getPrimaryAttribute(hero);\r\n    let atkMin = parseInt(hero.AttackDamageMin);\r\n    let atkMax = parseInt(hero.AttackDamageMax);\r\n    let primaryAttributeStats = getPrimaryAttributeStats(hero);\r\n\r\n    // Work out how much bonus attack hero recieves from their primary attribute\r\n    let totalPrimaryAttribute = primaryAttributeStats.base + (primaryAttributeStats.perLevel * (level - 1));\r\n    // Calc additional damage from sources\r\n    let totalAdditional = 0;\r\n\r\n    /* Iterate over all items, neutral, abilities and talents to\r\n        get all primary attribute and all stat bonuses\r\n        */\r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            let allAttrKeys = primaryAttributeToItemBonusKey(heroMainAttribute);\r\n            for(let key of allAttrKeys) {\r\n                let bonusPrimaryAttr = tryGetItemSpecialValue(item, key);\r\n                if (bonusPrimaryAttr) {\r\n                    totalPrimaryAttribute += bonusPrimaryAttr;\r\n                }\r\n            }\r\n\r\n            let bonusPrimaryStat = tryGetItemSpecialValue(item, \"bonus_primary_stat\");\r\n            if (bonusPrimaryStat) {\r\n                totalPrimaryAttribute += bonusPrimaryStat;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalPrimaryAttribute += bonusAllStats;\r\n            }\r\n\r\n            let bonusDmg = tryGetItemSpecialValue(item, \"bonus_damage\");\r\n            if (bonusDmg) {\r\n                totalAdditional += bonusDmg;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let allAttrKeys = primaryAttributeToItemBonusKey(heroMainAttribute);\r\n        for(let key of allAttrKeys) {\r\n            let bonusPrimaryAttr = tryGetNeutralSpecialValue(neutral, key);\r\n            if (bonusPrimaryAttr) {\r\n                totalPrimaryAttribute += bonusPrimaryAttr;\r\n            }\r\n        }\r\n\r\n        let bonusPrimaryStat = tryGetNeutralSpecialValue(neutral, \"primary_stat\");\r\n        if (bonusPrimaryStat) {\r\n            totalPrimaryAttribute += bonusPrimaryStat;\r\n        }\r\n\r\n        let bonusAllStats = tryGetNeutralSpecialValue(neutral, \"bonus_all_stats\");\r\n        if (bonusAllStats) {\r\n            totalPrimaryAttribute += bonusAllStats;\r\n        }\r\n\r\n        let bonusDmg = tryGetNeutralSpecialValue(neutral, \"bonus_damage\");\r\n        if (bonusDmg) {\r\n            totalAdditional += bonusDmg;\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            let allAttrKeys = primaryAttributeToItemBonusKey(heroMainAttribute);\r\n            for(let key of allAttrKeys) {\r\n                if (talent.includes(key)) {\r\n                    let bonusPrimaryAttr = tryGetNeutralSpecialValue(talent, \"value\");\r\n                    if (bonusPrimaryAttr) {\r\n                        totalPrimaryAttribute += bonusPrimaryAttr;\r\n                    }\r\n                }\r\n            }\r\n            \r\n            if (talent.includes(\"bonus_all_stats\")) {\r\n                let allStats = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (allStats) {\r\n                    totalPrimaryAttribute += allStats;\r\n                }\r\n            } else if (talent.includes(\"bonus_attack_damage\")) {\r\n                let bonusDmg = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusDmg) {\r\n                    totalAdditional += bonusDmg;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /// Damage from primary attribute counts as part of the Min-Max\r\n    /// whereas bonus damage (+5 damage) from sources count as additional\r\n\r\n    let min = atkMin + totalPrimaryAttribute;\r\n    let max = atkMax + totalPrimaryAttribute;\r\n\r\n    return {\r\n        /// minimum attack damage of the hero\r\n        min: Math.floor(min),\r\n        /// maximum attack damage of the hero\r\n        max: Math.floor(max),\r\n        additional: totalAdditional,\r\n    };\r\n}\r\n\r\n/// Returns info on the attack time of the hero\r\nexport function calculateAttackTime(hero, level, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }\r\n    \r\n    let MAX_ATTACK_SPEED = 700;\r\n\r\n    // Check if hero has different attack rate or attack speed than base hero\r\n    let totalAttackSpeed = parseInt(getDotaBaseHero()?.BaseAttackSpeed);\r\n\r\n    /// Get base agi stats\r\n    let agiStats = getSpecificAttributeStats(EAttributes.ATTR_AGILITY, hero);\r\n    let baseAgi = agiStats.base;\r\n    let agiPerLevel = agiStats.perLevel;\r\n\r\n    let totalAgi = baseAgi + (agiPerLevel * (level - 1));\r\n\r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            let bonusAttackSpeed = tryGetItemSpecialValue(item, \"bonus_attack_speed\");\r\n            if (bonusAttackSpeed) {\r\n                totalAttackSpeed += bonusAttackSpeed;\r\n            }\r\n\r\n            let bonusAgility = tryGetItemSpecialValue(item, \"bonus_agility\");\r\n            if (bonusAgility) {\r\n                totalAgi += bonusAgility;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalAgi += bonusAllStats;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let bonusAttackSpeed = tryGetNeutralSpecialValue(neutral, \"bonus_attack_speed\");\r\n        if (bonusAttackSpeed) {\r\n            totalAttackSpeed += bonusAttackSpeed;\r\n        }\r\n\r\n        let attackSpeed = tryGetNeutralSpecialValue(neutral, \"attack_speed\");\r\n        if (attackSpeed) {\r\n            totalAttackSpeed += attackSpeed;\r\n        }\r\n    }\r\n\r\n    // Only actives that gives attack speed bonuses\r\n    // if (abilities && abilities.length > 0) {\r\n    // }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            let bonusAttackSpeed = tryGetTalentSpecialAbilityValue(talent, \"bonus_attack_speed\");\r\n            if (bonusAttackSpeed) {\r\n                totalAttackSpeed += bonusAttackSpeed;\r\n            }\r\n\r\n            let bonusAgility = tryGetTalentSpecialAbilityValue(talent, \"bonus_agility\");\r\n            if (bonusAgility) {\r\n                totalAgi += bonusAgility;\r\n            }\r\n\r\n            let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                totalAgi += bonusAllStats;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// Check that max atk speed hasn't been reached\r\n    if ((totalAttackSpeed + totalAgi) > MAX_ATTACK_SPEED) {\r\n        // Use totalAttackSpeed at max if so, reset agi since 1 agi = 1 atk speed\r\n        totalAttackSpeed = MAX_ATTACK_SPEED;\r\n        totalAgi = 0;\r\n    }\r\n\r\n    let attacksPerSec = ((totalAttackSpeed + totalAgi) * 0.01) / 1.7;\r\n    let attackTime = 1.7 / ((totalAttackSpeed + totalAgi) * 0.01);\r\n    attackTime = 1 / attacksPerSec;\r\n\r\n    let atkSpeed = totalAttackSpeed + totalAgi;\r\n\r\n    return {\r\n        /// Amount of seconds inbetween attacks\r\n        attackTime: attackTime.toFixed(2),\r\n        /// Amount of attacks per second\r\n        attacksPerSecond: attacksPerSec.toFixed(2),\r\n        /// Attack speed value shown in UI of dota\r\n        attackSpeed: atkSpeed.toFixed(0),\r\n    };\r\n}\r\n\r\n/// Calculates how much output damage an ability will do to an enemy, factoring in any items\r\nexport function calculateSpellDamage(abilityName, abilityInfo, abilityLevel, items, neutral, talents) {\r\n    if (!abilityLevel || !abilityInfo) {\r\n        return -1;\r\n    }\r\n\r\n    // Get normal dmg output of ability\r\n    let abilityDamageInfo = getAbilityOutputDamage(abilityInfo, abilityLevel);\r\n    \r\n    // Add up spellAmp from all bonuses to calculate at end\r\n    let totalSpellAmpPercent = 0;\r\n\r\n    /// Value bonus from talent\r\n    let talentBonus = 0;\r\n\r\n    if (items) {\r\n        // Add item spell damage increase\r\n        for(let item of items) {\r\n            let spellAmp = tryGetItemSpecialValue(item, \"spell_amp\");\r\n            if (spellAmp) {\r\n                totalSpellAmpPercent += spellAmp;\r\n            }\r\n\r\n            let bonusSpellAmp = tryGetItemSpecialValue(item, \"bonus_spell_amp\");\r\n            if (bonusSpellAmp) {\r\n                totalSpellAmpPercent += bonusSpellAmp;\r\n            }\r\n\r\n            // get current bloodstone charges and amp correctly\r\n            let chargeCount = item.extra?.charges;\r\n            let ampPerCharge = tryGetItemSpecialValue(item, \"amp_per_charge\");\r\n            if (ampPerCharge && chargeCount) {\r\n                totalSpellAmpPercent += (ampPerCharge * chargeCount);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        //Add neutral item spell dmg\r\n        let neutralInfo = getItemInfoFromName(neutral.item);\r\n        if (neutralInfo && neutralInfo.AbilitySpecial) {\r\n            for (let i = 0; i < neutralInfo.AbilitySpecial.length; i++) {\r\n                let special = neutralInfo.AbilitySpecial[i];\r\n                // Spell amp\r\n                if (special.bonus_spell_amp) {\r\n                    let bonusSpellAmp = parseInt(special.bonus_spell_amp);\r\n                    totalSpellAmpPercent += bonusSpellAmp; \r\n                }\r\n\r\n                if (special.spell_amp) {\r\n                    let bonusSpellAmp = parseInt(special.spell_amp);\r\n                    totalSpellAmpPercent += bonusSpellAmp;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        // Add spell amplify from any selected talents\r\n        for(let talent of talents) {\r\n            if (talent.includes(\"spell_amplify\")) {\r\n                let ampTalentValue = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (ampTalentValue) {\r\n                    totalSpellAmpPercent += ampTalentValue;\r\n                }\r\n            } \r\n            /// if a unique talent specific to a hero ability\r\n            else if (talent.includes(\"special_bonus_unique\")) {\r\n                /// Search Abilities_English.json for string of talent to \r\n                /// check if it is a damage talent modifier and apply\r\n                if (isDamageTalent(talent)) {\r\n                    let linkedAbility = tryGetTalentSpecialAbilityValue(talent, \"ad_linked_ability\");\r\n\r\n                    // if linked ability is equal to current one\r\n                    if (linkedAbility && linkedAbility === abilityName) {\r\n                        let value = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                        if (value) {\r\n                            talentBonus = value;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    let totalAbilDmg = abilityDamageInfo.damage + talentBonus;\r\n    let abilityDamage = calculateSpellAmp(totalAbilDmg, totalSpellAmpPercent);\r\n\r\n    return {\r\n        damage: abilityDamage === 0 ? null : abilityDamage,\r\n        isPercent: abilityDamageInfo.isPercent,\r\n    };\r\n}\r\n\r\n/// Calculates and applies spell amp to the spell damage and returns the result\r\nexport function calculateSpellAmp (spellDamage, spellAmpPercent) {\r\n    return spellDamage + ((spellDamage / 100) * spellAmpPercent);\r\n}\r\n\r\n/// Calculates ability mana cost with items, neutrals and talents that contain reductions\r\nexport function calculateManaCost(abilityInfo, abilityLevel, items, neutral, talents) {\r\n    if (abilityLevel <= 0) {\r\n        return null;\r\n    }\r\n    \r\n    let manaCost = null;\r\n\r\n    // Get inital mana cost amount\r\n    if (abilityInfo && abilityInfo.AbilityManaCost) {\r\n        manaCost = parseAbilityValueByLevel(abilityInfo.AbilityManaCost, abilityLevel);\r\n    }\r\n\r\n    // Determine mana reductions from items, neutral, talents\r\n    // Take all percentages and calculate at end\r\n    let totalManaCostReducePercent = 0;\r\n\r\n    if (items) {\r\n        for(let item of items) {\r\n            let itemInfo = getItemInfoFromName(item.item);\r\n            if(itemInfo) {\r\n                let manaCostReduceAmount = getItemSpecialAbilityValue(itemInfo, \"manacost_reduction\");\r\n                if(manaCostReduceAmount) {\r\n                    totalManaCostReducePercent += manaCostReduceAmount;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let neutralInfo = getItemInfoFromName(neutral.item);\r\n        if (neutralInfo) {\r\n            let costReductionAmount = getItemSpecialAbilityValue(neutralInfo, \"manacost_reduction\");\r\n            if (costReductionAmount) {\r\n                totalManaCostReducePercent += costReductionAmount;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (talents) {\r\n        for(let talent of talents) {\r\n            // Only apply mana reducing talents\r\n            if (talent.includes(\"mana_reduction\")) {\r\n                let reduceAmount = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (reduceAmount) {\r\n                    totalManaCostReducePercent += reduceAmount;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // If ability has a mana value and has mana reductions\r\n    if (manaCost && totalManaCostReducePercent > 0) {\r\n        let removeManaAmt = (manaCost / 100) * totalManaCostReducePercent;\r\n        manaCost -= removeManaAmt;\r\n    }\r\n\r\n    return manaCost;\r\n}\r\n\r\n/// Calculates ability cooldown with items, neutrals, talents and abilities\r\n/// https://liquipedia.net/dota2/Cooldown_Reduction\r\nexport function calculateAbilityCooldown(abilityName, abilityInfo, abilityLevel, items, neutral, talents) {\r\n    if (abilityLevel <= 0) {\r\n        return null;\r\n    }\r\n    \r\n    let cooldown = null;\r\n    let charges = null;\r\n    let fixedAmtReductionSeconds = 0;\r\n\r\n    if (abilityInfo && abilityInfo.AbilityCooldown) {\r\n        cooldown = parseAbilityValueByLevel(abilityInfo.AbilityCooldown, abilityLevel);\r\n\r\n        /// if ability uses charges, use charge cooldown\r\n        if (cooldown === 0 && abilityInfo.AbilityCharges && abilityInfo.AbilityChargeRestoreTime) {\r\n            cooldown = parseInt(abilityInfo.AbilityChargeRestoreTime);\r\n            charges = parseInt(abilityInfo.AbilityCharges);\r\n        }\r\n\r\n        // if AbilityInfo has a Scepter upgrade and items contains scepter\r\n        let requiresScepter = getAbilitySpecialAbilityValue(abilityInfo, \"RequiresScepter\") === \"1\";\r\n        if (requiresScepter && itemsContainsScepter(items)) {\r\n            let scepterCharges = getIncludesAbilitySpecialAbilityValue(abilityInfo, \"charges\", abilityLevel);\r\n            charges = scepterCharges;\r\n        }\r\n    }\r\n\r\n    let allReductions = [];\r\n    if (items) {\r\n        for (let item of items) {\r\n            if (item && item.item) {\r\n                let itemInfo = getItemInfoFromName(item.item);\r\n                if (itemInfo) {\r\n                    let bonusCooldown = getItemSpecialAbilityValue(itemInfo, \"bonus_cooldown\");\r\n                    if (bonusCooldown) {\r\n                        allReductions.push({ amount: bonusCooldown, source: item.item });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let neutralInfo = getItemInfoFromName(neutral.item);\r\n        if (neutralInfo) {\r\n            let bonusCooldown = getItemSpecialAbilityValue(neutralInfo, \"bonus_cooldown\");\r\n            if (bonusCooldown) {\r\n                allReductions.push({ amount: bonusCooldown, source: neutral });\r\n            } \r\n        }\r\n    }\r\n\r\n    if (talents) {\r\n        for(let talent of talents) {\r\n            // Ignore talent if it isn't a cd reduction one\r\n            if (talent.includes(\"cooldown_reduction\")) {\r\n                let reduction = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (reduction) {\r\n                    allReductions.push({ amount: reduction, source: talent });\r\n                }\r\n            }\r\n            else if (talent.includes(\"special_bonus_unique\")) {\r\n                if (isCooldownTalent(talent)) {\r\n                    let linkedAbility = tryGetTalentSpecialAbilityValue(talent, \"ad_linked_ability\");\r\n                    if (linkedAbility === abilityName) {\r\n                        let value = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                        if (value) {\r\n                            fixedAmtReductionSeconds += value;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /// Remove any fixed amount cooldown reductions first before\r\n    /// applying any other reductions\r\n    let totalCooldown = cooldown - fixedAmtReductionSeconds;\r\n\r\n    let sourceOfReductions = [];\r\n    for(let reduction of allReductions) {\r\n        let decimal = reduction.amount / 100;\r\n        sourceOfReductions.push((1 - decimal));\r\n    }\r\n\r\n    for(let reduce of sourceOfReductions) {\r\n        totalCooldown *= reduce;\r\n    }\r\n\r\n    return {\r\n        charges: charges,\r\n        cooldown: totalCooldown > 0 ? totalCooldown.toFixed(2) : null,\r\n    };\r\n}\r\n\r\n/// Calculates the movement speed of the hero, factoring in their items, neutral, abilities and talents\r\nexport function calculateMoveSpeed (hero, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }\r\n\r\n    let baseSpeed = parseInt(hero.MovementSpeed);\r\n    let flatBonus = 0;\r\n    let percentageBasedBonuses = 0;\r\n\r\n    if (items && items.length > 0) {\r\n        for (let item of items) {\r\n            let moveSpeed = tryGetItemSpecialValue(item, \"bonus_movement_speed\");\r\n            if (moveSpeed) {\r\n                flatBonus += moveSpeed;\r\n            }\r\n            \r\n            let bonusMovement = tryGetItemSpecialValue(item, \"bonus_movement\");\r\n            if (bonusMovement) {\r\n                flatBonus += bonusMovement;\r\n            }\r\n\r\n            let moveSpeedPercentBonus = tryGetItemSpecialValue(item, \"movement_speed_percent_bonus\");\r\n            if (moveSpeedPercentBonus) {\r\n                percentageBasedBonuses += moveSpeedPercentBonus;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let bonusMoveSpeed = tryGetNeutralSpecialValue(neutral, \"bonus_movement_speed\");\r\n        if (bonusMoveSpeed) {\r\n            flatBonus += bonusMoveSpeed;\r\n        }\r\n\r\n        let moveSpeedPercentBonus = tryGetNeutralSpecialValue(neutral, \"movement_speed_percent_bonus\");\r\n        if (moveSpeedPercentBonus) {\r\n            percentageBasedBonuses += moveSpeedPercentBonus;\r\n        }\r\n    }\r\n\r\n    /// Abilities are actives so dont include since no way in UI to activate an ability yet\r\n    // if (abilities && abilities.length > 0) {\r\n    //     for(let ability of abilities) {\r\n    //         let bonusMoveSpeed = tryGetAbilitySpecialAbilityValue(ability, \"bonus_movespeed\");\r\n    //         if (bonusMoveSpeed) {\r\n    //             flatBonus += bonusMoveSpeed;\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            if (talent.includes(\"bonus_movement_speed\")) {\r\n                let bonusSpeed = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusSpeed) {\r\n                    flatBonus += bonusSpeed;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    let total = baseSpeed + flatBonus;\r\n    return total;\r\n}\r\n\r\nexport function calculateAttackRange (hero, level, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }\r\n\r\n    let isHeroRanged = hero.AttackCapabilities === \"DOTA_UNIT_CAP_RANGED_ATTACK\";\r\n\r\n    let baseRange = parseInt(hero.AttackRange);\r\n    let totalAttackRange = baseRange;\r\n\r\n    // Dont add bonuses if hero isn't ranged\r\n    if (isHeroRanged) {\r\n        if (items && items.length > 0) {\r\n            for(let item of items) {\r\n                let baseRange = tryGetItemSpecialValue(item, \"base_attack_range\");\r\n                if (baseRange) {\r\n                    totalAttackRange += baseRange;\r\n                }\r\n            }\r\n        }\r\n    \r\n        if (neutral) {\r\n            let rangeBonus = tryGetNeutralSpecialValue(neutral, \"attack_range_bonus\");\r\n            if (rangeBonus) {\r\n                totalAttackRange += rangeBonus;\r\n            }\r\n    \r\n            let bonusAttackRange = tryGetNeutralSpecialValue(neutral, \"bonus_attack_range\");\r\n            if (bonusAttackRange) {\r\n                totalAttackRange += bonusAttackRange;\r\n            }\r\n        }\r\n\r\n        if (abilities && abilities.length > 0) {\r\n            for(let ability of abilities) {\r\n                let bonusAttackRange = tryGetAbilitySpecialAbilityValue(ability, \"bonus_attack_range\", 1);\r\n                if (bonusAttackRange) {\r\n                    totalAttackRange += bonusAttackRange;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (talents && talents.length > 0) {\r\n            for(let talent of talents) {\r\n                if (talent.includes(\"bonus_attack_range\")) {\r\n                    let bonusAttackRange = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                    if (bonusAttackRange) {\r\n                        totalAttackRange += bonusAttackRange;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        // Melee units, apply any melee attack range bonuses\r\n        if (neutral) {\r\n            let bonusAttackRange = tryGetNeutralSpecialValue(neutral, \"melee_attack_range\");\r\n            if (bonusAttackRange) {\r\n                totalAttackRange += bonusAttackRange;\r\n            }\r\n        }\r\n    }\r\n\r\n    return totalAttackRange;\r\n}\r\n\r\n/// Calculates the correct attribute stats for a given hero\r\nexport function calculateAttribute(attribute, hero, level, items, neutral, abilities, talents) {\r\n    if (!hero) {\r\n        return \"?\";\r\n    }\r\n\r\n    let attributeStats = getSpecificAttributeStats(attribute, hero);\r\n    let baseAttribute = attributeStats.base;\r\n    let attributePerLevel = attributeStats.perLevel;\r\n\r\n    let totalAttribute = baseAttribute + (attributePerLevel * (level - 1));\r\n    let additionalAttribute = 0;\r\n\r\n    if (items && items.length > 0) {\r\n        for(let item of items) {\r\n            switch(attribute) {\r\n                case EAttributes.ATTR_STRENGTH:\r\n                    {\r\n                        let bonusStr = tryGetItemSpecialValue(item, \"bonus_strength\");\r\n                        if (bonusStr) {\r\n                            additionalAttribute += bonusStr;\r\n                        }\r\n                        break;\r\n                    }\r\n                case EAttributes.ATTR_AGILITY:\r\n                    {\r\n                        let bonusAgi = tryGetItemSpecialValue(item, \"bonus_agility\");\r\n                        if (bonusAgi) {\r\n                            additionalAttribute += bonusAgi;\r\n                        }\r\n                        break;\r\n                    }\r\n                case EAttributes.ATTR_INTELLIGENCE:\r\n                    {\r\n                        let bonusIntellect = tryGetItemSpecialValue(item, \"bonus_intellect\");\r\n                        if (bonusIntellect) {\r\n                            additionalAttribute += bonusIntellect;\r\n                        }\r\n\r\n                        let bonusInt = tryGetItemSpecialValue(item, \"bonus_intelligence\");\r\n                        if (bonusInt) {\r\n                            additionalAttribute += bonusInt;\r\n                        }\r\n                        break;    \r\n                    }\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            let bonusAllStats = tryGetItemSpecialValue(item, \"bonus_all_stats\");\r\n            if (bonusAllStats) {\r\n                additionalAttribute += bonusAllStats;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        switch(attribute) {\r\n            case EAttributes.ATTR_STRENGTH:\r\n                    {\r\n                        let bonusStr = tryGetNeutralSpecialValue(neutral, \"bonus_strength\");\r\n                        if (bonusStr) {\r\n                            additionalAttribute += bonusStr;\r\n                        }\r\n                        break;\r\n                    }\r\n            case EAttributes.ATTR_AGILITY:\r\n                {\r\n                    let bonusAgi = tryGetNeutralSpecialValue(neutral, \"bonus_agility\");\r\n                    if (bonusAgi) {\r\n                        additionalAttribute += bonusAgi;\r\n                    }\r\n                    break;\r\n                }\r\n            case EAttributes.ATTR_INTELLIGENCE:\r\n                {\r\n                    let bonusInt = tryGetNeutralSpecialValue(neutral, \"bonus_intelligence\");\r\n                    if (bonusInt) {\r\n                        additionalAttribute += bonusInt;\r\n                    }\r\n\r\n                    let bonusIntellect = tryGetNeutralSpecialValue(neutral, \"bonus_intellect\");\r\n                    if (bonusIntellect) {\r\n                        additionalAttribute += bonusIntellect;\r\n                    }\r\n                    break;    \r\n                }\r\n            default:\r\n                break;\r\n        }\r\n\r\n        let bonusAllStats = tryGetNeutralSpecialValue(neutral, \"bonus_all_stats\");\r\n        if (bonusAllStats) {\r\n            additionalAttribute += bonusAllStats;\r\n        }\r\n\r\n        /// Add primary stat bonus if current attribute matches hero's primary\r\n        if (attribute == hero.AttributePrimary) {\r\n            let primaryStat = tryGetNeutralSpecialValue(neutral, \"primary_stat\");\r\n            if (primaryStat) {\r\n                additionalAttribute += primaryStat;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for(let talent of talents) {\r\n            switch(attribute) {\r\n                case EAttributes.ATTR_STRENGTH:\r\n                        {\r\n                            if (talent.includes(\"bonus_strength\")) {\r\n                                let bonusStr = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                                if (bonusStr) {\r\n                                    additionalAttribute += bonusStr;\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                case EAttributes.ATTR_AGILITY:\r\n                    {\r\n                        if (talent.includes(\"bonus_agility\")) {\r\n                            let bonusAgi = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                            if (bonusAgi) {\r\n                                additionalAttribute += bonusAgi;\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                case EAttributes.ATTR_INTELLIGENCE:\r\n                    {\r\n                        if (talent.includes(\"bonus_intelligence\")) {\r\n                            let bonusInt = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                            if (bonusInt) {\r\n                                additionalAttribute += bonusInt;\r\n                            }\r\n                        }\r\n                        break;    \r\n                    }\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            if (talent.includes(\"all_stats\")) {\r\n                let bonusAllStats = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (bonusAllStats) {\r\n                    additionalAttribute += bonusAllStats;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // If primary attribute, round down else us normal rounding\r\n    let isPrimaryAttr = getPrimaryAttribute(hero) === attribute;\r\n    if (isPrimaryAttr) {\r\n        totalAttribute = Math.floor(totalAttribute)\r\n    } else {\r\n        totalAttribute = parseInt(totalAttribute.toFixed(0));\r\n    }\r\n\r\n    return {\r\n        /// Base attribute amount, includes per level\r\n        attribute: totalAttribute,\r\n        /// Additional attribute amount, from items/neutral/abils/talents\r\n        additionalAttribute: additionalAttribute.toFixed(0),\r\n        /// Amount of attribute per level\r\n        perLevel: attributePerLevel,\r\n    };\r\n}\r\n\r\nexport function calculateAbilityCastRange (abilityName, abilityInfo, abilityLevel, items, neutral, talents) {\r\n    if (!abilityInfo) {\r\n        return \"?\";\r\n    }\r\n\r\n    /// Use CastRange or find range inside AbilitySpecial\r\n    let baseCastRange = parseInt(abilityInfo.AbilityCastRange);\r\n    if (!baseCastRange) {\r\n        let foundRange = getAbilitySpecialCastRangeValue(abilityInfo, \"_range\", abilityLevel.level);\r\n        if (foundRange) {\r\n            baseCastRange = foundRange;\r\n        } else {\r\n            // Cant determine a cast range, none\r\n            return null;\r\n        }\r\n    }\r\n\r\n    let totalBonusRange = 0;\r\n\r\n    if (items && items.length > 0) {\r\n        for (let item of items) {\r\n            let rangeBonus = tryGetItemSpecialValue(item, \"cast_range_bonus\");\r\n            if (rangeBonus) {\r\n                totalBonusRange += rangeBonus;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (neutral) {\r\n        let rangeBonus = tryGetNeutralSpecialValue(neutral, \"cast_range_bonus\");\r\n        if (rangeBonus) {\r\n            totalBonusRange += rangeBonus;\r\n        }\r\n    }\r\n\r\n    if (talents && talents.length > 0) {\r\n        for (let talent of talents) {\r\n            if (talent.includes(\"bonus_cast_range\")) {\r\n                let rangeBonus = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                if (rangeBonus) {\r\n                    totalBonusRange += rangeBonus;\r\n                }\r\n            }\r\n            else if (talent.includes(\"special_bonus_unique\")) {\r\n                if (isCastRangeTalent(talent)) {\r\n                    let linkedAbility = tryGetTalentSpecialAbilityValue(talent, \"ad_linked_ability\");\r\n                    if (linkedAbility === abilityName) {\r\n                        let value = tryGetTalentSpecialAbilityValue(talent, \"value\");\r\n                        if (value) {\r\n                            totalBonusRange += value;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return baseCastRange + totalBonusRange;\r\n}\r\n\r\n/// Calculates the normal sell price of an item from it's ItemInfo\r\nexport function calculateItemSellCost (itemInfo) {\r\n    if (itemInfo && itemInfo.ItemCost) {\r\n        let cost = parseInt(itemInfo.ItemCost);\r\n        // value rounded down\r\n        return Math.floor(cost / 2);\r\n    }\r\n    return 0;\r\n}","import React, { Component } from 'react';\r\n\r\nimport {\r\n    calculateSpellDamage\r\n} from \"../../utility/calculate\";\r\nimport { \r\n    tryGetLocalizedString, \r\n    getTooltipAbilityString,\r\n} from \"../../utility/data-helpers/language\";\r\n\r\n/// Retrieves ability damage and returns display value\r\nfunction parseDamage(abilityName, abilInfo, abilLvl, items, neutral, talents) {\r\n    let abilityDamage = calculateSpellDamage(abilityName, abilInfo, abilLvl, items, neutral, talents);\r\n    if (abilityDamage && abilityDamage.damage) {\r\n        // force to be to two decimal places\r\n        let damage = abilityDamage.damage.toFixed(2);\r\n        if (abilityDamage.isPercent) {\r\n            damage += \"%\";\r\n        }\r\n        return damage;\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nfunction getAbilityNameFromStrings(strings, key) {\r\n    if (strings && key) {\r\n        return tryGetLocalizedString(strings, key);\r\n    } else {\r\n        return \"?\";\r\n    }\r\n}\r\n\r\nclass DamageOutput extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            ability: props.ability,\r\n            abilityInfo: props.abilityInfo,\r\n            levelInfo: props.levelInfo,\r\n\r\n            items: props.items,\r\n            neutral: props.neutral,\r\n            selectedTalents: props.selectedTalents,\r\n\r\n            abilityStrings: props.abilityStrings,\r\n            dotaStrings: props.dotaStrings,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(prevProps.abilityInfo !== this.props.abilityInfo) {\r\n            this.setState({ abilityInfo: this.props.abilityInfo });\r\n        }\r\n\r\n        if (prevProps.levelInfo !== this.props.levelInfo) {\r\n            this.setState({ levelInfo: this.props.levelInfo });\r\n        }\r\n\r\n        if (prevProps.items !== this.props.items) {\r\n            this.setState({ items: this.props.items });\r\n        }\r\n\r\n        if (prevProps.neutral !== this.props.neutral) {\r\n            this.setState({ neutral: this.props.neutral });\r\n        }\r\n\r\n        if (prevProps.selectedTalents !== this.props.selectedTalents) {\r\n            this.setState({ selectedTalents: this.props.selectedTalents });\r\n        }\r\n\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ abilityStrings: this.props.abilityStrings });\r\n        }\r\n        if (prevProps.dotaStrings !== this.props.dotaStrings) {\r\n            this.setState({ dotaStrings: this.props.dotaStrings });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let abilityDamage = parseDamage(this.state.ability, this.state.abilityInfo, this.state.levelInfo?.level, this.state.items, this.state.neutral, this.state.selectedTalents);\r\n        return (\r\n            <div className=\"w-100 h-100\">\r\n                <h5>{getTooltipAbilityString(this.state.abilityStrings, this.state.ability)}</h5>\r\n                {\r\n                    abilityDamage && \r\n                    <h6>\r\n                        { (getAbilityNameFromStrings(this.state.abilityStrings, \"dota_ability_variable_damage\") + \":\")}\r\n                        {' '}\r\n                        { abilityDamage }\r\n                    </h6>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DamageOutput;","import React, { Component } from 'react';\r\nimport {\r\n    calculateAbilityCooldown\r\n} from \"../../utility/calculate\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faClock, faCircle }from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nclass Cooldown extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            abilityLevel: props.abilityLevel,\r\n            abilityCooldown: props.cooldown,\r\n\r\n            ability: props.ability,\r\n            abilityInfo: props.abilityInfo,\r\n            items: props.items,\r\n            neutral: props.neutral,\r\n            selectedTalents: props.selectedTalents,\r\n\r\n            cooldown: null,\r\n            charges: null,\r\n        };\r\n\r\n        this.updateCooldown = this.updateCooldown.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateCooldown();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                abilityLevel: this.props.abilityLevel,\r\n                abilityCooldown: this.props.cooldown,\r\n\r\n                ability: this.props.ability,\r\n                items: this.props.items,\r\n                neutral: this.props.neutral,\r\n                selectedTalents: this.props.selectedTalents,\r\n            }, () => this.updateCooldown() );\r\n        }\r\n    }\r\n\r\n    updateCooldown() {\r\n        let currentCooldownInfo = calculateAbilityCooldown(this.state.ability, this.state.abilityInfo, this.state.abilityLevel, this.state.items, this.state.neutral, this.state.selectedTalents);\r\n        \r\n        this.setState({\r\n            cooldown: currentCooldownInfo?.cooldown,\r\n            charges: currentCooldownInfo?.charges,\r\n        });\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                {\r\n                    this.state.cooldown &&\r\n                        <div className=\"d-flex\" title=\"cooldown\">\r\n                            <FontAwesomeIcon className=\"my-auto mr-1\" icon={faClock} />\r\n                            <div>\r\n                                { this.state.cooldown }\r\n                            </div>\r\n                        </div>\r\n                }\r\n                {\r\n                    this.state.charges &&\r\n                        <div className=\"d-flex\" title=\"charges\">\r\n                            <FontAwesomeIcon className=\"my-auto mr-1\" icon={faCircle} />\r\n                            <div>\r\n                                { this.state.charges }\r\n                            </div>\r\n                        </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Cooldown;","import React, { Component } from 'react';\r\nimport { \r\n    calculateManaCost \r\n} from '../../utility/calculate';\r\n\r\nclass ManaCost extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            ability: props.ability,\r\n            abilityLevel: props.abilityLevel,\r\n\r\n            items: props.items,\r\n            neutral: props.neutral,\r\n            selectedTalents: props.selectedTalents,\r\n        };\r\n\r\n        this.updateMana = this.updateMana.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                ability: this.props.ability,\r\n                abilityLevel: this.props.abilityLevel,\r\n\r\n                items: this.props.items,\r\n                neutral: this.props.neutral,\r\n                selectedTalents: this.props.selectedTalents,\r\n            });\r\n        }\r\n    }\r\n\r\n    updateMana() {\r\n        let manaCost = -1;\r\n        if (this.state.ability) {\r\n            manaCost = calculateManaCost(this.state.ability, this.state.abilityLevel, this.state.items, this.state.neutral, this.state.selectedTalents);\r\n        }\r\n        \r\n        // this.setState({\r\n        //     abilityManaCost: manaCost,\r\n        // });\r\n        return manaCost;\r\n    }\r\n\r\n    render() {\r\n        let manaCost = this.updateMana();\r\n        return (\r\n            <div>\r\n                { \r\n                    manaCost &&\r\n                        <div className=\"mana-cost d-flex\" title=\"mana cost\">\r\n                            <div className=\"my-auto mr-1\" style={{ \r\n                                height: \"10px\",\r\n                                width: \"10px\",\r\n                                backgroundColor: \"rgb(69, 148, 207)\",\r\n                            }}/>\r\n                            <div>{ manaCost }</div>\r\n                        </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ManaCost;","import React, { Component } from 'react';\r\nimport { \r\n    getAbilityBehaviours,\r\n    getAbilitySpecialExtraValues\r\n\r\n} from \"../../utility/dataHelperAbilities\";\r\nimport { \r\n    getTooltipString,\r\n    getLocalizedString,\r\n    containsLocalizedString\r\n} from \"../../utility/data-helpers/language\";\r\nimport {\r\n    calculateAbilityCastRange\r\n} from \"../../utility/calculate\";\r\n\r\nfunction stringContainsHtml (str) {\r\n    return typeof(str) === \"string\" && str.includes(\"</font>\");\r\n}\r\n\r\n/// Displays a Type/Value props used inside Ability descriptions\r\nfunction TypeValueUI (props) {\r\n    /// Check if localized type value contains percent and remove\r\n    let isPercentage = false;\r\n    let typeStr = props.type;\r\n    let valueStr = props.value;\r\n    if (props.type.includes(\"%\")) {\r\n        typeStr = typeStr.replace(\"%\", \"\");\r\n        isPercentage = true;\r\n    }\r\n\r\n    return (\r\n        <div className=\"d-flex\" style={{ fontSize: \"0.85rem\"}}>\r\n            {/* Type Key */}\r\n            {\r\n                stringContainsHtml(typeStr) ?\r\n                <div dangerouslySetInnerHTML={{ __html: typeStr.replace(\"\\\\\", \"\") }}></div>\r\n                :\r\n                <div>{ typeStr }</div>\r\n            }\r\n            <div className=\"mx-1\" />\r\n            {/* Value */}\r\n            {\r\n                stringContainsHtml(valueStr) ?    \r\n                <div dangerouslySetInnerHTML={{ __html: valueStr.replace(\"\\\\\", \"\") }}></div>\r\n                :\r\n                <div>{ valueStr }</div>\r\n            }\r\n            {\r\n                // Give percent sign after value if isPercent\r\n                isPercentage && \"%\"\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nclass AbilityDetails extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            ability: props.ability,\r\n            abilityInfo: props.abilityInfo,\r\n            levelInfo: props.levelInfo,\r\n\r\n            items: props.items,\r\n            neutral: props.neutral,\r\n            selectedTalents: props.selectedTalents,\r\n\r\n            abilityBehaviours: null,\r\n            castRange: 0,\r\n\r\n            abilityStrings: props.abilityStrings,\r\n            dotaStrings: props.dotaStrings,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(prevProps.abilityInfo !== this.props.abilityInfo) {\r\n            this.setState({ \r\n                abilityInfo: this.props.abilityInfo,\r\n            });\r\n        }\r\n\r\n        if (prevProps.levelInfo !== this.props.levelInfo) {\r\n            this.setState({ \r\n                levelInfo: this.props.levelInfo \r\n            });\r\n        }\r\n\r\n        if (prevProps.items !== this.props.items) {\r\n            this.setState({ \r\n                items: this.props.items \r\n            });\r\n        }\r\n\r\n        if (prevProps.neutral !== this.props.neutral) {\r\n            this.setState({ \r\n                neutral: this.props.neutral \r\n            });\r\n        }\r\n\r\n        if (prevProps.selectedTalents !== this.props.selectedTalents) {\r\n            this.setState({ \r\n                selectedTalents: this.props.selectedTalents \r\n            });\r\n        }\r\n\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ \r\n                abilityStrings: this.props.abilityStrings \r\n            });\r\n        }\r\n        if (prevProps.dotaStrings !== this.props.dotaStrings) {\r\n            this.setState({ \r\n                dotaStrings: this.props.dotaStrings \r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let castRangeAmt = calculateAbilityCastRange(this.state.ability, this.state.abilityInfo, this.state.levelInfo, this.state.items, this.state.neutral, this.state.selectedTalents);\r\n        let valuesInformation = getAbilitySpecialExtraValues(this.state.ability, this.state.abilityInfo, this.state.levelInfo.level, this.state.items, this.state.selectedTalents);\r\n        let abilityBehaviours = getAbilityBehaviours(this.state.abilityInfo);\r\n        return (\r\n            <div className=\"mb-2\">\r\n                {\r\n                    abilityBehaviours && abilityBehaviours.map((value, index) => {\r\n                        return (\r\n                            <TypeValueUI \r\n                                key={index}\r\n                                type={ getLocalizedString(this.state.dotaStrings, value.key) } \r\n                                value={ typeof value.value === \"object\" ? value.value.map((val) => {\r\n                                        return getLocalizedString(this.state.dotaStrings, val)\r\n                                    }).join(', ') : getLocalizedString(this.state.dotaStrings, value.value) \r\n                                } />\r\n                        );\r\n                    })\r\n                }\r\n                <div className=\"py-1\" />\r\n                {\r\n                    castRangeAmt &&\r\n                        <TypeValueUI \r\n                            type={getLocalizedString(this.state.abilityStrings, \"dota_ability_variable_cast_range\").toUpperCase() + \":\"}\r\n                            value={castRangeAmt} />\r\n                }\r\n                <div className=\"py-1\" />\r\n                {\r\n                    valuesInformation && valuesInformation.map((value, index) => {\r\n                        if (containsLocalizedString(this.state.abilityStrings, value.key)) {\r\n                            return (\r\n                                <TypeValueUI \r\n                                    key={ `${value.key}-${index}` }\r\n                                    type={ getLocalizedString(this.state.abilityStrings, value.key) }\r\n                                    value={ value.value } />\r\n                            );   \r\n                        }\r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AbilityDetails;","import React, { Component } from 'react';\r\nimport {\r\n    Row, \r\n    Col,\r\n    Button\r\n} from \"react-bootstrap\";\r\n\r\nimport { DOTAAbilities } from \"../../data/dota2/json/npc_abilities.json\";\r\n\r\nimport {\r\n    itemsContainsScepter\r\n} from \"../../utility/dataHelperItems\";\r\n\r\nimport DamageOutput from \"./DamageOutput\";\r\nimport Cooldown from \"./Cooldown\";\r\nimport ManaCost from \"./ManaCost\";\r\nimport AbilityDetails from \"./AbilityDetails\";\r\nimport \"./Abilities.css\";\r\n\r\n/// Returns array of html elements to represent the levels of the ability\r\nfunction getAbilityLevelHtml (levelInfo, abilityIndex, abilityInfo, onLevelChanged) {\r\n    if (levelInfo && abilityInfo)\r\n    {\r\n        /// Determine max level of ability\r\n        let maxLvl = abilityInfo.AbilityType === \"DOTA_ABILITY_TYPE_ULTIMATE\" ? 3 : 4;\r\n        if (abilityInfo.MaxLevel)\r\n            maxLvl = parseInt(abilityInfo.MaxLevel);\r\n        \r\n        let html = [];\r\n        for(let i = 0; i < maxLvl; i++) {\r\n            html.push(\r\n                <Button \r\n                    key={i} \r\n                    variant=\"outline-secondary\"\r\n                    className=\"p-1\"\r\n                    onClick={(e) => onLevelChanged(e)}\r\n                    data-lvlindex={abilityIndex}\r\n                    data-btnindex={i}>\r\n                    <div className={ i < levelInfo.level ? \"levelled\" : \"unlevelled\"}></div>\r\n                </Button>\r\n            );\r\n        }\r\n        return html;\r\n    }\r\n    else\r\n    {\r\n        return <div>?</div>\r\n    }\r\n}\r\n\r\nfunction getLevelInfo (abilities) {\r\n    if (abilities) {\r\n        return abilities.map((abil, index) => {\r\n            return { ability: index, level: 1 };\r\n        });\r\n    }\r\n    return [ ];\r\n}\r\n\r\n/// Max amount of abilities to show in one row\r\nconst ABILITY_ROW_MAX = 6;\r\n\r\nclass Abilities extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        var abils = this.filterAbilities(props.abilities);\r\n        var abilLevels = getLevelInfo(abils);\r\n\r\n        this.state = {\r\n            heroName: props.heroName,\r\n            abilities: abils,\r\n            abilityLevels: abilLevels,\r\n            items: props.items,\r\n            neutral: props.neutral,\r\n            selectedTalents: props.selectedTalents,\r\n\r\n            abilityStrings: props.abilityStrings,\r\n            dotaStrings: props.dotaStrings,\r\n\r\n            displayDamage: props.displayDamage,\r\n        };\r\n\r\n        this.onLevelChanged = this.onLevelChanged.bind(this);\r\n        this.filterAbilities = this.filterAbilities.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.heroName !== this.props.heroName) {\r\n            this.setState({\r\n                heroName: this.props.heroName,\r\n            });\r\n        }\r\n\r\n        if (prevProps.abilities !== this.props.abilities) {\r\n            var abils = this.filterAbilities(this.props.abilities);\r\n            this.setState({\r\n                abilities: abils,\r\n                abilityLevels: getLevelInfo(abils),\r\n            });\r\n        }\r\n\r\n        if (prevProps.items !== this.props.items) {\r\n            this.setState({ items: this.props.items });\r\n        }\r\n        if (prevProps.neutral !== this.props.neutral) {\r\n            this.setState({ neutral: this.props.neutral });\r\n        }\r\n        if (prevProps.selectedTalents !== this.props.selectedTalents) {\r\n            this.setState({ selectedTalents: this.props.selectedTalents });\r\n        }\r\n\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ abilityStrings: this.props.abilityStrings });\r\n        }\r\n        if (prevProps.dotaStrings !== this.props.dotaStrings) {\r\n            this.setState({ dotaStrings: this.props.dotaStrings });\r\n        }\r\n    }\r\n    \r\n    // Remove any undefined, hidden abilities\r\n    filterAbilities(abils) {\r\n        if (abils) {\r\n            return abils.filter(function (val) {\r\n                return val && val !== \"generic_hidden\";\r\n            });\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    onLevelChanged(e) {\r\n        // If click on inner element\r\n        if (e.target.tagName.toLowerCase() !== \"button\") {\r\n            e.target = e.target.parentElement;\r\n        }\r\n\r\n        var levelIndex = parseInt(e.target.dataset.lvlindex);\r\n        var abilities = this.state.abilityLevels;\r\n        var targetLevel = parseInt(e.target.dataset.btnindex) + 1;\r\n        // Clicked same level, set to 0\r\n        if (abilities[levelIndex].level === targetLevel) {\r\n            abilities[levelIndex].level = 0;\r\n        } else {\r\n            // Set Level's new value to which btn was pressed\r\n            abilities[levelIndex].level = targetLevel;\r\n        }\r\n\r\n        this.setState({\r\n            abilityLevels: abilities,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Row \r\n                md={this.state.abilities.length > ABILITY_ROW_MAX ? ABILITY_ROW_MAX : 0}>\r\n                {\r\n                    this.state.abilities && this.state.abilityLevels && this.state.abilities.map((value, index) => {\r\n                        // Info about the ability\r\n                        let ability = DOTAAbilities[value];\r\n                        if (!ability) {\r\n                            console.log(`Unable to find info on ability '${value}'`);\r\n                        }\r\n                        // Current level of the ability\r\n                        let levelInfo = this.state.abilityLevels.find(abilVal => abilVal.ability === index);\r\n                        if (!ability && value) {\r\n                            return <div key={value}>?</div>\r\n                        }\r\n\r\n                        // Dont add any scepter abilities unless hero has scepter\r\n                        if (ability && ability.IsGrantedByScepter && !itemsContainsScepter(this.state.items)) {\r\n                            return;\r\n                        }\r\n                        return (\r\n                            <Col key={ability.ID} className=\"d-flex flex-column justify-content-top\">\r\n                                <img\r\n                                    className=\"h-100 align-self-center\"\r\n                                    style={{ maxWidth: \"90px\", maxHeight: \"90px\" }}\r\n                                    src={`http://cdn.dota2.com/apps/dota2/images/abilities/${value}_hp1.png`} \r\n                                    alt={ `${ability.ID}-${value}` } />\r\n                                <Row className=\"px-4\">\r\n                                    <Col md={6}>\r\n                                        {/* Cooldown */}\r\n                                        <Cooldown \r\n                                            ability={value} \r\n                                            abilityInfo={ability}\r\n                                            abilityLevel={levelInfo.level} \r\n                                            cooldown={ability.AbilityCooldown}\r\n                                            items={this.state.items}\r\n                                            neutral={this.state.neutral}\r\n                                            selectedTalents={this.state.selectedTalents} />\r\n                                    </Col>\r\n                                    <Col md={6}>\r\n                                        {/* Mana Cost */}\r\n                                        <ManaCost \r\n                                            ability={ability}\r\n                                            abilityLevel={levelInfo.level} \r\n                                            items={this.state.items}\r\n                                            neutral={this.state.neutral}\r\n                                            selectedTalents={this.state.selectedTalents} />\r\n                                    </Col>\r\n                                </Row>\r\n                                <div className=\"align-self-center pt-2 d-flex\">\r\n                                    {\r\n                                        this.state.abilityLevels && !ability.IsGrantedByScepter && \r\n                                            getAbilityLevelHtml(levelInfo, index, ability, this.onLevelChanged)\r\n                                    }\r\n                                </div>\r\n                                <div className=\"py-1\">\r\n                                    {\r\n                                        this.state.displayDamage && \r\n                                            <DamageOutput \r\n                                                ability={value}\r\n                                                abilityInfo={ability} \r\n                                                levelInfo={levelInfo}\r\n                                                items={this.state.items}\r\n                                                neutral={this.state.neutral} \r\n                                                selectedTalents={this.state.selectedTalents} \r\n                                                abilityStrings={this.state.abilityStrings} \r\n                                                dotaStrings={this.state.dotaStrings} />\r\n                                    }\r\n                                </div>\r\n                                <div className=\"py-1\">\r\n                                    <AbilityDetails \r\n                                        ability={value}\r\n                                        abilityInfo={ability} \r\n                                        levelInfo={levelInfo}\r\n                                        items={this.state.items}\r\n                                        neutral={this.state.neutral} \r\n                                        selectedTalents={this.state.selectedTalents}\r\n                                        abilityStrings={this.state.abilityStrings} \r\n                                        dotaStrings={this.state.dotaStrings} />\r\n                                </div>\r\n                            </Col>\r\n                        );\r\n                    })\r\n                }\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Abilities;","import Abilities from \"./Abilities\";\r\n\r\nexport default Abilities;","import React from \"react\";\r\n\r\nexport function filterItemName (name) {\r\n    if (name) {\r\n        let item = name.split('_');\r\n        item.shift();\r\n        item = item.join('_');\r\n        return item;\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\n/// Gets an item icon from it's name. For exmaple \"item_mango_tree\"\r\nexport function getItemIcon (itemName, width, height, scale) {\r\n    // Remove 'item_' prefix, split by _, remove \"item\" and join again\r\n    let item = filterItemName(itemName);\r\n\r\n    // Width and height of each item in item_stylesheet\r\n    if (item) {\r\n        return <span \r\n                    className={ 'sprite sprite-' + item + '_png '} \r\n                    alt={item} \r\n                    data-item={itemName} \r\n                    style={{ transform: `scale(${scale}, ${scale})`, transformOrigin: \"top left\" }} />\r\n    } else {\r\n        return <span \r\n                style={{ backgroundColor: \"#212121\", width: width, height: height, transform: `scale(${scale}, ${scale})`, display: \"block\", transformOrigin: \"top left\" }} />\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport {\r\n    Tabs,\r\n    Tab,\r\n    Button,\r\n    Form,\r\n    ListGroup\r\n} from \"react-bootstrap\";\r\nimport { getLocalizedString } from '../../utility/data-helpers/language';\r\nimport { DOTAAbilities } from \"../../data/dota2/json/items.json\";\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faMinus } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport {\r\n    getItemIcon\r\n} from \"../../utility/spriteHelper\";\r\n\r\nimport \"./ItemSelector.css\";\r\nimport \"../../css/dota_items.css\";\r\n\r\n\r\nfunction getItemsByQuality(itemsArray, matchArray) {\r\n    return itemsArray.filter((itemInfo) => {\r\n        var quality = itemInfo.item.ItemQuality;\r\n        if (quality) { //(quality === \"consumable\" || quality === \"component\" || quality === \"secret_shop\")) {\r\n            for(var i = 0; i < matchArray.length; i++) {\r\n                if (quality === matchArray[i]) {\r\n                    return itemInfo;\r\n                }\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction ItemIcon(props) {\r\n    return (\r\n            <div \r\n                key={props.keyName} \r\n                title={props.itemName} \r\n                onClick={props.onClick}\r\n                data-item={props.itemName}\r\n                className=\"m-1\" \r\n                style={{ width: `calc(88px * ${props.scale})`, height: `calc(64px * ${props.scale})` }}>\r\n                { \r\n                    getItemIcon(props.itemName, \"88px\", \"64px\", props.scale) \r\n                }\r\n            </div>\r\n    );\r\n}\r\n\r\nfunction TabHeading(props) {\r\n    return (\r\n        <h6 className=\"px-3 mb-0\">{props.text}</h6>\r\n    );\r\n}\r\n\r\nclass ItemSelector extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let selectableItems = Object.keys(DOTAAbilities).filter((value) => {\r\n            let key = value.toLowerCase();\r\n            let ability = DOTAAbilities[value];\r\n            if (key !== \"version\" && !key.includes(\"recipe\") && !ability.ItemIsNeutralDrop && !ability.IsObsolete) {\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n        // Convert keys to item data\r\n        selectableItems = selectableItems.map((key) => {\r\n            return {\r\n                item:  DOTAAbilities[key],\r\n                name: key,\r\n            };\r\n        })\r\n        selectableItems.sort();\r\n\r\n        let basicItems = getItemsByQuality(selectableItems, [\"consumable\", \"component\", \"secret_shop\"]);\r\n        let upgradesItems = getItemsByQuality(selectableItems, [\"common\", \"rare\", \"epic\", \"artifact\"]);\r\n\r\n        this.state = {\r\n            allItems: selectableItems,\r\n            queryItems: null,\r\n\r\n            onSelectedItem: props.onSelectedItem,\r\n            dotaStrings: props.dotaStrings,\r\n            abilityStrings: props.abilityStrings,\r\n\r\n            basicItems: basicItems,\r\n            upgradesItems: upgradesItems,\r\n        };\r\n\r\n        this.onSearchChanged = this.onSearchChanged.bind(this);\r\n        this.onSearchItemSelected = this.onSearchItemSelected.bind(this);\r\n        this.onShopItemSelected = this.onShopItemSelected.bind(this);\r\n        this.onRemoveItemSelected = this.onRemoveItemSelected.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(prevProps !== this.props) {\r\n            this.setState({\r\n                dotaStrings: this.props.dotaStrings,\r\n                abilityStrings: this.props.abilityStrings,\r\n                onSelectedItem: this.props.onSelectedItem,\r\n            });\r\n        }\r\n    }\r\n\r\n    onSearchChanged(e) {\r\n        let query = e.target.value;\r\n        let filteredItems = null;\r\n        if (query) {\r\n            filteredItems = this.state.allItems.filter((item) => {\r\n                let localizedName = getLocalizedString(this.state.abilityStrings, `DOTA_Tooltip_Ability_${item.name}`)?.toLowerCase();\r\n                return localizedName && localizedName.indexOf(query.toLowerCase()) !== -1; \r\n            });\r\n        }\r\n\r\n        this.setState({\r\n            queryItems: filteredItems,\r\n        });\r\n    }\r\n\r\n    onSearchItemSelected(e) {\r\n        let val = e.target.dataset?.item;\r\n        this.state.onSelectedItem(val);\r\n    }\r\n\r\n    onShopItemSelected (e) {\r\n        let item = e.target.dataset?.item;\r\n        this.state.onSelectedItem(item);\r\n    }\r\n\r\n    onRemoveItemSelected(e) {\r\n        let item = null;\r\n        this.state.onSelectedItem(item);\r\n    }\r\n\r\n    render() {\r\n        let scale = 0.5;\r\n        let searchIconScale = 0.45;\r\n        return (\r\n            <div className=\"item-card\">\r\n                <div className=\"item-card header d-flex p-2\">\r\n                    <div>\r\n                        <Form.Control type=\"text\" placeholder=\"Search...\" onChange={this.onSearchChanged}/>\r\n                    </div>\r\n                    <div className=\"ml-auto\">\r\n                        <Button variant=\"outline-danger\" onClick={this.onRemoveItemSelected}>\r\n                            <FontAwesomeIcon icon={faMinus} />\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"item-card content\">\r\n                    <div className=\"\">\r\n                        {\r\n                            this.state.queryItems && \r\n                            <div>\r\n                                <h5>\r\n                                    { getLocalizedString(this.state.dotaStrings, \"DOTA_Shop_Search_Results_Title\") }\r\n                                </h5>\r\n                                <ListGroup>\r\n                                    {\r\n                                        // Query search term\r\n                                        this.state.queryItems.map((item) => {\r\n                                            let localizedName = getLocalizedString(this.state.abilityStrings, `DOTA_Tooltip_Ability_${item.name}`);\r\n                                            return (\r\n                                                <ListGroup.Item \r\n                                                    key={item.name} \r\n                                                    data-item={item.name} \r\n                                                    className=\"py-1 px-3\"\r\n                                                    onClick={this.onSearchItemSelected} \r\n                                                    action>\r\n                                                    <div className=\"d-flex\" data-item={item.name}>\r\n                                                        <ItemIcon \r\n                                                            itemName={item.name}\r\n                                                            onClick={this.onSearchItemSelected} \r\n                                                            scale={searchIconScale}/>\r\n\r\n                                                        <h6 className=\"mx-1 my-auto\" data-item={item.name}>\r\n                                                            { localizedName }\r\n                                                        </h6>\r\n                                                    </div>\r\n                                                </ListGroup.Item>\r\n                                            )\r\n                                        })\r\n                                    }   \r\n                                </ListGroup>\r\n                                {\r\n                                    this.state.queryItems && this.state.queryItems.length <= 0 &&\r\n                                        <h6>\r\n                                            { getLocalizedString(this.state.dotaStrings, \"DOTA_Shop_Search_No_Results\") }\r\n                                        </h6>\r\n                                }\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                    {/* Regular view */}\r\n                    {\r\n                        !this.state.queryItems && \r\n                            <div>\r\n                                <Tabs defaultActiveKey=\"basic\" transition={false} id=\"shop-tabs\">\r\n                                    <Tab eventKey=\"basic\" title={<TabHeading text={getLocalizedString(this.state.dotaStrings, \"DOTA_Shop_Category_Basics\")} />}>\r\n                                        <div className=\"d-flex flex-wrap\">\r\n                                            {\r\n                                                this.state.basicItems && this.state.basicItems.map((item) => {\r\n                                                    return (\r\n                                                        <ItemIcon \r\n                                                            key={item.item.ID}\r\n                                                            itemName={item.name}\r\n                                                            onClick={this.onShopItemSelected} \r\n                                                            scale={scale} />\r\n                                                    )\r\n                                                })\r\n                                            }\r\n                                        </div>\r\n                                    </Tab>\r\n                                    <Tab eventKey=\"upgrades\" title={<TabHeading text={getLocalizedString(this.state.dotaStrings, \"DOTA_Shop_Category_Upgrades\")} />}>\r\n                                        <div className=\"d-flex flex-wrap\">\r\n                                            {\r\n                                                this.state.upgradesItems && this.state.upgradesItems.map((item) => {\r\n                                                    return (\r\n                                                        <ItemIcon \r\n                                                            key={item.item.ID}\r\n                                                            itemName={item.name}\r\n                                                            onClick={this.onShopItemSelected} \r\n                                                            scale={scale} />\r\n                                                    );\r\n                                                })\r\n                                            }\r\n                                        </div>\r\n                                    </Tab>\r\n                                </Tabs>\r\n                            </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ItemSelector;","/// All Disassemble rules of an item\r\nexport const EDisassembleRule = {\r\n    ALWAYS: \"DOTA_ITEM_DISASSEMBLE_ALWAYS\",\r\n    NEVER: \"DOTA_ITEM_DISASSEMBLE_NEVER\",\r\n};\r\n\r\n/// All ItemQuality properties on ItemInfo's\r\nexport const EItemQuality = {\r\n    SECRET_SHOP: \"secret_shop\",\r\n    COMPONENT: \"component\",\r\n};","import React, { Component } from 'react';\r\n\r\nimport {\r\n    getItemInfoFromName, \r\n    convertItemDescToHtml,\r\n    getItemStatistics,\r\n    isDissassembleRule\r\n} from \"../../utility/dataHelperItems\";\r\nimport { \r\n    getLocalizedString\r\n} from '../../utility/data-helpers/language';\r\nimport { calculateItemSellCost } from \"../../utility/calculate\";\r\nimport {\r\n    EDisassembleRule, EItemQuality\r\n} from \"../../enums/items\";\r\n\r\nimport \"./ItemInfoTooltip.css\";\r\nimport { getItemIcon } from '../../utility/spriteHelper';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faHome, faCampground } from '@fortawesome/free-solid-svg-icons';\r\n\r\nfunction replaceItemStatLocalizeString (localizeString, value) {\r\n    // If generic one tha contains $value, split and insert value\r\n    if(localizeString.includes(\"$\")) {\r\n        let split = localizeString.split('$');\r\n        split.splice(1, 0, value);\r\n        return split.join(\" \");\r\n    } \r\n    // If contains %, arrange it correctly\r\n    else if (localizeString.includes(\"%\")) {\r\n        return localizeString.replace(\"%+\", `+ ${value}% `);\r\n    }\r\n    /// If negative value\r\n    else if (localizeString.includes(\"-\")) {\r\n        return localizeString.replace(\"-\", `- ${Math.abs(value)} `);\r\n    }\r\n    return localizeString;\r\n}\r\n\r\nclass ItemInfoTooltip extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            itemName: props.itemName,\r\n            dotaStrings: props.dotaStrings,\r\n            abilityStrings: props.abilityStrings,\r\n\r\n            itemInfo: getItemInfoFromName(props.itemName),  \r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                itemName: this.props.itemName,\r\n                dotaStrings: this.props.dotaStrings,\r\n                abilityStrings: this.props.abilityStrings,\r\n                itemInfo: getItemInfoFromName(this.props.itemName),  \r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let scale = 0.7;\r\n        let width = \"88px\";\r\n        let height = \"64px\";\r\n        let goldIconSize = 20;\r\n\r\n        let itemStats = getItemStatistics(this.state.itemInfo);\r\n        let loreString = getLocalizedString(this.state.abilityStrings, `DOTA_Tooltip_ability_${this.state.itemName}_Lore`);\r\n        /// Get localized string and filter it to correct html\r\n        let descString = getLocalizedString(this.state.abilityStrings, `DOTA_Tooltip_ability_${this.state.itemName}_Description`);\r\n        let descFiltered = convertItemDescToHtml(descString, this.state.itemName, this.state.itemInfo);\r\n        return (\r\n            <div className=\"item-tooltip\">\r\n                <div className=\"d-flex p-1\">\r\n                    <div className=\"m-2\" style={{ width: `calc(${width} * ${scale})`, height: `calc(${height} * ${scale})` }}>\r\n                        {  \r\n                            getItemIcon(this.state.itemName, width, height, 0.7) \r\n                        }\r\n                    </div>\r\n                    <div>\r\n                        <h4>\r\n                            { getLocalizedString(this.state.abilityStrings, `DOTA_Tooltip_Ability_${this.state.itemName}`) }\r\n                        </h4>\r\n                        {\r\n                            //If has an item cost and is more than 0\r\n                            this.state.itemInfo?.ItemCost && this.state.itemInfo?.ItemCost > 0 &&\r\n                            <div className=\"d-flex\">\r\n                                {\r\n                                    this.state.itemInfo?.ItemQuality &&\r\n                                        <FontAwesomeIcon icon={this.state.itemInfo?.ItemQuality == EItemQuality.SECRET_SHOP ? faCampground : faHome } className=\"align-item-center\" />\r\n                                }\r\n                                <img \r\n                                    className=\"mx-1\"\r\n                                    src={process.env.PUBLIC_URL + \"/images/dota2/gold_icon_ui.png\"} \r\n                                    height={goldIconSize}\r\n                                    width={goldIconSize} />\r\n                                <h6 className=\"gold-amount\">\r\n                                    { parseInt(this.state.itemInfo?.ItemCost) }\r\n                                </h6>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <div className=\"item-content p-2\">\r\n                    {/* item stat info */}\r\n                    {\r\n                        itemStats &&\r\n                            <div className=\"pb-1\">\r\n                                { \r\n                                    itemStats.map((value) => {\r\n                                        /// attempt to get localized string and display\r\n                                        let string = getLocalizedString(this.state.abilityStrings, `DOTA_Tooltip_ability_${this.state.itemName}_${value.key}`);\r\n                                        if (string) {\r\n                                            /// Check if item stat is a generic one that can be applied to most items and replace variable with localized string\r\n                                            let genericKeys = [\r\n                                                \"health\", \"mana\", \"armor\", \"damage\", \"str\", \"int\", \"agi\", \"all\", \"attack\", \"hp_regen\",\r\n                                                \"mana_regen\", \"spell_amp\", \"move_speed\", \"evasion\", \"spell_resist\", \"selected_attrib\",\r\n                                                \"attack_range\", \"attack_range_melee\", \"cast_range\", \"status_resist\"\r\n                                            ];\r\n                                            // split and use variable to compare\r\n                                            let splitCompare = string.split(\"$\")[1];\r\n                                            for (let key of genericKeys) {\r\n                                                if (splitCompare === key) {\r\n                                                    /// get localized generic and replace variable in existing string\r\n                                                    let localized = getLocalizedString(this.state.abilityStrings, `dota_ability_variable_${key}`);\r\n                                                    string = string.replace(key.toString(), localized);\r\n                                                    break;\r\n                                                }\r\n                                            }\r\n                                            \r\n                                            return (\r\n                                                <div key={value.key} dangerouslySetInnerHTML={{ __html: replaceItemStatLocalizeString(string, value.value) }}>\r\n                                                </div>\r\n                                            );\r\n                                        }\r\n                                    })\r\n                                }\r\n                            </div>\r\n                    }\r\n\r\n                    {/* abilities */}\r\n                    {\r\n                        descString && descString != \"?\" &&\r\n                            <div className=\"p-1\">\r\n                                { descFiltered }\r\n                            </div>\r\n                    }\r\n\r\n                    {/* lore */}\r\n                    {\r\n                        loreString && loreString != \"?\" &&   \r\n                            <div className=\"p-1 m-1 lore\">\r\n                                { loreString }\r\n                            </div>\r\n                    }\r\n\r\n                    {/* sell price */}\r\n                    {\r\n                        this.state.itemInfo?.ItemCost && !this.state.itemInfo?.ItemIsNeutralDrop &&\r\n                            <div className=\"px-1\"> \r\n                                {\r\n                                    getLocalizedString(this.state.dotaStrings, \"DOTA_Item_Tooltip_Sell_Price\")\r\n                                    .replace(\"%s1\", calculateItemSellCost(this.state.itemInfo))\r\n                                }\r\n                            </div>\r\n                    }\r\n\r\n                    {/* dissassemble */}\r\n                    {\r\n                        isDissassembleRule(this.state.itemInfo, EDisassembleRule.ALWAYS) && \r\n                            <div className=\"px-1\">\r\n                                { getLocalizedString(this.state.dotaStrings, \"DOTA_Item_Tooltip_Disassemble\") }\r\n                            </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ItemInfoTooltip;","import React, { Component } from 'react';\r\nimport Popup from 'reactjs-popup';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { \r\n    faInfo, \r\n    faChevronUp,\r\n    faChevronDown\r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport {\r\n    Button,\r\n    Form\r\n} from \"react-bootstrap\";\r\n\r\nimport ItemSelector from \"./ItemSelector\";\r\n\r\nimport \"../../css/dota_hero_icons_big.css\";\r\nimport ItemInfoTooltip from './ItemInfoTooltip';\r\n\r\nimport {\r\n    getItemIcon\r\n} from \"../../utility/spriteHelper\"\r\nimport { \r\n    tryGetItemInfoValue, \r\n    getItemInfoFromName,\r\n    itemRequiresCharges\r\n} from '../../utility/dataHelperItems';\r\n\r\n\r\n/// Single item that contains a popup to change the item\r\nclass Item extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            item: props.item,\r\n            slot: props.slot, \r\n            isBackpack: props.isBackpack,\r\n\r\n            onItemChanged: props.onItemChanged,\r\n            onItemExtraChanged: props.onItemExtraChanged,\r\n\r\n            dotaStrings: props.dotaStrings,\r\n            abilityStrings: props.abilityStrings,\r\n\r\n            itemExtra: { },\r\n\r\n            itemSelectorOpen: false,\r\n            itemTooltipOpen: false,\r\n        };\r\n\r\n        //console.log(`slot: ${this.state.slot} - item: ${this.state.item}`);\r\n        this.onSelectedItem = this.onSelectedItem.bind(this);\r\n        this.onBloodstoneChargesChanged = this.onBloodstoneChargesChanged.bind(this);\r\n        this.setCharges = this.setCharges.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.state.item === \"item_bloodstone\") {\r\n            /// Set inital charges of bloodstone\r\n            let itemInfo = getItemInfoFromName(this.state.item);\r\n            this.setState({\r\n                itemExtra: {\r\n                    ...this.state.itemExtra,\r\n                    charges: itemInfo?.ItemInitialCharges ?? 0,\r\n                },\r\n            }, () => {\r\n                /// Update state to new init value\r\n                this.setCharges(this.state.itemExtra.charges);\r\n            });\r\n        }\r\n    }\r\n\r\n    onSelectedItem (item) {\r\n        this.setState({\r\n            itemSelectorOpen: false,\r\n        });\r\n        \r\n        this.state.onItemChanged({ \r\n            slot: this.state.slot, \r\n            item: item,\r\n            extra: this.state.itemExtra,\r\n            isBackpack: this.state.isBackpack ? true : false,\r\n        });\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.item !== this.props.item) {\r\n            this.setState({ item: this.props.item, });\r\n        }\r\n\r\n        if (prevProps.slot !== this.props.slot) {\r\n            this.setState({ slot: this.props.slot });\r\n        }\r\n\r\n        if (prevProps.isBackpack !== this.props.isBackpack) {\r\n            this.setState({ isBackpack: this.props.isBackpack });\r\n        }\r\n\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ abilityStrings: this.props.abilityStrings });\r\n        }\r\n\r\n        if (prevProps.dotaStrings !== this.props.dotaStrings) {\r\n            this.setState({ dotaStrings: this.props.dotaStrings });\r\n        }\r\n    }\r\n\r\n    onBloodstoneChargesChanged (e) {\r\n        let newVal = parseInt(e.target.value);\r\n        this.setCharges(newVal);\r\n    }\r\n\r\n    setCharges(newChargeAmt) {\r\n        // If null or not exist, set to 0\r\n        if (!newChargeAmt) {\r\n            newChargeAmt = 0;\r\n        }\r\n\r\n        // Value must be more than 0 and less than 999\r\n        if (newChargeAmt < 0) {\r\n            newChargeAmt = 0;\r\n        } else if (newChargeAmt > 999) {\r\n            newChargeAmt = 999;\r\n        }\r\n        \r\n        this.setState({\r\n            itemExtra: {\r\n                ...this.state.itemExtra,\r\n                charges: newChargeAmt,\r\n            },\r\n        }, () => {\r\n            this.state.onItemChanged({\r\n                slot: this.state.slot, \r\n                item: this.state.item,\r\n                extra: this.state.itemExtra,\r\n                isBackpack: this.state.isBackpack ? true : false,\r\n            });\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let scale = 0.7;\r\n        let width = \"88px\";\r\n        let height = \"64px\";\r\n        return (\r\n            // Relative to make positioning work on children\r\n            <div style={{ position:\"relative\" }}>\r\n                {\r\n                    // Hover popup for Item information tooltip\r\n                    this.state.item &&\r\n                        <Popup\r\n                            trigger={isOpen => (\r\n                                // Info icon on item to display tooltip\r\n                                <div\r\n                                    className=\"ml-2 mt-1\" \r\n                                    style={{ position:\"absolute\", zIndex: 1 }}>\r\n                                    <FontAwesomeIcon icon={faInfo} />\r\n                                </div>\r\n                            )}\r\n                            open={this.state.itemTooltipOpen}\r\n                            position=\"right center\"\r\n                            on=\"hover\"\r\n                            contentStyle={{ width: \"350px\", overflowY: \"auto\", padding: 0, border: 0 }}>\r\n                                <ItemInfoTooltip\r\n                                    itemName={this.state.item}\r\n                                    dotaStrings={this.state.dotaStrings}\r\n                                    abilityStrings={this.state.abilityStrings}\r\n                                    />\r\n                        </Popup>\r\n                }\r\n                {/* Item selector popup to allow for changing to new item */}\r\n                <Popup\r\n                    trigger={isOpen => (\r\n                        // Item icon\r\n                        <div className=\"m-1\">\r\n                            <div style={{ width: `calc(${width} * ${scale})`, height: `calc(${height} * ${scale})` }}>\r\n                                {  getItemIcon(this.state.item, width, height, 0.7) }\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                    closeOnDocumentClick \r\n                    open={this.state.itemSelectorOpen}\r\n                    position=\"right center\"\r\n                    on=\"click\"\r\n                    contentStyle={{ width: \"350px\", height: \"450px\", overflowY: \"auto\", padding: 0, border: 0  }}>\r\n                        <ItemSelector \r\n                            onSelectedItem={this.onSelectedItem}\r\n                            dotaStrings={this.state.dotaStrings}\r\n                            abilityStrings={this.state.abilityStrings} />\r\n                </Popup>\r\n                {\r\n                    // Charge counter UI for bloodstone or charge based items\r\n                    (this.state.item === \"item_bloodstone\" || itemRequiresCharges(this.state.item)) &&\r\n                    <div style={{ \r\n                        position: \"absolute\", \r\n                        zIndex: 1, \r\n                        width: `calc(${width} * ${scale})`, \r\n                        height: `calc(${height} * ${scale})`,\r\n                        top: `calc(${height} * ${scale} - 17px)`,\r\n                        left: `calc(${width} * ${scale} - 27px)`, \r\n                    }}>\r\n                        <Form.Control \r\n                            size=\"sm\" \r\n                            value={ this.state.itemExtra?.charges ?? 0 } \r\n                            onChange={this.onBloodstoneChargesChanged} \r\n                            style={{ \r\n                                width: \"30px\",\r\n                                height: \"20px\",\r\n                                padding: 0,\r\n                                textAlign: \"center\",\r\n                                background: \"rgba(0, 0, 0, 0.5)\",\r\n                                border: 0,\r\n                                color: \"white\"\r\n                            }} />\r\n                    </div>\r\n                }\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default Item;","import React, { Component } from 'react';\r\nimport {\r\n    Button,\r\n    Form\r\n} from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faMinus } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport { itemNameToElement } from \"../../utils\";\r\nimport {\r\n    getAllNeutrals\r\n} from \"../../utility/dataHelperItems\";\r\n\r\nimport \"./NeutralItemSelector.css\";\r\nimport { getItemIcon } from '../../utility/spriteHelper';\r\n\r\nclass NeutralItemSelector extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let allNeutrals = getAllNeutrals();\r\n        this.state = {\r\n            allNeutrals: allNeutrals,\r\n            queryNeutrals: allNeutrals,\r\n\r\n            iconScale: 0.5,\r\n            onNewNeutralSelected: props.onNeutralSelected,\r\n        };\r\n\r\n        this.onNeutralSelected = this.onNeutralSelected.bind(this);\r\n        this.onSearchChanged = this.onSearchChanged.bind(this);\r\n    }\r\n\r\n    onNeutralSelected(e) {\r\n        let neutral = e.target.parentElement.dataset.neutral;\r\n        this.state.onNewNeutralSelected({ item: neutral });\r\n    }\r\n\r\n    onSearchChanged (e) {\r\n        let query = e.target.value;\r\n        let filteredNeutrals = null;\r\n        if (query) {\r\n            filteredNeutrals = this.state.allNeutrals.filter((neutral, index) => {\r\n                let matchAmt = neutral.item.indexOf(query.toLowerCase());\r\n                if (matchAmt !== -1) {\r\n                    return true;\r\n                }\r\n                return false; \r\n            });\r\n        }\r\n\r\n        /// If no query, show all neutrals\r\n        this.setState({\r\n            queryNeutrals: filteredNeutrals,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"neutral-item-card\" style={{ color: \"black\" }}>\r\n                <div className=\"neutral-item-card header d-flex p-2\">\r\n                    <div>\r\n                        <Form.Control type=\"text\" placeholder=\"Search...\" onChange={this.onSearchChanged}/>\r\n                    </div>\r\n                    <Button className=\"ml-auto\" variant=\"outline-danger\" onClick={this.onNeutralSelected} data-neutral={null}>\r\n                        <FontAwesomeIcon icon={faMinus} data-neutral={null} />\r\n                    </Button>\r\n                </div>\r\n                <div className=\"neutral-item-card content p-2\">\r\n                    <div className=\"d-flex flex-wrap\">\r\n                        {\r\n                            this.state.queryNeutrals && this.state.queryNeutrals.map((itemInfo, index) => {\r\n                                return ( \r\n                                    <div \r\n                                        className=\"m-2\" \r\n                                        key={ `${itemInfo.item}-${index}` } \r\n                                        onClick={this.onNeutralSelected} \r\n                                        title={itemInfo.item}\r\n                                        data-neutral={itemInfo.item}\r\n                                        style={{ width: `calc(88px * ${this.state.iconScale})`, height: `calc(64px * ${this.state.iconScale})` }}>\r\n                                        { \r\n                                            getItemIcon(itemInfo.item, \"88px\", \"64px\", this.state.iconScale) \r\n                                        }\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n                        {\r\n                            !this.state.queryNeutrals && this.state.allNeutrals.map((itemInfo, index) => {\r\n                                return ( \r\n                                    <div \r\n                                        className=\"m-2\" \r\n                                        key={ `${itemInfo.item}-${index}`} \r\n                                        onClick={this.onNeutralSelected} \r\n                                        title={itemInfo.item}\r\n                                        data-neutral={itemInfo.item}\r\n                                        style={{ width: `calc(88px * ${this.state.iconScale})`, height: `calc(64px * ${this.state.iconScale})` }}>\r\n                                        { \r\n                                            getItemIcon(itemInfo.item, \"88px\", \"64px\", this.state.iconScale)\r\n                                        }\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NeutralItemSelector;","import Neutral from \"./Neutral\";\r\n\r\nexport default Neutral;","import React, { Component } from 'react';\r\nimport Popup from \"reactjs-popup\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faInfo } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport NeutralItemSelector from \"./NeutralItemSelector\";\r\nimport ItemInfoTooltip from '../ItemsBar/ItemInfoTooltip';\r\n\r\nimport { itemNameToElement } from \"../../utils\";\r\nimport { getItemIcon } from '../../utility/spriteHelper';\r\n\r\nclass Neutral extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            neutralItem: props.neutralItem,\r\n            onNewNeutralSelected: props.onNewNeutralSelected,\r\n            dotaStrings: props.dotaStrings,\r\n            abilityStrings: props.abilityStrings,\r\n\r\n            iconScale: 0.7,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate (prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                neutralItem: this.props.neutralItem,\r\n                dotaStrings: this.props.dotaStrings,\r\n                abilityStrings: this.props.abilityStrings,\r\n                onNewNeutralSelected: this.props.onNewNeutralSelected,\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {\r\n                    this.state.neutralItem && this.state.neutralItem.item &&\r\n                        <Popup\r\n                            trigger={isOpen => (\r\n                                <div\r\n                                    className=\"ml-2 mt-1\" \r\n                                    style={{ position:\"absolute\", zIndex: 1 }}>\r\n                                    <FontAwesomeIcon icon={faInfo} />\r\n                                </div>\r\n                            )}\r\n                            open={this.state.hoverOpen}\r\n                            position=\"right center\"\r\n                            on=\"hover\"\r\n                            contentStyle={{ width: \"350px\", overflowY: \"auto\", padding: 0, border: 0 }}>\r\n                                <ItemInfoTooltip\r\n                                    itemName={this.state.neutralItem.item}\r\n                                    dotaStrings={this.state.dotaStrings}\r\n                                    abilityStrings={this.state.abilityStrings}\r\n                                    />\r\n                        </Popup>\r\n                }\r\n                <Popup\r\n                    trigger={isOpen => {\r\n                        return getItemIcon(this.state.neutralItem.item, \"88px\", \"64px\", this.state.iconScale);\r\n                    }}\r\n                    position=\"right center\"\r\n                    contentStyle={{ width: \"325px\", overflowY: \"auto\", padding: 0, border: 0, }}>\r\n                    <NeutralItemSelector onNeutralSelected={this.state.onNewNeutralSelected} />\r\n                </Popup>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Neutral;","import React, { Component } from 'react';\r\nimport {\r\n    Row, \r\n    Col\r\n} from \"react-bootstrap\";\r\n\r\nimport { \r\n    getLocalizedString\r\n} from '../../utility/data-helpers/language';\r\n\r\nimport Item from \"./Item\";\r\nimport Neutral from \"../Neutral\";\r\n\r\nclass ItemsBar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            items: props.items,\r\n            backpack: props.backpack,\r\n            neutral: props.neutral,\r\n            iconScale: 0.7,\r\n\r\n            onNeutralChanged: props.onNeutralChanged,\r\n            onItemChanged: props.onItemChanged,\r\n\r\n            dotaStrings: props.dotaStrings,\r\n            abilityStrings: props.abilityStrings,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        //Update if previous props have changed\r\n        if (prevProps.items !== this.props.items) {\r\n            this.setState({\r\n                items: this.props.items,\r\n            });\r\n        }\r\n\r\n        if (prevProps.backpack !== this.props.backpack) {\r\n            this.setState({\r\n                backpack: this.props.backpack,\r\n            });\r\n        }\r\n\r\n        if (prevProps.neutral !== this.props.neutral) {\r\n            this.setState({\r\n                neutral: this.props.neutral,\r\n            });\r\n        }\r\n\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ abilityStrings: this.props.abilityStrings });\r\n        }\r\n        if (prevProps.dotaStrings !== this.props.dotaStrings) {\r\n            this.setState({ dotaStrings: this.props.dotaStrings });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        var itemsColWidth = 5;\r\n        var backpackColWidth = 5;\r\n        var neutralColWidth = 2;\r\n        return (\r\n            <div>\r\n                <Row>\r\n                    <Col md={itemsColWidth}>\r\n                        <h6>{ getLocalizedString(this.state.dotaStrings, \"DOTA_SHOP_ITEMS\") }</h6>\r\n                        <Row md={3} className=\"m-0 p-0\">\r\n                            {\r\n                                this.state.items && this.state.items.map((value) => {\r\n                                    return (\r\n                                        <Item \r\n                                            key={value.slot}\r\n                                            slot={value.slot}\r\n                                            item={value.item} \r\n                                            onItemChanged={this.state.onItemChanged}\r\n                                            onItemExtraChnaged={this.state.onItem}\r\n                                            dotaStrings={this.state.dotaStrings} \r\n                                            abilityStrings={this.state.abilityStrings} />\r\n                                    )\r\n                                })\r\n                            }\r\n                        </Row>\r\n                    </Col>\r\n                    <Col md={backpackColWidth}>\r\n                        <h6>{ getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_BackpackHintTitle\").toUpperCase() }</h6>\r\n                        <div className=\"d-flex flex-wrap\">\r\n                            {\r\n                                this.state.backpack && this.state.backpack.map((value) => {\r\n                                    return (\r\n                                        <Item\r\n                                            key={value.slot}\r\n                                            slot={value.slot}\r\n                                            item={value.item}\r\n\r\n                                            isBackpack={true}\r\n                                            onItemChanged={this.state.onItemChanged}\r\n                                            dotaStrings={this.state.dotaStrings}\r\n                                            abilityStrings={this.state.abilityStrings} />\r\n                                    )\r\n                                })\r\n                            }\r\n                        </div>\r\n                    </Col>\r\n                    <Col md={neutralColWidth}>\r\n                        <h6>{ getLocalizedString(this.state.dotaStrings, \"UI_NEUTRALS\") }</h6>\r\n                        {/* Neutral Item */}\r\n                        <div>\r\n                            <Neutral \r\n                                neutralItem={this.state.neutral} \r\n                                onNewNeutralSelected={this.state.onNeutralChanged}\r\n                                dotaStrings={this.state.dotaStrings}\r\n                                abilityStrings={this.state.abilityStrings} />\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ItemsBar;","import ItemsBar from \"./ItemsBar\";\r\n\r\nexport default ItemsBar;","import React, { Component } from 'react';\r\n\r\nimport { EAttributes } from \"../../enums/attributes.js\";\r\n\r\nimport \"./Attributes.css\";\r\nimport { getLocalizedString, replaceStringValue } from '../../utility/data-helpers/language.js';\r\nimport { calculateAttribute } from '../../utility/calculate.js';\r\n\r\nfunction Attribute(props) {\r\n    return (\r\n        <div className=\"d-flex my-2 align-items-center\">\r\n            <div className={props.isPrimaryAttribute ? \" primary-attribute\" : \"\"}>\r\n                <span className={'attribute ' + props.type} alt=\"attribute\" />\r\n            </div>\r\n            <div className=\"ml-2\">{props.value}</div>\r\n            {\r\n                props.additional && props.additional > 0 &&\r\n                <div   \r\n                    className=\"mx-1\" \r\n                    style={{ color: \"green\" }}>\r\n                    {\"+\" + props.additional}\r\n                </div>\r\n            }\r\n            <div\r\n                className=\"ml-3\"\r\n                style={{ fontSize: \"0.75rem\" }}>\r\n                {\r\n                    replaceStringValue(props.perLevelString, props.per)\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nclass Attributes extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            hero: props.hero,\r\n            level: props.heroLevel,\r\n            items: props.items,\r\n            talents: props.talents,\r\n            neutral: props.neutral,\r\n            abilities: props.abilities,\r\n\r\n            dotaStrings: props.dotaStrings,\r\n            abilityStrings: props.abilityStrings,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                hero: this.props.hero,\r\n                level: this.props.heroLevel,\r\n                items: this.props.items,\r\n                talents: this.props.talents,\r\n                neutral: this.props.neutral,\r\n                abilities: this.props.abilities,\r\n\r\n                dotaStrings: this.props.dotaStrings,\r\n                abilityStrings: this.props.abilityStrings,\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let strengthStats = calculateAttribute(EAttributes.ATTR_STRENGTH, this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents);\r\n        let agilityStats = calculateAttribute(EAttributes.ATTR_AGILITY, this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents);\r\n        let intStats = calculateAttribute(EAttributes.ATTR_INTELLIGENCE, this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents);\r\n        return (\r\n            <div>\r\n                <h5>{getLocalizedString(this.state.dotaStrings, \"DOTA_Tooltip_topbar_stats\")}</h5>\r\n                <h6>{getLocalizedString(this.state.dotaStrings, \"DOTA_Attributes\")}</h6>\r\n                <Attribute \r\n                    type=\"strength\" \r\n                    value={ strengthStats.attribute }\r\n                    additional= { strengthStats.additionalAttribute }\r\n                    per={ strengthStats.perLevel } \r\n                    isPrimaryAttribute={this.state.hero?.AttributePrimary === EAttributes.ATTR_STRENGTH}\r\n                    perLevelString={ getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_StrengthGain\") } />\r\n\r\n                <Attribute \r\n                    type=\"agility\"\r\n                    value={ agilityStats.attribute }\r\n                    additional= { agilityStats.additionalAttribute }\r\n                    per={ agilityStats.perLevel } \r\n                    isPrimaryAttribute={this.state.hero?.AttributePrimary === EAttributes.ATTR_AGILITY} \r\n                    perLevelString={ getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_AgilityGain\") } />\r\n\r\n                <Attribute \r\n                    type=\"intelligence\" \r\n                    value={ intStats.attribute }\r\n                    additional= { intStats.additionalAttribute }\r\n                    per={ intStats.perLevel } \r\n                    isPrimaryAttribute={this.state.hero?.AttributePrimary === EAttributes.ATTR_INTELLIGENCE} \r\n                    perLevelString={ getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_IntelligenceGain\") } />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Attributes;","import Attributes from \"./Attributes\";\r\n\r\nexport default Attributes;","import React, { Component } from 'react';\r\nimport {\r\n    Row, Col\r\n} from \"react-bootstrap\";\r\n\r\nimport {\r\n    calculateHealthRegen,\r\n    calculateManaRegen,\r\n    calculateMainArmor,\r\n    calculateTotalSpellAmp,\r\n    calculateStatusResist,\r\n    calculateMagicResist,\r\n    calculatePhysicalResist,\r\n    calculateEvasion,\r\n    calculateRightClickDamage,\r\n    calculateAttackTime,\r\n    calculateMoveSpeed,\r\n    calculateAttackRange\r\n} from \"../../utility/calculate\";\r\nimport { \r\n    getPrimaryAttributeStats\r\n} from '../../utility/dataHelperHero';\r\nimport {\r\n    getLocalizedString\r\n} from \"../../utility/data-helpers/language\";\r\n\r\nfunction StatArray(props) {\r\n    return (\r\n        <div style={{ backgroundColor: \"#171717\", color: \"white\", fontSize: \"0.8rem\" }} className=\"p-2 h-100\">\r\n            <h6 className=\"ml-auto\">{props.title}</h6>\r\n            {\r\n                props.stats &&\r\n                    props.stats.map((value) => {\r\n                        return (\r\n                        <Row \r\n                            key={value.name}\r\n                            className=\"mx-0\">\r\n                            <Col \r\n                                md={6}\r\n                                className=\"px-0\">\r\n                                {value.name}\r\n                            </Col>\r\n                            <Col \r\n                                md={6}\r\n                                className=\"px-0\">\r\n                                {value.value}\r\n                            </Col>\r\n                        </Row>\r\n                        );\r\n                    })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\n/// Gets the attack min/max and formats it for display in UI\r\nfunction formatAttackMinMax(hero, lvl, items, neutral, abilities, talents) {\r\n    let standardAtkDmg = calculateRightClickDamage(hero, lvl, items, neutral, abilities, talents);\r\n    \r\n    // Range string\r\n    //let dmgString = `${standardAtkDmg.min} - ${standardAtkDmg.max}`;\r\n    // Average damage inbetween range value\r\n    let dmgString = standardAtkDmg.min + ((standardAtkDmg.max - standardAtkDmg.min) / 2);\r\n    if (standardAtkDmg.additional) {\r\n        dmgString += \" \";\r\n        dmgString += `${ standardAtkDmg.additional >= 0 ? \"+\" : \"-\" } ${Math.abs(standardAtkDmg.additional)}`;\r\n    }\r\n    return dmgString;\r\n}\r\n\r\n/// Gets the atk time and formats it to display in UI\r\nfunction formatAttackTime(hero, lvl, items, neutral, abilities, talents) {\r\n    let attackInfo = calculateAttackTime(hero, lvl, items, neutral, abilities, talents);\r\n    return `${attackInfo.attackSpeed} (${attackInfo.attackTime} s)`;\r\n}\r\n\r\nfunction formatArmor (armorInfo) {\r\n    if (!armorInfo) {\r\n        return null;\r\n    }\r\n\r\n    let str = armorInfo.armor.toFixed(1);\r\n    if (armorInfo.additional) {\r\n        str += \" \";\r\n        str += `${armorInfo.additional > 0 ? \"+\" : \"-\"} ${Math.abs(armorInfo.additional)}`;\r\n    }\r\n\r\n    return str;\r\n}\r\n\r\nclass Statistics extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            hero: props.hero,\r\n            level: props.heroLevel,\r\n            talents: props.talents,\r\n            items: props.items,\r\n            neutral: props.neutral,\r\n            abilities: props.abilities,\r\n\r\n            dotaStrings: props.dotaStrings,\r\n            abilityStrings: props.abilityStrings,\r\n        };\r\n\r\n        this.updateStatistics = this.updateStatistics.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateStatistics();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.hero !== this.props.hero) {\r\n            this.setState({ \r\n                hero: this.props.hero \r\n            }, () => {\r\n                this.updateStatistics();\r\n            });\r\n        }\r\n        if (prevProps.items !== this.props.items) {\r\n            this.setState({ \r\n                items: this.props.items \r\n            }, () => {\r\n                this.updateStatistics();\r\n            });\r\n        }\r\n        if (prevProps.neutral !== this.props.neutral) {\r\n            this.setState({ \r\n                neutral: this.props.neutral, \r\n            }, () => {\r\n                this.updateStatistics();\r\n            });\r\n        }\r\n        if (prevProps.talents !== this.props.talents) {\r\n            this.setState({ \r\n                talents: this.props.talents \r\n            }, () => {\r\n                this.updateStatistics();\r\n            });\r\n        }\r\n        if (prevProps.abilities !== this.props.abilities) {\r\n            this.setState({ \r\n                abilities: this.props.abilities \r\n            }, () => {\r\n                this.updateStatistics();\r\n            });\r\n        }\r\n        if (prevProps.heroLevel !== this.props.heroLevel) {\r\n            this.setState({ \r\n                level: this.props.heroLevel \r\n            }, () => {\r\n                this.updateStatistics();\r\n            });\r\n        }\r\n        if (prevProps.dotaStrings !== this.props.dotaStrings) {\r\n            this.setState({ dotaStrings: this.props.dotaStrings });\r\n        }\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ abilityStrings: this.props.abilityStrings });\r\n        }\r\n    }\r\n\r\n    updateStatistics() {\r\n        let armorInfo =  calculateMainArmor(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents);\r\n        let physResist = calculatePhysicalResist(armorInfo.armor + armorInfo.additional);\r\n        this.setState({\r\n            // Attack\r\n            attackSpeed: formatAttackTime(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n            damage: formatAttackMinMax(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n            attackRange: calculateAttackRange(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n            moveSpeed: calculateMoveSpeed(this.state.hero, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n            spellAmp: calculateTotalSpellAmp(this.state.talents, this.state.items, this.state.neutral),\r\n            manaRegen: calculateManaRegen(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n\r\n            // Defence\r\n            armor: formatArmor(armorInfo),\r\n            physicalResist: physResist,\r\n            magicResist: calculateMagicResist(this.state.items, this.state.neutral, this.state.abilities),\r\n            statusResist: calculateStatusResist(this.state.items, this.state.neutral),\r\n            evasion: calculateEvasion(this.state.items, this.state.neutrak, this.state.abilities , this.state.talents),\r\n            healthRegen: calculateHealthRegen(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Row>\r\n                {\r\n                    this.state.hero &&\r\n                    <Col md={6}>\r\n                        <StatArray title={getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_Attack\")} stats={[\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_AttackSpeed\"),\r\n                                value: this.state.attackSpeed\r\n                            },\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_Damage\"), \r\n                                value: this.state.damage \r\n                            },\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_AttackRange\"), \r\n                                value: this.state.attackRange \r\n                            },\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_MoveSpeed\"), \r\n                                value: this.state.moveSpeed \r\n                            },\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_SpellAmp\"), \r\n                                value: this.state.spellAmp + \"%\" \r\n                            },\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_ManaRegenDetail\"), \r\n                                value: this.state.manaRegen \r\n                            },\r\n                        ]} />\r\n                    </Col>\r\n                }   \r\n                {\r\n                    this.state.hero &&\r\n                    <Col md={6}>\r\n                        <StatArray title={getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_Defense\")} stats={[\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_Armor\"), \r\n                                value: this.state.armor,\r\n                            },\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_PhysicalResist\"), \r\n                                value: this.state.physicalResist + \"%\" \r\n                            },\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_MagicResist\"), \r\n                                value: this.state.magicResist + \"%\" \r\n                            },\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_StatusResist\"), \r\n                                value: this.state.statusResist + \"%\" \r\n                            },\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_Evasion\"), \r\n                                value: this.state.evasion + \"%\" \r\n                            },\r\n                            { \r\n                                name: getLocalizedString(this.state.dotaStrings, \"DOTA_HUD_HealthRegenDetail\"), \r\n                                value: this.state.healthRegen \r\n                            },\r\n                        ]}/>\r\n                    </Col>\r\n                }\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Statistics;","import Statistics from \"./Statistics\";\r\n\r\nexport default Statistics;","import React, { Component } from 'react';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport {  faSearch } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { getLocalizedString } from '../../utility/data-helpers/language';\r\nimport { getAllPlayableHeroes } from '../../utility/dataHelperHero';\r\n\r\nimport \"./HeroSelector.css\";\r\n\r\nclass HeroSelector extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let selectableHeroes = getAllPlayableHeroes();\r\n        this.state = {\r\n            filteredHeroes: selectableHeroes,\r\n            allHeroes: selectableHeroes,\r\n\r\n            onSelectedHero: props.onSelectedHero,\r\n            dotaStrings: props.dotaStrings,\r\n        };\r\n\r\n        this.onSearchChanged = this.onSearchChanged.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                heroes: this.props.heroes,\r\n                filteredHeroes: this.props.heroes,\r\n                onSelectedHero: this.props.onSelectedHero,\r\n                dotaStrings: this.props.dotaStrings,\r\n            });\r\n        }\r\n    }\r\n\r\n    onSearchChanged(e) {\r\n        let searchTerm = e.target.value;\r\n        let filteredHeroes = this.state.allHeroes;\r\n        if (searchTerm) {\r\n            filteredHeroes = this.state.allHeroes.filter((hero) => {\r\n                let localizedHeroName = getLocalizedString(this.state.dotaStrings, hero.name)?.toLowerCase();\r\n                return localizedHeroName && localizedHeroName.indexOf(searchTerm.toLowerCase()) !== -1;\r\n            });\r\n        }\r\n\r\n        this.setState({\r\n            filteredHeroes: filteredHeroes,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let iconScale = 0.5;\r\n        return (\r\n            <div className=\"hero-card\">\r\n                <div className=\"hero-card header d-flex p-2\">\r\n                    <div className=\"d-flex\">\r\n                        <h5 className=\"my-auto ml-2\">{ getLocalizedString(this.state.dotaStrings, \"DOTA_Hero_Selection_Intro_Header\") }</h5>\r\n                        <div className=\"ml-auto p-1\">\r\n                            <Form.Control type=\"text\" placeholder=\"Search...\" onChange={this.onSearchChanged} />\r\n                        </div>\r\n                        <FontAwesomeIcon icon={faSearch} className=\"my-auto mr-2\" />\r\n                    </div>\r\n                </div>\r\n                <div className=\"hero-card content p-2\">\r\n                    <div className=\"d-flex flex-wrap\">\r\n                        {\r\n                            this.state.filteredHeroes && this.state.filteredHeroes.map((value) => {\r\n                                return (\r\n                                    <div\r\n                                        key={value.name}  \r\n                                        onClick={this.state.onSelectedHero}\r\n                                        className=\"m-1\"\r\n                                        style={{ \r\n                                            height: `calc(72px * ${iconScale})`, \r\n                                            width: `calc(128px * ${iconScale})` \r\n                                        }}>\r\n                                        <span \r\n                                            className={`hero-icon-big hero-icon-big-${value.name}_png`} \r\n                                            style={{ transformOrigin: \"top left\", transform: `scale(${iconScale}, ${iconScale})` }}\r\n                                            data-heroname={value.displayName}\r\n                                            data-hero={value.name} />\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n                        {\r\n                            this.state.filteredHeroes && this.state.filteredHeroes.length <= 0 &&\r\n                                <h6 className=\"p-1\">\r\n                                    { getLocalizedString(this.state.dotaStrings, \"DOTA_Shop_Search_No_Results\") }\r\n                                </h6>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HeroSelector;","import ChangeHeroBtn from \"./ChangeHeroBtn\";\r\n\r\nexport default ChangeHeroBtn;","import React, { Component } from 'react';\r\nimport {\r\n    Button\r\n} from \"react-bootstrap\";\r\nimport Popup from \"reactjs-popup\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport HeroSelector from \"./HeroSelector\";\r\n\r\nclass ChangeHeroBtn extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            open: false,\r\n\r\n            onSelectHero: props.onSelectHero,\r\n            dotaStrings: props.dotaStrings,\r\n        };\r\n\r\n        this.onToggleHeroSelect = this.onToggleHeroSelect.bind(this);\r\n        this.onSelectHero = this.onSelectHero.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                dotaStrings: this.props.dotaStrings,\r\n                onSelectHero: this.props.onSelectHero,\r\n            });\r\n        }\r\n    }\r\n\r\n    onToggleHeroSelect(e) {\r\n        this.setState({\r\n            open: !this.state.open,\r\n        });\r\n    }\r\n\r\n    onSelectHero (e) {\r\n        this.setState({\r\n            open: !this.state.open,\r\n        });\r\n        \r\n        let hero = e.target.dataset.hero;\r\n        this.state.onSelectHero(hero);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Popup \r\n                    trigger={isOpen => (\r\n                        <Button onClick={this.onToggleHeroSelect}><FontAwesomeIcon icon={faPencilAlt} /></Button>\r\n                    )} \r\n                    position=\"right top\"\r\n                    contentStyle={{ width: \"750px\", padding: 0, border: 0 }}>\r\n                     <HeroSelector \r\n                        onSelectedHero={this.onSelectHero} \r\n                        dotaStrings={this.state.dotaStrings}\r\n                         />\r\n                </Popup>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChangeHeroBtn;","import React, { Component } from 'react';\r\nimport {\r\n    Row,\r\n    Col\r\n} from \"react-bootstrap\";\r\n\r\nimport {\r\n    getTalentInfoFromName,\r\n} from \"../../utility/dataHelperTalents\";\r\nimport { \r\n    tryGetTalentLocalizedString,\r\n    replaceStringValue,\r\n    getLocalizedString\r\n} from \"../../utility/data-helpers/language\";\r\n\r\nfunction isTalentSelected (selectedTalents, talent) {\r\n    return selectedTalents?.includes(talent);\r\n}\r\n\r\nclass TalentRow extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            leftTalent: props.leftTalent,\r\n            rightTalent: props.rightTalent,\r\n            level: props.lvl,\r\n\r\n            selectedTalents: this.props.selectedTalents,\r\n            onTalentSelected: this.props.onTalentSelected,\r\n            onTalentUnselected: this.props.onTalentUnselected,\r\n\r\n            abilityStrings: this.props.abilityStrings,\r\n        };\r\n\r\n        this.onSelectTalent = this.onSelectTalent.bind(this);\r\n        this.getTalentDisplayName = this.getTalentDisplayName.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.leftTalent !== this.props.leftTalent) {\r\n            this.setState({ leftTalent: this.props.leftTalent });\r\n        }\r\n\r\n        if(prevProps.rightTalent !== this.props.rightTalent) {\r\n            this.setState({ rightTalent: this.props.rightTalent });\r\n        }\r\n\r\n        if (prevProps.lvl !== this.props.lvl) {\r\n            this.setState({ level: this.props.lvl });\r\n        }\r\n\r\n        if (prevProps.selectedTalents !== this.props.selectedTalents) {\r\n            this.setState({ selectedTalents: this.props.selectedTalents });\r\n        }\r\n\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ abilityStrings: this.props.abilityStrings });\r\n        }\r\n    }\r\n\r\n    onSelectTalent(e) {\r\n        var selectedTalent = e.target.dataset.talent;\r\n        // if clicked twice, unselect the talent\r\n        if (isTalentSelected(this.state.selectedTalents, selectedTalent)) {\r\n            this.state.onTalentUnselected(selectedTalent);\r\n        } else {\r\n            this.state.onTalentSelected(selectedTalent);\r\n        }\r\n    }\r\n\r\n    getTalentDisplayName (talent) {\r\n        let talentInfo = getTalentInfoFromName(talent);\r\n        if (!talentInfo) {\r\n            return \"Unknown Talent\";\r\n        }\r\n\r\n        let displayName = getLocalizedString(this.state.abilityStrings, \"DOTA_Tooltip_ability_\" + talent); \r\n        if (displayName && talentInfo && talentInfo.AbilitySpecial) {\r\n            displayName = replaceStringValue(displayName, talentInfo.AbilitySpecial[0].value)\r\n        }\r\n\r\n        return displayName;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Row className=\"my-1 py-2\" style={{ backgroundColor: \"rgb(24, 30, 33)\"}}>\r\n                {/* Left Talent */}\r\n                <Col \r\n                    md={5}\r\n                    className=\"text-center\"\r\n                    style={{ color: isTalentSelected(this.state.selectedTalents, this.state.leftTalent) ? \"#c4a66f\" : \"white\" }}>\r\n                    <div onClick={this.onSelectTalent} data-talent={this.state.leftTalent}>\r\n                        {\r\n                            this.getTalentDisplayName(this.state.leftTalent)\r\n                        }\r\n                    </div>\r\n                </Col>\r\n                {/* Talent Level */}\r\n                <Col md={2}>\r\n                    <h6 \r\n                        className=\"text-center\"\r\n                        style={{ color: \"#e7d291\"}}>\r\n                        {this.state.level}\r\n                    </h6>\r\n                </Col>\r\n                {/* Right Talent */}\r\n                <Col \r\n                    md={5}\r\n                    className=\"text-center\"\r\n                    style={{ color: isTalentSelected(this.state.selectedTalents, this.state.rightTalent) ? \"#c4a66f\" : \"white\" }}>\r\n                    <div onClick={this.onSelectTalent} data-talent={this.state.rightTalent}>\r\n                        {\r\n                            this.getTalentDisplayName(this.state.rightTalent)\r\n                        }\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TalentRow;\r\n","import TalentTree from \"./TalentTree\";\r\n\r\nexport default TalentTree;","import React, { Component } from 'react';\r\n\r\nimport TalentRow from \"./TalentRow\";\r\nimport { getLocalizedString } from '../../utility/data-helpers/language';\r\n\r\nclass TalentTree extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            talents: this.props.talents,\r\n            selectedTalents: this.props.selectedTalents,\r\n\r\n            onTalentSelected: this.props.onTalentSelected,\r\n            onTalentUnselected: this.props.onTalentUnselected,\r\n\r\n            dotaStrings: this.props.dotaStrings,\r\n            abilityStrings: this.props.abilityStrings,\r\n        };\r\n        this.findSelectedTalent = this.findSelectedTalent.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(prevProps.talents !== this.props.talents) {\r\n            this.setState({ talents: this.props.talents });\r\n        }\r\n        if (prevProps.selectedTalents !== this.props.selectedTalents) {\r\n            this.setState({ selectedTalents: this.props.selectedTalents });\r\n        }\r\n        if (prevProps.abilityStrings !== this.props.abilityStrings) {\r\n            this.setState({ abilityStrings: this.props.abilityStrings });\r\n        }\r\n        if (prevProps.dotaStrings !== this.props.dotaStrings) {\r\n            this.setState({ dotaStrings: this.props.dotaStrings });\r\n        }\r\n    }\r\n\r\n    findSelectedTalent(leftTalent, rightTalent) {\r\n        if (this.state.selectedTalents && this.state.selectedTalents.length > 0) {\r\n            var matchTalent = this.state.selectedTalents.find((val) => {\r\n                if (val.name === leftTalent) {\r\n                    return leftTalent;\r\n                } else if (val.name === rightTalent) {\r\n                    return rightTalent;\r\n                }\r\n                return null;\r\n            });\r\n            return matchTalent?.name;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h6 className=\"text-center\">{ getLocalizedString(this.state.dotaStrings, \"DOTA_StatBranch_TooltipTitle\") }</h6>\r\n                {/* <img src=\"/images/dota2/talent.jpg\" alt=\"talent tree\" /> */}\r\n                <div \r\n                    className=\"mr-2\"\r\n                    style={{ fontSize: \"0.8rem\" }}>\r\n                        {\r\n                            this.state.talents && this.state.talents.map((talentInfo) => {\r\n                                return <TalentRow \r\n                                                key={talentInfo.lvl}\r\n                                                lvl={talentInfo.lvl}\r\n                                                leftTalent={talentInfo.leftTalent} \r\n                                                rightTalent={talentInfo.rightTalent} \r\n                                                selectedTalents={this.state.selectedTalents}\r\n                                                onTalentSelected={this.state.onTalentSelected}\r\n                                                onTalentUnselected={this.state.onTalentUnselected} \r\n                                                \r\n                                                abilityStrings={this.state.abilityStrings} />\r\n                            })\r\n                        }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TalentTree;","import HealthManaBar from \"./HealthManaBar\";\r\n\r\nexport default HealthManaBar;","import React, { Component } from 'react';\r\n\r\nimport {\r\n    calculateHealth,\r\n    calculateMana,\r\n    calculateHealthRegen,\r\n    calculateManaRegen,\r\n} from \"../../utility/calculate\";\r\nimport { EAttributes } from \"../../enums/attributes\";\r\n\r\nimport \"./style.css\";\r\n\r\nclass HealthManaBar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            hero: props.hero,\r\n            level: props.heroLevel,\r\n            items: props.items,\r\n            talents: props.talents,\r\n            neutral: props.neutral,\r\n            abilities: props.abilities,\r\n\r\n            maxHealth: 0,\r\n            maxMana: 0,\r\n        }\r\n\r\n        this.updateBar = this.updateBar.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateBar();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                hero: this.props.hero,\r\n                level: this.props.heroLevel,\r\n                items: this.props.items,\r\n                talents: this.props.talents,\r\n                neutral: this.props.neutral,\r\n                abilities: this.props.abilities,\r\n\r\n                maxHealth: 0,\r\n                maxMana: 0,\r\n            }, () => this.updateBar());\r\n        }\r\n    }\r\n\r\n    updateBar() {\r\n        this.setState({\r\n            maxHealth: calculateHealth(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n            maxMana: calculateMana(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents),\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"bar health d-flex\">\r\n                    <h6 className=\"max-health-text my-auto mx-auto\">{this.state.maxHealth} / {this.state.maxHealth}</h6>\r\n                    <div className=\"health-bar-regen my-auto mr-1\">\r\n                        { \"+\" + calculateHealthRegen(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents) }\r\n                    </div>\r\n                </div>\r\n                <div className=\"bar mana d-flex\">\r\n                    <h6 className=\"max-mana-text my-auto mx-auto\">{this.state.maxMana} / {this.state.maxMana}</h6>\r\n                    <div className=\"mana-bar-regen my-auto mr-1\">\r\n                        { \"+\" + calculateManaRegen(this.state.hero, this.state.level, this.state.items, this.state.neutral, this.state.abilities, this.state.talents) }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HealthManaBar;","import React, { Component } from 'react';\r\nimport { \r\n    Button, \r\n    Form\r\n} from 'react-bootstrap';\r\nimport { getLocalizedString } from '../../utility/data-helpers/language';\r\n\r\nconst MAX_LEVEL = 30;\r\nconst MIN_LEVEL = 1;\r\n\r\nfunction ModifyBtn (props) {\r\n    return (\r\n        <Button \r\n            className=\"py-1\"\r\n            variant=\"outline-secondary\" \r\n            onClick={props.onClick}>\r\n            { props.text }\r\n        </Button>\r\n    );\r\n}\r\n\r\nclass LevelSelector extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            level: props.heroLevel,\r\n            onHeroLevelChanged: props.onHeroLevelChanged,\r\n            dotaStrings: props.dotaStrings,\r\n        };\r\n\r\n        this.onIncrementHeroLevel = this.onIncrementHeroLevel.bind(this);\r\n        this.onDecrementHeroLevel = this.onDecrementHeroLevel.bind(this);\r\n        this.onLvlInputChanged = this.onLvlInputChanged.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.heroLevel !== this.props.heroLevel) {\r\n            this.setState({\r\n                level: this.props.heroLevel,\r\n            });\r\n        }\r\n        if (prevProps.dotaStrings !== this.props.dotaStrings) {\r\n            this.setState({ dotaStrings: this.props.dotaStrings });\r\n        }\r\n    }\r\n\r\n    onIncrementHeroLevel() {\r\n        let newLevel = this.state.level;\r\n        newLevel += 1;\r\n\r\n        if (newLevel >= MAX_LEVEL) {\r\n            newLevel = MAX_LEVEL;\r\n        }\r\n\r\n        this.state.onHeroLevelChanged(newLevel);\r\n    }\r\n\r\n    onDecrementHeroLevel() {\r\n        let newLevel = this.state.level;\r\n        newLevel -= 1;\r\n\r\n        if (newLevel < MIN_LEVEL) {\r\n            newLevel = MIN_LEVEL;\r\n        }\r\n\r\n        this.state.onHeroLevelChanged(newLevel);\r\n    }\r\n\r\n    onLvlInputChanged(e) {\r\n        let lvl = parseInt(e.target.value);\r\n        if (lvl) {\r\n            if (lvl > MAX_LEVEL) {\r\n                lvl = MAX_LEVEL;\r\n            }\r\n            else if (lvl < MIN_LEVEL) {\r\n                lvl = MIN_LEVEL;\r\n            }\r\n        } else {\r\n            lvl = MIN_LEVEL;\r\n        }\r\n\r\n        this.state.onHeroLevelChanged(lvl);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"mx-5\">\r\n                <h6>{ getLocalizedString(this.state.dotaStrings, \"dota_stat_dropdown_level\") }</h6>\r\n                <div className=\"d-flex\">\r\n                    <ModifyBtn \r\n                        onClick={this.onDecrementHeroLevel} \r\n                        text=\"-\" />\r\n                    <Form.Control\r\n                        className=\"mx-3\" \r\n                        style={{ width: \"75px\" }}\r\n                        placeholder=\"lvl\" \r\n                        type=\"number\" \r\n                        value={this.state.level} \r\n                        onChange={this.onLvlInputChanged} />\r\n                    <ModifyBtn \r\n                        onClick={this.onIncrementHeroLevel} \r\n                        text=\"+\" />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LevelSelector;","import LevelSelector from \"./LevelSelector\";\r\n\r\nexport default LevelSelector;","import React, { Component } from 'react';\r\nimport {\r\n    Container,\r\n    Row,\r\n    Col,\r\n    Button,\r\n    Form,\r\n} from 'react-bootstrap';\r\nimport { connect } from \"react-redux\";\r\nimport copy from \"copy-to-clipboard\";\r\nimport { Base64 } from \"js-base64\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCopy, faFile, faChevronUp, faChevronDown, faShare } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport {\r\n    SELECTED_HERO,\r\n    SELECTED_ITEM,\r\n    SELECTED_NEUTRAL,\r\n    SELECTED_BACKPACK_ITEM,\r\n    SELECTED_TALENT,\r\n    UNSELECTED_TALENT,\r\n    NEW_HERO_LEVEL,\r\n    ENEMY_SELECTED_TALENT\r\n} from \"../../constants/actionTypes\";\r\n\r\nimport { \r\n    getLocalizedString\r\n} from '../../utility/data-helpers/language';\r\n\r\nimport Abilities from \"../Abilities\";\r\nimport ItemsBar from \"../ItemsBar\";\r\nimport Attributes from \"../Attributes\";\r\nimport Statistics from \"../Statistics\";\r\nimport ChangeHeroBtn from \"../ChangeHeroBtn\";\r\nimport TalentTree from \"../TalentTree\";\r\nimport HealthManaBar from \"../HealthManaBar\";\r\nimport LevelSelector from \"../LevelSelector\";\r\nimport EnemyHero from '../EnemyHero';\r\n\r\nimport \"../../css/dota_hero_icons.css\";\r\nimport \"../../css/dota_attributes.css\";\r\nimport \"../../css/dota_items.css\";\r\nimport \"../../css/dota_hero_icons_big.css\";\r\nimport \"./Calculator.css\";\r\nimport { Redirect, Link } from 'react-router-dom';\r\n\r\n\r\nclass Calculator extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            buildName: \"\",\r\n            buildCreator: \"\",\r\n            openBuildShare: false,\r\n            loadedFromParams: false,\r\n        };\r\n\r\n        this.onHeroSelected = this.onHeroSelected.bind(this);\r\n        this.onItemSelected = this.onItemSelected.bind(this);\r\n        this.onNeutralSelected = this.onNeutralSelected.bind(this);\r\n        this.onTalentSelected = this.onTalentSelected.bind(this);\r\n        this.onTalentUnselected = this.onTalentUnselected.bind(this);\r\n        this.onHeroLevelChanged = this.onHeroLevelChanged.bind(this);\r\n\r\n        this.onShareBuild = this.onShareBuild.bind(this);\r\n        this.onBuildNameChanged = this.onBuildNameChanged.bind(this);\r\n        this.onBuildCreatorChanged = this.onBuildCreatorChanged.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        /// Parse build data from url on start and set app state\r\n        if (this.props.location.search) {\r\n            let params = new URLSearchParams(this.props.location.search);\r\n            let buildData = params.get(\"build\");\r\n            if (buildData) {\r\n                let decoded = Base64.decode(buildData);\r\n                let buildObject = null;\r\n                try {\r\n                    buildObject = JSON.parse(decoded);\r\n                } catch(e) {\r\n                    console.error(\"Unable to parse build object\");\r\n                }\r\n\r\n                if (buildObject) {\r\n                    this.setState({\r\n                        buildCreator: buildObject.creator,\r\n                        buildName: buildObject.name,\r\n                        openBuildShare: true,\r\n                        loadedFromParams: true,\r\n                    });\r\n                    \r\n                    let build = buildObject.build;\r\n                    if (build?.selectedHeroName)\r\n                        this.props.dispatch({ type: SELECTED_HERO, value: build.selectedHeroName });\r\n                    if (build?.heroLevel)\r\n                        this.props.dispatch({ type: NEW_HERO_LEVEL, value: build.heroLevel });\r\n                    if (build?.selectedTalents) {\r\n                        for(let talent of  build.selectedTalents) {\r\n                            this.props.dispatch({ type: SELECTED_TALENT, value: talent });\r\n                        }\r\n                    }\r\n                    if (build?.items) {\r\n                        for (let item of build.items) {\r\n                            if (item.item) {\r\n                                this.props.dispatch({ type: SELECTED_ITEM, value: item });\r\n                            }\r\n                        }\r\n                    }\r\n                    if (build?.neutralItem) {\r\n                        this.props.dispatch({ type: SELECTED_NEUTRAL, value: build.neutralItem });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    onShareBuild() {\r\n        let buildObject = {\r\n            name: this.state.buildName ?? \"Unknown\",\r\n            creator: this.state.buildCreator ?? \"Unknown\",\r\n            build: {\r\n                selectedHeroName: this.props.selectedHeroName,\r\n                heroAbilities: this.props.heroAbilities,\r\n                heroTalents: this.props.heroTalents,\r\n                heroLevel: this.props.heroLevel,\r\n\r\n                items: this.props.items,\r\n                backpack: this.props.backpack,\r\n                neutralItem: this.props.neutralItem,\r\n                selectedTalents: this.props.selectedTalents,\r\n            },\r\n        };\r\n        let str = JSON.stringify(buildObject);\r\n        let encoded = Base64.encode(str);\r\n        // set clipboard\r\n        copy(`localhost:3000/#/app?build=${encoded}`);\r\n    }\r\n\r\n    onHeroSelected(heroName) {\r\n        console.log(`${SELECTED_HERO}: ${heroName}`);\r\n        this.props.dispatch({ type: SELECTED_HERO, value: heroName });\r\n    }\r\n\r\n    onItemSelected (item) {\r\n        if (item.isBackpack) \r\n        {\r\n            console.log(`${SELECTED_BACKPACK_ITEM}: Slot: ${item.slot} Item: ${item.item}`);\r\n            this.props.dispatch({ type: SELECTED_BACKPACK_ITEM, value: item });\r\n        }\r\n        else\r\n        {\r\n            console.log(`${SELECTED_ITEM}: Slot: ${item.slot} Item: ${item.item}`);\r\n            this.props.dispatch({ type: SELECTED_ITEM, value: item });\r\n        }\r\n    }\r\n\r\n    onNeutralSelected(neutralItem) {\r\n        console.log(`${SELECTED_NEUTRAL}: ${neutralItem.item}`);\r\n        this.props.dispatch({ type: SELECTED_NEUTRAL, value: neutralItem });\r\n    }\r\n\r\n    onTalentSelected (talent) {\r\n        console.log(`${SELECTED_TALENT}: ${talent}`);\r\n        this.props.dispatch({ type: SELECTED_TALENT, value: talent });\r\n    }\r\n\r\n    onTalentUnselected (talent) {\r\n        console.log(`${UNSELECTED_TALENT}: ${talent}`);\r\n        this.props.dispatch({ type: UNSELECTED_TALENT, value: talent });\r\n    }\r\n\r\n    onEnemyTalentSelected (enemy, talent) {\r\n        console.log(`${ENEMY_SELECTED_TALENT}: ${enemy}, ${talent}`);\r\n        this.props.dispatch({ type: ENEMY_SELECTED_TALENT, value: talent });\r\n    }\r\n\r\n    onHeroLevelChanged(newLevel) {\r\n        //console.log(`${NEW_HERO_LEVEL}: ${newLevel}`);\r\n        this.props.dispatch({ type: NEW_HERO_LEVEL, value: newLevel });\r\n    }\r\n\r\n    onBuildNameChanged(e) {\r\n        this.setState({ buildName: e.target.value });\r\n    }\r\n\r\n    onBuildCreatorChanged(e) {\r\n        this.setState({ buildCreator: e.target.value });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"foresite-app-container\">\r\n                <Container className=\"app-main-content py-3\" fluid=\"md\">\r\n                    {/* Top row, Inital Hero Information */}\r\n                    <Row>\r\n                        {/* Main Hero Info */}\r\n                        <Col className=\"my-auto\" md={3}>\r\n                            <span \r\n                                className={`hero-icon-big hero-icon-big-${this.props.selectedHeroName}_png mx-3`}\r\n                                height={50}\r\n                                alt=\"hero banner\" />\r\n                            <div className=\"d-flex mt-3\">\r\n                                <h5 className=\"my-auto px-3\">\r\n                                    { getLocalizedString(this.props.dotaStrings, this.props.selectedHeroName) }\r\n                                </h5>\r\n                                <ChangeHeroBtn \r\n                                    onSelectHero={this.onHeroSelected}\r\n                                    dotaStrings={this.props.dotaStrings} />\r\n                            </div>\r\n                        </Col>\r\n                        {/* Small Stats */}\r\n                        <Col md={3}>\r\n                            <Attributes \r\n                                hero={this.props.selectedHero} \r\n                                heroLevel={this.props.heroLevel}\r\n                                talents={this.props.selectedTalents}\r\n                                items={this.props.items}\r\n                                neutral={this.props.neutralItem} \r\n                                abilities={this.props.heroAbilities} \r\n                                abilityStrings={this.props.abilityStrings}\r\n                                dotaStrings={this.props.dotaStrings}/>\r\n                        </Col>\r\n                        {/* Final Attack/Defence Stats */}\r\n                        <Col md={5}>\r\n                            <Statistics \r\n                                hero={this.props.selectedHero} \r\n                                heroLevel={this.props.heroLevel}\r\n                                talents={this.props.selectedTalents}\r\n                                items={this.props.items}\r\n                                neutral={this.props.neutralItem} \r\n                                abilities={this.props.heroAbilities} \r\n                                abilityStrings={this.props.abilityStrings}\r\n                                dotaStrings={this.props.dotaStrings}  />\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    {/* Health/Mana and Hero Lvl  */}\r\n                    <Row className=\"my-2 py-2\">\r\n                        <Col md={8}>\r\n                            <HealthManaBar \r\n                                hero={this.props.selectedHero} \r\n                                heroLevel={this.props.heroLevel}\r\n                                talents={this.props.selectedTalents}\r\n                                items={this.props.items}\r\n                                neutral={this.props.neutralItem} \r\n                                abilities={this.props.heroAbilities} />\r\n                        </Col>\r\n                        <Col md={4}>\r\n                            <LevelSelector \r\n                                heroLevel={ this.props.heroLevel } \r\n                                onHeroLevelChanged={ this.onHeroLevelChanged }\r\n                                dotaStrings={this.props.dotaStrings} />\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    {/* Items/Talent */}\r\n                    <Row className=\"items-row my-4\">\r\n                        <Col md={7}>\r\n                            <ItemsBar\r\n                                items={this.props.items} \r\n                                backpack={this.props.backpack} \r\n                                neutral={this.props.neutralItem} \r\n                                onItemChanged={this.onItemSelected}\r\n                                onNeutralChanged={this.onNeutralSelected} \r\n                                dotaStrings={this.props.dotaStrings}\r\n                                abilityStrings={this.props.abilityStrings} />\r\n                        </Col>\r\n                        <Col md={5}>\r\n                            <TalentTree\r\n                                talents={this.props.heroTalents} \r\n                                selectedTalents={this.props.selectedTalents}\r\n                                onTalentSelected={this.onTalentSelected} \r\n                                onTalentUnselected={this.onTalentUnselected} \r\n                                dotaStrings={this.props.dotaStrings}\r\n                                abilityStrings={this.props.abilityStrings} />\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    {/* Abilities */}\r\n                    <Abilities \r\n                        heroName={this.props.selectedHeroName}\r\n                        abilities={this.props.heroAbilities}\r\n                        items={this.props.items}\r\n                        neutral={this.props.neutralItem} \r\n                        selectedTalents={this.props.selectedTalents} \r\n                        abilityStrings={this.props.abilityStrings}\r\n                        dotaStrings={this.props.dotaStrings} \r\n                        displayDamage={true} />\r\n\r\n                    <div className=\"pb-4\">\r\n                        <Button \r\n                            className=\"d-flex py-2\"\r\n                            onClick={() => this.setState({ openBuildShare: !this.state.openBuildShare })}>\r\n                            <h6 className=\"mx-1 mr-2 mb-0\">Share</h6>\r\n                            <FontAwesomeIcon className=\"my-auto\" icon={this.state.openBuildShare ? faChevronUp : faChevronDown} />\r\n                        </Button>\r\n                        {\r\n                            this.state.openBuildShare &&\r\n                                <Row>\r\n                                    <Col md={4}>\r\n                                        <h4>Build Name</h4>\r\n                                        {\r\n                                            this.state.buildName && this.state.loadedFromParams \r\n                                            ?\r\n                                            <Form.Control \r\n                                                className=\"m-2\"\r\n                                                type=\"text\" \r\n                                                placeholder=\"Build Name\" \r\n                                                value={this.state.buildName} \r\n                                                plaintext\r\n                                                readonly />\r\n                                            :\r\n                                            <Form.Control \r\n                                                className=\"m-2\"\r\n                                                type=\"text\" \r\n                                                placeholder=\"Build Name\" \r\n                                                onChange={this.onBuildNameChanged} />\r\n                                        }\r\n                                    </Col>\r\n                                    <Col md={4}>\r\n                                        <h4>Creator</h4>\r\n                                        {\r\n                                            this.state.buildCreator && this.state.loadedFromParams\r\n                                            ?\r\n                                            <Form.Control \r\n                                                className=\"m-2\"\r\n                                                type=\"text\" \r\n                                                placeholder=\"Creator\" \r\n                                                value={this.state.buildCreator} \r\n                                                plaintext\r\n                                                readonly />\r\n                                            :\r\n                                            <Form.Control \r\n                                                className=\"m-2\"\r\n                                                type=\"text\" \r\n                                                placeholder=\"Creator\" \r\n                                                onChange={this.onBuildCreatorChanged} />\r\n                                        }\r\n                                    </Col>\r\n                                    <Col md={4}>\r\n                                        <div className=\"d-flex my-auto h-100\">\r\n                                            <Button className=\"mr-1 my-auto\" onClick={this.onShareBuild}>\r\n                                                <FontAwesomeIcon icon={faShare} />\r\n                                            </Button>\r\n                                            <div className=\"my-auto\">Share this build!</div>\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                        }\r\n                    </div>\r\n\r\n                    {/* Padding Separator */}\r\n                    {/* <div className=\"py-5\" /> */}\r\n                    \r\n                    {/* Enemy Hero */}\r\n                    {/* <EnemyHero \r\n                        hero={this.props.selectedEnemyHero}\r\n                        heroName={this.props.selectedEnemyHeroName} \r\n                        heroAbilities={this.props.enemyHeroAbilities} \r\n                        heroItems={this.props.enemyHeroItems}\r\n                        heroTalents={this.props.enemyHeroTalents} \r\n                        selectedTalents={this.props.selectedEnemyTalents}\r\n                        neutral={this.props.enemyNeutralItem}\r\n                        abilityStrings={this.props.abilityStrings} \r\n                        dotaStrings={this.props.dotaStrings} /> */}\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    selectedHero: state.hero.selectedHero,\r\n    selectedHeroName: state.hero.selectedHeroName,\r\n    \r\n    heroAbilities: state.hero.heroAbilities,\r\n    heroTalents: state.hero.heroTalents,\r\n    heroLevel: state.hero.heroLevel,\r\n\r\n    items: state.hero.items,\r\n    backpack: state.hero.backpack,\r\n    neutralItem: state.hero.neutralItem,\r\n    selectedTalents: state.hero.selectedTalents,\r\n\r\n    abilityStrings: state.language.stringsAbilities,\r\n    dotaStrings: state.language.stringsDota,\r\n\r\n    selectedEnemyHero: state.enemy.selectedEnemyHero,\r\n    selectedEnemyHeroName: state.enemy.selectedEnemyHeroName,\r\n    enemyHeroTalents: state.enemy.enemyHeroTalents,\r\n    enemyHeroAbilities: state.enemy.enemyHeroAbilities,\r\n    selectedEnemyTalents: state.enemy.selectedEnemyTalents,\r\n    enemyHeroItems: state.enemy.enemyHeroItems,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Calculator);","import React, { Component } from 'react';\r\nimport {\r\n    Row,\r\n    Col,\r\n} from 'react-bootstrap';\r\n\r\nimport TalentTree from \"../TalentTree\";\r\nimport ItemsBar from '../ItemsBar/ItemsBar';\r\nimport Abilities from '../Abilities';\r\nimport HealthManaBar from \"../HealthManaBar\";\r\n\r\nclass EnemyHero extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            enemyHero: this.props.hero,\r\n            enemyHeroName: this.props.heroName,\r\n            heroTalents: this.props.heroTalents,\r\n            heroAbilities: this.props.heroAbilities,\r\n            selectedTalents: this.props.selectedTalents,\r\n            heroItems: this.props.heroItems,\r\n            heroNeutral: this.props.neutral,\r\n\r\n            abilityStrings: this.props.abilityStrings,\r\n            dotaStrings: this.props.dotaStrings,\r\n\r\n            heroLevel: 0,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.hero !== this.props.hero) {\r\n            this.setState({ enemyHero: this.props.hero });\r\n        }\r\n        if (prevProps.heroName !== this.props.heroName) {\r\n            this.setState({ enemyHeroName: this.props.heroName });\r\n        }\r\n        if (prevProps.heroTalents !== this.props.heroTalents) {\r\n            this.setState({ heroTalents: this.props.heroTalents });\r\n        }\r\n        if (prevProps.heroAbilities !== this.props.heroAbilities) {\r\n            this.setState({ heroAbilities: this.props.heroAbilities });\r\n        }\r\n        if (prevProps.selectedTalents !== this.props.selectedTalents) {\r\n            this.setState({ selectedTalents: this.props.selectedTalents });\r\n        }\r\n        if (prevProps.heroItems !== this.props.heroItems) {\r\n            this.setState({ heroItems: this.props.heroItems });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Row>\r\n                    <Col md={4}>\r\n                        {this.state.enemyHeroName}\r\n                    </Col>\r\n                    <Col md={8}>\r\n                        <HealthManaBar \r\n                                baseStrength ={ this.state.enemyHero?.AttributeBaseStrength }\r\n                                strengthGain={ this.state.enemyHero?.AttributeStrengthGain } \r\n                                baseIntelligence={this.state.enemyHero?.AttributeBaseIntelligence }\r\n                                intelligenceGain={ this.state.enemyHero?.AttributeIntelligenceGain }\r\n                                heroLevel={ this.state.heroLevel } \r\n                                primaryAttribute={ this.state.enemyHero?.AttributePrimary }\r\n                                bonusHealthRegen={ this.state.enemyHero?.StatusHealthRegen }\r\n                                bonusManaRegen={ this.state.enemyHero?.StatusManaRegen } />\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"\">\r\n                    {/* Talents */}\r\n                    <Col md={5}>\r\n                        <TalentTree\r\n                            talents={this.state.heroTalents} \r\n                            selectedTalents={this.state.selectedTalents}\r\n                            onTalentSelected={this.onTalentSelected} \r\n                            onTalentUnselected={this.onTalentUnselected} \r\n                            abilityStrings={this.state.abilityStrings} />\r\n                    </Col>\r\n                    {/* Abilities */}\r\n                    \r\n                    {/* Items */}\r\n                    <Col md={5}>\r\n                        <ItemsBar\r\n                            items={this.state.heroItems}  \r\n                            neutral={this.props.neutralItem}\r\n                            onItemChanged={this.onItemSelected}\r\n                            onNeutralChanged={this.onNeutralSelected} />\r\n                    </Col>\r\n                </Row>\r\n                <Abilities \r\n                        abilities={this.state.heroAbilities}\r\n                        items={this.state.heroItems}\r\n                        neutral={this.props.neutralItem} \r\n                        selectedTalents={this.props.selectedTalents} \r\n                        abilityStrings={this.props.abilityStrings}\r\n                        dotaStrings={this.state.dotaStrings} \r\n                        displayDamage={false} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EnemyHero;","import Calculator from \"./Calculator\";\r\n\r\nexport default Calculator;","import Home from \"./Home\";\r\n\r\nexport default Home;","import React, { Component } from 'react';\r\nimport {\r\n    Container,\r\n    Button\r\n} from \"react-bootstrap\";\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nclass Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            redirect: \"\",\r\n        };\r\n\r\n        this.onGoToCalc = this.onGoToCalc.bind(this);\r\n    }\r\n\r\n    onGoToCalc() {\r\n        this.setState({ redirect: \"/app\" });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Container>\r\n                    <div style={{ height: \"300px\" }}>\r\n                        <h1 \r\n                            className=\"text-center my-5 pt-3\">\r\n                                foresight\r\n                        </h1>\r\n                        <div className=\"text-center\">\r\n                            <h6 className=\"py-2\">work in progress</h6>\r\n                            <Button\r\n                                className=\"mx-auto\"\r\n                                onClick={this.onGoToCalc}>\r\n                                to app\r\n                            </Button>\r\n                        </div>\r\n                        \r\n                    </div>\r\n                </Container>\r\n                {\r\n                    this.state.redirect && <Redirect to={this.state.redirect} />\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import App from \"./App\";\r\n\r\nexport default App;","import React, { Component } from 'react';\nimport { \n    HashRouter,\n    Route,\n    Switch\n} from 'react-router-dom';\n\nimport Navigation from \"../Navigation\";\nimport FourOhFour from \"../FourOhFour\";\nimport Calculator from \"../Calculator\";\nimport Home from \"../Home\";\n\nclass App extends Component {\n    render() {\n        return (\n            <HashRouter>\n                <Navigation />\n\n                <Switch>\n                    <Route exact path=\"/\" component={Home} />\n\n                    <Route exact path=\"/app\" component={Calculator} />\n\n                    <Route component={FourOhFour} />\n                </Switch>\n            </HashRouter>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./store\";\n\nimport App from './components/App/';\n\n// Import Bootstrap component styles\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst app = (\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>\n);\n\nReactDOM.render(app, document.getElementById('root') );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}